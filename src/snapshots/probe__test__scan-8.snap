---
source: src/main.rs
expression: scanned
---
[
    Token {
        kind: If,
        lexeme: "if",
        line: 2,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 2,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "T=",
        line: 2,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 2,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 2,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 2,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "Message",
        line: 3,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "'\\a\\n >>> testC not active: skipping opcode tests <<<\\n\\a'",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 4,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 6,
    },
    Token {
        kind: String,
        lexeme: "\"testing code generation and optimizations\"",
        line: 6,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 10,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 11,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 12,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 12,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "w",
        line: 12,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 12,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 12,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 12,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 13,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 14,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 17,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 17,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 17,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 18,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "listcode",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 19,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 19,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 21,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 21,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 21,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: String,
        lexeme: "'- '",
        line: 21,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 21,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 21,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 21,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 21,
    },
    Token {
        kind: String,
        lexeme: "' *%d'",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 23,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 23,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 23,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 23,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 23,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 23,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 23,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 24,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "checkequal",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 28,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "listcode",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 29,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 29,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "listcode",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 30,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 31,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 31,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 31,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 31,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 31,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 31,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: String,
        lexeme: "'%b()'",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 32,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 32,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 32,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 32,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 32,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 32,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: String,
        lexeme: "'%b()'",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 33,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 33,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 33,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 33,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 33,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 34,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 40,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "'CLOSURE'",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "'NEWTABLE'",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "'GETGLOBAL'",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "'CALL'",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "'SETLIST'",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "'CALL'",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 46,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 47,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 47,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 47,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 48,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 48,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 48,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 48,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 49,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 49,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 53,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 57,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 57,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 57,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 57,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 57,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 57,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 57,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 57,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 57,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 57,
    },
    Token {
        kind: String,
        lexeme: "'LOADK'",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: String,
        lexeme: "'JMP'",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 60,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 60,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 60,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 60,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 60,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: String,
        lexeme: "'LOADK'",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: String,
        lexeme: "'JMP'",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Repeat,
        lexeme: "repeat",
        line: 63,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 63,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 63,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 63,
    },
    Token {
        kind: Until,
        lexeme: "until",
        line: 63,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 63,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: String,
        lexeme: "'LOADK'",
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 64,
    },
    Token {
        kind: String,
        lexeme: "'JMP'",
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 64,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: Repeat,
        lexeme: "repeat",
        line: 66,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 66,
    },
    Token {
        kind: Until,
        lexeme: "until",
        line: 66,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 66,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: String,
        lexeme: "'LOADNIL'",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "'JMP'",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Repeat,
        lexeme: "repeat",
        line: 69,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 69,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 69,
    },
    Token {
        kind: Until,
        lexeme: "until",
        line: 69,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 69,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "'LOADK'",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 74,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 74,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 74,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 74,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "'CONCAT'",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 78,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 78,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 78,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 78,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "'LOADBOOL'",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 79,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 79,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 79,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 79,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "'LOADBOOL'",
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 80,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 80,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 80,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 80,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "'LOADBOOL'",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 81,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 81,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 81,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "'LOADBOOL'",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 84,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 84,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 86,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 87,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 87,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 87,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 87,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 87,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 87,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 87,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 87,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 87,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: "20.5",
        line: 87,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 87,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 87,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 87,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 87,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "'MUL'",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "'DIV'",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'ADD'",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'GETTABLE'",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'SUB'",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'GETTABLE'",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'POW'",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'UNM'",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: String,
        lexeme: "'SETTABLE'",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: String,
        lexeme: "'SETTABLE'",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 97,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 97,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 98,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 98,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 99,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 99,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 99,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 99,
    },
    Token {
        kind: String,
        lexeme: "'y'",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 100,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 100,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 101,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 101,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 102,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 102,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 103,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 103,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 103,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 103,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 103,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 103,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 104,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 104,
    },
    Token {
        kind: String,
        lexeme: "'SETTABLE'",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "'SETTABLE'",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "'SETTABLE'",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "'SUB'",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "'DIV'",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "'LOADK'",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "'SETTABLE'",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 108,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 108,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 108,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 108,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 108,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: Percent,
        lexeme: "%",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 108,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 108,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 108,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: String,
        lexeme: "'LOADK'",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: DoubleEquals,
        lexeme: " =",
        line: 111,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 111,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 114,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 114,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 115,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 115,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 115,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 115,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 115,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 116,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 116,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 116,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 117,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 118,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 118,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 119,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 119,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "'SETTABLE'",
        line: 120,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 121,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 121,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 121,
    },
    Token {
        kind: String,
        lexeme: "'SETTABLE'",
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 121,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 122,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 122,
    },
    Token {
        kind: String,
        lexeme: "'MOVE'",
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 122,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "checkequal",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 128,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 128,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 128,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 128,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 128,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 128,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 128,
    },
    Token {
        kind: NotEquals,
        lexeme: "a~",
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 128,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 128,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 128,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 128,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 128,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 128,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 128,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 129,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 129,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 129,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 129,
    },
    Token {
        kind: NotEquals,
        lexeme: "a~",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 129,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 129,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 129,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 131,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "a=",
        line: 131,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 131,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 131,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 131,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 131,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 131,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 131,
    },
    Token {
        kind: String,
        lexeme: "'GETGLOBAL'",
        line: 132,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 132,
    },
    Token {
        kind: String,
        lexeme: "'EQ'",
        line: 132,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 132,
    },
    Token {
        kind: String,
        lexeme: "'JMP'",
        line: 132,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 132,
    },
    Token {
        kind: String,
        lexeme: "'LOADK'",
        line: 132,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 132,
    },
    Token {
        kind: String,
        lexeme: "'SETGLOBAL'",
        line: 132,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 132,
    },
    Token {
        kind: String,
        lexeme: "'RETURN'",
        line: 132,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "checkequal",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 135,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 135,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 135,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 135,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 135,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 135,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 135,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 136,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 136,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 136,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 136,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 136,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 136,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 136,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "checkequal",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 138,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 138,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 138,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: " <",
        line: 138,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 138,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 138,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: " <",
        line: 138,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 138,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 138,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 139,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 139,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 139,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 139,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: " >",
        line: 139,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 139,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 139,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: " <",
        line: 139,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 142,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 142,
    },
]
