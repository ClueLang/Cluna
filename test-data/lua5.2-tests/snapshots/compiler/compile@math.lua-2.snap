---
source: src/main.rs
expression: compiled
input_file: test-data/lua5.2-tests/math.lua
---
print("testing numbers and math lib");
assert(0e12 == 0 && 0.0 == 0 && 0.0 == 0 && 0.2e2 == 20 && 2.0e-1 == 0.2);
{
    local a, b, c = "2", " 3e0 ", " 10  "
    assert(a + b == 5 && -b == -3 && b + "2" == 5 && "10" - c == 0);
    assert(type(a) == 'string' && type(b) == 'string' && type(c) == 'string');
    assert(a == "2" && b == " 3e0 " && c == " 10  " && -c == -"  10 ");
    assert(c % a == 0 && a ^ b == 08);
    a = 0
    assert(a == -a && 0 == -0);
}
{
    local x = -1
    local mz = 0 / x
    t = {
        0 = 10, 
        20, 
        30, 
        40, 
        50
    }
    assert(t[(mz)] == t[(0)] && t[(-0)] == t[(0)]);
}
{
    local a, b = math.modf(3.5)
    assert(a == 3 && b == 0.5);
    assert(math.huge > 10e30);
    assert(-math.huge < -10e30);
}
global fn f(...) {
    if select('#', ...) == 1 {
        return (...)
    } else {
        return "***"
    }
}
assert("2" + 1 == 3);
assert("2 " + 1 == 3);
assert(" -2 " + 1 == -1);
assert(" -0xa " + 1 == -9);
assert(tonumber({}) == nil);
assert(tonumber('+0.01') == 1 / 100 && tonumber('+.01') == 0.01 && tonumber('.01') == 0.01 && tonumber('-1.') == -1 && tonumber('+1.') == 1);
assert(tonumber('+ 0.01') == nil && tonumber('+.e1') == nil && tonumber('1e') == nil && tonumber('1.0e+') == nil && tonumber('.') == nil);
assert(tonumber('-012') == -010 - 2);
assert(tonumber('-1.2e2') == - - -120);
assert(tonumber("0xffffffffffff") == 2 ^ (4 * 12) - 1);
assert(tonumber("0x" .. string.rep("f", 150)) == 2 ^ (4 * 150) - 1);
assert(tonumber('0x3.' .. string.rep('0', 100)) == 3);
assert(tonumber('0x0.' .. string.rep('0', 150) .. "1") == 2 ^ (-4 * 151));
assert(tonumber('  001010  ', 2) == 10);
assert(tonumber('  001010  ', 10) == 001010);
assert(tonumber('  -1010  ', 2) == -10);
assert(tonumber('10', 36) == 36);
assert(tonumber('  -10  ', 36) == -36);
assert(tonumber('  +1Z  ', 36) == 36 + 35);
assert(tonumber('  -1z  ', 36) == -36 + -35);
assert(tonumber('-fFfa', 16) == -(10 + (16 * (15 + (16 * (15 + (16 * 15)))))));
assert(tonumber(string.rep('1', 42), 2) + 1 == 2 ^ 42);
assert(tonumber(string.rep('1', 34), 2) + 1 == 2 ^ 34);
assert(tonumber('ffffFFFF', 16) + 1 == 2 ^ 32);
assert(tonumber('0ffffFFFF', 16) + 1 == 2 ^ 32);
assert(tonumber('-0ffffffFFFF', 16) - 1 == -2 ^ 40);
for i = 2, 36 {
    assert(tonumber('\t10000000000\t', i) == i ^ 10);
}
assert(f(tonumber('fFfa', 15)) == nil);
assert(f(tonumber('099', 8)) == nil);
assert(f(tonumber('1\0', 2)) == nil);
assert(f(tonumber('', 8)) == nil);
assert(f(tonumber('  ', 9)) == nil);
assert(f(tonumber('  ', 9)) == nil);
assert(f(tonumber('0xf', 10)) == nil);
assert(f(tonumber('inf')) == nil);
assert(f(tonumber(' INF ')) == nil);
assert(f(tonumber('Nan')) == nil);
assert(f(tonumber('nan')) == nil);
assert(f(tonumber('  ')) == nil);
assert(f(tonumber('')) == nil);
assert(f(tonumber('1  a')) == nil);
assert(f(tonumber('1\0')) == nil);
assert(f(tonumber('1 \0')) == nil);
assert(f(tonumber('1\0 ')) == nil);
assert(f(tonumber('e1')) == nil);
assert(f(tonumber('e  1')) == nil);
assert(f(tonumber(' 3.4.5 ')) == nil);
assert(tonumber('0x') == nil);
assert(tonumber('x') == nil);
assert(tonumber('x3') == nil);
assert(tonumber('00x2') == nil);
assert(tonumber('0x 2') == nil);
assert(tonumber('0 x2') == nil);
assert(tonumber('23x') == nil);
assert(tonumber('- 0xaa') == nil);
assert(0x10 == 16 && 0xfff == 2 ^ 12 - 1 && 0XFB == 251);
assert(0 == 0 && 0 == 0);
assert(0xFFFFFFFF == 2 ^ 32 - 1);
assert(tonumber('+0x2') == 2);
assert(tonumber('-0xaA') == -170);
assert(tonumber('-0xffFFFfff') == -2 ^ 32 + 1);
assert(0e+1 == 0 && 0xE + 1 == 15 && 0xe - 1 == 13);
assert(tonumber('  0x2.5  ') == 0x25 / 16);
assert(tonumber('  -0x2.5  ') == -0x25 / 16);
assert(tonumber('  +0x0.51p+8  ') == 0x51);
assert(tonumber('0x0.51p') == nil);
assert(tonumber('0x5p+-2') == nil);
assert(0.9999999997671694 == 1 - '0x.00000001');
assert('0xA.a' + 0 == 10 + 10 / 16);
assert(170 == 0XAA);
assert(1 == 1);
assert(1.0625 == '0x1.' + '+0x.1');
assert(1.1 == 1.0 + 0.1);
assert(100.0 == 1e2 && 0.01 == 1e-2);
assert(1111111111111111 - 1111111111111110 == 1000.00e-03);
assert(1.1 == '1.' + '.1');
assert('1111111111111111' - '1111111111111110' == tonumber("  +0.001e+3 \n\t"));
global fn eq(a, b, limit) {
    if !limit {
        limit = 10e-10
    }
    return math.abs(a - b) <= limit
}
assert(0.1e-30 > 0.9e-31 && 0.9e30 < 0.1e31);
assert(0.123456 > 0.123455);
assert(tonumber('+1.23E18') == 1.23 * 10 ^ 18);
assert(!(1 < 1) && (1 < 2) && !(2 < 1));
assert(!('a' < 'a') && ('a' < 'b') && !('b' < 'a'));
assert((1 <= 1) && (1 <= 2) && !(2 <= 1));
assert(('a' <= 'a') && ('a' <= 'b') && !('b' <= 'a'));
assert(!(1 > 1) && !(1 > 2) && (2 > 1));
assert(!('a' > 'a') && !('a' > 'b') && ('b' > 'a'));
assert((1 >= 1) && !(1 >= 2) && (2 >= 1));
assert(('a' >= 'a') && !('a' >= 'b') && ('b' >= 'a'));
assert(-4 % 3 == 2);
assert(4 % -3 == -2);
assert(math.pi - math.pi % 1 == 3);
assert(math.pi - math.pi % 0.001 == 3.141);
local fn testbit(a, n) {
    return a / 2 ^ n % 2 >= 1
}
assert(eq(math.sin(-9.8) ^ 2 + math.cos(-9.8) ^ 2, 1));
assert(eq(math.tan(math.pi / 4), 1));
assert(eq(math.sin(math.pi / 2), 1) && eq(math.cos(math.pi / 2), 0));
assert(eq(math.atan(1), math.pi / 4) && eq(math.acos(0), math.pi / 2) && eq(math.asin(1), math.pi / 2));
assert(eq(math.deg(math.pi / 2), 90) && eq(math.rad(90), math.pi / 2));
assert(math.abs(-10) == 10);
assert(eq(math.atan2(1, 0), math.pi / 2));
assert(math.ceil(4.5) == 5.0);
assert(math.floor(4.5) == 4.0);
assert(math.fmod(10, 3) == 1);
assert(eq(math.sqrt(10) ^ 2, 10));
assert(eq(math.log(2, 10), math.log(2) / math.log(10)));
assert(eq(math.log(2, 2), 1));
assert(eq(math.log(9, 3), 2));
assert(eq(math.exp(0), 1));
assert(eq(math.sin(10), math.sin(10 % (2 * math.pi))));
local v, e = math.frexp(math.pi)
assert(eq(math.ldexp(v, e), math.pi));
assert(eq(math.tanh(3.5), math.sinh(3.5) / math.cosh(3.5)));
assert(tonumber(' 1.3e-2 ') == 1.3e-2);
assert(tonumber(' -1.00000000000001 ') == -1.00000000000001);
assert(8388609 + -8388609 == 0);
assert(8388608 + -8388608 == 0);
assert(8388607 + -8388607 == 0);
local a, b = '10', '20'
assert(a * b == 200 && a + b == 30 && a - b == -10 && a / b == 0.5 && -b == -20);
assert(a == '10' && b == '20');
if !_port {
    print("testing -0 and NaN");
    local mz, z = -0, 0
    assert(mz == z);
    assert(1 / mz < 0 && 0 < 1 / z);
    local a = {
        mz = 1
    }
    assert(a[(z)] == 1 && a[(mz)] == 1);
    local inf = math.huge * 2 + 1
    mz, z = -1 / inf, 1 / inf
    assert(mz == z);
    assert(1 / mz < 0 && 0 < 1 / z);
    local NaN = inf - inf
    assert(NaN != NaN);
    assert(!(NaN < NaN));
    assert(!(NaN <= NaN));
    assert(!(NaN > NaN));
    assert(!(NaN >= NaN));
    assert(!(0 < NaN) && !(NaN < 0));
    local NaN1 = 0 / 0
    assert(NaN != NaN1 && !(NaN <= NaN1) && !(NaN1 <= NaN));
    local a = {}
    assert(!pcall(fn () {
        a[(NaN)] = 1
    }));
    assert(a[(NaN)] == nil);
    a[(1)] = 1
    assert(!pcall(fn () {
        a[(NaN)] = 1
    }));
    assert(a[(NaN)] == nil);
    local a1, a2, a3, a4, a5 = 0, 0, "\0\0\0\0\0\0\0\0", 0, "\0\0\0\0\0\0\0\0"
    assert(a1 == a2 && a2 == a4 && a1 != a3);
    assert(a3 == a5);
}
if !_port {
    print("testing 'math.random'");
    math.randomseed(0);
    local fn aux(x1, x2, p) {
        local Max = -math.huge
        local Min = math.huge
        for i = 0, 20000 {
            local t = math.random(table.unpack(p))
            Max = math.max(Max, t)
            Min = math.min(Min, t)
            if eq(Max, x2, 0.001) && eq(Min, x1, 0.001) {
                
            }
        }
        assert(false);
        assert(x1 <= Min && Max <= x2);
    }
    aux(0, 1, {});
    aux(-10, 0, {
        -10, 
        0
    });
}
for i = 1, 10 {
    local t = math.random(5)
    assert(1 <= t && t <= 5);
}
print('OK');
