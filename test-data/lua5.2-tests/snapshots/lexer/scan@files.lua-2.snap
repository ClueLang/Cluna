---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/files.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 1,
        column: 7,
        span: 6..7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 1,
        column: 15,
        span: 8..15,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 1,
        column: 23,
        span: 16..23,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 3,
        column: 7,
        span: 25..31,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 3,
        column: 8,
        span: 31..32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 3,
        column: 12,
        span: 32..36,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 3,
        column: 13,
        span: 36..37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 3,
        column: 15,
        span: 37..39,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 3,
        column: 16,
        span: 39..40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getenv",
        ),
        line: 3,
        column: 22,
        span: 40..46,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"PATH\"",
        ),
        line: 3,
        column: 28,
        span: 46..52,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 3,
        column: 29,
        span: 52..53,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 3,
        column: 32,
        span: 54..56,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 3,
        column: 41,
        span: 57..65,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 3,
        column: 42,
        span: 65..66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 5,
        column: 7,
        span: 68..74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 8,
        span: 74..75,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 5,
        column: 10,
        span: 75..77,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 5,
        column: 11,
        span: 77..78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 5,
        column: 16,
        span: 78..83,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 17,
        span: 83..84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 5,
        column: 19,
        span: 84..86,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 5,
        column: 20,
        span: 86..87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 5,
        column: 25,
        span: 87..92,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 26,
        span: 92..93,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
        column: 29,
        span: 94..96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 5,
        column: 32,
        span: 97..99,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 5,
        column: 33,
        span: 99..100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 5,
        column: 38,
        span: 100..105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 39,
        span: 105..106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 6,
        column: 7,
        span: 107..113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 8,
        span: 113..114,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 6,
        column: 11,
        span: 114..117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 6,
        column: 17,
        span: 118..123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 18,
        span: 123..124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 6,
        column: 20,
        span: 124..126,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 6,
        column: 21,
        span: 126..127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 6,
        column: 26,
        span: 127..132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 27,
        span: 132..133,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"non-existent-file\"",
        ),
        line: 6,
        column: 47,
        span: 134..153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 48,
        span: 153..154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 49,
        span: 154..155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 7,
        column: 7,
        span: 156..162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 8,
        span: 162..163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 7,
        column: 10,
        span: 163..165,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 7,
        column: 11,
        span: 165..166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 7,
        column: 17,
        span: 166..172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 18,
        span: 172..173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 7,
        column: 20,
        span: 173..175,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 7,
        column: 21,
        span: 175..176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 7,
        column: 27,
        span: 176..182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 28,
        span: 182..183,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 7,
        column: 31,
        span: 184..186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 7,
        column: 34,
        span: 187..189,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 7,
        column: 35,
        span: 189..190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 7,
        column: 41,
        span: 190..196,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 42,
        span: 196..197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 230..236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 236..237,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 10,
        column: 11,
        span: 237..240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 10,
        column: 14,
        span: 241..243,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 15,
        span: 243..244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 10,
        column: 20,
        span: 244..249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 21,
        span: 249..250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 10,
        column: 23,
        span: 250..252,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 24,
        span: 252..253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 10,
        column: 29,
        span: 253..258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 30,
        span: 258..259,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 10,
        column: 0,
        span: 260..263,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 11,
        column: 11,
        span: 271..274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 11,
        column: 14,
        span: 275..277,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 11,
        column: 15,
        span: 277..278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 11,
        column: 21,
        span: 278..284,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 11,
        column: 22,
        span: 284..285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 11,
        column: 27,
        span: 285..290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 28,
        span: 290..291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 29,
        span: 291..292,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 11,
        column: 0,
        span: 293..296,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 12,
        column: 11,
        span: 304..307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 12,
        column: 14,
        span: 308..310,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 12,
        column: 15,
        span: 310..311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        line: 12,
        column: 21,
        span: 311..317,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 12,
        column: 22,
        span: 317..318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 12,
        column: 27,
        span: 318..323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 28,
        span: 323..324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 29,
        span: 324..325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 30,
        span: 325..326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
        column: 7,
        span: 329..335,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 8,
        span: 335..336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 15,
        column: 12,
        span: 336..340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 13,
        span: 340..341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 15,
        column: 15,
        span: 341..343,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 16,
        span: 343..344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 15,
        column: 21,
        span: 344..349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 22,
        span: 349..350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 23,
        span: 350..351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 24,
        span: 351..352,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 27,
        span: 353..355,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        line: 15,
        column: 38,
        span: 356..366,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
        column: 42,
        span: 367..370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 15,
        column: 45,
        span: 371..373,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 46,
        span: 373..374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 15,
        column: 50,
        span: 374..378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 51,
        span: 378..379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 15,
        column: 53,
        span: 379..381,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 54,
        span: 381..382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 15,
        column: 60,
        span: 382..388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 61,
        span: 388..389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 62,
        span: 389..390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 63,
        span: 390..391,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 66,
        span: 392..394,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        line: 15,
        column: 73,
        span: 395..401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 74,
        span: 401..402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 7,
        span: 403..409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 409..410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 16,
        column: 12,
        span: 410..414,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 13,
        span: 414..415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 16,
        column: 15,
        span: 415..417,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 16,
        span: 417..418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 16,
        column: 21,
        span: 418..423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 22,
        span: 423..424,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 25,
        span: 425..427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        line: 16,
        column: 36,
        span: 428..438,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 16,
        column: 40,
        span: 439..442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 16,
        column: 43,
        span: 443..445,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 44,
        span: 445..446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 16,
        column: 48,
        span: 446..450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 49,
        span: 450..451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 16,
        column: 51,
        span: 451..453,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 52,
        span: 453..454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stderr",
        ),
        line: 16,
        column: 58,
        span: 454..460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 59,
        span: 460..461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 62,
        span: 462..464,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        line: 16,
        column: 69,
        span: 465..471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 70,
        span: 471..472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 17,
        column: 7,
        span: 473..479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 8,
        span: 479..480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 17,
        column: 10,
        span: 480..482,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 17,
        column: 11,
        span: 482..483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 17,
        column: 15,
        span: 483..487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 16,
        span: 487..488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 17,
        span: 487..489,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 18,
        span: 489..490,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 17,
        column: 21,
        span: 491..493,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 17,
        column: 25,
        span: 494..497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 26,
        span: 497..498,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 6,
        span: 499..504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 18,
        column: 8,
        span: 505..506,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 10,
        span: 507..508,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 18,
        column: 12,
        span: 509..510,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 18,
        column: 13,
        span: 510..511,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 18,
        column: 14,
        span: 511..512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 18,
        column: 27,
        span: 513..525,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 28,
        span: 525..526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 18,
        column: 29,
        span: 526..527,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 18,
        column: 30,
        span: 527..528,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 18,
        column: 32,
        span: 529..530,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 18,
        column: 33,
        span: 530..531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 34,
        span: 531..532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 19,
        column: 7,
        span: 533..539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 8,
        span: 539..540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 19,
        column: 10,
        span: 540..542,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 19,
        column: 11,
        span: 542..543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 19,
        column: 15,
        span: 543..547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 16,
        span: 547..548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
        column: 17,
        span: 548..549,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 18,
        span: 549..550,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 19,
        column: 21,
        span: 551..553,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 19,
        column: 25,
        span: 554..557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 26,
        span: 557..558,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
        column: 6,
        span: 560..565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 21,
        column: 8,
        span: 566..567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 9,
        span: 567..568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 21,
        column: 10,
        span: 568..569,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 11,
        span: 569..570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 21,
        column: 12,
        span: 570..571,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 14,
        span: 572..573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 21,
        column: 17,
        span: 574..576,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 21,
        column: 18,
        span: 576..577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 21,
        column: 22,
        span: 577..581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 23,
        span: 581..582,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu_nao_existe'",
        ),
        line: 21,
        column: 40,
        span: 582..599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 41,
        span: 599..600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 7,
        span: 601..607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 8,
        span: 607..608,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 22,
        column: 11,
        span: 608..611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 22,
        column: 13,
        span: 612..613,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 22,
        column: 17,
        span: 614..617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 22,
        column: 22,
        span: 618..622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 23,
        span: 622..623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 22,
        column: 24,
        span: 623..624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 25,
        span: 624..625,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 28,
        span: 626..628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 22,
        column: 37,
        span: 629..637,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 22,
        column: 41,
        span: 638..641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 22,
        column: 46,
        span: 642..646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 47,
        span: 646..647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 22,
        column: 48,
        span: 647..648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 49,
        span: 648..649,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 52,
        span: 650..652,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 22,
        column: 61,
        span: 653..661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 62,
        span: 661..662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 24,
        column: 2,
        span: 664..665,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 3,
        span: 665..666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 24,
        column: 4,
        span: 666..667,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 5,
        span: 667..668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 24,
        column: 6,
        span: 668..669,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 8,
        span: 670..671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 24,
        column: 11,
        span: 672..674,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 24,
        column: 12,
        span: 674..675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 24,
        column: 16,
        span: 675..679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 17,
        span: 679..680,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'/a/b/c/d'",
        ),
        line: 24,
        column: 27,
        span: 680..690,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 28,
        span: 690..691,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        line: 24,
        column: 32,
        span: 692..695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 33,
        span: 695..696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 697..703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 703..704,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 25,
        column: 11,
        span: 704..707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 25,
        column: 13,
        span: 708..709,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 25,
        column: 17,
        span: 710..713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 25,
        column: 22,
        span: 714..718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 23,
        span: 718..719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 25,
        column: 24,
        span: 719..720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 25,
        span: 720..721,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 28,
        span: 722..724,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 25,
        column: 37,
        span: 725..733,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 25,
        column: 41,
        span: 734..737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 25,
        column: 46,
        span: 738..742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 47,
        span: 742..743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 25,
        column: 48,
        span: 743..744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 49,
        span: 744..745,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 52,
        span: 746..748,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 25,
        column: 61,
        span: 749..757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 62,
        span: 757..758,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
        column: 6,
        span: 760..765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 27,
        column: 11,
        span: 766..770,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 13,
        span: 771..772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 27,
        column: 16,
        span: 773..775,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 17,
        span: 775..776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 27,
        column: 24,
        span: 776..783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 25,
        span: 783..784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 26,
        span: 784..785,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
        column: 6,
        span: 786..791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 28,
        column: 8,
        span: 792..793,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 9,
        span: 793..794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 28,
        column: 13,
        span: 795..798,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 15,
        span: 799..800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 28,
        column: 18,
        span: 801..803,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 19,
        span: 803..804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 28,
        column: 23,
        span: 804..808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 24,
        span: 808..809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 28,
        column: 28,
        span: 809..813,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 29,
        span: 813..814,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 28,
        column: 33,
        span: 815..818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 34,
        span: 818..819,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 29,
        column: 3,
        span: 820..822,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 29,
        column: 7,
        span: 823..826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 29,
        column: 9,
        span: 827..828,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 29,
        column: 0,
        span: 829..833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 4,
        span: 836..837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 30,
        column: 11,
        span: 837..844,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 30,
        column: 14,
        span: 845..847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 30,
        column: 20,
        span: 848..853,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 21,
        span: 853..854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 22,
        span: 854..855,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'os.tmpname' file cannot be open; skipping file tests\"",
        ),
        line: 30,
        column: 77,
        span: 855..910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 78,
        span: 910..911,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 32,
        column: 5,
        span: 913..917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 33,
        column: 2,
        span: 953..954,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 33,
        column: 3,
        span: 954..955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 33,
        column: 8,
        span: 955..960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 9,
        span: 960..961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 10,
        span: 961..962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 35,
        column: 6,
        span: 964..969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 7,
        span: 969..970,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing i/o'",
        ),
        line: 35,
        column: 20,
        span: 970..983,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 21,
        span: 983..984,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 6,
        span: 986..991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 37,
        column: 16,
        span: 992..1001,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 18,
        span: 1002..1003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 37,
        column: 21,
        span: 1004..1006,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 22,
        span: 1006..1007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 37,
        column: 29,
        span: 1007..1014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 30,
        span: 1014..1015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 31,
        span: 1015..1016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 1018..1024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 1024..1025,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 39,
        column: 11,
        span: 1025..1028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 39,
        column: 17,
        span: 1029..1034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 18,
        span: 1034..1035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 39,
        column: 20,
        span: 1035..1037,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 21,
        span: 1037..1038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 39,
        column: 25,
        span: 1038..1042,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 26,
        span: 1042..1043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 39,
        column: 31,
        span: 1044..1048,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 32,
        span: 1048..1049,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rw\"",
        ),
        line: 39,
        column: 37,
        span: 1050..1054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 38,
        span: 1054..1055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 39,
        span: 1055..1056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 1077..1083,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 1083..1084,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 40,
        column: 11,
        span: 1084..1087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 40,
        column: 17,
        span: 1088..1093,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 18,
        span: 1093..1094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 40,
        column: 20,
        span: 1094..1096,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 21,
        span: 1096..1097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 40,
        column: 25,
        span: 1097..1101,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 26,
        span: 1101..1102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 40,
        column: 31,
        span: 1103..1107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 32,
        span: 1107..1108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rb+\"",
        ),
        line: 40,
        column: 38,
        span: 1109..1114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 39,
        span: 1114..1115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 40,
        span: 1115..1116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 1136..1142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 1142..1143,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 41,
        column: 11,
        span: 1143..1146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 41,
        column: 17,
        span: 1147..1152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 18,
        span: 1152..1153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 41,
        column: 20,
        span: 1153..1155,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 21,
        span: 1155..1156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 41,
        column: 25,
        span: 1156..1160,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 26,
        span: 1160..1161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 41,
        column: 31,
        span: 1162..1166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 32,
        span: 1166..1167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r+bk\"",
        ),
        line: 41,
        column: 39,
        span: 1168..1174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 40,
        span: 1174..1175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 41,
        span: 1175..1176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 7,
        span: 1195..1201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 8,
        span: 1201..1202,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 42,
        column: 11,
        span: 1202..1205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 42,
        column: 17,
        span: 1206..1211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 18,
        span: 1211..1212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 42,
        column: 20,
        span: 1212..1214,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 21,
        span: 1214..1215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 42,
        column: 25,
        span: 1215..1219,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 26,
        span: 1219..1220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 42,
        column: 31,
        span: 1221..1225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 32,
        span: 1225..1226,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 42,
        column: 35,
        span: 1227..1229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 36,
        span: 1229..1230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 37,
        span: 1230..1231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
        column: 7,
        span: 1254..1260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 8,
        span: 1260..1261,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 43,
        column: 11,
        span: 1261..1264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 43,
        column: 17,
        span: 1265..1270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 18,
        span: 1270..1271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 43,
        column: 20,
        span: 1271..1273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 21,
        span: 1273..1274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 43,
        column: 25,
        span: 1274..1278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 26,
        span: 1278..1279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 43,
        column: 31,
        span: 1280..1284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 32,
        span: 1284..1285,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 43,
        column: 36,
        span: 1286..1289,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 37,
        span: 1289..1290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 38,
        span: 1290..1291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 7,
        span: 1313..1319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 8,
        span: 1319..1320,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 44,
        column: 11,
        span: 1320..1323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 44,
        column: 17,
        span: 1324..1329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 18,
        span: 1329..1330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 44,
        column: 20,
        span: 1330..1332,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 21,
        span: 1332..1333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 44,
        column: 25,
        span: 1333..1337,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 26,
        span: 1337..1338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 44,
        column: 31,
        span: 1339..1343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 32,
        span: 1343..1344,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 44,
        column: 36,
        span: 1345..1348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 37,
        span: 1348..1349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 38,
        span: 1349..1350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 7,
        span: 1372..1378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 8,
        span: 1378..1379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 45,
        column: 10,
        span: 1379..1381,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 11,
        span: 1381..1382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 45,
        column: 15,
        span: 1382..1386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 16,
        span: 1386..1387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 45,
        column: 20,
        span: 1387..1391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 21,
        span: 1391..1392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r+b\"",
        ),
        line: 45,
        column: 27,
        span: 1393..1398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 28,
        span: 1398..1399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 29,
        span: 1399..1400,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 45,
        column: 30,
        span: 1400..1401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 45,
        column: 35,
        span: 1401..1406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 36,
        span: 1406..1407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 37,
        span: 1407..1408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 7,
        span: 1409..1415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 8,
        span: 1415..1416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 46,
        column: 10,
        span: 1416..1418,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 11,
        span: 1418..1419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 46,
        column: 15,
        span: 1419..1423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 16,
        span: 1423..1424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 46,
        column: 20,
        span: 1424..1428,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 21,
        span: 1428..1429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r+\"",
        ),
        line: 46,
        column: 26,
        span: 1430..1434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 27,
        span: 1434..1435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 28,
        span: 1435..1436,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 46,
        column: 29,
        span: 1436..1437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 46,
        column: 34,
        span: 1437..1442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 35,
        span: 1442..1443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 36,
        span: 1443..1444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 7,
        span: 1445..1451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 8,
        span: 1451..1452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 47,
        column: 10,
        span: 1452..1454,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 11,
        span: 1454..1455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 47,
        column: 15,
        span: 1455..1459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 16,
        span: 1459..1460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 47,
        column: 20,
        span: 1460..1464,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 21,
        span: 1464..1465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rb\"",
        ),
        line: 47,
        column: 26,
        span: 1466..1470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 27,
        span: 1470..1471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 28,
        span: 1471..1472,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 47,
        column: 29,
        span: 1472..1473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 47,
        column: 34,
        span: 1473..1478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 35,
        span: 1478..1479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 36,
        span: 1479..1480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 1482..1488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 1488..1489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 49,
        column: 10,
        span: 1489..1491,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 49,
        column: 11,
        span: 1491..1492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 49,
        column: 20,
        span: 1492..1501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 21,
        span: 1501..1502,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'C'",
        ),
        line: 49,
        column: 24,
        span: 1502..1505,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 25,
        span: 1505..1506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'all'",
        ),
        line: 49,
        column: 31,
        span: 1507..1512,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 32,
        span: 1512..1513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 33,
        span: 1513..1514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 51,
        column: 3,
        span: 1516..1518,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 4,
        span: 1518..1519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 51,
        column: 9,
        span: 1519..1524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 10,
        span: 1524..1525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 51,
        column: 12,
        span: 1525..1527,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 13,
        span: 1527..1528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 51,
        column: 18,
        span: 1528..1533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 19,
        span: 1533..1534,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 51,
        column: 20,
        span: 1534..1535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 51,
        column: 23,
        span: 1536..1538,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 24,
        span: 1538..1539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 51,
        column: 30,
        span: 1539..1545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 31,
        span: 1545..1546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 51,
        column: 33,
        span: 1546..1548,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 34,
        span: 1548..1549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 51,
        column: 40,
        span: 1549..1555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 41,
        span: 1555..1556,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 51,
        column: 42,
        span: 1556..1557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 53,
        column: 3,
        span: 1559..1561,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 4,
        span: 1561..1562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 53,
        column: 10,
        span: 1562..1568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 11,
        span: 1568..1569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 53,
        column: 15,
        span: 1569..1573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 16,
        span: 1573..1574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
        column: 7,
        span: 1575..1581,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 8,
        span: 1581..1582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 54,
        column: 16,
        span: 1582..1590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 17,
        span: 1590..1591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 54,
        column: 21,
        span: 1591..1595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 22,
        span: 1595..1596,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
        column: 25,
        span: 1597..1599,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 54,
        column: 29,
        span: 1600..1603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 30,
        span: 1603..1604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 7,
        span: 1605..1611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 8,
        span: 1611..1612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 55,
        column: 10,
        span: 1612..1614,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 55,
        column: 11,
        span: 1614..1615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 55,
        column: 15,
        span: 1615..1619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 16,
        span: 1619..1620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 55,
        column: 20,
        span: 1620..1624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 21,
        span: 1624..1625,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 24,
        span: 1626..1628,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 55,
        column: 28,
        span: 1629..1632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 29,
        span: 1632..1633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 56,
        column: 3,
        span: 1634..1636,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 56,
        column: 4,
        span: 1636..1637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 56,
        column: 10,
        span: 1637..1643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 11,
        span: 1643..1644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 56,
        column: 15,
        span: 1644..1648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 16,
        span: 1648..1649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
        column: 7,
        span: 1650..1656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 8,
        span: 1656..1657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 57,
        column: 10,
        span: 1657..1659,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 11,
        span: 1659..1660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 57,
        column: 17,
        span: 1660..1666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 18,
        span: 1666..1667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 19,
        span: 1667..1668,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 57,
        column: 22,
        span: 1669..1671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 57,
        column: 25,
        span: 1672..1674,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 26,
        span: 1674..1675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 57,
        column: 32,
        span: 1675..1681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 33,
        span: 1681..1682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 7,
        span: 1684..1690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 8,
        span: 1690..1691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 59,
        column: 10,
        span: 1691..1693,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 11,
        span: 1693..1694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 59,
        column: 17,
        span: 1694..1700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 18,
        span: 1700..1701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 19,
        span: 1701..1702,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 59,
        column: 20,
        span: 1702..1703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 59,
        column: 24,
        span: 1703..1707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 25,
        span: 1707..1708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 26,
        span: 1708..1709,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 29,
        span: 1710..1712,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 31,
        span: 1712..1714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 32,
        span: 1714..1715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 7,
        span: 1716..1722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 8,
        span: 1722..1723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 60,
        column: 10,
        span: 1723..1725,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
        column: 11,
        span: 1725..1726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 60,
        column: 16,
        span: 1726..1731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 17,
        span: 1731..1732,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 60,
        column: 26,
        span: 1732..1741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 27,
        span: 1741..1742,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 60,
        column: 28,
        span: 1742..1743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 60,
        column: 32,
        span: 1743..1747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 33,
        span: 1747..1748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 34,
        span: 1748..1749,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 37,
        span: 1750..1752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 60,
        column: 44,
        span: 1753..1759,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
        column: 45,
        span: 1759..1760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 60,
        column: 48,
        span: 1760..1763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 49,
        span: 1763..1764,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 60,
        column: 58,
        span: 1764..1773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 59,
        span: 1773..1774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 60,
        span: 1774..1775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 7,
        span: 1776..1782,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 8,
        span: 1782..1783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 61,
        column: 10,
        span: 1783..1785,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 11,
        span: 1785..1786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 61,
        column: 17,
        span: 1786..1792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 18,
        span: 1792..1793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 19,
        span: 1793..1794,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 61,
        column: 20,
        span: 1794..1795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 61,
        column: 24,
        span: 1795..1799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 25,
        span: 1799..1800,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cur\"",
        ),
        line: 61,
        column: 30,
        span: 1800..1805,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 31,
        span: 1805..1806,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 61,
        column: 33,
        span: 1807..1808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 34,
        span: 1807..1809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 35,
        span: 1809..1810,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
        column: 38,
        span: 1811..1813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 61,
        column: 45,
        span: 1814..1820,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 46,
        span: 1820..1821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 61,
        column: 49,
        span: 1821..1824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 50,
        span: 1824..1825,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        line: 61,
        column: 59,
        span: 1825..1834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 60,
        span: 1834..1835,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 61,
        column: 61,
        span: 1835..1836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 62,
        span: 1835..1837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 63,
        span: 1837..1838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 7,
        span: 1839..1845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 8,
        span: 1845..1846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 62,
        column: 10,
        span: 1846..1848,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 62,
        column: 11,
        span: 1848..1849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 62,
        column: 16,
        span: 1849..1854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 17,
        span: 1854..1855,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        line: 62,
        column: 23,
        span: 1855..1861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 24,
        span: 1861..1862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 25,
        span: 1862..1863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 63,
        column: 7,
        span: 1864..1870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 8,
        span: 1870..1871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 63,
        column: 10,
        span: 1871..1873,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 11,
        span: 1873..1874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 63,
        column: 17,
        span: 1874..1880,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 18,
        span: 1880..1881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 19,
        span: 1881..1882,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 63,
        column: 20,
        span: 1882..1883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 63,
        column: 24,
        span: 1883..1887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 25,
        span: 1887..1888,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"end\"",
        ),
        line: 63,
        column: 30,
        span: 1888..1893,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 31,
        span: 1893..1894,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 63,
        column: 34,
        span: 1895..1897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 63,
        column: 41,
        span: 1898..1904,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 42,
        span: 1904..1905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 63,
        column: 45,
        span: 1905..1908,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 46,
        span: 1908..1909,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo joao\"",
        ),
        line: 63,
        column: 56,
        span: 1909..1919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 57,
        span: 1919..1920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 58,
        span: 1920..1921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 7,
        span: 1923..1929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 8,
        span: 1929..1930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 65,
        column: 10,
        span: 1930..1932,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 11,
        span: 1932..1933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 65,
        column: 17,
        span: 1933..1939,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 18,
        span: 1939..1940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 19,
        span: 1940..1941,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 65,
        column: 20,
        span: 1941..1942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 65,
        column: 24,
        span: 1942..1946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 25,
        span: 1946..1947,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 65,
        column: 30,
        span: 1947..1952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 31,
        span: 1952..1953,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 34,
        span: 1954..1956,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 36,
        span: 1956..1958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 37,
        span: 1958..1959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
        column: 7,
        span: 1961..1967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 8,
        span: 1967..1968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 67,
        column: 10,
        span: 1968..1970,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 11,
        span: 1970..1971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 67,
        column: 16,
        span: 1971..1976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 17,
        span: 1976..1977,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"álo\"'",
        ),
        line: 67,
        column: 24,
        span: 1977..1984,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 25,
        span: 1984..1985,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"{a}\\n\"",
        ),
        line: 67,
        column: 33,
        span: 1986..1993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 34,
        span: 1993..1994,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second line\\n\"",
        ),
        line: 67,
        column: 50,
        span: 1995..2010,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 51,
        span: 2010..2011,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"third line \\n\"",
        ),
        line: 67,
        column: 67,
        span: 2012..2027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 68,
        span: 2027..2028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 69,
        span: 2028..2029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 7,
        span: 2030..2036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 8,
        span: 2036..2037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 68,
        column: 10,
        span: 2037..2039,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 11,
        span: 2039..2040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 68,
        column: 16,
        span: 2040..2045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 17,
        span: 2045..2046,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'çfourth_line'",
        ),
        line: 68,
        column: 31,
        span: 2046..2060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 32,
        span: 2060..2061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 33,
        span: 2061..2062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 69,
        column: 3,
        span: 2063..2065,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 4,
        span: 2065..2066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 69,
        column: 10,
        span: 2066..2072,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 11,
        span: 2072..2073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 69,
        column: 13,
        span: 2073..2075,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 14,
        span: 2075..2076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 69,
        column: 20,
        span: 2076..2082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 21,
        span: 2082..2083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 70,
        column: 15,
        span: 2084..2098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 16,
        span: 2098..2099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 17,
        span: 2099..2100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 7,
        span: 2133..2139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 8,
        span: 2139..2140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 71,
        column: 10,
        span: 2140..2142,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 11,
        span: 2142..2143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 71,
        column: 16,
        span: 2143..2148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 17,
        span: 2148..2149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 18,
        span: 2149..2150,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 21,
        span: 2151..2153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 71,
        column: 24,
        span: 2154..2156,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 25,
        span: 2156..2157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 71,
        column: 30,
        span: 2157..2162,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
        column: 34,
        span: 2163..2166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawequal",
        ),
        line: 71,
        column: 43,
        span: 2167..2175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 44,
        span: 2175..2176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 71,
        column: 46,
        span: 2176..2178,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 47,
        span: 2178..2179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 71,
        column: 53,
        span: 2179..2185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 54,
        span: 2185..2186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 55,
        span: 2186..2187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 56,
        span: 2187..2188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 71,
        column: 59,
        span: 2189..2191,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 60,
        span: 2191..2192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 71,
        column: 66,
        span: 2192..2198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 67,
        span: 2198..2199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 68,
        span: 2199..2200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 72,
        column: 6,
        span: 2201..2206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 7,
        span: 2206..2207,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 72,
        column: 10,
        span: 2207..2210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 11,
        span: 2210..2211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 75,
        column: 15,
        span: 2234..2248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 16,
        span: 2248..2249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 17,
        span: 2249..2250,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 76,
        column: 4,
        span: 2251..2254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 76,
        column: 6,
        span: 2255..2256,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 76,
        column: 7,
        span: 2256..2257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 8,
        span: 2256..2258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 9,
        span: 2258..2259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 12,
        span: 2258..2262,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 76,
        column: 0,
        span: 2263..2265,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 77,
        column: 6,
        span: 2268..2271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 77,
        column: 8,
        span: 2272..2273,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 77,
        column: 9,
        span: 2273..2274,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 10,
        span: 2273..2275,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 11,
        span: 2275..2276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 12,
        span: 2275..2277,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 77,
        column: 0,
        span: 2278..2280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 78,
        column: 7,
        span: 2285..2287,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 78,
        column: 8,
        span: 2287..2288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 78,
        column: 13,
        span: 2288..2293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 14,
        span: 2293..2294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 78,
        column: 18,
        span: 2294..2298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 19,
        span: 2298..2299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 79,
        column: 11,
        span: 2304..2310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 12,
        span: 2310..2311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 79,
        column: 14,
        span: 2311..2313,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 79,
        column: 15,
        span: 2313..2314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 79,
        column: 19,
        span: 2314..2318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 20,
        span: 2318..2319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 79,
        column: 24,
        span: 2319..2323,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 25,
        span: 2323..2324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        line: 79,
        column: 29,
        span: 2325..2328,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 30,
        span: 2328..2329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 31,
        span: 2329..2330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 80,
        column: 7,
        span: 2335..2337,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 8,
        span: 2337..2338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 80,
        column: 13,
        span: 2338..2343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 14,
        span: 2343..2344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 80,
        column: 18,
        span: 2344..2348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 19,
        span: 2348..2349,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 81,
        column: 0,
        span: 2352..2355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 82,
        column: 17,
        span: 2358..2372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 18,
        span: 2372..2373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 19,
        span: 2373..2374,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 83,
        column: 0,
        span: 2375..2378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 85,
        column: 3,
        span: 2380..2382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 85,
        column: 4,
        span: 2382..2383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 85,
        column: 9,
        span: 2383..2388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 10,
        span: 2388..2389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 11,
        span: 2389..2390,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 85,
        column: 12,
        span: 2390..2391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 85,
        column: 17,
        span: 2391..2396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 18,
        span: 2396..2397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 19,
        span: 2397..2398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 86,
        column: 3,
        span: 2399..2401,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
        column: 4,
        span: 2401..2402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 86,
        column: 9,
        span: 2402..2407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 10,
        span: 2407..2408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 11,
        span: 2408..2409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 7,
        span: 2411..2417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 8,
        span: 2417..2418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 88,
        column: 10,
        span: 2418..2420,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 11,
        span: 2420..2421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rename",
        ),
        line: 88,
        column: 17,
        span: 2421..2427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 18,
        span: 2427..2428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 88,
        column: 22,
        span: 2428..2432,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 23,
        span: 2432..2433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 88,
        column: 33,
        span: 2434..2443,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 34,
        span: 2443..2444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 35,
        span: 2444..2445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 89,
        column: 7,
        span: 2446..2452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 8,
        span: 2452..2453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 89,
        column: 10,
        span: 2453..2455,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
        column: 11,
        span: 2455..2456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rename",
        ),
        line: 89,
        column: 17,
        span: 2456..2462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 18,
        span: 2462..2463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 89,
        column: 22,
        span: 2463..2467,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 23,
        span: 2467..2468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 89,
        column: 33,
        span: 2469..2478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 34,
        span: 2478..2479,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
        column: 37,
        span: 2480..2482,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 89,
        column: 41,
        span: 2483..2486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 42,
        span: 2486..2487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 91,
        column: 3,
        span: 2489..2491,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 4,
        span: 2491..2492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 91,
        column: 10,
        span: 2492..2498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 11,
        span: 2498..2499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 91,
        column: 13,
        span: 2499..2501,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 14,
        span: 2501..2502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 91,
        column: 18,
        span: 2502..2506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 19,
        span: 2506..2507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 91,
        column: 28,
        span: 2507..2516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 29,
        span: 2516..2517,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\"",
        ),
        line: 91,
        column: 34,
        span: 2518..2522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 35,
        span: 2522..2523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 36,
        span: 2523..2524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 92,
        column: 7,
        span: 2525..2531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 8,
        span: 2531..2532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 92,
        column: 10,
        span: 2532..2534,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
        column: 11,
        span: 2534..2535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 92,
        column: 16,
        span: 2535..2540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 17,
        span: 2540..2541,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n\\t\\t  3450\\n\"",
        ),
        line: 92,
        column: 35,
        span: 2541..2559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 36,
        span: 2559..2560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 37,
        span: 2560..2561,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 92,
        column: 38,
        span: 2561..2562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 93,
        column: 3,
        span: 2563..2565,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 93,
        column: 4,
        span: 2565..2566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 93,
        column: 9,
        span: 2566..2571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 10,
        span: 2571..2572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 11,
        span: 2572..2573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
        column: 7,
        span: 2599..2605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 8,
        span: 2605..2606,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 96,
        column: 11,
        span: 2606..2609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 96,
        column: 17,
        span: 2610..2615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 18,
        span: 2615..2616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 96,
        column: 20,
        span: 2616..2618,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
        column: 21,
        span: 2618..2619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 96,
        column: 26,
        span: 2619..2624,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 27,
        span: 2624..2625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"non-existent-file\"",
        ),
        line: 96,
        column: 47,
        span: 2626..2645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 48,
        span: 2645..2646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 49,
        span: 2646..2647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 97,
        column: 7,
        span: 2648..2654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 8,
        span: 2654..2655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 97,
        column: 10,
        span: 2655..2657,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 97,
        column: 11,
        span: 2657..2658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rename",
        ),
        line: 97,
        column: 17,
        span: 2658..2664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 18,
        span: 2664..2665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 97,
        column: 27,
        span: 2665..2674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 28,
        span: 2674..2675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 97,
        column: 33,
        span: 2676..2680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 34,
        span: 2680..2681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 35,
        span: 2681..2682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 98,
        column: 3,
        span: 2683..2685,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 98,
        column: 4,
        span: 2685..2686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 98,
        column: 10,
        span: 2686..2692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 11,
        span: 2692..2693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 98,
        column: 20,
        span: 2693..2702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 21,
        span: 2702..2703,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 99,
        column: 6,
        span: 2704..2709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 99,
        column: 8,
        span: 2710..2711,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 10,
        span: 2712..2713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 99,
        column: 13,
        span: 2714..2716,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 14,
        span: 2716..2717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 99,
        column: 19,
        span: 2717..2722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 20,
        span: 2722..2723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 99,
        column: 24,
        span: 2723..2727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 25,
        span: 2727..2728,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 100,
        column: 6,
        span: 2729..2734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 100,
        column: 8,
        span: 2735..2736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 9,
        span: 2736..2737,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 10,
        span: 2737..2738,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 100,
        column: 13,
        span: 2739..2741,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
        column: 17,
        span: 2742..2745,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 100,
        column: 18,
        span: 2745..2746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 101,
        column: 7,
        span: 2747..2753,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 8,
        span: 2753..2754,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 101,
        column: 11,
        span: 2754..2757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 101,
        column: 17,
        span: 2758..2763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 18,
        span: 2763..2764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 101,
        column: 19,
        span: 2764..2765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 20,
        span: 2765..2766,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 21,
        span: 2766..2767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 102,
        column: 7,
        span: 2793..2799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 8,
        span: 2799..2800,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 102,
        column: 11,
        span: 2800..2803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 102,
        column: 17,
        span: 2804..2809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 18,
        span: 2809..2810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 102,
        column: 19,
        span: 2810..2811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 20,
        span: 2811..2812,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 21,
        span: 2812..2813,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 104,
        column: 4,
        span: 2870..2873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 104,
        column: 6,
        span: 2874..2875,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 104,
        column: 9,
        span: 2876..2878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 104,
        column: 12,
        span: 2879..2881,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 104,
        column: 13,
        span: 2881..2882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 104,
        column: 18,
        span: 2882..2887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 19,
        span: 2887..2888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 104,
        column: 23,
        span: 2888..2892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 24,
        span: 2892..2893,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 104,
        column: 27,
        span: 2894..2896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 104,
        column: 30,
        span: 2897..2899,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 104,
        column: 31,
        span: 2899..2900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 104,
        column: 36,
        span: 2900..2905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 37,
        span: 2905..2906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 104,
        column: 38,
        span: 2906..2907,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 39,
        span: 2907..2908,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 104,
        column: 44,
        span: 2909..2913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 45,
        span: 2913..2914,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 104,
        column: 0,
        span: 2915..2918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 105,
        column: 3,
        span: 2919..2921,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
        column: 4,
        span: 2921..2922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 105,
        column: 9,
        span: 2922..2927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 10,
        span: 2927..2928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 11,
        span: 2928..2929,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 107,
        column: 6,
        span: 2966..2971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 107,
        column: 8,
        span: 2972..2973,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 10,
        span: 2974..2975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 107,
        column: 17,
        span: 2976..2982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 18,
        span: 2982..2983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 107,
        column: 20,
        span: 2983..2985,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
        column: 21,
        span: 2985..2986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 107,
        column: 25,
        span: 2986..2990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 26,
        span: 2990..2991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 107,
        column: 35,
        span: 2991..3000,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 36,
        span: 3000..3001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 37,
        span: 3001..3002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 108,
        column: 7,
        span: 3003..3009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 8,
        span: 3009..3010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 108,
        column: 10,
        span: 3010..3012,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 108,
        column: 11,
        span: 3012..3013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 108,
        column: 15,
        span: 3013..3017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 16,
        span: 3017..3018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
        column: 17,
        span: 3018..3019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 18,
        span: 3019..3020,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 108,
        column: 21,
        span: 3021..3023,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        line: 108,
        column: 28,
        span: 3024..3030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 29,
        span: 3030..3031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 109,
        column: 3,
        span: 3032..3034,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 109,
        column: 4,
        span: 3034..3035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 109,
        column: 10,
        span: 3035..3041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 11,
        span: 3041..3042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 109,
        column: 15,
        span: 3042..3046,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 16,
        span: 3046..3047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 110,
        column: 7,
        span: 3048..3054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 8,
        span: 3054..3055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 110,
        column: 10,
        span: 3055..3057,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 110,
        column: 11,
        span: 3057..3058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 110,
        column: 17,
        span: 3058..3064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 18,
        span: 3064..3065,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 19,
        span: 3065..3066,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 110,
        column: 20,
        span: 3066..3067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 110,
        column: 24,
        span: 3067..3071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 25,
        span: 3071..3072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 26,
        span: 3072..3073,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 110,
        column: 29,
        span: 3074..3076,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 110,
        column: 33,
        span: 3077..3080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 34,
        span: 3080..3081,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 111,
        column: 4,
        span: 3082..3085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 111,
        column: 6,
        span: 3086..3087,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 111,
        column: 9,
        span: 3088..3090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 111,
        column: 11,
        span: 3091..3092,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 111,
        column: 12,
        span: 3092..3093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 111,
        column: 17,
        span: 3093..3098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 18,
        span: 3098..3099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 19,
        span: 3099..3100,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 111,
        column: 22,
        span: 3101..3103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 111,
        column: 25,
        span: 3104..3106,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
        column: 26,
        span: 3106..3107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 111,
        column: 31,
        span: 3107..3112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 32,
        span: 3112..3113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 111,
        column: 33,
        span: 3113..3114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 34,
        span: 3114..3115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 111,
        column: 39,
        span: 3116..3120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 40,
        span: 3120..3121,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 111,
        column: 0,
        span: 3122..3125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 7,
        span: 3126..3132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 8,
        span: 3132..3133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 112,
        column: 16,
        span: 3133..3141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 17,
        span: 3141..3142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 112,
        column: 18,
        span: 3142..3143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 19,
        span: 3143..3144,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 112,
        column: 20,
        span: 3144..3145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 112,
        column: 23,
        span: 3145..3148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 24,
        span: 3148..3149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 25,
        span: 3148..3150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 26,
        span: 3150..3151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 28,
        span: 3151..3153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 29,
        span: 3153..3154,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 112,
        column: 32,
        span: 3155..3157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file \"",
        ),
        line: 112,
        column: 40,
        span: 3158..3165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 41,
        span: 3165..3166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 113,
        column: 7,
        span: 3167..3173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 8,
        span: 3173..3174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 113,
        column: 9,
        span: 3174..3175,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 113,
        column: 10,
        span: 3175..3176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 113,
        column: 15,
        span: 3176..3181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 16,
        span: 3181..3182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 17,
        span: 3182..3183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 18,
        span: 3183..3184,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 113,
        column: 19,
        span: 3184..3185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 113,
        column: 22,
        span: 3186..3188,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 113,
        column: 23,
        span: 3188..3189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 113,
        column: 28,
        span: 3189..3194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 29,
        span: 3194..3195,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 30,
        span: 3195..3196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
        column: 7,
        span: 3197..3203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 8,
        span: 3203..3204,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 114,
        column: 11,
        span: 3204..3207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 114,
        column: 17,
        span: 3208..3213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 18,
        span: 3213..3214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 114,
        column: 20,
        span: 3214..3216,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 114,
        column: 21,
        span: 3216..3217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 114,
        column: 26,
        span: 3217..3222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 27,
        span: 3222..3223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 114,
        column: 29,
        span: 3224..3225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 30,
        span: 3225..3226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 31,
        span: 3226..3227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 115,
        column: 7,
        span: 3261..3267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 8,
        span: 3267..3268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 115,
        column: 16,
        span: 3268..3276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 17,
        span: 3276..3277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 115,
        column: 18,
        span: 3277..3278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 19,
        span: 3278..3279,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 22,
        span: 3280..3282,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file (closed)\"",
        ),
        line: 115,
        column: 38,
        span: 3283..3298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 39,
        span: 3298..3299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 116,
        column: 7,
        span: 3300..3306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 8,
        span: 3306..3307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 116,
        column: 10,
        span: 3307..3309,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 116,
        column: 11,
        span: 3309..3310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 116,
        column: 15,
        span: 3310..3314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 16,
        span: 3314..3315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 116,
        column: 17,
        span: 3315..3316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 18,
        span: 3316..3317,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 116,
        column: 21,
        span: 3318..3320,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closed file\"",
        ),
        line: 116,
        column: 35,
        span: 3321..3334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 36,
        span: 3334..3335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 117,
        column: 3,
        span: 3336..3338,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 117,
        column: 4,
        span: 3338..3339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 117,
        column: 9,
        span: 3339..3344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 10,
        span: 3344..3345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 117,
        column: 14,
        span: 3345..3349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 15,
        span: 3349..3350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 118,
        column: 2,
        span: 3351..3352,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 118,
        column: 4,
        span: 3353..3354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 118,
        column: 7,
        span: 3355..3357,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 118,
        column: 8,
        span: 3357..3358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 118,
        column: 12,
        span: 3358..3362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 13,
        span: 3362..3363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 118,
        column: 22,
        span: 3363..3372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 23,
        span: 3372..3373,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 118,
        column: 24,
        span: 3373..3374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 118,
        column: 29,
        span: 3374..3379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 30,
        span: 3379..3380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 31,
        span: 3380..3381,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 119,
        column: 4,
        span: 3382..3385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 119,
        column: 6,
        span: 3386..3387,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 119,
        column: 9,
        span: 3388..3390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 119,
        column: 12,
        span: 3391..3393,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 119,
        column: 13,
        span: 3393..3394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 119,
        column: 18,
        span: 3394..3399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 19,
        span: 3399..3400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 20,
        span: 3400..3401,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 119,
        column: 23,
        span: 3402..3404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
        column: 30,
        span: 3405..3411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 31,
        span: 3411..3412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 119,
        column: 32,
        span: 3412..3413,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 35,
        span: 3414..3416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 119,
        column: 37,
        span: 3417..3418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 38,
        span: 3418..3419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 39,
        span: 3419..3420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 40,
        span: 3420..3421,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 119,
        column: 0,
        span: 3422..3425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 120,
        column: 2,
        span: 3426..3427,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 4,
        span: 3428..3429,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 120,
        column: 8,
        span: 3430..3433,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 120,
        column: 9,
        span: 3433..3434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 120,
        column: 24,
        span: 3435..3449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 25,
        span: 3449..3450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 26,
        span: 3450..3451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 121,
        column: 7,
        span: 3452..3458,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 8,
        span: 3458..3459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 121,
        column: 10,
        span: 3459..3461,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 121,
        column: 11,
        span: 3461..3462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 121,
        column: 17,
        span: 3462..3468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 18,
        span: 3468..3469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 121,
        column: 27,
        span: 3469..3478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 28,
        span: 3478..3479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 29,
        span: 3479..3480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 123,
        column: 3,
        span: 3482..3484,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 123,
        column: 4,
        span: 3484..3485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 123,
        column: 9,
        span: 3485..3490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 10,
        span: 3490..3491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 123,
        column: 14,
        span: 3491..3495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 15,
        span: 3495..3496,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 124,
        column: 3,
        span: 3497..3499,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 125,
        column: 8,
        span: 3525..3530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 125,
        column: 10,
        span: 3531..3532,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 11,
        span: 3532..3533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 125,
        column: 12,
        span: 3533..3534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 13,
        span: 3534..3535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 125,
        column: 14,
        span: 3535..3536,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 125,
        column: 16,
        span: 3537..3538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 125,
        column: 19,
        span: 3539..3541,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
        column: 20,
        span: 3541..3542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 125,
        column: 25,
        span: 3542..3547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 26,
        span: 3547..3548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 27,
        span: 3548..3549,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 125,
        column: 28,
        span: 3549..3550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 125,
        column: 33,
        span: 3550..3555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 34,
        span: 3555..3556,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 125,
        column: 40,
        span: 3556..3562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 41,
        span: 3562..3563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 126,
        column: 9,
        span: 3566..3572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 10,
        span: 3572..3573,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 126,
        column: 13,
        span: 3573..3576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 126,
        column: 15,
        span: 3577..3578,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 126,
        column: 19,
        span: 3579..3582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 126,
        column: 24,
        span: 3583..3587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 25,
        span: 3587..3588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 126,
        column: 26,
        span: 3588..3589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 27,
        span: 3589..3590,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 30,
        span: 3591..3593,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 126,
        column: 39,
        span: 3594..3602,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 126,
        column: 43,
        span: 3603..3606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 126,
        column: 48,
        span: 3607..3611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 49,
        span: 3611..3612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 126,
        column: 50,
        span: 3612..3613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 51,
        span: 3613..3614,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 54,
        span: 3615..3617,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 126,
        column: 63,
        span: 3618..3626,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 64,
        span: 3626..3627,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 127,
        column: 0,
        span: 3628..3631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 128,
        column: 7,
        span: 3632..3638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 8,
        span: 3638..3639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 128,
        column: 10,
        span: 3639..3641,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 128,
        column: 11,
        span: 3641..3642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 128,
        column: 15,
        span: 3642..3646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 16,
        span: 3646..3647,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 17,
        span: 3646..3648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 18,
        span: 3648..3649,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
        column: 21,
        span: 3650..3652,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 128,
        column: 24,
        span: 3653..3655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 25,
        span: 3655..3656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 129,
        column: 7,
        span: 3670..3676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 8,
        span: 3676..3677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 129,
        column: 10,
        span: 3677..3679,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 11,
        span: 3679..3680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 129,
        column: 15,
        span: 3680..3684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 16,
        span: 3684..3685,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 17,
        span: 3684..3686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 18,
        span: 3686..3687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*l'",
        ),
        line: 129,
        column: 23,
        span: 3688..3692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 24,
        span: 3692..3693,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
        column: 27,
        span: 3694..3696,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"álo\"'",
        ),
        line: 129,
        column: 35,
        span: 3697..3704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 36,
        span: 3704..3705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 130,
        column: 7,
        span: 3706..3712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 8,
        span: 3712..3713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 130,
        column: 10,
        span: 3713..3715,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 130,
        column: 11,
        span: 3715..3716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 130,
        column: 15,
        span: 3716..3720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 16,
        span: 3720..3721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 17,
        span: 3720..3722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 18,
        span: 3722..3723,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 130,
        column: 21,
        span: 3724..3726,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 130,
        column: 24,
        span: 3727..3729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 25,
        span: 3729..3730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
        column: 7,
        span: 3731..3737,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 8,
        span: 3737..3738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 131,
        column: 10,
        span: 3738..3740,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
        column: 11,
        span: 3740..3741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 131,
        column: 15,
        span: 3741..3745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 16,
        span: 3745..3746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 17,
        span: 3746..3747,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
        column: 20,
        span: 3748..3750,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second line\"",
        ),
        line: 131,
        column: 34,
        span: 3751..3764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 35,
        span: 3764..3765,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 132,
        column: 6,
        span: 3766..3771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 132,
        column: 8,
        span: 3772..3773,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 10,
        span: 3774..3775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 132,
        column: 13,
        span: 3776..3778,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 132,
        column: 14,
        span: 3778..3779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 132,
        column: 19,
        span: 3779..3784,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 20,
        span: 3784..3785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 21,
        span: 3785..3786,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 132,
        column: 22,
        span: 3786..3787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 132,
        column: 26,
        span: 3787..3791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 27,
        span: 3791..3792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 28,
        span: 3792..3793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 133,
        column: 7,
        span: 3794..3800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 8,
        span: 3800..3801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 133,
        column: 10,
        span: 3801..3803,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 133,
        column: 11,
        span: 3803..3804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 133,
        column: 15,
        span: 3804..3808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 16,
        span: 3808..3809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 17,
        span: 3809..3810,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 133,
        column: 20,
        span: 3811..3813,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"third line \"",
        ),
        line: 133,
        column: 34,
        span: 3814..3827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 35,
        span: 3827..3828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
        column: 7,
        span: 3829..3835,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 8,
        span: 3835..3836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 134,
        column: 10,
        span: 3836..3838,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 134,
        column: 11,
        span: 3838..3839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 134,
        column: 16,
        span: 3839..3844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 17,
        span: 3844..3845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 18,
        span: 3845..3846,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 134,
        column: 19,
        span: 3846..3847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 134,
        column: 23,
        span: 3847..3851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 24,
        span: 3851..3852,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 134,
        column: 29,
        span: 3852..3857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 30,
        span: 3857..3858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 134,
        column: 32,
        span: 3859..3860,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 33,
        span: 3860..3861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 34,
        span: 3861..3862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 135,
        column: 7,
        span: 3863..3869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 8,
        span: 3869..3870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 135,
        column: 10,
        span: 3870..3872,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 135,
        column: 11,
        span: 3872..3873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 135,
        column: 15,
        span: 3873..3877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 16,
        span: 3877..3878,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*L'",
        ),
        line: 135,
        column: 20,
        span: 3878..3882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 21,
        span: 3882..3883,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
        column: 24,
        span: 3884..3886,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"third line \\n\"",
        ),
        line: 135,
        column: 40,
        span: 3887..3902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 41,
        span: 3902..3903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 136,
        column: 7,
        span: 3904..3910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 8,
        span: 3910..3911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 136,
        column: 10,
        span: 3911..3913,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 136,
        column: 11,
        span: 3913..3914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 136,
        column: 15,
        span: 3914..3918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 16,
        span: 3918..3919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 17,
        span: 3918..3920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 18,
        span: 3920..3921,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 136,
        column: 21,
        span: 3922..3924,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ç\"",
        ),
        line: 136,
        column: 25,
        span: 3925..3928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 26,
        span: 3928..3929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
        column: 7,
        span: 3930..3936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 8,
        span: 3936..3937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 137,
        column: 10,
        span: 3937..3939,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 137,
        column: 11,
        span: 3939..3940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 137,
        column: 15,
        span: 3940..3944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 16,
        span: 3944..3945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 137,
        column: 22,
        span: 3945..3951,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 137,
        column: 23,
        span: 3951..3952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 137,
        column: 26,
        span: 3952..3955,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        line: 137,
        column: 39,
        span: 3955..3968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 40,
        span: 3968..3969,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 43,
        span: 3970..3972,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        line: 137,
        column: 57,
        span: 3973..3986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 58,
        span: 3986..3987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 3988..3994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 3994..3995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 138,
        column: 10,
        span: 3995..3997,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 138,
        column: 11,
        span: 3997..3998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 138,
        column: 16,
        span: 3998..4003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 17,
        span: 4003..4004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 18,
        span: 4004..4005,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 138,
        column: 19,
        span: 4005..4006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 138,
        column: 23,
        span: 4006..4010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 24,
        span: 4010..4011,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cur\"",
        ),
        line: 138,
        column: 29,
        span: 4011..4016,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 30,
        span: 4016..4017,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 138,
        column: 32,
        span: 4018..4019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 138,
        column: 38,
        span: 4019..4025,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 138,
        column: 39,
        span: 4025..4026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 138,
        column: 42,
        span: 4026..4029,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        line: 138,
        column: 55,
        span: 4029..4042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 56,
        span: 4042..4043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 57,
        span: 4043..4044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
        column: 7,
        span: 4045..4051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 8,
        span: 4051..4052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 139,
        column: 10,
        span: 4052..4054,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 139,
        column: 11,
        span: 4054..4055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 139,
        column: 15,
        span: 4055..4059,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 16,
        span: 4059..4060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 17,
        span: 4060..4061,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
        column: 20,
        span: 4062..4064,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fourth_line\"",
        ),
        line: 139,
        column: 34,
        span: 4065..4078,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 35,
        span: 4078..4079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 4080..4086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 4086..4087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 140,
        column: 10,
        span: 4087..4089,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 11,
        span: 4089..4090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 140,
        column: 15,
        span: 4090..4094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 16,
        span: 4094..4095,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 17,
        span: 4095..4096,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 20,
        span: 4097..4099,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 140,
        column: 23,
        span: 4100..4102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 24,
        span: 4102..4103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
        column: 7,
        span: 4119..4125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 8,
        span: 4125..4126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 141,
        column: 10,
        span: 4126..4128,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 141,
        column: 11,
        span: 4128..4129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 141,
        column: 15,
        span: 4129..4133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 16,
        span: 4133..4134,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*n'",
        ),
        line: 141,
        column: 20,
        span: 4134..4138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 21,
        span: 4138..4139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 24,
        span: 4140..4142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3450",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 29,
        span: 4142..4147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 30,
        span: 4147..4148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 142,
        column: 7,
        span: 4149..4155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 8,
        span: 4155..4156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 142,
        column: 10,
        span: 4156..4158,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 142,
        column: 11,
        span: 4158..4159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 142,
        column: 15,
        span: 4159..4163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 16,
        span: 4163..4164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 17,
        span: 4163..4165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 18,
        span: 4165..4166,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 21,
        span: 4167..4169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        line: 142,
        column: 26,
        span: 4170..4174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 27,
        span: 4174..4175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 143,
        column: 7,
        span: 4176..4182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 8,
        span: 4182..4183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 143,
        column: 10,
        span: 4183..4185,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 143,
        column: 11,
        span: 4185..4186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 143,
        column: 15,
        span: 4186..4190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 16,
        span: 4190..4191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 17,
        span: 4190..4192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 18,
        span: 4192..4193,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 21,
        span: 4194..4196,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 143,
        column: 25,
        span: 4197..4200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 26,
        span: 4200..4201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
        column: 7,
        span: 4218..4224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 8,
        span: 4224..4225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 144,
        column: 10,
        span: 4225..4227,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 144,
        column: 11,
        span: 4227..4228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 144,
        column: 15,
        span: 4228..4232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 16,
        span: 4232..4233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 17,
        span: 4232..4234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 18,
        span: 4234..4235,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 21,
        span: 4236..4238,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 144,
        column: 25,
        span: 4239..4242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 26,
        span: 4242..4243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 145,
        column: 7,
        span: 4260..4266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 8,
        span: 4266..4267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 145,
        column: 10,
        span: 4267..4269,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 145,
        column: 11,
        span: 4269..4270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 145,
        column: 15,
        span: 4270..4274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 16,
        span: 4274..4275,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 21,
        span: 4274..4280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 22,
        span: 4280..4281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
        column: 25,
        span: 4282..4284,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 145,
        column: 29,
        span: 4285..4288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 30,
        span: 4288..4289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 7,
        span: 4306..4312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 8,
        span: 4312..4313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 9,
        span: 4313..4314,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 146,
        column: 10,
        span: 4314..4315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 146,
        column: 12,
        span: 4315..4317,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
        column: 13,
        span: 4317..4318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 146,
        column: 17,
        span: 4318..4322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 18,
        span: 4322..4323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 19,
        span: 4322..4324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 20,
        span: 4324..4325,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 146,
        column: 21,
        span: 4325..4326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 22,
        span: 4326..4327,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 146,
        column: 23,
        span: 4327..4328,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 24,
        span: 4327..4329,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 146,
        column: 25,
        span: 4329..4330,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 28,
        span: 4331..4333,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 146,
        column: 32,
        span: 4334..4337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 33,
        span: 4337..4338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 7,
        span: 4339..4345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 8,
        span: 4345..4346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 147,
        column: 10,
        span: 4346..4348,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 147,
        column: 11,
        span: 4348..4349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 147,
        column: 15,
        span: 4349..4353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 16,
        span: 4353..4354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 17,
        span: 4354..4355,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 20,
        span: 4356..4358,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 147,
        column: 24,
        span: 4359..4362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 25,
        span: 4362..4363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
        column: 7,
        span: 4380..4386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 8,
        span: 4386..4387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 9,
        span: 4387..4388,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 148,
        column: 10,
        span: 4388..4389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 148,
        column: 12,
        span: 4389..4391,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 148,
        column: 13,
        span: 4391..4392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 148,
        column: 17,
        span: 4392..4396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 18,
        span: 4396..4397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 19,
        span: 4397..4398,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 148,
        column: 20,
        span: 4398..4399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 21,
        span: 4399..4400,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 148,
        column: 22,
        span: 4400..4401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 23,
        span: 4400..4402,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 148,
        column: 24,
        span: 4402..4403,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 148,
        column: 27,
        span: 4404..4406,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 148,
        column: 31,
        span: 4407..4410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 32,
        span: 4410..4411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 7,
        span: 4412..4418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 8,
        span: 4418..4419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 149,
        column: 10,
        span: 4419..4421,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 149,
        column: 11,
        span: 4421..4422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 149,
        column: 15,
        span: 4422..4426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 16,
        span: 4426..4427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*n'",
        ),
        line: 149,
        column: 20,
        span: 4427..4431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 21,
        span: 4431..4432,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 24,
        span: 4433..4435,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 149,
        column: 28,
        span: 4436..4439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 29,
        span: 4439..4440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
        column: 7,
        span: 4457..4463,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 8,
        span: 4463..4464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 9,
        span: 4464..4465,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 150,
        column: 10,
        span: 4465..4466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 150,
        column: 12,
        span: 4466..4468,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 150,
        column: 13,
        span: 4468..4469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 150,
        column: 17,
        span: 4469..4473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 18,
        span: 4473..4474,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*n'",
        ),
        line: 150,
        column: 22,
        span: 4474..4478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 23,
        span: 4478..4479,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 150,
        column: 24,
        span: 4479..4480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 25,
        span: 4480..4481,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 150,
        column: 26,
        span: 4481..4482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 27,
        span: 4481..4483,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 150,
        column: 28,
        span: 4483..4484,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 31,
        span: 4485..4487,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 150,
        column: 35,
        span: 4488..4491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 36,
        span: 4491..4492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
        column: 7,
        span: 4493..4499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 8,
        span: 4499..4500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 151,
        column: 10,
        span: 4500..4502,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 11,
        span: 4502..4503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 151,
        column: 15,
        span: 4503..4507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 16,
        span: 4507..4508,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*a'",
        ),
        line: 151,
        column: 20,
        span: 4508..4512,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 21,
        span: 4512..4513,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 151,
        column: 24,
        span: 4514..4516,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 151,
        column: 27,
        span: 4517..4519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 28,
        span: 4519..4520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
        column: 7,
        span: 4551..4557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 8,
        span: 4557..4558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 152,
        column: 10,
        span: 4558..4560,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 152,
        column: 11,
        span: 4560..4561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 152,
        column: 15,
        span: 4561..4565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 16,
        span: 4565..4566,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*a'",
        ),
        line: 152,
        column: 20,
        span: 4566..4570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 21,
        span: 4570..4571,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 152,
        column: 24,
        span: 4572..4574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 152,
        column: 27,
        span: 4575..4577,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 28,
        span: 4577..4578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 153,
        column: 15,
        span: 4609..4623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 16,
        span: 4623..4624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 17,
        span: 4624..4625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 154,
        column: 6,
        span: 4626..4631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 7,
        span: 4631..4632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 154,
        column: 10,
        span: 4632..4635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 11,
        span: 4635..4636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 155,
        column: 3,
        span: 4637..4639,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
        column: 4,
        span: 4639..4640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 155,
        column: 9,
        span: 4640..4645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 10,
        span: 4645..4646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 155,
        column: 12,
        span: 4646..4648,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
        column: 13,
        span: 4648..4649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 155,
        column: 18,
        span: 4649..4654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 19,
        span: 4654..4655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 20,
        span: 4655..4656,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 21,
        span: 4656..4657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
        column: 7,
        span: 4658..4664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 8,
        span: 4664..4665,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 156,
        column: 11,
        span: 4665..4668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 156,
        column: 17,
        span: 4669..4674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 18,
        span: 4674..4675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 156,
        column: 20,
        span: 4675..4677,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 156,
        column: 21,
        span: 4677..4678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 156,
        column: 25,
        span: 4678..4682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 26,
        span: 4682..4683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 27,
        span: 4683..4684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 158,
        column: 7,
        span: 4686..4692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 8,
        span: 4692..4693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 158,
        column: 10,
        span: 4693..4695,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
        column: 11,
        span: 4695..4696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 158,
        column: 17,
        span: 4696..4702,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 18,
        span: 4702..4703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 158,
        column: 22,
        span: 4703..4707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 23,
        span: 4707..4708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 24,
        span: 4708..4709,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 160,
        column: 6,
        span: 4711..4716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 160,
        column: 8,
        span: 4717..4718,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 160,
        column: 10,
        span: 4719..4720,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789'",
        ),
        line: 160,
        column: 23,
        span: 4721..4733,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 161,
        column: 4,
        span: 4734..4737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 161,
        column: 6,
        span: 4738..4739,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 7,
        span: 4739..4740,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 8,
        span: 4739..4741,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 9,
        span: 4741..4742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 11,
        span: 4741..4744,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 161,
        column: 14,
        span: 4745..4747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 161,
        column: 16,
        span: 4748..4749,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 18,
        span: 4750..4751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 161,
        column: 20,
        span: 4752..4753,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 161,
        column: 22,
        span: 4753..4755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 161,
        column: 23,
        span: 4755..4756,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 161,
        column: 24,
        span: 4756..4757,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 161,
        column: 0,
        span: 4758..4761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 162,
        column: 7,
        span: 4762..4768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 8,
        span: 4768..4769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 162,
        column: 14,
        span: 4769..4775,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
        column: 15,
        span: 4775..4776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 162,
        column: 18,
        span: 4776..4779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 19,
        span: 4779..4780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 162,
        column: 20,
        span: 4780..4781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 21,
        span: 4781..4782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 162,
        column: 24,
        span: 4783..4785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 27,
        span: 4785..4788,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 162,
        column: 28,
        span: 4788..4789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 29,
        span: 4788..4790,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 162,
        column: 30,
        span: 4790..4791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 32,
        span: 4790..4793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 33,
        span: 4793..4794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 164,
        column: 3,
        span: 4796..4798,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 164,
        column: 4,
        span: 4798..4799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 164,
        column: 10,
        span: 4799..4805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 11,
        span: 4805..4806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 164,
        column: 15,
        span: 4806..4810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 16,
        span: 4810..4811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 165,
        column: 3,
        span: 4812..4814,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 165,
        column: 4,
        span: 4814..4815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 165,
        column: 9,
        span: 4815..4820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 10,
        span: 4820..4821,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 165,
        column: 15,
        span: 4821..4826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 16,
        span: 4826..4827,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 165,
        column: 17,
        span: 4827..4828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 165,
        column: 22,
        span: 4828..4833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 23,
        span: 4833..4834,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 165,
        column: 27,
        span: 4834..4838,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 28,
        span: 4838..4839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 166,
        column: 3,
        span: 4840..4842,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 166,
        column: 4,
        span: 4842..4843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 166,
        column: 9,
        span: 4843..4848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 10,
        span: 4848..4849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 11,
        span: 4849..4850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
        column: 7,
        span: 4851..4857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 8,
        span: 4857..4858,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 167,
        column: 11,
        span: 4858..4861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 167,
        column: 17,
        span: 4862..4867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 18,
        span: 4867..4868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 167,
        column: 20,
        span: 4868..4870,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 167,
        column: 21,
        span: 4870..4871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 167,
        column: 26,
        span: 4871..4876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 27,
        span: 4876..4877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 28,
        span: 4877..4878,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 168,
        column: 6,
        span: 4879..4884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 168,
        column: 8,
        span: 4885..4886,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 168,
        column: 10,
        span: 4887..4888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 168,
        column: 13,
        span: 4889..4891,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 168,
        column: 14,
        span: 4891..4892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 168,
        column: 18,
        span: 4892..4896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 19,
        span: 4896..4897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 168,
        column: 23,
        span: 4897..4901,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 24,
        span: 4901..4902,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a+b\"",
        ),
        line: 168,
        column: 30,
        span: 4903..4908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 31,
        span: 4908..4909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 169,
        column: 3,
        span: 4910..4912,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 169,
        column: 4,
        span: 4912..4913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 169,
        column: 10,
        span: 4913..4919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 11,
        span: 4919..4920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 169,
        column: 12,
        span: 4920..4921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 13,
        span: 4921..4922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 170,
        column: 15,
        span: 4923..4937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 16,
        span: 4937..4938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 17,
        span: 4938..4939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 172,
        column: 7,
        span: 4941..4947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 8,
        span: 4947..4948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 172,
        column: 10,
        span: 4948..4950,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 172,
        column: 11,
        span: 4950..4951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 172,
        column: 16,
        span: 4951..4956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 17,
        span: 4956..4957,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 172,
        column: 20,
        span: 4957..4960,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 172,
        column: 23,
        span: 4961..4963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 172,
        column: 25,
        span: 4964..4965,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 172,
        column: 28,
        span: 4966..4968,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 172,
        column: 32,
        span: 4969..4972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 33,
        span: 4972..4973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 34,
        span: 4973..4974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 173,
        column: 7,
        span: 4975..4981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 8,
        span: 4981..4982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 173,
        column: 10,
        span: 4982..4984,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 11,
        span: 4984..4985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 173,
        column: 16,
        span: 4985..4990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 17,
        span: 4990..4991,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "';'",
        ),
        line: 173,
        column: 20,
        span: 4991..4994,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 21,
        span: 4994..4995,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'end of file\\n'",
        ),
        line: 173,
        column: 37,
        span: 4996..5011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 38,
        span: 5011..5012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 39,
        span: 5012..5013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 174,
        column: 2,
        span: 5014..5015,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 174,
        column: 3,
        span: 5015..5016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flush",
        ),
        line: 174,
        column: 8,
        span: 5016..5021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 9,
        span: 5021..5022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 10,
        span: 5022..5023,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 174,
        column: 11,
        span: 5023..5024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 174,
        column: 14,
        span: 5025..5027,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 174,
        column: 15,
        span: 5027..5028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "flush",
        ),
        line: 174,
        column: 20,
        span: 5028..5033,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 21,
        span: 5033..5034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 22,
        span: 5034..5035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 175,
        column: 2,
        span: 5036..5037,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 175,
        column: 3,
        span: 5037..5038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 175,
        column: 8,
        span: 5038..5043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 9,
        span: 5043..5044,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 10,
        span: 5044..5045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 176,
        column: 6,
        span: 5046..5051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 7,
        span: 5051..5052,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 176,
        column: 10,
        span: 5052..5055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 11,
        span: 5055..5056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 178,
        column: 3,
        span: 5058..5060,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 178,
        column: 4,
        span: 5060..5061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 178,
        column: 9,
        span: 5061..5066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 10,
        span: 5066..5067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 178,
        column: 14,
        span: 5067..5071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 15,
        span: 5071..5072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 179,
        column: 7,
        span: 5073..5079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 8,
        span: 5079..5080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 179,
        column: 10,
        span: 5080..5082,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 179,
        column: 11,
        span: 5082..5083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 179,
        column: 15,
        span: 5083..5087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 16,
        span: 5087..5088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 17,
        span: 5088..5089,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 179,
        column: 20,
        span: 5090..5092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 179,
        column: 26,
        span: 5093..5098,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 27,
        span: 5098..5099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 180,
        column: 7,
        span: 5100..5106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 8,
        span: 5106..5107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 180,
        column: 10,
        span: 5107..5109,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
        column: 11,
        span: 5109..5110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 180,
        column: 15,
        span: 5110..5114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 16,
        span: 5114..5115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 17,
        span: 5114..5116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 18,
        span: 5116..5117,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 180,
        column: 21,
        span: 5118..5120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 180,
        column: 25,
        span: 5121..5124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 26,
        span: 5124..5125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 181,
        column: 7,
        span: 5126..5132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 8,
        span: 5132..5133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 181,
        column: 10,
        span: 5133..5135,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 181,
        column: 11,
        span: 5135..5136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 181,
        column: 15,
        span: 5136..5140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 16,
        span: 5140..5141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 181,
        column: 22,
        span: 5141..5147,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 181,
        column: 23,
        span: 5147..5148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 181,
        column: 26,
        span: 5148..5151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 27,
        span: 5151..5152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 181,
        column: 28,
        span: 5152..5153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 29,
        span: 5153..5154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 30,
        span: 5154..5155,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 33,
        span: 5156..5158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 181,
        column: 35,
        span: 5159..5160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 36,
        span: 5160..5161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 182,
        column: 7,
        span: 5162..5168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 8,
        span: 5168..5169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 182,
        column: 10,
        span: 5169..5171,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 11,
        span: 5171..5172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 182,
        column: 15,
        span: 5172..5176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 16,
        span: 5176..5177,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 17,
        span: 5176..5178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 18,
        span: 5178..5179,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 182,
        column: 21,
        span: 5180..5182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 182,
        column: 25,
        span: 5183..5186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 26,
        span: 5186..5187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 183,
        column: 7,
        span: 5188..5194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 8,
        span: 5194..5195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 183,
        column: 10,
        span: 5195..5197,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 183,
        column: 11,
        span: 5197..5198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 183,
        column: 15,
        span: 5198..5202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 16,
        span: 5202..5203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 17,
        span: 5202..5204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 18,
        span: 5204..5205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 19,
        span: 5205..5206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 184,
        column: 7,
        span: 5207..5213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 8,
        span: 5213..5214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 184,
        column: 10,
        span: 5214..5216,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 184,
        column: 11,
        span: 5216..5217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 184,
        column: 15,
        span: 5217..5221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 16,
        span: 5221..5222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*a'",
        ),
        line: 184,
        column: 20,
        span: 5222..5226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 21,
        span: 5226..5227,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 184,
        column: 24,
        span: 5228..5230,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "';end of file\\n'",
        ),
        line: 184,
        column: 41,
        span: 5231..5247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 42,
        span: 5247..5248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
        column: 7,
        span: 5249..5255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 8,
        span: 5255..5256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 185,
        column: 10,
        span: 5256..5258,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 11,
        span: 5258..5259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 185,
        column: 15,
        span: 5259..5263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 16,
        span: 5263..5264,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 17,
        span: 5263..5265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 18,
        span: 5265..5266,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 185,
        column: 21,
        span: 5267..5269,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 185,
        column: 25,
        span: 5270..5273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 26,
        span: 5273..5274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 7,
        span: 5275..5281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 8,
        span: 5281..5282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 186,
        column: 10,
        span: 5282..5284,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 11,
        span: 5284..5285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 186,
        column: 16,
        span: 5285..5290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 17,
        span: 5290..5291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 186,
        column: 19,
        span: 5291..5293,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 20,
        span: 5293..5294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 186,
        column: 25,
        span: 5294..5299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 26,
        span: 5299..5300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 27,
        span: 5300..5301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 28,
        span: 5301..5302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 29,
        span: 5302..5303,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 190,
        column: 0,
        span: 5335..5337,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 191,
        column: 8,
        span: 5340..5345,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 191,
        column: 17,
        span: 5346..5354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        line: 191,
        column: 23,
        span: 5355..5360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 25,
        span: 5361..5362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 191,
        column: 26,
        span: 5362..5363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 27,
        span: 5363..5364,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 193,
        column: 11,
        span: 5411..5417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 13,
        span: 5418..5419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 193,
        column: 17,
        span: 5419..5423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 18,
        span: 5423..5424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 193,
        column: 19,
        span: 5424..5425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 20,
        span: 5425..5426,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 193,
        column: 23,
        span: 5427..5429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 193,
        column: 32,
        span: 5430..5438,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 193,
        column: 36,
        span: 5439..5442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 193,
        column: 45,
        span: 5443..5451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 46,
        span: 5451..5452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 193,
        column: 47,
        span: 5452..5453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 48,
        span: 5453..5454,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 193,
        column: 51,
        span: 5455..5457,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 193,
        column: 55,
        span: 5458..5461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 56,
        span: 5461..5462,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 194,
        column: 0,
        span: 5465..5468,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 197,
        column: 8,
        span: 5482..5487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 197,
        column: 10,
        span: 5488..5489,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 197,
        column: 12,
        span: 5490..5491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 197,
        column: 15,
        span: 5492..5494,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 197,
        column: 16,
        span: 5494..5495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 197,
        column: 20,
        span: 5495..5499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 21,
        span: 5499..5500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 197,
        column: 25,
        span: 5500..5504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 197,
        column: 26,
        span: 5504..5505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 197,
        column: 30,
        span: 5506..5509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 31,
        span: 5509..5510,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 198,
        column: 8,
        span: 5513..5518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 198,
        column: 10,
        span: 5519..5520,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 11,
        span: 5520..5521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 198,
        column: 13,
        span: 5522..5523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 14,
        span: 5523..5524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 198,
        column: 16,
        span: 5525..5526,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 18,
        span: 5527..5528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 198,
        column: 20,
        span: 5529..5530,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 198,
        column: 21,
        span: 5530..5531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 198,
        column: 25,
        span: 5531..5535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 26,
        span: 5535..5536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 27,
        span: 5536..5537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 199,
        column: 9,
        span: 5540..5546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 10,
        span: 5546..5547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 199,
        column: 11,
        span: 5547..5548,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 199,
        column: 14,
        span: 5549..5551,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 199,
        column: 18,
        span: 5552..5555,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 199,
        column: 22,
        span: 5556..5559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        line: 199,
        column: 28,
        span: 5560..5565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 29,
        span: 5565..5566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 199,
        column: 30,
        span: 5566..5567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 31,
        span: 5567..5568,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 199,
        column: 35,
        span: 5569..5572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 199,
        column: 40,
        span: 5573..5577,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 41,
        span: 5577..5578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 199,
        column: 42,
        span: 5578..5579,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 43,
        span: 5579..5580,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 199,
        column: 46,
        span: 5581..5583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 199,
        column: 55,
        span: 5584..5592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 56,
        span: 5592..5593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 200,
        column: 9,
        span: 5596..5602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 10,
        span: 5602..5603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 200,
        column: 11,
        span: 5603..5604,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 200,
        column: 12,
        span: 5604..5605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 200,
        column: 17,
        span: 5605..5610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 18,
        span: 5610..5611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 19,
        span: 5611..5612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 20,
        span: 5612..5613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 202,
        column: 4,
        span: 5627..5628,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 202,
        column: 6,
        span: 5629..5630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 202,
        column: 9,
        span: 5631..5633,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 202,
        column: 10,
        span: 5633..5634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 202,
        column: 14,
        span: 5634..5638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 15,
        span: 5638..5639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 202,
        column: 19,
        span: 5639..5643,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 20,
        span: 5643..5644,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 202,
        column: 24,
        span: 5645..5648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 25,
        span: 5648..5649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 203,
        column: 4,
        span: 5652..5653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 5,
        span: 5653..5654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 203,
        column: 7,
        span: 5655..5656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 8,
        span: 5656..5657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 203,
        column: 10,
        span: 5658..5659,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
        column: 12,
        span: 5660..5661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 203,
        column: 14,
        span: 5662..5663,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 203,
        column: 15,
        span: 5663..5664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 203,
        column: 20,
        span: 5664..5669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 21,
        span: 5669..5670,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"whatever\"",
        ),
        line: 203,
        column: 31,
        span: 5670..5680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 32,
        span: 5680..5681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 9,
        span: 5684..5690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 10,
        span: 5690..5691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 204,
        column: 11,
        span: 5691..5692,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 14,
        span: 5693..5695,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 204,
        column: 18,
        span: 5696..5699,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 204,
        column: 22,
        span: 5700..5703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        line: 204,
        column: 28,
        span: 5704..5709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 29,
        span: 5709..5710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 204,
        column: 30,
        span: 5710..5711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 31,
        span: 5711..5712,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 204,
        column: 35,
        span: 5713..5716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 204,
        column: 40,
        span: 5717..5721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 41,
        span: 5721..5722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 204,
        column: 42,
        span: 5722..5723,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 43,
        span: 5723..5724,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 46,
        span: 5725..5727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 204,
        column: 55,
        span: 5728..5736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 56,
        span: 5736..5737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 9,
        span: 5740..5746,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 10,
        span: 5746..5747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 205,
        column: 11,
        span: 5747..5748,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 205,
        column: 12,
        span: 5748..5749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 205,
        column: 17,
        span: 5749..5754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 18,
        span: 5754..5755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 19,
        span: 5755..5756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 20,
        span: 5756..5757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 207,
        column: 4,
        span: 5771..5772,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 207,
        column: 6,
        span: 5773..5774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 207,
        column: 9,
        span: 5775..5777,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 207,
        column: 10,
        span: 5777..5778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 207,
        column: 14,
        span: 5778..5782,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 15,
        span: 5782..5783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 207,
        column: 19,
        span: 5783..5787,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 20,
        span: 5787..5788,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 207,
        column: 24,
        span: 5789..5792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 25,
        span: 5792..5793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 208,
        column: 4,
        span: 5796..5797,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 5,
        span: 5797..5798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 208,
        column: 7,
        span: 5799..5800,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 208,
        column: 9,
        span: 5801..5802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 208,
        column: 15,
        span: 5803..5808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 16,
        span: 5808..5809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 208,
        column: 17,
        span: 5809..5810,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 208,
        column: 18,
        span: 5810..5811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 208,
        column: 23,
        span: 5811..5816,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 24,
        span: 5816..5817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 25,
        span: 5817..5818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 26,
        span: 5818..5819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 209,
        column: 9,
        span: 5822..5828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 10,
        span: 5828..5829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 209,
        column: 11,
        span: 5829..5830,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 209,
        column: 14,
        span: 5831..5833,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 209,
        column: 20,
        span: 5834..5839,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 209,
        column: 24,
        span: 5840..5843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismsg",
        ),
        line: 209,
        column: 30,
        span: 5844..5849,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 31,
        span: 5849..5850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 209,
        column: 32,
        span: 5850..5851,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 33,
        span: 5851..5852,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 34,
        span: 5852..5853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 210,
        column: 9,
        span: 5856..5862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 10,
        span: 5862..5863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 210,
        column: 11,
        span: 5863..5864,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 210,
        column: 12,
        span: 5864..5865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 210,
        column: 17,
        span: 5865..5870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 18,
        span: 5870..5871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 19,
        span: 5871..5872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 20,
        span: 5872..5873,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 211,
        column: 0,
        span: 5874..5877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 213,
        column: 7,
        span: 5879..5885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 8,
        span: 5885..5886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 213,
        column: 10,
        span: 5886..5888,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 213,
        column: 11,
        span: 5888..5889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 213,
        column: 17,
        span: 5889..5895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 18,
        span: 5895..5896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 213,
        column: 22,
        span: 5896..5900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 23,
        span: 5900..5901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 24,
        span: 5901..5902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 216,
        column: 3,
        span: 5926..5928,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 216,
        column: 4,
        span: 5928..5929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 216,
        column: 10,
        span: 5929..5935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 11,
        span: 5935..5936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 216,
        column: 15,
        span: 5936..5940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 16,
        span: 5940..5941,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 216,
        column: 17,
        span: 5941..5942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 216,
        column: 20,
        span: 5943..5945,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 216,
        column: 21,
        span: 5945..5946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 216,
        column: 26,
        span: 5946..5951,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        line: 216,
        column: 43,
        span: 5951..5968,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 216,
        column: 44,
        span: 5968..5969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 216,
        column: 49,
        span: 5969..5974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 50,
        span: 5974..5975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 51,
        span: 5975..5976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 217,
        column: 3,
        span: 5977..5979,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 217,
        column: 4,
        span: 5979..5980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 217,
        column: 9,
        span: 5980..5985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 10,
        span: 5985..5986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 217,
        column: 14,
        span: 5986..5990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 15,
        span: 5990..5991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 218,
        column: 7,
        span: 5992..5998,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 8,
        span: 5998..5999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 218,
        column: 10,
        span: 5999..6001,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 218,
        column: 11,
        span: 6001..6002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 218,
        column: 15,
        span: 6002..6006,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*L\"",
        ),
        line: 218,
        column: 19,
        span: 6006..6010,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 218,
        column: 22,
        span: 6011..6013,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 218,
        column: 27,
        span: 6014..6018,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 28,
        span: 6018..6019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 219,
        column: 7,
        span: 6020..6026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 8,
        span: 6026..6027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 219,
        column: 10,
        span: 6027..6029,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 219,
        column: 11,
        span: 6029..6030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 219,
        column: 15,
        span: 6030..6034,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*L\"",
        ),
        line: 219,
        column: 19,
        span: 6034..6038,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 219,
        column: 22,
        span: 6039..6041,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 219,
        column: 27,
        span: 6042..6046,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 28,
        span: 6046..6047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 220,
        column: 7,
        span: 6048..6054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 8,
        span: 6054..6055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 220,
        column: 10,
        span: 6055..6057,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 220,
        column: 11,
        span: 6057..6058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 220,
        column: 15,
        span: 6058..6062,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*L\"",
        ),
        line: 220,
        column: 19,
        span: 6062..6066,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 220,
        column: 22,
        span: 6067..6069,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\\n\"",
        ),
        line: 220,
        column: 31,
        span: 6070..6078,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 32,
        span: 6078..6079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 7,
        span: 6080..6086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 8,
        span: 6086..6087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 221,
        column: 10,
        span: 6087..6089,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 11,
        span: 6089..6090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 221,
        column: 15,
        span: 6090..6094,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*L\"",
        ),
        line: 221,
        column: 19,
        span: 6094..6098,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
        column: 22,
        span: 6099..6101,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"other\"",
        ),
        line: 221,
        column: 30,
        span: 6102..6109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 31,
        span: 6109..6110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 222,
        column: 7,
        span: 6111..6117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 8,
        span: 6117..6118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 222,
        column: 10,
        span: 6118..6120,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 11,
        span: 6120..6121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 222,
        column: 15,
        span: 6121..6125,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*L\"",
        ),
        line: 222,
        column: 19,
        span: 6125..6129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 222,
        column: 22,
        span: 6130..6132,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 222,
        column: 26,
        span: 6133..6136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 27,
        span: 6136..6137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 223,
        column: 3,
        span: 6138..6140,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 223,
        column: 4,
        span: 6140..6141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 223,
        column: 9,
        span: 6141..6146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 10,
        span: 6146..6147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 11,
        span: 6147..6148,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 223,
        column: 12,
        span: 6148..6149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 223,
        column: 17,
        span: 6149..6154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 18,
        span: 6154..6155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 19,
        span: 6155..6156,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 225,
        column: 6,
        span: 6158..6163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 225,
        column: 8,
        span: 6164..6165,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 225,
        column: 10,
        span: 6166..6167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
        column: 17,
        span: 6168..6174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 18,
        span: 6174..6175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 225,
        column: 20,
        span: 6175..6177,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 225,
        column: 21,
        span: 6177..6178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 225,
        column: 25,
        span: 6178..6182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 26,
        span: 6182..6183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 225,
        column: 30,
        span: 6183..6187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 31,
        span: 6187..6188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 32,
        span: 6188..6189,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 226,
        column: 6,
        span: 6190..6195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 226,
        column: 8,
        span: 6196..6197,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
        column: 10,
        span: 6198..6199,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 226,
        column: 13,
        span: 6200..6202,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 227,
        column: 4,
        span: 6203..6206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 227,
        column: 6,
        span: 6207..6208,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 227,
        column: 9,
        span: 6209..6211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 227,
        column: 11,
        span: 6212..6213,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 227,
        column: 12,
        span: 6213..6214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 227,
        column: 17,
        span: 6214..6219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 18,
        span: 6219..6220,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*L\"",
        ),
        line: 227,
        column: 22,
        span: 6220..6224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 23,
        span: 6224..6225,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 227,
        column: 26,
        span: 6226..6228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 227,
        column: 28,
        span: 6229..6230,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 227,
        column: 30,
        span: 6231..6232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 227,
        column: 32,
        span: 6233..6234,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 227,
        column: 35,
        span: 6235..6237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 227,
        column: 37,
        span: 6238..6239,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 227,
        column: 0,
        span: 6240..6243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 228,
        column: 7,
        span: 6244..6250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 8,
        span: 6250..6251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 228,
        column: 9,
        span: 6251..6252,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 228,
        column: 12,
        span: 6253..6255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        line: 228,
        column: 30,
        span: 6256..6273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 31,
        span: 6273..6274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 229,
        column: 2,
        span: 6275..6276,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 229,
        column: 3,
        span: 6276..6277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 229,
        column: 8,
        span: 6277..6282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 9,
        span: 6282..6283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 10,
        span: 6283..6284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 231,
        column: 3,
        span: 6286..6288,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 231,
        column: 4,
        span: 6288..6289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 231,
        column: 9,
        span: 6289..6294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 10,
        span: 6294..6295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 231,
        column: 14,
        span: 6295..6299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 15,
        span: 6299..6300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 232,
        column: 2,
        span: 6301..6302,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 232,
        column: 4,
        span: 6303..6304,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 232,
        column: 7,
        span: 6305..6307,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 233,
        column: 4,
        span: 6308..6311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 233,
        column: 6,
        span: 6312..6313,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 233,
        column: 9,
        span: 6314..6316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 233,
        column: 12,
        span: 6317..6319,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 233,
        column: 13,
        span: 6319..6320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 233,
        column: 18,
        span: 6320..6325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 19,
        span: 6325..6326,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 233,
        column: 22,
        span: 6326..6329,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 23,
        span: 6329..6330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*L\"",
        ),
        line: 233,
        column: 28,
        span: 6331..6335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 29,
        span: 6335..6336,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 233,
        column: 32,
        span: 6337..6339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 233,
        column: 34,
        span: 6340..6341,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 36,
        span: 6342..6343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 233,
        column: 38,
        span: 6344..6345,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 233,
        column: 41,
        span: 6346..6348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 233,
        column: 43,
        span: 6349..6350,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 233,
        column: 0,
        span: 6351..6354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
        column: 7,
        span: 6355..6361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 8,
        span: 6361..6362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 234,
        column: 9,
        span: 6362..6363,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 234,
        column: 12,
        span: 6364..6366,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        line: 234,
        column: 30,
        span: 6367..6384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 31,
        span: 6384..6385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 235,
        column: 3,
        span: 6386..6388,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 235,
        column: 4,
        span: 6388..6389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 235,
        column: 9,
        span: 6389..6394,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 10,
        span: 6394..6395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 11,
        span: 6395..6396,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 235,
        column: 12,
        span: 6396..6397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 235,
        column: 17,
        span: 6397..6402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 18,
        span: 6402..6403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 19,
        span: 6403..6404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 237,
        column: 2,
        span: 6406..6407,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 237,
        column: 4,
        span: 6408..6409,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 237,
        column: 7,
        span: 6410..6412,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 238,
        column: 4,
        span: 6413..6416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 238,
        column: 6,
        span: 6417..6418,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 238,
        column: 9,
        span: 6419..6421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 238,
        column: 12,
        span: 6422..6424,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 238,
        column: 13,
        span: 6424..6425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 238,
        column: 18,
        span: 6425..6430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 19,
        span: 6430..6431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 238,
        column: 23,
        span: 6431..6435,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 24,
        span: 6435..6436,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*L\"",
        ),
        line: 238,
        column: 29,
        span: 6437..6441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 30,
        span: 6441..6442,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 238,
        column: 33,
        span: 6443..6445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 238,
        column: 35,
        span: 6446..6447,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 238,
        column: 37,
        span: 6448..6449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 238,
        column: 39,
        span: 6450..6451,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 238,
        column: 42,
        span: 6452..6454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 238,
        column: 44,
        span: 6455..6456,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 238,
        column: 0,
        span: 6457..6460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 7,
        span: 6461..6467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 8,
        span: 6467..6468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 239,
        column: 9,
        span: 6468..6469,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 239,
        column: 12,
        span: 6470..6472,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\nline\\nother\"",
        ),
        line: 239,
        column: 30,
        span: 6473..6490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 31,
        span: 6490..6491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 241,
        column: 2,
        span: 6493..6494,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 241,
        column: 4,
        span: 6495..6496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 241,
        column: 7,
        span: 6497..6499,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 242,
        column: 4,
        span: 6500..6503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 242,
        column: 6,
        span: 6504..6505,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 242,
        column: 9,
        span: 6506..6508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 242,
        column: 12,
        span: 6509..6511,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 242,
        column: 13,
        span: 6511..6512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 242,
        column: 18,
        span: 6512..6517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 19,
        span: 6517..6518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 242,
        column: 23,
        span: 6518..6522,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 24,
        span: 6522..6523,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*l\"",
        ),
        line: 242,
        column: 29,
        span: 6524..6528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 30,
        span: 6528..6529,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 242,
        column: 33,
        span: 6530..6532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 242,
        column: 35,
        span: 6533..6534,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 242,
        column: 37,
        span: 6535..6536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 242,
        column: 39,
        span: 6537..6538,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 242,
        column: 42,
        span: 6539..6541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 242,
        column: 44,
        span: 6542..6543,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 242,
        column: 0,
        span: 6544..6547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
        column: 7,
        span: 6548..6554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 8,
        span: 6554..6555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 243,
        column: 9,
        span: 6555..6556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 243,
        column: 12,
        span: 6557..6559,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lineother\"",
        ),
        line: 243,
        column: 24,
        span: 6560..6571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 25,
        span: 6571..6572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 245,
        column: 3,
        span: 6574..6576,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
        column: 4,
        span: 6576..6577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 245,
        column: 10,
        span: 6577..6583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 11,
        span: 6583..6584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 245,
        column: 15,
        span: 6584..6588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 16,
        span: 6588..6589,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 245,
        column: 17,
        span: 6589..6590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 245,
        column: 20,
        span: 6591..6593,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
        column: 21,
        span: 6593..6594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 245,
        column: 26,
        span: 6594..6599,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 10 + 34\\na = 2*a\\na = -a\\n\"",
        ),
        line: 245,
        column: 58,
        span: 6599..6631,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 245,
        column: 59,
        span: 6631..6632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 245,
        column: 64,
        span: 6632..6637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 65,
        span: 6637..6638,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 66,
        span: 6638..6639,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 246,
        column: 6,
        span: 6640..6645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 246,
        column: 8,
        span: 6646..6647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 10,
        span: 6648..6649,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 246,
        column: 12,
        span: 6650..6651,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 246,
        column: 13,
        span: 6651..6652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 247,
        column: 5,
        span: 6653..6657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 6,
        span: 6657..6658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 247,
        column: 8,
        span: 6658..6660,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 247,
        column: 9,
        span: 6660..6661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 247,
        column: 14,
        span: 6661..6666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 15,
        span: 6666..6667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 247,
        column: 19,
        span: 6667..6671,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 20,
        span: 6671..6672,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*L\"",
        ),
        line: 247,
        column: 25,
        span: 6673..6677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 26,
        span: 6677..6678,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 27,
        span: 6678..6679,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 247,
        column: 31,
        span: 6680..6683,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 32,
        span: 6683..6684,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 247,
        column: 36,
        span: 6685..6688,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 37,
        span: 6688..6689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 247,
        column: 39,
        span: 6690..6691,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 40,
        span: 6691..6692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 41,
        span: 6692..6693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 42,
        span: 6693..6694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
        column: 7,
        span: 6695..6701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 8,
        span: 6701..6702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 248,
        column: 9,
        span: 6702..6703,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 248,
        column: 10,
        span: 6703..6704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 248,
        column: 11,
        span: 6704..6705,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
        column: 14,
        span: 6706..6708,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 248,
        column: 16,
        span: 6709..6710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 17,
        span: 6710..6711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 18,
        span: 6711..6712,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 20,
        span: 6711..6714,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 248,
        column: 22,
        span: 6715..6716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 25,
        span: 6716..6719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 26,
        span: 6719..6720,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 248,
        column: 28,
        span: 6721..6722,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 30,
        span: 6722..6724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 31,
        span: 6724..6725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 32,
        span: 6725..6726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 252,
        column: 3,
        span: 6770..6772,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
        column: 4,
        span: 6772..6773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 252,
        column: 10,
        span: 6773..6779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 11,
        span: 6779..6780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 252,
        column: 15,
        span: 6780..6784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 16,
        span: 6784..6785,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 252,
        column: 17,
        span: 6785..6786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 252,
        column: 20,
        span: 6787..6789,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
        column: 21,
        span: 6789..6790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 252,
        column: 26,
        span: 6790..6795,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456789\\n\"",
        ),
        line: 252,
        column: 40,
        span: 6795..6809,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 252,
        column: 41,
        span: 6809..6810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 252,
        column: 46,
        span: 6810..6815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 47,
        span: 6815..6816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 48,
        span: 6816..6817,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 253,
        column: 4,
        span: 6818..6821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 253,
        column: 6,
        span: 6822..6823,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 7,
        span: 6823..6824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 253,
        column: 8,
        span: 6824..6825,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 253,
        column: 11,
        span: 6826..6828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 253,
        column: 14,
        span: 6829..6831,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 15,
        span: 6831..6832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 253,
        column: 20,
        span: 6832..6837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 21,
        span: 6837..6838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 253,
        column: 25,
        span: 6838..6842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 26,
        span: 6842..6843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 28,
        span: 6843..6845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 29,
        span: 6845..6846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 31,
        span: 6846..6848,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 32,
        span: 6848..6849,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 253,
        column: 0,
        span: 6850..6852,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 254,
        column: 5,
        span: 6855..6857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 254,
        column: 7,
        span: 6858..6859,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 254,
        column: 10,
        span: 6860..6862,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 254,
        column: 15,
        span: 6863..6867,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 254,
        column: 20,
        span: 6868..6872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 27,
        span: 6873..6879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 28,
        span: 6879..6880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 254,
        column: 29,
        span: 6880..6881,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 254,
        column: 32,
        span: 6882..6884,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 254,
        column: 36,
        span: 6885..6888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 37,
        span: 6888..6889,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 255,
        column: 7,
        span: 6892..6896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
        column: 14,
        span: 6897..6903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 15,
        span: 6903..6904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 255,
        column: 23,
        span: 6904..6912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 24,
        span: 6912..6913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 255,
        column: 25,
        span: 6913..6914,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 26,
        span: 6914..6915,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 255,
        column: 29,
        span: 6916..6918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 255,
        column: 31,
        span: 6919..6920,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 255,
        column: 33,
        span: 6921..6922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 35,
        span: 6922..6924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 36,
        span: 6924..6925,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 256,
        column: 0,
        span: 6928..6931,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 257,
        column: 0,
        span: 6932..6935,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 259,
        column: 4,
        span: 6937..6940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 259,
        column: 6,
        span: 6941..6942,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 7,
        span: 6942..6943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 259,
        column: 8,
        span: 6943..6944,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 9,
        span: 6944..6945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 259,
        column: 10,
        span: 6945..6946,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 259,
        column: 13,
        span: 6947..6949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 259,
        column: 16,
        span: 6950..6952,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 259,
        column: 17,
        span: 6952..6953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 259,
        column: 22,
        span: 6953..6958,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 23,
        span: 6958..6959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 259,
        column: 27,
        span: 6959..6963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 28,
        span: 6963..6964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 30,
        span: 6964..6966,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 31,
        span: 6966..6967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 33,
        span: 6967..6969,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 34,
        span: 6969..6970,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a\"",
        ),
        line: 259,
        column: 39,
        span: 6971..6975,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 40,
        span: 6975..6976,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 259,
        column: 0,
        span: 6977..6979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 260,
        column: 9,
        span: 6982..6988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 10,
        span: 6988..6989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 260,
        column: 11,
        span: 6989..6990,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 260,
        column: 14,
        span: 6991..6993,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 260,
        column: 18,
        span: 6994..6997,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 260,
        column: 22,
        span: 6998..7001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 260,
        column: 24,
        span: 7002..7003,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 260,
        column: 27,
        span: 7004..7006,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        line: 260,
        column: 32,
        span: 7007..7011,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 260,
        column: 36,
        span: 7012..7015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 260,
        column: 38,
        span: 7016..7017,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 260,
        column: 41,
        span: 7018..7020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3456789\\n\"",
        ),
        line: 260,
        column: 53,
        span: 7021..7032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 54,
        span: 7032..7033,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 261,
        column: 0,
        span: 7034..7037,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 263,
        column: 4,
        span: 7039..7042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 263,
        column: 6,
        span: 7043..7044,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 7,
        span: 7044..7045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 263,
        column: 8,
        span: 7045..7046,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 9,
        span: 7046..7047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 263,
        column: 10,
        span: 7047..7048,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 263,
        column: 13,
        span: 7049..7051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 263,
        column: 16,
        span: 7052..7054,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 263,
        column: 17,
        span: 7054..7055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 263,
        column: 22,
        span: 7055..7060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 23,
        span: 7060..7061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 263,
        column: 27,
        span: 7061..7065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 28,
        span: 7065..7066,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a\"",
        ),
        line: 263,
        column: 33,
        span: 7067..7071,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 34,
        span: 7071..7072,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 36,
        span: 7072..7074,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 263,
        column: 37,
        span: 7074..7075,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 263,
        column: 39,
        span: 7075..7077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 40,
        span: 7077..7078,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 263,
        column: 0,
        span: 7079..7081,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 264,
        column: 5,
        span: 7084..7086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 264,
        column: 7,
        span: 7087..7088,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 264,
        column: 10,
        span: 7089..7091,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 264,
        column: 13,
        span: 7092..7094,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 264,
        column: 18,
        span: 7095..7099,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 264,
        column: 24,
        span: 7100..7105,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 264,
        column: 0,
        span: 7106..7109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
        column: 9,
        span: 7112..7118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 10,
        span: 7118..7119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 265,
        column: 11,
        span: 7119..7120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
        column: 14,
        span: 7121..7123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456789\\n\"",
        ),
        line: 265,
        column: 29,
        span: 7124..7138,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 265,
        column: 33,
        span: 7139..7142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 265,
        column: 35,
        span: 7143..7144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
        column: 38,
        span: 7145..7147,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 265,
        column: 42,
        span: 7148..7151,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 265,
        column: 46,
        span: 7152..7155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 265,
        column: 48,
        span: 7156..7157,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 265,
        column: 51,
        span: 7158..7160,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 265,
        column: 55,
        span: 7161..7164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 56,
        span: 7164..7165,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 266,
        column: 0,
        span: 7166..7169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 267,
        column: 15,
        span: 7170..7184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 16,
        span: 7184..7185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 17,
        span: 7185..7186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 269,
        column: 3,
        span: 7229..7231,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 4,
        span: 7231..7232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 269,
        column: 10,
        span: 7232..7238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 11,
        span: 7238..7239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 269,
        column: 15,
        span: 7239..7243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 16,
        span: 7243..7244,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 269,
        column: 17,
        span: 7244..7245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 269,
        column: 20,
        span: 7246..7248,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 21,
        span: 7248..7249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 269,
        column: 26,
        span: 7249..7254,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"00\\n10\\n20\\n30\\n40\\n\"",
        ),
        line: 269,
        column: 48,
        span: 7254..7276,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 269,
        column: 49,
        span: 7276..7277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 269,
        column: 54,
        span: 7277..7282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 55,
        span: 7282..7283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 56,
        span: 7283..7284,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 270,
        column: 4,
        span: 7285..7288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 270,
        column: 6,
        span: 7289..7290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 7,
        span: 7290..7291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 270,
        column: 9,
        span: 7292..7293,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 270,
        column: 12,
        span: 7294..7296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 270,
        column: 15,
        span: 7297..7299,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
        column: 16,
        span: 7299..7300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 270,
        column: 21,
        span: 7300..7305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 22,
        span: 7305..7306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 270,
        column: 26,
        span: 7306..7310,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 27,
        span: 7310..7311,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*n\"",
        ),
        line: 270,
        column: 32,
        span: 7312..7316,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 33,
        span: 7316..7317,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*n\"",
        ),
        line: 270,
        column: 38,
        span: 7318..7322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 39,
        span: 7322..7323,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 270,
        column: 0,
        span: 7324..7326,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 271,
        column: 5,
        span: 7329..7331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 271,
        column: 7,
        span: 7332..7333,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
        column: 10,
        span: 7334..7336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 13,
        span: 7336..7339,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 271,
        column: 18,
        span: 7340..7344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
        column: 25,
        span: 7345..7351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 26,
        span: 7351..7352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 271,
        column: 27,
        span: 7352..7353,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
        column: 30,
        span: 7354..7356,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 271,
        column: 34,
        span: 7357..7360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 35,
        span: 7360..7361,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 272,
        column: 7,
        span: 7364..7368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 272,
        column: 14,
        span: 7369..7375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 15,
        span: 7375..7376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 272,
        column: 16,
        span: 7376..7377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 272,
        column: 19,
        span: 7378..7380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 272,
        column: 21,
        span: 7381..7382,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 272,
        column: 23,
        span: 7383..7384,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 272,
        column: 26,
        span: 7384..7387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 27,
        span: 7387..7388,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 273,
        column: 0,
        span: 7391..7394,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 274,
        column: 0,
        span: 7395..7398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 278,
        column: 3,
        span: 7422..7424,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 4,
        span: 7424..7425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 278,
        column: 10,
        span: 7425..7431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 11,
        span: 7431..7432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 278,
        column: 15,
        span: 7432..7436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 16,
        span: 7436..7437,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 278,
        column: 17,
        span: 7437..7438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 279,
        column: 3,
        span: 7439..7441,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 279,
        column: 4,
        span: 7441..7442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 279,
        column: 9,
        span: 7442..7447,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal y\n= X\nX =\nX *\n2 +\nX;\nX =\nX\n-                                   y;\n]]",
        ),
        line: 289,
        column: 3,
        span: 7447..7524,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 289,
        column: 4,
        span: 7524..7525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 289,
        column: 9,
        span: 7525..7530,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 10,
        span: 7530..7531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 11,
        span: 7531..7532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 290,
        column: 3,
        span: 7533..7535,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 290,
        column: 4,
        span: 7535..7536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 290,
        column: 5,
        span: 7536..7537,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 290,
        column: 7,
        span: 7538..7539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
        column: 0,
        span: 7539..7541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 291,
        column: 7,
        span: 7542..7548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 8,
        span: 7548..7549,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 291,
        column: 11,
        span: 7549..7552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 291,
        column: 16,
        span: 7553..7557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 17,
        span: 7557..7558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 291,
        column: 19,
        span: 7558..7560,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 291,
        column: 20,
        span: 7560..7561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 291,
        column: 25,
        span: 7561..7566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 26,
        span: 7566..7567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 291,
        column: 30,
        span: 7567..7571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 31,
        span: 7571..7572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 32,
        span: 7572..7573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 33,
        span: 7573..7574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 292,
        column: 15,
        span: 7575..7589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 16,
        span: 7589..7590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 17,
        span: 7590..7591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 293,
        column: 5,
        span: 7633..7637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 6,
        span: 7637..7638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 293,
        column: 8,
        span: 7638..7640,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 293,
        column: 9,
        span: 7640..7641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 293,
        column: 14,
        span: 7641..7646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 15,
        span: 7646..7647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 293,
        column: 19,
        span: 7647..7651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 20,
        span: 7651..7652,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*L\"",
        ),
        line: 293,
        column: 25,
        span: 7653..7657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 26,
        span: 7657..7658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 27,
        span: 7658..7659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 28,
        span: 7659..7660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 29,
        span: 7660..7661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 294,
        column: 7,
        span: 7662..7668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 8,
        span: 7668..7669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 294,
        column: 10,
        span: 7669..7671,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 294,
        column: 11,
        span: 7671..7672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 294,
        column: 12,
        span: 7672..7673,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 294,
        column: 15,
        span: 7674..7676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
        column: 17,
        span: 7676..7678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 18,
        span: 7678..7679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 295,
        column: 5,
        span: 7680..7684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 6,
        span: 7684..7685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 295,
        column: 8,
        span: 7685..7687,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 295,
        column: 9,
        span: 7687..7688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 295,
        column: 14,
        span: 7688..7693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 15,
        span: 7693..7694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 295,
        column: 19,
        span: 7694..7698,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 295,
        column: 20,
        span: 7698..7699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 22,
        span: 7699..7701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 23,
        span: 7701..7702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 24,
        span: 7702..7703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 25,
        span: 7703..7704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 26,
        span: 7704..7705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 296,
        column: 7,
        span: 7706..7712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 8,
        span: 7712..7713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 296,
        column: 10,
        span: 7713..7715,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 296,
        column: 11,
        span: 7715..7716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 296,
        column: 12,
        span: 7716..7717,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 296,
        column: 15,
        span: 7718..7720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 296,
        column: 17,
        span: 7720..7722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 18,
        span: 7722..7723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 297,
        column: 5,
        span: 7724..7728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 6,
        span: 7728..7729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 297,
        column: 8,
        span: 7729..7731,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 297,
        column: 9,
        span: 7731..7732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lines",
        ),
        line: 297,
        column: 14,
        span: 7732..7737,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 15,
        span: 7737..7738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 297,
        column: 19,
        span: 7738..7742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 297,
        column: 20,
        span: 7742..7743,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 22,
        span: 7743..7745,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 23,
        span: 7745..7746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 24,
        span: 7746..7747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 25,
        span: 7747..7748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 26,
        span: 7748..7749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
        column: 7,
        span: 7750..7756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 8,
        span: 7756..7757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 298,
        column: 10,
        span: 7757..7759,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 11,
        span: 7759..7760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 298,
        column: 12,
        span: 7760..7761,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 15,
        span: 7762..7764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 17,
        span: 7764..7766,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 18,
        span: 7766..7767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 300,
        column: 6,
        span: 7769..7774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 7,
        span: 7774..7775,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 300,
        column: 10,
        span: 7775..7778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 11,
        span: 7778..7779,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 302,
        column: 6,
        span: 7781..7786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 302,
        column: 9,
        span: 7787..7789,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 302,
        column: 11,
        span: 7790..7791,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\\n\\n\\\\com \\\"\\\"''coisas [[estranhas]] ]]'\"",
        ),
        line: 302,
        column: 60,
        span: 7792..7840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 303,
        column: 3,
        span: 7841..7843,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 303,
        column: 4,
        span: 7843..7844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 303,
        column: 10,
        span: 7844..7850,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 11,
        span: 7850..7851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 303,
        column: 15,
        span: 7851..7855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 16,
        span: 7855..7856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 304,
        column: 7,
        span: 7857..7863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 8,
        span: 7863..7864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 304,
        column: 10,
        span: 7864..7866,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 304,
        column: 11,
        span: 7866..7867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 304,
        column: 16,
        span: 7867..7872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 17,
        span: 7872..7873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 304,
        column: 23,
        span: 7873..7879,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 304,
        column: 24,
        span: 7879..7880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 304,
        column: 30,
        span: 7880..7886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 31,
        span: 7886..7887,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x2 = %q\\n-- comment without ending EOS\"",
        ),
        line: 304,
        column: 71,
        span: 7887..7927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 304,
        column: 72,
        span: 7927..7928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 304,
        column: 75,
        span: 7929..7931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 76,
        span: 7931..7932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 77,
        span: 7932..7933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 78,
        span: 7933..7934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 305,
        column: 3,
        span: 7935..7937,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 305,
        column: 4,
        span: 7937..7938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 305,
        column: 9,
        span: 7938..7943,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 10,
        span: 7943..7944,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 11,
        span: 7944..7945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 306,
        column: 7,
        span: 7946..7952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 8,
        span: 7952..7953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 306,
        column: 16,
        span: 7953..7961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 17,
        span: 7961..7962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 306,
        column: 21,
        span: 7962..7966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 22,
        span: 7966..7967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 23,
        span: 7967..7968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 24,
        span: 7968..7969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 25,
        span: 7969..7970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 307,
        column: 7,
        span: 7971..7977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 8,
        span: 7977..7978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 307,
        column: 10,
        span: 7978..7980,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 307,
        column: 13,
        span: 7981..7983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 307,
        column: 16,
        span: 7984..7986,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 17,
        span: 7986..7987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 308,
        column: 6,
        span: 7988..7993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 7,
        span: 7993..7994,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 308,
        column: 10,
        span: 7994..7997,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 11,
        span: 7997..7998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 309,
        column: 7,
        span: 7999..8005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 8,
        span: 8005..8006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 309,
        column: 10,
        span: 8006..8008,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 309,
        column: 11,
        span: 8008..8009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 309,
        column: 17,
        span: 8009..8015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 18,
        span: 8015..8016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 309,
        column: 22,
        span: 8016..8020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 23,
        span: 8020..8021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 24,
        span: 8021..8022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 310,
        column: 7,
        span: 8023..8029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 8,
        span: 8029..8030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 310,
        column: 10,
        span: 8030..8032,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 310,
        column: 11,
        span: 8032..8033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 310,
        column: 17,
        span: 8033..8039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 18,
        span: 8039..8040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 310,
        column: 22,
        span: 8040..8044,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 23,
        span: 8044..8045,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 310,
        column: 26,
        span: 8046..8048,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 310,
        column: 30,
        span: 8049..8052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 31,
        span: 8052..8053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 311,
        column: 7,
        span: 8054..8060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 8,
        span: 8060..8061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 311,
        column: 10,
        span: 8061..8063,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 311,
        column: 11,
        span: 8063..8064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 311,
        column: 17,
        span: 8064..8070,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 18,
        span: 8070..8071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 311,
        column: 27,
        span: 8071..8080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 28,
        span: 8080..8081,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 311,
        column: 31,
        span: 8082..8084,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 311,
        column: 35,
        span: 8085..8088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 36,
        span: 8088..8089,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 314,
        column: 6,
        span: 8111..8116,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 314,
        column: 15,
        span: 8117..8125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 314,
        column: 28,
        span: 8126..8138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 30,
        span: 8139..8140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 314,
        column: 31,
        span: 8140..8141,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 314,
        column: 32,
        span: 8141..8142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expres",
        ),
        line: 314,
        column: 39,
        span: 8143..8149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 40,
        span: 8149..8150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 315,
        column: 5,
        span: 8153..8155,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 315,
        column: 6,
        span: 8155..8156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 315,
        column: 12,
        span: 8156..8162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 13,
        span: 8162..8163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 315,
        column: 17,
        span: 8163..8167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 18,
        span: 8167..8168,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 316,
        column: 5,
        span: 8171..8173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 316,
        column: 7,
        span: 8174..8175,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 316,
        column: 12,
        span: 8176..8180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 316,
        column: 15,
        span: 8181..8183,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 316,
        column: 16,
        span: 8183..8184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 316,
        column: 21,
        span: 8184..8189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 22,
        span: 8189..8190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 316,
        column: 23,
        span: 8190..8191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 24,
        span: 8191..8192,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 316,
        column: 0,
        span: 8193..8196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 317,
        column: 5,
        span: 8199..8201,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 317,
        column: 6,
        span: 8201..8202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 317,
        column: 11,
        span: 8202..8207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 12,
        span: 8207..8208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 13,
        span: 8208..8209,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 318,
        column: 8,
        span: 8212..8217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 318,
        column: 12,
        span: 8218..8221,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 318,
        column: 14,
        span: 8222..8223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 318,
        column: 21,
        span: 8224..8230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 22,
        span: 8230..8231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 318,
        column: 30,
        span: 8231..8239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 31,
        span: 8239..8240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 318,
        column: 35,
        span: 8240..8244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 36,
        span: 8244..8245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 37,
        span: 8245..8246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 38,
        span: 8246..8247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 39,
        span: 8247..8248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 319,
        column: 9,
        span: 8251..8257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 10,
        span: 8257..8258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 319,
        column: 12,
        span: 8258..8260,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 319,
        column: 13,
        span: 8260..8261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 319,
        column: 19,
        span: 8261..8267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 20,
        span: 8267..8268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 319,
        column: 24,
        span: 8268..8272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 25,
        span: 8272..8273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 26,
        span: 8273..8274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 320,
        column: 9,
        span: 8277..8283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 10,
        span: 8283..8284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 320,
        column: 13,
        span: 8284..8287,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 320,
        column: 16,
        span: 8288..8290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expres",
        ),
        line: 320,
        column: 23,
        span: 8291..8297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 24,
        span: 8297..8298,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 321,
        column: 0,
        span: 8299..8302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 324,
        column: 13,
        span: 8326..8338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 14,
        span: 8338..8339,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 324,
        column: 17,
        span: 8339..8342,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 324,
        column: 18,
        span: 8342..8343,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 324,
        column: 22,
        span: 8344..8347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 23,
        span: 8347..8348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 327,
        column: 13,
        span: 8407..8419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 14,
        span: 8419..8420,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"# a non-ending comment\"",
        ),
        line: 327,
        column: 38,
        span: 8420..8444,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 39,
        span: 8444..8445,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 327,
        column: 43,
        span: 8446..8449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 44,
        span: 8449..8450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 331,
        column: 13,
        span: 8486..8498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 14,
        span: 8498..8499,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEF\\xBB\\xBF# some comment\\nreturn 234\"",
        ),
        line: 331,
        column: 54,
        span: 8499..8539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 331,
        column: 55,
        span: 8539..8540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
        column: 59,
        span: 8540..8544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 60,
        span: 8544..8545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 332,
        column: 13,
        span: 8546..8558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 14,
        span: 8558..8559,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEF\\xBB\\xBFreturn 239\"",
        ),
        line: 332,
        column: 38,
        span: 8559..8583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 332,
        column: 39,
        span: 8583..8584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "239",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 43,
        span: 8584..8588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 44,
        span: 8588..8589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 333,
        column: 13,
        span: 8590..8602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 14,
        span: 8602..8603,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xEF\\xBB\\xBF\"",
        ),
        line: 333,
        column: 28,
        span: 8603..8617,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 333,
        column: 29,
        span: 8617..8618,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 333,
        column: 33,
        span: 8619..8622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 34,
        span: 8622..8623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testloadfile",
        ),
        line: 337,
        column: 13,
        span: 8709..8721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 14,
        span: 8721..8722,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"# a comment\\nreturn debug.getinfo(1).currentline\"",
        ),
        line: 337,
        column: 64,
        span: 8722..8772,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 337,
        column: 65,
        span: 8772..8773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 337,
        column: 67,
        span: 8773..8775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 68,
        span: 8775..8776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 341,
        column: 3,
        span: 8802..8804,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 341,
        column: 4,
        span: 8804..8805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 341,
        column: 10,
        span: 8805..8811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 11,
        span: 8811..8812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 341,
        column: 13,
        span: 8812..8814,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 341,
        column: 14,
        span: 8814..8815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 341,
        column: 18,
        span: 8815..8819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 19,
        span: 8819..8820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 341,
        column: 23,
        span: 8820..8824,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 341,
        column: 24,
        span: 8824..8825,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wb\"",
        ),
        line: 341,
        column: 29,
        span: 8826..8830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 30,
        span: 8830..8831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 31,
        span: 8831..8832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
        column: 7,
        span: 8833..8839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 8,
        span: 8839..8840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 342,
        column: 10,
        span: 8840..8842,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
        column: 11,
        span: 8842..8843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 342,
        column: 16,
        span: 8843..8848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 17,
        span: 8848..8849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 342,
        column: 23,
        span: 8849..8855,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
        column: 24,
        span: 8855..8856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 342,
        column: 28,
        span: 8856..8860,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 29,
        span: 8860..8861,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 342,
        column: 37,
        span: 8861..8869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 39,
        span: 8870..8871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 40,
        span: 8871..8872,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 342,
        column: 47,
        span: 8873..8879,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 50,
        span: 8879..8882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 51,
        span: 8882..8883,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0alo\\255'",
        ),
        line: 342,
        column: 63,
        span: 8884..8895,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 64,
        span: 8895..8896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        line: 342,
        column: 69,
        span: 8897..8901,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 342,
        column: 73,
        span: 8902..8905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 74,
        span: 8905..8906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 75,
        span: 8906..8907,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 76,
        span: 8907..8908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 343,
        column: 3,
        span: 8909..8911,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
        column: 4,
        span: 8911..8912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 343,
        column: 9,
        span: 8912..8917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 10,
        span: 8917..8918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 11,
        span: 8918..8919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 344,
        column: 2,
        span: 8920..8921,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 344,
        column: 3,
        span: 8921..8922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 344,
        column: 5,
        span: 8923..8924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 344,
        column: 6,
        span: 8924..8925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 344,
        column: 8,
        span: 8926..8927,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 344,
        column: 10,
        span: 8928..8929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 344,
        column: 17,
        span: 8930..8936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 18,
        span: 8936..8937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 344,
        column: 26,
        span: 8937..8945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 27,
        span: 8945..8946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 344,
        column: 31,
        span: 8946..8950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 32,
        span: 8950..8951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 33,
        span: 8951..8952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 34,
        span: 8952..8953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 35,
        span: 8953..8954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 345,
        column: 7,
        span: 8955..8961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 8,
        span: 8961..8962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 345,
        column: 9,
        span: 8962..8963,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 345,
        column: 12,
        span: 8964..8966,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 345,
        column: 15,
        span: 8966..8969,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 345,
        column: 19,
        span: 8970..8973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 345,
        column: 21,
        span: 8974..8975,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 345,
        column: 24,
        span: 8976..8978,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0alo\\255\"",
        ),
        line: 345,
        column: 36,
        span: 8979..8990,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 345,
        column: 40,
        span: 8991..8994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 345,
        column: 42,
        span: 8995..8996,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 345,
        column: 45,
        span: 8997..8999,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 345,
        column: 50,
        span: 9000..9004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 51,
        span: 9004..9005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 346,
        column: 7,
        span: 9006..9012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 8,
        span: 9012..9013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 346,
        column: 10,
        span: 9013..9015,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 346,
        column: 11,
        span: 9015..9016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 346,
        column: 17,
        span: 9016..9022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 18,
        span: 9022..9023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 346,
        column: 22,
        span: 9023..9027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 23,
        span: 9027..9028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 24,
        span: 9028..9029,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 349,
        column: 0,
        span: 9047..9049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 350,
        column: 5,
        span: 9052..9054,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 350,
        column: 6,
        span: 9054..9055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 350,
        column: 12,
        span: 9055..9061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 13,
        span: 9061..9062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 350,
        column: 15,
        span: 9062..9064,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 350,
        column: 16,
        span: 9064..9065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 350,
        column: 20,
        span: 9065..9069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 21,
        span: 9069..9070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 350,
        column: 25,
        span: 9070..9074,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 350,
        column: 26,
        span: 9074..9075,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wb\"",
        ),
        line: 350,
        column: 31,
        span: 9076..9080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 32,
        span: 9080..9081,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 33,
        span: 9081..9082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 352,
        column: 9,
        span: 9121..9127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 10,
        span: 9127..9128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 352,
        column: 12,
        span: 9128..9130,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 352,
        column: 13,
        span: 9130..9131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 352,
        column: 18,
        span: 9131..9136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 19,
        span: 9136..9137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 352,
        column: 25,
        span: 9137..9143,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 352,
        column: 26,
        span: 9143..9144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 352,
        column: 30,
        span: 9144..9148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 31,
        span: 9148..9149,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 352,
        column: 39,
        span: 9149..9157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 41,
        span: 9158..9159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 42,
        span: 9159..9160,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 352,
        column: 49,
        span: 9161..9167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 352,
        column: 51,
        span: 9167..9169,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 352,
        column: 55,
        span: 9170..9173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 56,
        span: 9173..9174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 57,
        span: 9174..9175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 58,
        span: 9175..9176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 353,
        column: 5,
        span: 9179..9181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 353,
        column: 6,
        span: 9181..9182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 353,
        column: 11,
        span: 9182..9187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 12,
        span: 9187..9188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 13,
        span: 9188..9189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 354,
        column: 4,
        span: 9192..9193,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 354,
        column: 6,
        span: 9194..9195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 354,
        column: 13,
        span: 9196..9202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 14,
        span: 9202..9203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 354,
        column: 22,
        span: 9203..9211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 23,
        span: 9211..9212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 354,
        column: 27,
        span: 9212..9216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 28,
        span: 9216..9217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 354,
        column: 32,
        span: 9218..9221,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 33,
        span: 9221..9222,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 354,
        column: 35,
        span: 9223..9224,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 354,
        column: 36,
        span: 9224..9225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 37,
        span: 9225..9226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 38,
        span: 9226..9227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 355,
        column: 9,
        span: 9230..9236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 10,
        span: 9236..9237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 355,
        column: 14,
        span: 9237..9241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 15,
        span: 9241..9242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 355,
        column: 16,
        span: 9242..9243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 17,
        span: 9243..9244,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 355,
        column: 20,
        span: 9245..9247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 355,
        column: 31,
        span: 9248..9258,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 355,
        column: 35,
        span: 9259..9262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 355,
        column: 37,
        span: 9263..9264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 38,
        span: 9264..9265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 39,
        span: 9265..9266,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 355,
        column: 42,
        span: 9267..9269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
        column: 44,
        span: 9269..9271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 45,
        span: 9271..9272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 356,
        column: 9,
        span: 9275..9281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 10,
        span: 9281..9282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 356,
        column: 12,
        span: 9282..9284,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 356,
        column: 13,
        span: 9284..9285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 356,
        column: 19,
        span: 9285..9291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 20,
        span: 9291..9292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 356,
        column: 24,
        span: 9292..9296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 25,
        span: 9296..9297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 26,
        span: 9297..9298,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 357,
        column: 0,
        span: 9299..9302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 360,
        column: 3,
        span: 9348..9350,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 360,
        column: 4,
        span: 9350..9351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 360,
        column: 10,
        span: 9351..9357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 11,
        span: 9357..9358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 360,
        column: 13,
        span: 9358..9360,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 360,
        column: 14,
        span: 9360..9361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 360,
        column: 18,
        span: 9361..9365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 19,
        span: 9365..9366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 360,
        column: 23,
        span: 9366..9370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 24,
        span: 9370..9371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wb\"",
        ),
        line: 360,
        column: 29,
        span: 9372..9376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 30,
        span: 9376..9377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 31,
        span: 9377..9378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 361,
        column: 7,
        span: 9379..9385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 8,
        span: 9385..9386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 361,
        column: 10,
        span: 9386..9388,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 361,
        column: 11,
        span: 9388..9389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 361,
        column: 16,
        span: 9389..9394,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 17,
        span: 9394..9395,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#this is a comment for a binary file\\0\\n\"",
        ),
        line: 361,
        column: 59,
        span: 9395..9437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 361,
        column: 60,
        span: 9437..9438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 362,
        column: 23,
        span: 9455..9461,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 362,
        column: 24,
        span: 9461..9462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        line: 362,
        column: 28,
        span: 9462..9466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 29,
        span: 9466..9467,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 362,
        column: 37,
        span: 9467..9475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 39,
        span: 9476..9477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 40,
        span: 9477..9478,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 362,
        column: 47,
        span: 9479..9485,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 362,
        column: 50,
        span: 9485..9488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 362,
        column: 51,
        span: 9488..9489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 362,
        column: 60,
        span: 9490..9498,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 362,
        column: 64,
        span: 9499..9502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 65,
        span: 9502..9503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 66,
        span: 9503..9504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 67,
        span: 9504..9505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 363,
        column: 3,
        span: 9506..9508,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
        column: 4,
        span: 9508..9509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 363,
        column: 9,
        span: 9509..9514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 10,
        span: 9514..9515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 11,
        span: 9515..9516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 364,
        column: 2,
        span: 9517..9518,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 3,
        span: 9518..9519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 364,
        column: 5,
        span: 9520..9521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 6,
        span: 9521..9522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 364,
        column: 8,
        span: 9523..9524,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 364,
        column: 10,
        span: 9525..9526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 364,
        column: 17,
        span: 9527..9533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 18,
        span: 9533..9534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 364,
        column: 26,
        span: 9534..9542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 27,
        span: 9542..9543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 364,
        column: 31,
        span: 9543..9547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 32,
        span: 9547..9548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 33,
        span: 9548..9549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 34,
        span: 9549..9550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 35,
        span: 9550..9551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 365,
        column: 7,
        span: 9552..9558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 8,
        span: 9558..9559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 365,
        column: 9,
        span: 9559..9560,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 365,
        column: 12,
        span: 9561..9563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 15,
        span: 9563..9566,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 365,
        column: 19,
        span: 9567..9570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 365,
        column: 21,
        span: 9571..9572,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 365,
        column: 24,
        span: 9573..9575,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        line: 365,
        column: 33,
        span: 9576..9584,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 365,
        column: 37,
        span: 9585..9588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 365,
        column: 39,
        span: 9589..9590,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 365,
        column: 42,
        span: 9591..9593,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 365,
        column: 46,
        span: 9594..9597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 47,
        span: 9597..9598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 366,
        column: 7,
        span: 9599..9605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 8,
        span: 9605..9606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 366,
        column: 10,
        span: 9606..9608,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 366,
        column: 11,
        span: 9608..9609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 366,
        column: 17,
        span: 9609..9615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 18,
        span: 9615..9616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 366,
        column: 22,
        span: 9616..9620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 23,
        span: 9620..9621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 24,
        span: 9621..9622,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 370,
        column: 0,
        span: 9650..9652,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 371,
        column: 8,
        span: 9655..9660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 371,
        column: 10,
        span: 9661..9662,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 12,
        span: 9663..9664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 371,
        column: 15,
        span: 9665..9667,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 371,
        column: 16,
        span: 9667..9668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 371,
        column: 20,
        span: 9668..9672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 371,
        column: 21,
        span: 9672..9673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 371,
        column: 25,
        span: 9673..9677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 371,
        column: 26,
        span: 9677..9678,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        line: 371,
        column: 30,
        span: 9679..9682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 371,
        column: 31,
        span: 9682..9683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 372,
        column: 4,
        span: 9686..9687,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 372,
        column: 5,
        span: 9687..9688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 372,
        column: 10,
        span: 9688..9693,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    if (...) then a = 15; return b, c, d\n    else return _ENV\n    end\n  ]]",
        ),
        line: 376,
        column: 5,
        span: 9693..9770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 377,
        column: 4,
        span: 9773..9774,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 377,
        column: 5,
        span: 9774..9775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 377,
        column: 10,
        span: 9775..9780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 11,
        span: 9780..9781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 12,
        span: 9781..9782,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 378,
        column: 8,
        span: 9785..9790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 378,
        column: 10,
        span: 9791..9792,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 12,
        span: 9793..9794,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 378,
        column: 14,
        span: 9795..9796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 378,
        column: 15,
        span: 9796..9797,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 17,
        span: 9798..9799,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 20,
        span: 9799..9802,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 21,
        span: 9802..9803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 378,
        column: 23,
        span: 9804..9805,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 25,
        span: 9806..9807,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 378,
        column: 32,
        span: 9808..9814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 33,
        span: 9814..9815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 378,
        column: 35,
        span: 9816..9817,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 37,
        span: 9818..9819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 378,
        column: 43,
        span: 9820..9825,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 378,
        column: 44,
        span: 9825..9826,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 379,
        column: 8,
        span: 9829..9834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 379,
        column: 10,
        span: 9835..9836,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 379,
        column: 12,
        span: 9837..9838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 379,
        column: 19,
        span: 9839..9845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 20,
        span: 9845..9846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 379,
        column: 28,
        span: 9846..9854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 29,
        span: 9854..9855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 379,
        column: 33,
        span: 9855..9859,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
        column: 34,
        span: 9859..9860,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        line: 379,
        column: 38,
        span: 9861..9864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
        column: 39,
        span: 9864..9865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 379,
        column: 41,
        span: 9866..9867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 42,
        span: 9867..9868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 43,
        span: 9868..9869,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 380,
        column: 8,
        span: 9872..9877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 380,
        column: 10,
        span: 9878..9879,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 11,
        span: 9879..9880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 380,
        column: 13,
        span: 9881..9882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 14,
        span: 9882..9883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 380,
        column: 16,
        span: 9884..9885,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
        column: 18,
        span: 9886..9887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 380,
        column: 20,
        span: 9888..9889,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 21,
        span: 9889..9890,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 22,
        span: 9889..9891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 23,
        span: 9891..9892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 381,
        column: 9,
        span: 9895..9901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
        column: 10,
        span: 9901..9902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 381,
        column: 11,
        span: 9902..9903,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 381,
        column: 12,
        span: 9903..9904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 381,
        column: 13,
        span: 9904..9905,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 381,
        column: 16,
        span: 9906..9908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
        column: 19,
        span: 9908..9911,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 381,
        column: 23,
        span: 9912..9915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 381,
        column: 25,
        span: 9916..9917,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 381,
        column: 28,
        span: 9918..9920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
        column: 31,
        span: 9920..9923,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 381,
        column: 35,
        span: 9924..9927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 381,
        column: 37,
        span: 9928..9929,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 381,
        column: 40,
        span: 9930..9932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 381,
        column: 42,
        span: 9933..9934,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 381,
        column: 43,
        span: 9934..9935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 381,
        column: 44,
        span: 9935..9936,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 381,
        column: 48,
        span: 9937..9940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 381,
        column: 50,
        span: 9941..9942,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 381,
        column: 53,
        span: 9943..9945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 381,
        column: 59,
        span: 9946..9951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 60,
        span: 9951..9952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 382,
        column: 9,
        span: 9955..9961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 10,
        span: 9961..9962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 382,
        column: 11,
        span: 9962..9963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 12,
        span: 9963..9964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 13,
        span: 9964..9965,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 382,
        column: 16,
        span: 9966..9968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 382,
        column: 18,
        span: 9969..9970,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 19,
        span: 9970..9971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 383,
        column: 4,
        span: 9974..9975,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
        column: 6,
        span: 9976..9977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
        column: 13,
        span: 9978..9984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 14,
        span: 9984..9985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 383,
        column: 22,
        span: 9985..9993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 23,
        span: 9993..9994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 383,
        column: 27,
        span: 9994..9998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 28,
        span: 9998..9999,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        line: 383,
        column: 32,
        span: 10000..10003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 33,
        span: 10003..10004,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 383,
        column: 37,
        span: 10005..10008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 38,
        span: 10008..10009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 39,
        span: 10009..10010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 384,
        column: 9,
        span: 10013..10019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 10,
        span: 10019..10020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 384,
        column: 11,
        span: 10020..10021,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 12,
        span: 10021..10022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 13,
        span: 10022..10023,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 384,
        column: 16,
        span: 10024..10026,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 384,
        column: 20,
        span: 10027..10030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 21,
        span: 10030..10031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 385,
        column: 4,
        span: 10034..10035,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 6,
        span: 10036..10037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 385,
        column: 13,
        span: 10038..10044,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 14,
        span: 10044..10045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 385,
        column: 22,
        span: 10045..10053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 23,
        span: 10053..10054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 385,
        column: 27,
        span: 10054..10058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 28,
        span: 10058..10059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 29,
        span: 10059..10060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 386,
        column: 9,
        span: 10063..10069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 10,
        span: 10069..10070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 386,
        column: 11,
        span: 10070..10071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 12,
        span: 10071..10072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 13,
        span: 10072..10073,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 16,
        span: 10074..10076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 386,
        column: 19,
        span: 10077..10079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 20,
        span: 10079..10080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
        column: 9,
        span: 10083..10089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 10,
        span: 10089..10090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 387,
        column: 12,
        span: 10090..10092,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 387,
        column: 13,
        span: 10092..10093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 387,
        column: 19,
        span: 10093..10099,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 20,
        span: 10099..10100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 387,
        column: 24,
        span: 10100..10104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 25,
        span: 10104..10105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 26,
        span: 10105..10106,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 388,
        column: 0,
        span: 10107..10110,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 392,
        column: 0,
        span: 10135..10137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 393,
        column: 5,
        span: 10140..10142,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 393,
        column: 6,
        span: 10142..10143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 393,
        column: 10,
        span: 10143..10147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 11,
        span: 10147..10148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 393,
        column: 15,
        span: 10148..10152,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 16,
        span: 10152..10153,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        line: 393,
        column: 20,
        span: 10154..10157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 21,
        span: 10157..10158,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 393,
        column: 22,
        span: 10158..10159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 393,
        column: 27,
        span: 10159..10164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 28,
        span: 10164..10165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 10\"",
        ),
        line: 393,
        column: 39,
        span: 10165..10176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 40,
        span: 10176..10177,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 393,
        column: 41,
        span: 10177..10178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 393,
        column: 46,
        span: 10178..10183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 47,
        span: 10183..10184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 48,
        span: 10184..10185,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 394,
        column: 8,
        span: 10188..10193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 394,
        column: 10,
        span: 10194..10195,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 11,
        span: 10195..10196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 394,
        column: 13,
        span: 10197..10198,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 15,
        span: 10199..10200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 394,
        column: 24,
        span: 10201..10209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 25,
        span: 10209..10210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 394,
        column: 29,
        span: 10210..10214,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 30,
        span: 10214..10215,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 394,
        column: 34,
        span: 10216..10219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 35,
        span: 10219..10220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 395,
        column: 9,
        span: 10223..10229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 10,
        span: 10229..10230,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 395,
        column: 13,
        span: 10230..10233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 395,
        column: 15,
        span: 10234..10235,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 395,
        column: 19,
        span: 10236..10239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 395,
        column: 26,
        span: 10240..10246,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 395,
        column: 27,
        span: 10246..10247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 395,
        column: 31,
        span: 10247..10251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 395,
        column: 32,
        span: 10251..10252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 395,
        column: 33,
        span: 10252..10253,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 34,
        span: 10253..10254,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a text chunk\"",
        ),
        line: 395,
        column: 49,
        span: 10255..10269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 50,
        span: 10269..10270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 395,
        column: 51,
        span: 10270..10271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 396,
        column: 5,
        span: 10274..10276,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 396,
        column: 6,
        span: 10276..10277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 396,
        column: 10,
        span: 10277..10281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 11,
        span: 10281..10282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 396,
        column: 15,
        span: 10282..10286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 16,
        span: 10286..10287,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        line: 396,
        column: 20,
        span: 10288..10291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 21,
        span: 10291..10292,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 396,
        column: 22,
        span: 10292..10293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 396,
        column: 27,
        span: 10293..10298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 28,
        span: 10298..10299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\27 return 10\"",
        ),
        line: 396,
        column: 43,
        span: 10299..10314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 44,
        span: 10314..10315,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 396,
        column: 45,
        span: 10315..10316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 396,
        column: 50,
        span: 10316..10321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 51,
        span: 10321..10322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 52,
        span: 10322..10323,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 397,
        column: 8,
        span: 10326..10331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 397,
        column: 10,
        span: 10332..10333,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 11,
        span: 10333..10334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 397,
        column: 13,
        span: 10335..10336,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 397,
        column: 15,
        span: 10337..10338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        line: 397,
        column: 24,
        span: 10339..10347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 25,
        span: 10347..10348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 397,
        column: 29,
        span: 10348..10352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 30,
        span: 10352..10353,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        line: 397,
        column: 34,
        span: 10354..10357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 35,
        span: 10357..10358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 398,
        column: 9,
        span: 10361..10367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 10,
        span: 10367..10368,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 398,
        column: 13,
        span: 10368..10371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 398,
        column: 15,
        span: 10372..10373,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 398,
        column: 19,
        span: 10374..10377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 398,
        column: 26,
        span: 10378..10384,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 398,
        column: 27,
        span: 10384..10385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 398,
        column: 31,
        span: 10385..10389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 32,
        span: 10389..10390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 398,
        column: 33,
        span: 10390..10391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 34,
        span: 10391..10392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a binary chunk\"",
        ),
        line: 398,
        column: 51,
        span: 10393..10409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 52,
        span: 10409..10410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 53,
        span: 10410..10411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 399,
        column: 9,
        span: 10414..10420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 10,
        span: 10420..10421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 399,
        column: 12,
        span: 10421..10423,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 399,
        column: 13,
        span: 10423..10424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 399,
        column: 19,
        span: 10424..10430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 20,
        span: 10430..10431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 399,
        column: 24,
        span: 10431..10435,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 25,
        span: 10435..10436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 26,
        span: 10436..10437,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 400,
        column: 0,
        span: 10438..10441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 403,
        column: 3,
        span: 10444..10446,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 403,
        column: 4,
        span: 10446..10447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 403,
        column: 10,
        span: 10447..10453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 11,
        span: 10453..10454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 403,
        column: 15,
        span: 10454..10458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 16,
        span: 10458..10459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 404,
        column: 7,
        span: 10460..10466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
        column: 8,
        span: 10466..10467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 404,
        column: 10,
        span: 10467..10469,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 404,
        column: 11,
        span: 10469..10470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 404,
        column: 16,
        span: 10470..10475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
        column: 17,
        span: 10475..10476,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"qualquer coisa\\n\"",
        ),
        line: 404,
        column: 35,
        span: 10476..10494,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
        column: 36,
        span: 10494..10495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
        column: 37,
        span: 10495..10496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 405,
        column: 7,
        span: 10497..10503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 8,
        span: 10503..10504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 405,
        column: 10,
        span: 10504..10506,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 405,
        column: 11,
        span: 10506..10507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 405,
        column: 16,
        span: 10507..10512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 17,
        span: 10512..10513,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mais qualquer coisa\"",
        ),
        line: 405,
        column: 38,
        span: 10513..10534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 39,
        span: 10534..10535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 40,
        span: 10535..10536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 406,
        column: 3,
        span: 10537..10539,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 406,
        column: 4,
        span: 10539..10540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 406,
        column: 9,
        span: 10540..10545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
        column: 10,
        span: 10545..10546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
        column: 11,
        span: 10546..10547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 407,
        column: 7,
        span: 10548..10554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 8,
        span: 10554..10555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 407,
        column: 10,
        span: 10555..10557,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 407,
        column: 11,
        span: 10557..10558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 407,
        column: 17,
        span: 10558..10564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 18,
        span: 10564..10565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 407,
        column: 24,
        span: 10565..10571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 25,
        span: 10571..10572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 407,
        column: 27,
        span: 10572..10574,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 407,
        column: 28,
        span: 10574..10575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 407,
        column: 32,
        span: 10575..10579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 33,
        span: 10579..10580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 407,
        column: 42,
        span: 10580..10589,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 407,
        column: 43,
        span: 10589..10590,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'wb'",
        ),
        line: 407,
        column: 48,
        span: 10591..10595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 49,
        span: 10595..10596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 50,
        span: 10596..10597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 51,
        span: 10597..10598,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 408,
        column: 9,
        span: 10606..10607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 408,
        column: 14,
        span: 10607..10612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 15,
        span: 10612..10613,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outra coisa\\0\\1\\3\\0\\0\\0\\0\\255\\0\"",
        ),
        line: 408,
        column: 48,
        span: 10613..10646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 49,
        span: 10646..10647,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 409,
        column: 9,
        span: 10655..10656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 409,
        column: 14,
        span: 10656..10661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 15,
        span: 10661..10662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 16,
        span: 10662..10663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 17,
        span: 10663..10664,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 411,
        column: 6,
        span: 10666..10671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 411,
        column: 17,
        span: 10672..10682,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 411,
        column: 19,
        span: 10683..10684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 411,
        column: 26,
        span: 10685..10691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 27,
        span: 10691..10692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 411,
        column: 29,
        span: 10692..10694,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 411,
        column: 30,
        span: 10694..10695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 411,
        column: 34,
        span: 10695..10699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 35,
        span: 10699..10700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 411,
        column: 39,
        span: 10700..10704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 40,
        span: 10704..10705,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r+'",
        ),
        line: 411,
        column: 45,
        span: 10706..10710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 46,
        span: 10710..10711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 47,
        span: 10711..10712,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 412,
        column: 6,
        span: 10713..10718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 412,
        column: 22,
        span: 10719..10734,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 412,
        column: 24,
        span: 10735..10736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 412,
        column: 31,
        span: 10737..10743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 32,
        span: 10743..10744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 412,
        column: 34,
        span: 10744..10746,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 412,
        column: 35,
        span: 10746..10747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 412,
        column: 39,
        span: 10747..10751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 40,
        span: 10751..10752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 412,
        column: 49,
        span: 10752..10761,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 50,
        span: 10761..10762,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'rb'",
        ),
        line: 412,
        column: 55,
        span: 10763..10767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 56,
        span: 10767..10768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 57,
        span: 10768..10769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 413,
        column: 7,
        span: 10770..10776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 413,
        column: 8,
        span: 10776..10777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 413,
        column: 18,
        span: 10777..10787,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 413,
        column: 21,
        span: 10788..10790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 413,
        column: 37,
        span: 10791..10806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 413,
        column: 38,
        span: 10806..10807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 414,
        column: 7,
        span: 10808..10814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 8,
        span: 10814..10815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 414,
        column: 12,
        span: 10815..10819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 13,
        span: 10819..10820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 414,
        column: 23,
        span: 10820..10830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 24,
        span: 10830..10831,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 414,
        column: 27,
        span: 10832..10834,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        line: 414,
        column: 38,
        span: 10835..10845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 39,
        span: 10845..10846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 415,
        column: 7,
        span: 10847..10853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 8,
        span: 10853..10854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 415,
        column: 18,
        span: 10854..10864,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 415,
        column: 19,
        span: 10864..10865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 415,
        column: 23,
        span: 10865..10869,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 24,
        span: 10869..10870,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*l'",
        ),
        line: 415,
        column: 28,
        span: 10870..10874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 29,
        span: 10874..10875,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 415,
        column: 32,
        span: 10876..10878,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"qualquer coisa\"",
        ),
        line: 415,
        column: 49,
        span: 10879..10895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 50,
        span: 10895..10896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 416,
        column: 3,
        span: 10897..10899,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 416,
        column: 4,
        span: 10899..10900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 416,
        column: 9,
        span: 10900..10905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 10,
        span: 10905..10906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 416,
        column: 25,
        span: 10906..10921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 26,
        span: 10921..10922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 417,
        column: 7,
        span: 10923..10929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 8,
        span: 10929..10930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 417,
        column: 10,
        span: 10930..10932,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 417,
        column: 11,
        span: 10932..10933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 417,
        column: 15,
        span: 10933..10937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 16,
        span: 10937..10938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 417,
        column: 22,
        span: 10938..10944,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 417,
        column: 23,
        span: 10944..10945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 417,
        column: 26,
        span: 10945..10948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outra coisa\"",
        ),
        line: 417,
        column: 39,
        span: 10948..10961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 40,
        span: 10961..10962,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 417,
        column: 43,
        span: 10963..10965,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outra coisa\"",
        ),
        line: 417,
        column: 57,
        span: 10966..10979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 58,
        span: 10979..10980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
        column: 7,
        span: 10981..10987,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 8,
        span: 10987..10988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 418,
        column: 18,
        span: 10988..10998,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 418,
        column: 19,
        span: 10998..10999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 418,
        column: 23,
        span: 10999..11003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 24,
        span: 11003..11004,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*l'",
        ),
        line: 418,
        column: 28,
        span: 11004..11008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 29,
        span: 11008..11009,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
        column: 32,
        span: 11010..11012,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mais qualquer coisa\"",
        ),
        line: 418,
        column: 54,
        span: 11013..11034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 55,
        span: 11034..11035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 419,
        column: 11,
        span: 11036..11046,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 419,
        column: 12,
        span: 11046..11047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 419,
        column: 17,
        span: 11047..11052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 18,
        span: 11052..11053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 19,
        span: 11053..11054,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 419,
        column: 20,
        span: 11054..11055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 420,
        column: 7,
        span: 11056..11062,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
        column: 8,
        span: 11062..11063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 420,
        column: 12,
        span: 11063..11067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
        column: 13,
        span: 11067..11068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filehandle",
        ),
        line: 420,
        column: 23,
        span: 11068..11078,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
        column: 24,
        span: 11078..11079,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 420,
        column: 27,
        span: 11080..11082,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        line: 420,
        column: 38,
        span: 11083..11093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
        column: 39,
        span: 11093..11094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 421,
        column: 3,
        span: 11095..11097,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 421,
        column: 4,
        span: 11097..11098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 421,
        column: 9,
        span: 11098..11103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 421,
        column: 10,
        span: 11103..11104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 421,
        column: 25,
        span: 11104..11119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 421,
        column: 26,
        span: 11119..11120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 422,
        column: 7,
        span: 11121..11127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 8,
        span: 11127..11128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 422,
        column: 10,
        span: 11128..11130,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 422,
        column: 11,
        span: 11130..11131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 422,
        column: 15,
        span: 11131..11135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 16,
        span: 11135..11136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 17,
        span: 11135..11137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 18,
        span: 11137..11138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 422,
        column: 21,
        span: 11139..11141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\1\\3\\0\"",
        ),
        line: 422,
        column: 32,
        span: 11142..11152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 33,
        span: 11152..11153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 423,
        column: 7,
        span: 11154..11160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 8,
        span: 11160..11161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 423,
        column: 10,
        span: 11161..11163,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 423,
        column: 11,
        span: 11163..11164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 423,
        column: 15,
        span: 11164..11168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 16,
        span: 11168..11169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 423,
        column: 17,
        span: 11168..11170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 18,
        span: 11170..11171,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 423,
        column: 21,
        span: 11172..11174,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        line: 423,
        column: 30,
        span: 11175..11183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 31,
        span: 11183..11184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 424,
        column: 7,
        span: 11185..11191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 8,
        span: 11191..11192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 424,
        column: 10,
        span: 11192..11194,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 424,
        column: 11,
        span: 11194..11195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 424,
        column: 15,
        span: 11195..11199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 16,
        span: 11199..11200,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 17,
        span: 11199..11201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 18,
        span: 11201..11202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
        column: 21,
        span: 11203..11205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 424,
        column: 24,
        span: 11206..11208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 25,
        span: 11208..11209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 425,
        column: 7,
        span: 11235..11241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 8,
        span: 11241..11242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 425,
        column: 10,
        span: 11242..11244,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 425,
        column: 11,
        span: 11244..11245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 425,
        column: 15,
        span: 11245..11249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 16,
        span: 11249..11250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 17,
        span: 11249..11251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 18,
        span: 11251..11252,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 425,
        column: 21,
        span: 11253..11255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\255\"",
        ),
        line: 425,
        column: 28,
        span: 11256..11262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 29,
        span: 11262..11263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 426,
        column: 7,
        span: 11264..11270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 8,
        span: 11270..11271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 426,
        column: 10,
        span: 11271..11273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 426,
        column: 11,
        span: 11273..11274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 426,
        column: 15,
        span: 11274..11278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 16,
        span: 11278..11279,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*a'",
        ),
        line: 426,
        column: 20,
        span: 11279..11283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 21,
        span: 11283..11284,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 426,
        column: 24,
        span: 11285..11287,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 426,
        column: 29,
        span: 11288..11292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 30,
        span: 11292..11293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 427,
        column: 7,
        span: 11294..11300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 8,
        span: 11300..11301,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 427,
        column: 11,
        span: 11301..11304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 427,
        column: 14,
        span: 11305..11307,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 427,
        column: 15,
        span: 11307..11308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 427,
        column: 19,
        span: 11308..11312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 20,
        span: 11312..11313,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
        column: 21,
        span: 11312..11314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 22,
        span: 11314..11315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 23,
        span: 11315..11316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 428,
        column: 7,
        span: 11317..11323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 8,
        span: 11323..11324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 428,
        column: 23,
        span: 11324..11339,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 428,
        column: 26,
        span: 11340..11342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 428,
        column: 29,
        span: 11343..11345,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
        column: 30,
        span: 11345..11346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 428,
        column: 35,
        span: 11346..11351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 36,
        span: 11351..11352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 37,
        span: 11352..11353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 38,
        span: 11353..11354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfilehandle",
        ),
        line: 429,
        column: 16,
        span: 11355..11370,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 429,
        column: 17,
        span: 11370..11371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 429,
        column: 22,
        span: 11371..11376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 23,
        span: 11376..11377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 24,
        span: 11377..11378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 430,
        column: 7,
        span: 11379..11385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 8,
        span: 11385..11386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 430,
        column: 10,
        span: 11386..11388,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 430,
        column: 11,
        span: 11388..11389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 430,
        column: 17,
        span: 11389..11395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 430,
        column: 18,
        span: 11395..11396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 430,
        column: 22,
        span: 11396..11400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 23,
        span: 11400..11401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 430,
        column: 24,
        span: 11401..11402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 431,
        column: 7,
        span: 11403..11409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
        column: 8,
        span: 11409..11410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 431,
        column: 10,
        span: 11410..11412,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 431,
        column: 11,
        span: 11412..11413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 431,
        column: 17,
        span: 11413..11419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
        column: 18,
        span: 11419..11420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherfile",
        ),
        line: 431,
        column: 27,
        span: 11420..11429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
        column: 28,
        span: 11429..11430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
        column: 29,
        span: 11430..11431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 432,
        column: 15,
        span: 11432..11446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 16,
        span: 11446..11447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 17,
        span: 11447..11448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 434,
        column: 3,
        span: 11450..11452,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 434,
        column: 4,
        span: 11452..11453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 434,
        column: 10,
        span: 11453..11459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 11,
        span: 11459..11460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 434,
        column: 15,
        span: 11460..11464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 16,
        span: 11464..11465,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 435,
        column: 4,
        span: 11468..11469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 435,
        column: 9,
        span: 11469..11474,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n 123.4\t-56e-2  not a number\nsecond line\nthird line\n\nand the rest of the file\n]]",
        ),
        line: 441,
        column: 3,
        span: 11474..11556,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 442,
        column: 4,
        span: 11559..11560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 442,
        column: 9,
        span: 11560..11565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
        column: 10,
        span: 11565..11566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
        column: 11,
        span: 11566..11567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 443,
        column: 3,
        span: 11568..11570,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 443,
        column: 4,
        span: 11570..11571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 443,
        column: 9,
        span: 11571..11576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 10,
        span: 11576..11577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 443,
        column: 14,
        span: 11577..11581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 15,
        span: 11581..11582,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 444,
        column: 6,
        span: 11583..11588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 444,
        column: 8,
        span: 11589..11590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 9,
        span: 11590..11591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 444,
        column: 10,
        span: 11591..11592,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 11,
        span: 11592..11593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 444,
        column: 12,
        span: 11593..11594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 13,
        span: 11594..11595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 444,
        column: 14,
        span: 11595..11596,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 15,
        span: 11596..11597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 444,
        column: 16,
        span: 11597..11598,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 17,
        span: 11598..11599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 444,
        column: 18,
        span: 11599..11600,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 19,
        span: 11600..11601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 444,
        column: 20,
        span: 11601..11602,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 21,
        span: 11602..11603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__",
        ),
        line: 444,
        column: 23,
        span: 11603..11605,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 444,
        column: 25,
        span: 11606..11607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 444,
        column: 28,
        span: 11608..11610,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 444,
        column: 29,
        span: 11610..11611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 444,
        column: 33,
        span: 11611..11615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 444,
        column: 34,
        span: 11615..11616,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
        column: 35,
        span: 11615..11617,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 36,
        span: 11617..11618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*n'",
        ),
        line: 444,
        column: 41,
        span: 11619..11623,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 42,
        span: 11623..11624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*n'",
        ),
        line: 444,
        column: 47,
        span: 11625..11629,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 48,
        span: 11629..11630,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*l'",
        ),
        line: 444,
        column: 53,
        span: 11631..11635,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 54,
        span: 11635..11636,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*l'",
        ),
        line: 444,
        column: 59,
        span: 11637..11641,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 60,
        span: 11641..11642,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*l'",
        ),
        line: 444,
        column: 65,
        span: 11643..11647,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 66,
        span: 11647..11648,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*a'",
        ),
        line: 444,
        column: 71,
        span: 11649..11653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 72,
        span: 11653..11654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 444,
        column: 75,
        span: 11654..11657,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 444,
        column: 76,
        span: 11657..11658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 445,
        column: 7,
        span: 11659..11665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 8,
        span: 11665..11666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 445,
        column: 10,
        span: 11666..11668,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 445,
        column: 11,
        span: 11668..11669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 445,
        column: 16,
        span: 11669..11674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 17,
        span: 11674..11675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 445,
        column: 19,
        span: 11675..11677,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 445,
        column: 20,
        span: 11677..11678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 445,
        column: 25,
        span: 11678..11683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 445,
        column: 26,
        span: 11683..11684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 27,
        span: 11684..11685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 28,
        span: 11685..11686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 445,
        column: 29,
        span: 11686..11687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 446,
        column: 7,
        span: 11688..11694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 8,
        span: 11694..11695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 446,
        column: 9,
        span: 11695..11696,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 446,
        column: 12,
        span: 11697..11699,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 446,
        column: 16,
        span: 11700..11703,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 446,
        column: 20,
        span: 11704..11707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__",
        ),
        line: 446,
        column: 23,
        span: 11708..11710,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 446,
        column: 26,
        span: 11711..11713,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 446,
        column: 30,
        span: 11714..11717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 31,
        span: 11717..11718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 447,
        column: 7,
        span: 11719..11725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 447,
        column: 8,
        span: 11725..11726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 447,
        column: 12,
        span: 11726..11730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 447,
        column: 13,
        span: 11730..11731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 447,
        column: 14,
        span: 11731..11732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 447,
        column: 15,
        span: 11732..11733,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 447,
        column: 18,
        span: 11734..11736,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        line: 447,
        column: 27,
        span: 11737..11745,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 447,
        column: 31,
        span: 11746..11749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 447,
        column: 33,
        span: 11750..11751,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 447,
        column: 35,
        span: 11751..11753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "123",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 447,
        column: 40,
        span: 11752..11758,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 447,
        column: 44,
        span: 11759..11762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 447,
        column: 46,
        span: 11763..11764,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 447,
        column: 48,
        span: 11764..11766,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 447,
        column: 49,
        span: 11766..11767,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "56",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        line: 447,
        column: 54,
        span: 11766..11772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 447,
        column: 55,
        span: 11772..11773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 448,
        column: 7,
        span: 11774..11780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
        column: 8,
        span: 11780..11781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 448,
        column: 9,
        span: 11781..11782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 448,
        column: 11,
        span: 11782..11784,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'second line'",
        ),
        line: 448,
        column: 24,
        span: 11784..11797,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 448,
        column: 28,
        span: 11798..11801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 448,
        column: 30,
        span: 11802..11803,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 448,
        column: 32,
        span: 11803..11805,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'third line'",
        ),
        line: 448,
        column: 44,
        span: 11805..11817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
        column: 45,
        span: 11817..11818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 449,
        column: 7,
        span: 11819..11825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 449,
        column: 8,
        span: 11825..11826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 449,
        column: 9,
        span: 11826..11827,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 449,
        column: 11,
        span: 11827..11829,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\nand the rest of the file\n]]",
        ),
        line: 452,
        column: 3,
        span: 11829..11860,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 452,
        column: 4,
        span: 11860..11861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 453,
        column: 7,
        span: 11862..11868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 8,
        span: 11868..11869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 453,
        column: 10,
        span: 11869..11871,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 453,
        column: 11,
        span: 11871..11872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 453,
        column: 17,
        span: 11872..11878,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 453,
        column: 18,
        span: 11878..11879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 453,
        column: 22,
        span: 11879..11883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 23,
        span: 11883..11884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 24,
        span: 11884..11885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 454,
        column: 15,
        span: 11886..11900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 454,
        column: 16,
        span: 11900..11901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 454,
        column: 17,
        span: 11901..11902,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 457,
        column: 0,
        span: 11923..11925,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 458,
        column: 8,
        span: 11928..11933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 458,
        column: 10,
        span: 11934..11935,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 458,
        column: 12,
        span: 11936..11937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 458,
        column: 19,
        span: 11938..11944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 20,
        span: 11944..11945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 458,
        column: 22,
        span: 11945..11947,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 458,
        column: 23,
        span: 11947..11948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 458,
        column: 27,
        span: 11948..11952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 458,
        column: 28,
        span: 11952..11953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 458,
        column: 32,
        span: 11953..11957,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 458,
        column: 33,
        span: 11957..11958,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 458,
        column: 37,
        span: 11959..11962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 38,
        span: 11962..11963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 458,
        column: 39,
        span: 11963..11964,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 459,
        column: 8,
        span: 11967..11972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 459,
        column: 11,
        span: 11973..11975,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 459,
        column: 13,
        span: 11976..11977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 459,
        column: 20,
        span: 11978..11984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 21,
        span: 11984..11985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 459,
        column: 23,
        span: 11985..11987,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 459,
        column: 24,
        span: 11987..11988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 459,
        column: 28,
        span: 11988..11992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 29,
        span: 11992..11993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 459,
        column: 33,
        span: 11993..11997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
        column: 34,
        span: 11997..11998,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"r\"",
        ),
        line: 459,
        column: 38,
        span: 11999..12002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 39,
        span: 12002..12003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 40,
        span: 12003..12004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 460,
        column: 9,
        span: 12007..12013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 460,
        column: 10,
        span: 12013..12014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 460,
        column: 11,
        span: 12014..12015,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 460,
        column: 12,
        span: 12015..12016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setvbuf",
        ),
        line: 460,
        column: 19,
        span: 12016..12023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 460,
        column: 20,
        span: 12023..12024,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"full\"",
        ),
        line: 460,
        column: 26,
        span: 12024..12030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 460,
        column: 27,
        span: 12030..12031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 460,
        column: 32,
        span: 12031..12036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 460,
        column: 33,
        span: 12036..12037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 460,
        column: 34,
        span: 12037..12038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 461,
        column: 4,
        span: 12041..12042,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 461,
        column: 5,
        span: 12042..12043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 461,
        column: 10,
        span: 12043..12048,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 461,
        column: 11,
        span: 12048..12049,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 461,
        column: 14,
        span: 12049..12052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 461,
        column: 15,
        span: 12052..12053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 462,
        column: 9,
        span: 12056..12062,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 10,
        span: 12062..12063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 462,
        column: 12,
        span: 12063..12065,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 462,
        column: 13,
        span: 12065..12066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 462,
        column: 17,
        span: 12066..12070,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 462,
        column: 18,
        span: 12070..12071,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*all\"",
        ),
        line: 462,
        column: 24,
        span: 12071..12077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 25,
        span: 12077..12078,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 462,
        column: 28,
        span: 12079..12081,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 462,
        column: 31,
        span: 12082..12084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 462,
        column: 32,
        span: 12084..12085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 463,
        column: 4,
        span: 12128..12129,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 463,
        column: 5,
        span: 12129..12130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 463,
        column: 10,
        span: 12130..12135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 463,
        column: 11,
        span: 12135..12136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 463,
        column: 12,
        span: 12136..12137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 464,
        column: 5,
        span: 12140..12142,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 464,
        column: 6,
        span: 12142..12143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 464,
        column: 10,
        span: 12143..12147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 11,
        span: 12147..12148,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 464,
        column: 16,
        span: 12148..12153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 17,
        span: 12153..12154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 465,
        column: 9,
        span: 12157..12163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 10,
        span: 12163..12164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 465,
        column: 12,
        span: 12164..12166,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 465,
        column: 13,
        span: 12166..12167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 465,
        column: 17,
        span: 12167..12171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 18,
        span: 12171..12172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*all\"",
        ),
        line: 465,
        column: 24,
        span: 12172..12178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 25,
        span: 12178..12179,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 465,
        column: 28,
        span: 12180..12182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 465,
        column: 32,
        span: 12183..12186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 33,
        span: 12186..12187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 466,
        column: 4,
        span: 12214..12215,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 466,
        column: 6,
        span: 12216..12217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 466,
        column: 13,
        span: 12218..12224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 14,
        span: 12224..12225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 466,
        column: 16,
        span: 12225..12227,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 466,
        column: 17,
        span: 12227..12228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 466,
        column: 21,
        span: 12228..12232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 466,
        column: 22,
        span: 12232..12233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 466,
        column: 26,
        span: 12233..12237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 27,
        span: 12237..12238,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 466,
        column: 28,
        span: 12238..12239,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        line: 466,
        column: 32,
        span: 12240..12243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 466,
        column: 33,
        span: 12243..12244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 467,
        column: 9,
        span: 12247..12253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 10,
        span: 12253..12254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 467,
        column: 11,
        span: 12254..12255,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 467,
        column: 12,
        span: 12255..12256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setvbuf",
        ),
        line: 467,
        column: 19,
        span: 12256..12263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 20,
        span: 12263..12264,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no\"",
        ),
        line: 467,
        column: 24,
        span: 12264..12268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 25,
        span: 12268..12269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 26,
        span: 12269..12270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 468,
        column: 4,
        span: 12273..12274,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 468,
        column: 5,
        span: 12274..12275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 468,
        column: 10,
        span: 12275..12280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 468,
        column: 11,
        span: 12280..12281,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 468,
        column: 14,
        span: 12281..12284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 468,
        column: 15,
        span: 12284..12285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 469,
        column: 5,
        span: 12288..12290,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 469,
        column: 6,
        span: 12290..12291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 469,
        column: 10,
        span: 12291..12295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 469,
        column: 11,
        span: 12295..12296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 469,
        column: 16,
        span: 12296..12301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 469,
        column: 17,
        span: 12301..12302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 470,
        column: 9,
        span: 12305..12311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 10,
        span: 12311..12312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 470,
        column: 12,
        span: 12312..12314,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 470,
        column: 13,
        span: 12314..12315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 470,
        column: 17,
        span: 12315..12319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 470,
        column: 18,
        span: 12319..12320,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*all\"",
        ),
        line: 470,
        column: 24,
        span: 12320..12326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 25,
        span: 12326..12327,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 470,
        column: 28,
        span: 12328..12330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 470,
        column: 32,
        span: 12331..12334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 470,
        column: 33,
        span: 12334..12335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 471,
        column: 4,
        span: 12369..12370,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 471,
        column: 5,
        span: 12370..12371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 471,
        column: 10,
        span: 12371..12376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 471,
        column: 11,
        span: 12376..12377,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 471,
        column: 12,
        span: 12377..12378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 472,
        column: 4,
        span: 12381..12382,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 472,
        column: 6,
        span: 12383..12384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 472,
        column: 13,
        span: 12385..12391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 472,
        column: 14,
        span: 12391..12392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 472,
        column: 16,
        span: 12392..12394,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 472,
        column: 17,
        span: 12394..12395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        line: 472,
        column: 21,
        span: 12395..12399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 472,
        column: 22,
        span: 12399..12400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 472,
        column: 26,
        span: 12400..12404,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 472,
        column: 27,
        span: 12404..12405,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 472,
        column: 31,
        span: 12406..12409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 472,
        column: 32,
        span: 12409..12410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 472,
        column: 33,
        span: 12410..12411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 473,
        column: 9,
        span: 12414..12420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 473,
        column: 10,
        span: 12420..12421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 473,
        column: 11,
        span: 12421..12422,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 473,
        column: 12,
        span: 12422..12423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setvbuf",
        ),
        line: 473,
        column: 19,
        span: 12423..12430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 473,
        column: 20,
        span: 12430..12431,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        line: 473,
        column: 26,
        span: 12431..12437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 473,
        column: 27,
        span: 12437..12438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 473,
        column: 28,
        span: 12438..12439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 474,
        column: 4,
        span: 12442..12443,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 474,
        column: 5,
        span: 12443..12444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 474,
        column: 10,
        span: 12444..12449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 474,
        column: 11,
        span: 12449..12450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 474,
        column: 14,
        span: 12450..12453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 474,
        column: 15,
        span: 12453..12454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 475,
        column: 5,
        span: 12457..12459,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 475,
        column: 6,
        span: 12459..12460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 475,
        column: 10,
        span: 12460..12464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 475,
        column: 11,
        span: 12464..12465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 475,
        column: 16,
        span: 12465..12470,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 475,
        column: 17,
        span: 12470..12471,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 475,
        column: 19,
        span: 12471..12473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 475,
        column: 20,
        span: 12473..12474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 476,
        column: 9,
        span: 12477..12483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
        column: 10,
        span: 12483..12484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 476,
        column: 12,
        span: 12484..12486,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 476,
        column: 13,
        span: 12486..12487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 476,
        column: 17,
        span: 12487..12491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 476,
        column: 18,
        span: 12491..12492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*all\"",
        ),
        line: 476,
        column: 24,
        span: 12492..12498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
        column: 25,
        span: 12498..12499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 476,
        column: 28,
        span: 12500..12502,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 476,
        column: 31,
        span: 12503..12505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 476,
        column: 32,
        span: 12505..12506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 477,
        column: 4,
        span: 12550..12551,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 477,
        column: 5,
        span: 12551..12552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 477,
        column: 10,
        span: 12552..12557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
        column: 11,
        span: 12557..12558,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n\"",
        ),
        line: 477,
        column: 16,
        span: 12558..12563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
        column: 17,
        span: 12563..12564,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 477,
        column: 18,
        span: 12564..12565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 477,
        column: 22,
        span: 12565..12569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 477,
        column: 23,
        span: 12569..12570,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 477,
        column: 28,
        span: 12570..12575,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 477,
        column: 29,
        span: 12575..12576,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 477,
        column: 31,
        span: 12576..12578,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 477,
        column: 32,
        span: 12578..12579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 478,
        column: 9,
        span: 12582..12588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 10,
        span: 12588..12589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 478,
        column: 12,
        span: 12589..12591,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 478,
        column: 13,
        span: 12591..12592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 478,
        column: 17,
        span: 12592..12596,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 478,
        column: 18,
        span: 12596..12597,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*all\"",
        ),
        line: 478,
        column: 24,
        span: 12597..12603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 25,
        span: 12603..12604,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 478,
        column: 28,
        span: 12605..12607,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xa\\n\"",
        ),
        line: 478,
        column: 35,
        span: 12608..12614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 478,
        column: 36,
        span: 12614..12615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 479,
        column: 4,
        span: 12647..12648,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 479,
        column: 5,
        span: 12648..12649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 479,
        column: 10,
        span: 12649..12654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
        column: 11,
        span: 12654..12655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
        column: 12,
        span: 12655..12656,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 479,
        column: 13,
        span: 12656..12657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fr",
        ),
        line: 479,
        column: 16,
        span: 12658..12660,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 479,
        column: 17,
        span: 12660..12661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 479,
        column: 22,
        span: 12661..12666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 479,
        column: 23,
        span: 12666..12667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 479,
        column: 24,
        span: 12667..12668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 480,
        column: 9,
        span: 12671..12677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 10,
        span: 12677..12678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 480,
        column: 12,
        span: 12678..12680,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 480,
        column: 13,
        span: 12680..12681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 480,
        column: 19,
        span: 12681..12687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 480,
        column: 20,
        span: 12687..12688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 480,
        column: 24,
        span: 12688..12692,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 25,
        span: 12692..12693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 480,
        column: 26,
        span: 12693..12694,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 481,
        column: 0,
        span: 12695..12698,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 484,
        column: 3,
        span: 12701..12703,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 484,
        column: 7,
        span: 12704..12707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 484,
        column: 13,
        span: 12708..12713,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 484,
        column: 0,
        span: 12714..12718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 485,
        column: 8,
        span: 12721..12726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 485,
        column: 9,
        span: 12726..12727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing large files (> BUFSIZ)\"",
        ),
        line: 485,
        column: 41,
        span: 12727..12759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 485,
        column: 42,
        span: 12759..12760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 486,
        column: 5,
        span: 12763..12765,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 486,
        column: 6,
        span: 12765..12766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 486,
        column: 12,
        span: 12766..12772,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 486,
        column: 13,
        span: 12772..12773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 486,
        column: 17,
        span: 12773..12777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 486,
        column: 18,
        span: 12777..12778,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 487,
        column: 6,
        span: 12781..12784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 487,
        column: 8,
        span: 12785..12786,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 487,
        column: 9,
        span: 12786..12787,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
        column: 10,
        span: 12786..12788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 487,
        column: 11,
        span: 12788..12789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        line: 487,
        column: 15,
        span: 12788..12793,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 487,
        column: 18,
        span: 12794..12796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 487,
        column: 21,
        span: 12797..12799,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 487,
        column: 22,
        span: 12799..12800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 487,
        column: 27,
        span: 12800..12805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 487,
        column: 28,
        span: 12805..12806,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789123'",
        ),
        line: 487,
        column: 43,
        span: 12806..12821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 487,
        column: 44,
        span: 12821..12822,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 487,
        column: 0,
        span: 12823..12826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 488,
        column: 5,
        span: 12829..12831,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 488,
        column: 6,
        span: 12831..12832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 488,
        column: 11,
        span: 12832..12837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
        column: 12,
        span: 12837..12838,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n12346'",
        ),
        line: 488,
        column: 21,
        span: 12838..12847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
        column: 22,
        span: 12847..12848,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 488,
        column: 23,
        span: 12848..12849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 488,
        column: 28,
        span: 12849..12854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 488,
        column: 29,
        span: 12854..12855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 488,
        column: 30,
        span: 12855..12856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 489,
        column: 5,
        span: 12859..12861,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 489,
        column: 6,
        span: 12861..12862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 489,
        column: 11,
        span: 12862..12867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 489,
        column: 12,
        span: 12867..12868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 489,
        column: 16,
        span: 12868..12872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 489,
        column: 17,
        span: 12872..12873,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 490,
        column: 8,
        span: 12876..12881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 490,
        column: 10,
        span: 12882..12883,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 490,
        column: 12,
        span: 12884..12885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 490,
        column: 15,
        span: 12886..12888,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 490,
        column: 16,
        span: 12888..12889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 490,
        column: 20,
        span: 12889..12893,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 490,
        column: 21,
        span: 12893..12894,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'*a'",
        ),
        line: 490,
        column: 25,
        span: 12894..12898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 490,
        column: 26,
        span: 12898..12899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 491,
        column: 5,
        span: 12902..12904,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 491,
        column: 6,
        span: 12904..12905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 491,
        column: 11,
        span: 12905..12910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
        column: 12,
        span: 12910..12911,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
        column: 13,
        span: 12911..12912,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 491,
        column: 14,
        span: 12912..12913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 491,
        column: 18,
        span: 12913..12917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 491,
        column: 19,
        span: 12917..12918,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 491,
        column: 24,
        span: 12918..12923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 491,
        column: 25,
        span: 12923..12924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 491,
        column: 27,
        span: 12924..12926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 491,
        column: 28,
        span: 12926..12927,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 492,
        column: 8,
        span: 12930..12935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 492,
        column: 10,
        span: 12936..12937,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 492,
        column: 12,
        span: 12938..12939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 492,
        column: 15,
        span: 12940..12942,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 492,
        column: 16,
        span: 12942..12943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 492,
        column: 20,
        span: 12943..12947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 21,
        span: 12947..12948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30001",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 26,
        span: 12947..12953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 27,
        span: 12953..12954,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 492,
        column: 29,
        span: 12954..12956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 492,
        column: 31,
        span: 12956..12958,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 492,
        column: 32,
        span: 12958..12959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 492,
        column: 36,
        span: 12959..12963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 37,
        span: 12963..12964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1005",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 41,
        span: 12963..12968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 42,
        span: 12968..12969,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 492,
        column: 44,
        span: 12969..12971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 492,
        column: 46,
        span: 12971..12973,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 492,
        column: 47,
        span: 12973..12974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 492,
        column: 51,
        span: 12974..12978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 492,
        column: 52,
        span: 12978..12979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 492,
        column: 53,
        span: 12978..12980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 492,
        column: 54,
        span: 12980..12981,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 492,
        column: 56,
        span: 12981..12983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 493,
        column: 15,
        span: 12996..12998,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 493,
        column: 16,
        span: 12998..12999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 493,
        column: 20,
        span: 12999..13003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
        column: 21,
        span: 13003..13004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 493,
        column: 22,
        span: 13003..13005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
        column: 23,
        span: 13005..13006,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 493,
        column: 25,
        span: 13006..13008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 493,
        column: 27,
        span: 13008..13010,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 493,
        column: 28,
        span: 13010..13011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 493,
        column: 32,
        span: 13011..13015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 493,
        column: 33,
        span: 13015..13016,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100003",
                    after_decimal: "",
                },
            ),
        ),
        line: 493,
        column: 39,
        span: 13015..13022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 493,
        column: 40,
        span: 13022..13023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 494,
        column: 9,
        span: 13026..13032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 494,
        column: 10,
        span: 13032..13033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 494,
        column: 11,
        span: 13033..13034,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 494,
        column: 14,
        span: 13035..13037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 494,
        column: 16,
        span: 13038..13039,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 494,
        column: 20,
        span: 13040..13043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 494,
        column: 27,
        span: 13044..13050,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 494,
        column: 28,
        span: 13050..13051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 494,
        column: 31,
        span: 13051..13054,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 494,
        column: 32,
        span: 13054..13055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 494,
        column: 33,
        span: 13055..13056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 494,
        column: 34,
        span: 13056..13057,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 494,
        column: 37,
        span: 13058..13060,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        line: 494,
        column: 42,
        span: 13060..13065,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 494,
        column: 43,
        span: 13065..13066,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 494,
        column: 45,
        span: 13065..13068,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 494,
        column: 47,
        span: 13069..13070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 494,
        column: 49,
        span: 13070..13072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 494,
        column: 50,
        span: 13072..13073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 495,
        column: 5,
        span: 13076..13078,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 495,
        column: 6,
        span: 13078..13079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 495,
        column: 11,
        span: 13079..13084,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 12,
        span: 13084..13085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 13,
        span: 13085..13086,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 495,
        column: 14,
        span: 13086..13087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 495,
        column: 18,
        span: 13087..13091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 495,
        column: 19,
        span: 13091..13092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 495,
        column: 24,
        span: 13092..13097,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 495,
        column: 25,
        span: 13097..13098,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 495,
        column: 27,
        span: 13098..13100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 495,
        column: 28,
        span: 13100..13101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 496,
        column: 4,
        span: 13104..13105,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 496,
        column: 6,
        span: 13106..13107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 496,
        column: 9,
        span: 13108..13110,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 496,
        column: 10,
        span: 13110..13111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 496,
        column: 14,
        span: 13111..13115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 496,
        column: 15,
        span: 13115..13116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 496,
        column: 16,
        span: 13116..13117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 497,
        column: 9,
        span: 13134..13140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 497,
        column: 10,
        span: 13140..13141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 497,
        column: 11,
        span: 13141..13142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 497,
        column: 14,
        span: 13143..13145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 497,
        column: 16,
        span: 13146..13147,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 497,
        column: 18,
        span: 13147..13149,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n'",
        ),
        line: 497,
        column: 22,
        span: 13149..13153,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 497,
        column: 24,
        span: 13153..13155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 497,
        column: 26,
        span: 13155..13157,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 497,
        column: 27,
        span: 13157..13158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 497,
        column: 31,
        span: 13158..13162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 497,
        column: 32,
        span: 13162..13163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 497,
        column: 33,
        span: 13163..13164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 497,
        column: 34,
        span: 13164..13165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 498,
        column: 9,
        span: 13168..13174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 498,
        column: 10,
        span: 13174..13175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 498,
        column: 12,
        span: 13175..13177,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 498,
        column: 13,
        span: 13177..13178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 498,
        column: 17,
        span: 13178..13182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 498,
        column: 18,
        span: 13182..13183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 498,
        column: 19,
        span: 13183..13184,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 498,
        column: 22,
        span: 13185..13187,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 498,
        column: 26,
        span: 13188..13191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 498,
        column: 27,
        span: 13191..13192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 499,
        column: 5,
        span: 13195..13197,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 499,
        column: 6,
        span: 13197..13198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 499,
        column: 11,
        span: 13198..13203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 499,
        column: 12,
        span: 13203..13204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 499,
        column: 14,
        span: 13204..13206,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 499,
        column: 15,
        span: 13206..13207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 499,
        column: 20,
        span: 13207..13212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 499,
        column: 21,
        span: 13212..13213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 499,
        column: 22,
        span: 13213..13214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 499,
        column: 23,
        span: 13214..13215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 500,
        column: 9,
        span: 13218..13224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 500,
        column: 10,
        span: 13224..13225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 500,
        column: 12,
        span: 13225..13227,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 500,
        column: 13,
        span: 13227..13228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 500,
        column: 19,
        span: 13228..13234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 500,
        column: 20,
        span: 13234..13235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "file",
        ),
        line: 500,
        column: 24,
        span: 13235..13239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 500,
        column: 25,
        span: 13239..13240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 500,
        column: 26,
        span: 13240..13241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 501,
        column: 4,
        span: 13244..13245,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 501,
        column: 6,
        span: 13246..13247,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 501,
        column: 10,
        span: 13248..13251,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 501,
        column: 11,
        span: 13251..13252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 501,
        column: 13,
        span: 13253..13254,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 501,
        column: 15,
        span: 13255..13256,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 501,
        column: 0,
        span: 13257..13260,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 502,
        column: 0,
        span: 13261..13264,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 504,
        column: 3,
        span: 13266..13268,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 504,
        column: 7,
        span: 13269..13272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_noposix",
        ),
        line: 504,
        column: 16,
        span: 13273..13281,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 504,
        column: 0,
        span: 13282..13286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 505,
        column: 8,
        span: 13289..13294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 505,
        column: 9,
        span: 13294..13295,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing popen/pclose and execute\"",
        ),
        line: 505,
        column: 43,
        span: 13295..13329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 505,
        column: 44,
        span: 13329..13330,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 506,
        column: 8,
        span: 13333..13338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tests",
        ),
        line: 506,
        column: 14,
        span: 13339..13344,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 506,
        column: 16,
        span: 13345..13346,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 506,
        column: 18,
        span: 13347..13348,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 508,
        column: 6,
        span: 13383..13384,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ls > /dev/null\"",
        ),
        line: 508,
        column: 22,
        span: 13384..13400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 508,
        column: 23,
        span: 13400..13401,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        line: 508,
        column: 28,
        span: 13402..13406,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 508,
        column: 29,
        span: 13406..13407,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 508,
        column: 30,
        span: 13407..13408,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 509,
        column: 6,
        span: 13413..13414,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not-to-be-found-command\"",
        ),
        line: 509,
        column: 31,
        span: 13414..13439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 509,
        column: 32,
        span: 13439..13440,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        line: 509,
        column: 39,
        span: 13441..13447,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 509,
        column: 40,
        span: 13447..13448,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 509,
        column: 41,
        span: 13448..13449,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 510,
        column: 6,
        span: 13454..13455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit 3\"",
        ),
        line: 510,
        column: 14,
        span: 13455..13463,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 510,
        column: 15,
        span: 13463..13464,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        line: 510,
        column: 22,
        span: 13465..13471,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 510,
        column: 23,
        span: 13471..13472,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 510,
        column: 25,
        span: 13472..13474,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 510,
        column: 26,
        span: 13474..13475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 510,
        column: 27,
        span: 13475..13476,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 511,
        column: 6,
        span: 13481..13482,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit 129\"",
        ),
        line: 511,
        column: 16,
        span: 13482..13492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 511,
        column: 17,
        span: 13492..13493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        line: 511,
        column: 24,
        span: 13494..13500,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 511,
        column: 25,
        span: 13500..13501,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "129",
                    after_decimal: "",
                },
            ),
        ),
        line: 511,
        column: 29,
        span: 13501..13505,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 511,
        column: 30,
        span: 13505..13506,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 511,
        column: 31,
        span: 13506..13507,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 512,
        column: 6,
        span: 13512..13513,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kill -s HUP $$\"",
        ),
        line: 512,
        column: 22,
        span: 13513..13529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 512,
        column: 23,
        span: 13529..13530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"signal\"",
        ),
        line: 512,
        column: 32,
        span: 13531..13539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 512,
        column: 33,
        span: 13539..13540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 512,
        column: 35,
        span: 13540..13542,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 512,
        column: 36,
        span: 13542..13543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 512,
        column: 37,
        span: 13543..13544,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 513,
        column: 6,
        span: 13549..13550,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kill -s KILL $$\"",
        ),
        line: 513,
        column: 23,
        span: 13550..13567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 513,
        column: 24,
        span: 13567..13568,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"signal\"",
        ),
        line: 513,
        column: 33,
        span: 13569..13577,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 513,
        column: 34,
        span: 13577..13578,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 513,
        column: 36,
        span: 13578..13580,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 513,
        column: 37,
        span: 13580..13581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 513,
        column: 38,
        span: 13581..13582,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 514,
        column: 6,
        span: 13587..13588,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sh -c 'kill -s HUP $$'\"",
        ),
        line: 514,
        column: 30,
        span: 13588..13612,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 514,
        column: 31,
        span: 13612..13613,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        line: 514,
        column: 38,
        span: 13614..13620,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 514,
        column: 39,
        span: 13620..13621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 514,
        column: 40,
        span: 13621..13622,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 515,
        column: 6,
        span: 13627..13628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua -e \"os.exit(20, true)\"'",
        ),
        line: 515,
        column: 34,
        span: 13628..13656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 515,
        column: 35,
        span: 13656..13657,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exit\"",
        ),
        line: 515,
        column: 42,
        span: 13658..13664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 515,
        column: 43,
        span: 13664..13665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 515,
        column: 46,
        span: 13665..13668,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 515,
        column: 47,
        span: 13668..13669,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 515,
        column: 48,
        span: 13669..13670,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 516,
        column: 4,
        span: 13673..13674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 517,
        column: 8,
        span: 13677..13682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 517,
        column: 9,
        span: 13682..13683,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n(some error messages are expected now)\"",
        ),
        line: 517,
        column: 51,
        span: 13683..13725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 517,
        column: 52,
        span: 13725..13726,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 518,
        column: 6,
        span: 13729..13732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 518,
        column: 8,
        span: 13733..13734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 518,
        column: 9,
        span: 13734..13735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 518,
        column: 11,
        span: 13736..13737,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 518,
        column: 14,
        span: 13738..13740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 518,
        column: 21,
        span: 13741..13747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 518,
        column: 22,
        span: 13747..13748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tests",
        ),
        line: 518,
        column: 27,
        span: 13748..13753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 518,
        column: 28,
        span: 13753..13754,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 518,
        column: 0,
        span: 13755..13757,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 519,
        column: 10,
        span: 13762..13767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 519,
        column: 12,
        span: 13768..13769,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 519,
        column: 13,
        span: 13769..13770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 519,
        column: 15,
        span: 13771..13772,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 519,
        column: 16,
        span: 13772..13773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 519,
        column: 18,
        span: 13774..13775,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 519,
        column: 20,
        span: 13776..13777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 519,
        column: 23,
        span: 13778..13780,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 519,
        column: 24,
        span: 13780..13781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "popen",
        ),
        line: 519,
        column: 29,
        span: 13781..13786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
        column: 30,
        span: 13786..13787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 519,
        column: 31,
        span: 13787..13788,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 519,
        column: 32,
        span: 13788..13789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 519,
        column: 33,
        span: 13788..13790,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 519,
        column: 34,
        span: 13790..13791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
        column: 35,
        span: 13791..13792,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 519,
        column: 36,
        span: 13792..13793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 519,
        column: 41,
        span: 13793..13798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 519,
        column: 42,
        span: 13798..13799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 519,
        column: 43,
        span: 13799..13800,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 520,
        column: 10,
        span: 13805..13810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 520,
        column: 13,
        span: 13811..13813,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 520,
        column: 14,
        span: 13813..13814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y1",
        ),
        line: 520,
        column: 17,
        span: 13815..13817,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 520,
        column: 18,
        span: 13817..13818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z1",
        ),
        line: 520,
        column: 21,
        span: 13819..13821,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 520,
        column: 23,
        span: 13822..13823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 520,
        column: 26,
        span: 13824..13826,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 520,
        column: 27,
        span: 13826..13827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 520,
        column: 34,
        span: 13827..13834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 520,
        column: 35,
        span: 13834..13835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 520,
        column: 36,
        span: 13835..13836,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 520,
        column: 37,
        span: 13836..13837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 520,
        column: 38,
        span: 13836..13838,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 520,
        column: 39,
        span: 13838..13839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 520,
        column: 40,
        span: 13839..13840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 521,
        column: 11,
        span: 13845..13851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 521,
        column: 12,
        span: 13851..13852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 521,
        column: 13,
        span: 13852..13853,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 521,
        column: 16,
        span: 13854..13856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 521,
        column: 19,
        span: 13857..13859,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 521,
        column: 23,
        span: 13860..13863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 521,
        column: 25,
        span: 13864..13865,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 521,
        column: 28,
        span: 13866..13868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y1",
        ),
        line: 521,
        column: 31,
        span: 13869..13871,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 521,
        column: 35,
        span: 13872..13875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 521,
        column: 37,
        span: 13876..13877,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 521,
        column: 40,
        span: 13878..13880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z1",
        ),
        line: 521,
        column: 43,
        span: 13881..13883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 521,
        column: 44,
        span: 13883..13884,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 522,
        column: 7,
        span: 13889..13891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 522,
        column: 9,
        span: 13892..13893,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 522,
        column: 10,
        span: 13893..13894,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 522,
        column: 11,
        span: 13893..13895,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 522,
        column: 12,
        span: 13895..13896,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 522,
        column: 15,
        span: 13897..13899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        line: 522,
        column: 20,
        span: 13900..13904,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 522,
        column: 0,
        span: 13905..13909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 523,
        column: 13,
        span: 13916..13922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 523,
        column: 14,
        span: 13922..13923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 523,
        column: 15,
        span: 13923..13924,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 523,
        column: 18,
        span: 13925..13927,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 523,
        column: 23,
        span: 13928..13932,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 523,
        column: 27,
        span: 13933..13936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 523,
        column: 29,
        span: 13937..13938,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 523,
        column: 32,
        span: 13939..13941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'exit'",
        ),
        line: 523,
        column: 39,
        span: 13942..13948,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 523,
        column: 43,
        span: 13949..13952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 523,
        column: 45,
        span: 13953..13954,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 523,
        column: 48,
        span: 13955..13957,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 523,
        column: 50,
        span: 13957..13959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 523,
        column: 51,
        span: 13959..13960,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 524,
        column: 0,
        span: 13965..13969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 525,
        column: 13,
        span: 13976..13982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 525,
        column: 14,
        span: 13982..13983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 525,
        column: 15,
        span: 13983..13984,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 525,
        column: 18,
        span: 13985..13987,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 525,
        column: 22,
        span: 13988..13991,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 525,
        column: 26,
        span: 13992..13995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 525,
        column: 28,
        span: 13996..13997,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 525,
        column: 31,
        span: 13998..14000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 525,
        column: 33,
        span: 14001..14002,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 525,
        column: 34,
        span: 14002..14003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 525,
        column: 35,
        span: 14002..14004,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 525,
        column: 36,
        span: 14004..14005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 525,
        column: 37,
        span: 14005..14006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 527,
        column: 13,
        span: 14105..14111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 527,
        column: 14,
        span: 14111..14112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 527,
        column: 15,
        span: 14112..14113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 527,
        column: 16,
        span: 14113..14114,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 527,
        column: 17,
        span: 14114..14115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 527,
        column: 18,
        span: 14114..14116,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 527,
        column: 19,
        span: 14116..14117,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 527,
        column: 22,
        span: 14118..14120,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 527,
        column: 26,
        span: 14121..14124,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 527,
        column: 30,
        span: 14125..14128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 527,
        column: 32,
        span: 14129..14130,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 527,
        column: 34,
        span: 14131..14132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 527,
        column: 36,
        span: 14132..14134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 527,
        column: 37,
        span: 14134..14135,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 527,
        column: 40,
        span: 14136..14138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 527,
        column: 42,
        span: 14139..14140,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 527,
        column: 43,
        span: 14140..14141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 527,
        column: 44,
        span: 14140..14142,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 527,
        column: 45,
        span: 14142..14143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 527,
        column: 48,
        span: 14144..14146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 527,
        column: 50,
        span: 14147..14148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 527,
        column: 51,
        span: 14148..14149,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 528,
        column: 0,
        span: 14154..14157,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 529,
        column: 0,
        span: 14160..14163,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 530,
        column: 0,
        span: 14164..14167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 534,
        column: 2,
        span: 14189..14190,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 534,
        column: 4,
        span: 14191..14192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 534,
        column: 7,
        span: 14193..14195,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 534,
        column: 8,
        span: 14195..14196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpfile",
        ),
        line: 534,
        column: 15,
        span: 14196..14203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 534,
        column: 16,
        span: 14203..14204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 534,
        column: 17,
        span: 14204..14205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 535,
        column: 7,
        span: 14206..14212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 8,
        span: 14212..14213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 535,
        column: 10,
        span: 14213..14215,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 535,
        column: 11,
        span: 14215..14216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 535,
        column: 15,
        span: 14216..14220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 535,
        column: 16,
        span: 14220..14221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 535,
        column: 17,
        span: 14221..14222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 18,
        span: 14222..14223,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 535,
        column: 21,
        span: 14224..14226,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file\"",
        ),
        line: 535,
        column: 28,
        span: 14227..14233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 535,
        column: 29,
        span: 14233..14234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 536,
        column: 2,
        span: 14235..14236,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 536,
        column: 3,
        span: 14236..14237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 536,
        column: 8,
        span: 14237..14242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 536,
        column: 9,
        span: 14242..14243,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 536,
        column: 14,
        span: 14243..14248,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 536,
        column: 15,
        span: 14248..14249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 537,
        column: 2,
        span: 14250..14251,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 537,
        column: 3,
        span: 14251..14252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "seek",
        ),
        line: 537,
        column: 7,
        span: 14252..14256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 537,
        column: 8,
        span: 14256..14257,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"set\"",
        ),
        line: 537,
        column: 13,
        span: 14257..14262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 537,
        column: 14,
        span: 14262..14263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 538,
        column: 7,
        span: 14264..14270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 538,
        column: 8,
        span: 14270..14271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 538,
        column: 9,
        span: 14271..14272,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 538,
        column: 10,
        span: 14272..14273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 538,
        column: 14,
        span: 14273..14277,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a\"",
        ),
        line: 538,
        column: 18,
        span: 14277..14281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 538,
        column: 21,
        span: 14282..14284,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 538,
        column: 27,
        span: 14285..14290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 538,
        column: 28,
        span: 14290..14291,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 540,
        column: 4,
        span: 14293..14296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 542,
        column: 6,
        span: 14302..14307,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 542,
        column: 9,
        span: 14307..14310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 545,
        column: 7,
        span: 14313..14319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 545,
        column: 8,
        span: 14319..14320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 545,
        column: 10,
        span: 14320..14322,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 545,
        column: 11,
        span: 14322..14323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 545,
        column: 15,
        span: 14323..14327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 545,
        column: 16,
        span: 14327..14328,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 545,
        column: 18,
        span: 14328..14330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 545,
        column: 19,
        span: 14330..14331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 545,
        column: 22,
        span: 14332..14334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 545,
        column: 25,
        span: 14335..14337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 545,
        column: 26,
        span: 14337..14338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 546,
        column: 7,
        span: 14339..14345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 546,
        column: 8,
        span: 14345..14346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 546,
        column: 10,
        span: 14346..14348,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 546,
        column: 11,
        span: 14348..14349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 546,
        column: 15,
        span: 14349..14353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 546,
        column: 16,
        span: 14353..14354,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!\"",
        ),
        line: 546,
        column: 19,
        span: 14354..14357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 546,
        column: 20,
        span: 14357..14358,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 546,
        column: 23,
        span: 14359..14361,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 546,
        column: 26,
        span: 14362..14364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 546,
        column: 27,
        span: 14364..14365,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 547,
        column: 6,
        span: 14366..14371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 547,
        column: 8,
        span: 14372..14373,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 547,
        column: 10,
        span: 14374..14375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 547,
        column: 17,
        span: 14376..14382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 547,
        column: 18,
        span: 14382..14383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 547,
        column: 21,
        span: 14383..14386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 547,
        column: 22,
        span: 14386..14387,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 547,
        column: 25,
        span: 14387..14390,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 547,
        column: 26,
        span: 14390..14391,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 547,
        column: 32,
        span: 14391..14397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 547,
        column: 33,
        span: 14397..14398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 548,
        column: 7,
        span: 14399..14405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
        column: 8,
        span: 14405..14406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 548,
        column: 10,
        span: 14406..14408,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 548,
        column: 11,
        span: 14408..14409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 548,
        column: 15,
        span: 14409..14413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 548,
        column: 16,
        span: 14413..14414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 548,
        column: 17,
        span: 14414..14415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
        column: 18,
        span: 14415..14416,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 548,
        column: 21,
        span: 14417..14419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 548,
        column: 23,
        span: 14420..14421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 548,
        column: 24,
        span: 14421..14422,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 549,
        column: 6,
        span: 14423..14428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 549,
        column: 8,
        span: 14429..14430,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 549,
        column: 10,
        span: 14431..14432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 549,
        column: 13,
        span: 14433..14435,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 549,
        column: 14,
        span: 14435..14436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 549,
        column: 18,
        span: 14436..14440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 549,
        column: 19,
        span: 14440..14441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 549,
        column: 20,
        span: 14441..14442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 550,
        column: 2,
        span: 14443..14444,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 550,
        column: 4,
        span: 14445..14446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 550,
        column: 7,
        span: 14447..14449,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 550,
        column: 8,
        span: 14449..14450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 550,
        column: 12,
        span: 14450..14454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 550,
        column: 13,
        span: 14454..14455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        line: 550,
        column: 17,
        span: 14455..14459,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 550,
        column: 18,
        span: 14459..14460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 550,
        column: 20,
        span: 14461..14462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 550,
        column: 21,
        span: 14462..14463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 551,
        column: 7,
        span: 14464..14470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 551,
        column: 8,
        span: 14470..14471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 551,
        column: 10,
        span: 14471..14473,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 551,
        column: 11,
        span: 14473..14474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 551,
        column: 15,
        span: 14474..14478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 551,
        column: 16,
        span: 14478..14479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 551,
        column: 22,
        span: 14479..14485,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 551,
        column: 23,
        span: 14485..14486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 551,
        column: 26,
        span: 14486..14489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 551,
        column: 27,
        span: 14489..14490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 551,
        column: 31,
        span: 14490..14494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 551,
        column: 32,
        span: 14494..14495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 551,
        column: 37,
        span: 14495..14500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 551,
        column: 38,
        span: 14500..14501,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 551,
        column: 39,
        span: 14501..14502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 551,
        column: 41,
        span: 14503..14504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 551,
        column: 42,
        span: 14504..14505,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 551,
        column: 45,
        span: 14506..14508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 552,
        column: 14,
        span: 14516..14522,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 552,
        column: 15,
        span: 14522..14523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 552,
        column: 18,
        span: 14523..14526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
        column: 19,
        span: 14526..14527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 552,
        column: 21,
        span: 14527..14529,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 552,
        column: 22,
        span: 14529..14530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 552,
        column: 26,
        span: 14530..14534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 552,
        column: 27,
        span: 14534..14535,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 552,
        column: 31,
        span: 14535..14539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 552,
        column: 32,
        span: 14539..14540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 552,
        column: 34,
        span: 14541..14542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
        column: 35,
        span: 14542..14543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 552,
        column: 36,
        span: 14543..14544,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 552,
        column: 41,
        span: 14544..14549,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
        column: 42,
        span: 14549..14550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 552,
        column: 43,
        span: 14550..14551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 553,
        column: 7,
        span: 14552..14558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 8,
        span: 14558..14559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 553,
        column: 10,
        span: 14559..14561,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 553,
        column: 11,
        span: 14561..14562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 553,
        column: 15,
        span: 14562..14566,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 16,
        span: 14566..14567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 553,
        column: 22,
        span: 14567..14573,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 553,
        column: 23,
        span: 14573..14574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 553,
        column: 26,
        span: 14574..14577,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 27,
        span: 14577..14578,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 553,
        column: 30,
        span: 14578..14581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 553,
        column: 31,
        span: 14581..14582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 553,
        column: 35,
        span: 14582..14586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 36,
        span: 14586..14587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 37,
        span: 14587..14588,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 553,
        column: 40,
        span: 14589..14591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 553,
        column: 47,
        span: 14592..14598,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 553,
        column: 48,
        span: 14598..14599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 553,
        column: 51,
        span: 14599..14602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 553,
        column: 52,
        span: 14602..14603,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 553,
        column: 55,
        span: 14603..14606,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 553,
        column: 56,
        span: 14606..14607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 553,
        column: 60,
        span: 14607..14611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 61,
        span: 14611..14612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 553,
        column: 62,
        span: 14612..14613,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 555,
        column: 6,
        span: 14615..14620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 555,
        column: 8,
        span: 14621..14622,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 555,
        column: 10,
        span: 14623..14624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 555,
        column: 13,
        span: 14625..14627,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 555,
        column: 14,
        span: 14627..14628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 555,
        column: 18,
        span: 14628..14632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 555,
        column: 19,
        span: 14632..14633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 555,
        column: 20,
        span: 14633..14634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 556,
        column: 2,
        span: 14635..14636,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 556,
        column: 4,
        span: 14637..14638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 556,
        column: 7,
        span: 14639..14641,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 556,
        column: 8,
        span: 14641..14642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 556,
        column: 12,
        span: 14642..14646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 556,
        column: 13,
        span: 14646..14647,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        line: 556,
        column: 17,
        span: 14647..14651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 556,
        column: 18,
        span: 14651..14652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 556,
        column: 20,
        span: 14653..14654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 556,
        column: 21,
        span: 14654..14655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 557,
        column: 5,
        span: 14656..14660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 557,
        column: 6,
        span: 14660..14661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 557,
        column: 8,
        span: 14661..14663,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 557,
        column: 9,
        span: 14663..14664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 557,
        column: 13,
        span: 14664..14668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 557,
        column: 14,
        span: 14668..14669,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[assert(D.year==%Y and D.month==%m and D.day==%d and\n  D.hour==%H and D.min==%M and D.sec==%S and\n  D.wday==%w+1 and D.yday==%j and type(D.isdst) == 'boolean')]]",
        ),
        line: 559,
        column: 64,
        span: 14669..14831,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 559,
        column: 65,
        span: 14831..14832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 559,
        column: 67,
        span: 14833..14834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 559,
        column: 68,
        span: 14834..14835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 559,
        column: 69,
        span: 14835..14836,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 559,
        column: 70,
        span: 14836..14837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 559,
        column: 71,
        span: 14837..14838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 561,
        column: 7,
        span: 14840..14846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 561,
        column: 8,
        span: 14846..14847,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 561,
        column: 11,
        span: 14847..14850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 561,
        column: 17,
        span: 14851..14856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 561,
        column: 18,
        span: 14856..14857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 561,
        column: 20,
        span: 14857..14859,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 561,
        column: 21,
        span: 14859..14860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 561,
        column: 25,
        span: 14860..14864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 561,
        column: 26,
        span: 14864..14865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%9\"",
        ),
        line: 561,
        column: 31,
        span: 14866..14870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 561,
        column: 32,
        span: 14870..14871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 561,
        column: 33,
        span: 14871..14872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 562,
        column: 7,
        span: 14907..14913,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 562,
        column: 8,
        span: 14913..14914,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 562,
        column: 11,
        span: 14914..14917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 562,
        column: 17,
        span: 14918..14923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 562,
        column: 18,
        span: 14923..14924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 562,
        column: 20,
        span: 14924..14926,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 562,
        column: 21,
        span: 14926..14927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 562,
        column: 25,
        span: 14927..14931,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 562,
        column: 26,
        span: 14931..14932,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 562,
        column: 30,
        span: 14933..14936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 562,
        column: 31,
        span: 14936..14937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 562,
        column: 32,
        span: 14937..14938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 563,
        column: 7,
        span: 14973..14979,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 8,
        span: 14979..14980,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 563,
        column: 11,
        span: 14980..14983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 563,
        column: 17,
        span: 14984..14989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 563,
        column: 18,
        span: 14989..14990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 563,
        column: 20,
        span: 14990..14992,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 563,
        column: 21,
        span: 14992..14993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 563,
        column: 25,
        span: 14993..14997,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 563,
        column: 26,
        span: 14997..14998,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%O\"",
        ),
        line: 563,
        column: 31,
        span: 14999..15003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 32,
        span: 15003..15004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 563,
        column: 33,
        span: 15004..15005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 564,
        column: 7,
        span: 15040..15046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 564,
        column: 8,
        span: 15046..15047,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 564,
        column: 11,
        span: 15047..15050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 564,
        column: 17,
        span: 15051..15056,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 564,
        column: 18,
        span: 15056..15057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 564,
        column: 20,
        span: 15057..15059,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 564,
        column: 21,
        span: 15059..15060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 564,
        column: 25,
        span: 15060..15064,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 564,
        column: 26,
        span: 15064..15065,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%E\"",
        ),
        line: 564,
        column: 31,
        span: 15066..15070,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 564,
        column: 32,
        span: 15070..15071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 564,
        column: 33,
        span: 15071..15072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 565,
        column: 7,
        span: 15107..15113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 8,
        span: 15113..15114,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 565,
        column: 11,
        span: 15114..15117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 565,
        column: 17,
        span: 15118..15123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 565,
        column: 18,
        span: 15123..15124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 565,
        column: 20,
        span: 15124..15126,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 565,
        column: 21,
        span: 15126..15127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 565,
        column: 25,
        span: 15127..15131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 565,
        column: 26,
        span: 15131..15132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Ea\"",
        ),
        line: 565,
        column: 32,
        span: 15133..15138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 33,
        span: 15138..15139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 565,
        column: 34,
        span: 15139..15140,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 567,
        column: 3,
        span: 15176..15178,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 567,
        column: 7,
        span: 15179..15182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_noposix",
        ),
        line: 567,
        column: 16,
        span: 15183..15191,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 567,
        column: 0,
        span: 15192..15196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 568,
        column: 9,
        span: 15199..15205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 568,
        column: 10,
        span: 15205..15206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 568,
        column: 14,
        span: 15206..15210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 568,
        column: 15,
        span: 15210..15211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 568,
        column: 17,
        span: 15211..15213,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 568,
        column: 18,
        span: 15213..15214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 568,
        column: 22,
        span: 15214..15218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 568,
        column: 23,
        span: 15218..15219,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Ex\"",
        ),
        line: 568,
        column: 28,
        span: 15219..15224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 568,
        column: 29,
        span: 15224..15225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 568,
        column: 30,
        span: 15225..15226,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 568,
        column: 33,
        span: 15227..15229,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 568,
        column: 42,
        span: 15230..15238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 568,
        column: 43,
        span: 15238..15239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 569,
        column: 9,
        span: 15242..15248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 569,
        column: 10,
        span: 15248..15249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 569,
        column: 14,
        span: 15249..15253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 569,
        column: 15,
        span: 15253..15254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 569,
        column: 17,
        span: 15254..15256,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 569,
        column: 18,
        span: 15256..15257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 569,
        column: 22,
        span: 15257..15261,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 569,
        column: 23,
        span: 15261..15262,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%Oy\"",
        ),
        line: 569,
        column: 28,
        span: 15262..15267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 569,
        column: 29,
        span: 15267..15268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 569,
        column: 30,
        span: 15268..15269,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 569,
        column: 33,
        span: 15270..15272,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 569,
        column: 42,
        span: 15273..15281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 569,
        column: 43,
        span: 15281..15282,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 570,
        column: 0,
        span: 15283..15286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 572,
        column: 7,
        span: 15288..15294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 8,
        span: 15294..15295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 572,
        column: 10,
        span: 15295..15297,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 572,
        column: 11,
        span: 15297..15298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 572,
        column: 15,
        span: 15298..15302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 572,
        column: 16,
        span: 15302..15303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 572,
        column: 17,
        span: 15303..15304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
        column: 18,
        span: 15304..15305,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 572,
        column: 21,
        span: 15306..15308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 572,
        column: 23,
        span: 15309..15310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 572,
        column: 24,
        span: 15310..15311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 573,
        column: 7,
        span: 15312..15318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 8,
        span: 15318..15319,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 573,
        column: 11,
        span: 15319..15322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 573,
        column: 17,
        span: 15323..15328,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 573,
        column: 18,
        span: 15328..15329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 573,
        column: 20,
        span: 15329..15331,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 573,
        column: 21,
        span: 15331..15332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 573,
        column: 25,
        span: 15332..15336,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 573,
        column: 26,
        span: 15336..15337,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 573,
        column: 28,
        span: 15338..15339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 573,
        column: 32,
        span: 15339..15343,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 573,
        column: 34,
        span: 15344..15345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 573,
        column: 37,
        span: 15345..15348,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 573,
        column: 38,
        span: 15348..15349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 39,
        span: 15349..15350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 573,
        column: 40,
        span: 15350..15351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 575,
        column: 2,
        span: 15353..15354,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 575,
        column: 4,
        span: 15355..15356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 575,
        column: 7,
        span: 15357..15359,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 575,
        column: 8,
        span: 15359..15360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 575,
        column: 12,
        span: 15360..15364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 575,
        column: 13,
        span: 15364..15365,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"!*t\"",
        ),
        line: 575,
        column: 18,
        span: 15365..15370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 575,
        column: 19,
        span: 15370..15371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 575,
        column: 21,
        span: 15372..15373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 575,
        column: 22,
        span: 15373..15374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 576,
        column: 5,
        span: 15375..15379,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 6,
        span: 15379..15380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 576,
        column: 8,
        span: 15380..15382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 576,
        column: 9,
        span: 15382..15383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 576,
        column: 13,
        span: 15383..15387,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 576,
        column: 14,
        span: 15387..15388,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[!assert(D.year==%Y and D.month==%m and D.day==%d and\n  D.hour==%H and D.min==%M and D.sec==%S and\n  D.wday==%w+1 and D.yday==%j and type(D.isdst) == 'boolean')]]",
        ),
        line: 578,
        column: 64,
        span: 15388..15551,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 578,
        column: 65,
        span: 15551..15552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 578,
        column: 67,
        span: 15553..15554,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
        column: 68,
        span: 15554..15555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
        column: 69,
        span: 15555..15556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 578,
        column: 70,
        span: 15556..15557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 578,
        column: 71,
        span: 15557..15558,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 580,
        column: 0,
        span: 15560..15562,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 581,
        column: 8,
        span: 15565..15570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 581,
        column: 10,
        span: 15571..15572,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 581,
        column: 12,
        span: 15573..15574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 581,
        column: 15,
        span: 15575..15577,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 581,
        column: 16,
        span: 15577..15578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 581,
        column: 20,
        span: 15578..15582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 581,
        column: 21,
        span: 15582..15583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        line: 581,
        column: 25,
        span: 15583..15587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 581,
        column: 26,
        span: 15587..15588,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 582,
        column: 8,
        span: 15591..15596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 582,
        column: 10,
        span: 15597..15598,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 582,
        column: 12,
        span: 15599..15600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 582,
        column: 15,
        span: 15601..15603,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 582,
        column: 16,
        span: 15603..15604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 582,
        column: 20,
        span: 15604..15608,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 582,
        column: 21,
        span: 15608..15609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 582,
        column: 22,
        span: 15609..15610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 582,
        column: 23,
        span: 15610..15611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 583,
        column: 9,
        span: 15614..15620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 583,
        column: 10,
        span: 15620..15621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 583,
        column: 14,
        span: 15621..15625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 583,
        column: 15,
        span: 15625..15626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 583,
        column: 16,
        span: 15626..15627,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 583,
        column: 17,
        span: 15627..15628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isdst",
        ),
        line: 583,
        column: 22,
        span: 15628..15633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 583,
        column: 23,
        span: 15633..15634,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 583,
        column: 26,
        span: 15635..15637,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'boolean'",
        ),
        line: 583,
        column: 36,
        span: 15638..15647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 583,
        column: 37,
        span: 15647..15648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 584,
        column: 4,
        span: 15651..15652,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 584,
        column: 5,
        span: 15652..15653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isdst",
        ),
        line: 584,
        column: 10,
        span: 15653..15658,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 584,
        column: 12,
        span: 15659..15660,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 584,
        column: 0,
        span: 15661..15664,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 585,
        column: 8,
        span: 15667..15672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 585,
        column: 11,
        span: 15673..15675,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 585,
        column: 13,
        span: 15676..15677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 585,
        column: 16,
        span: 15678..15680,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 585,
        column: 17,
        span: 15680..15681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 585,
        column: 21,
        span: 15681..15685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 585,
        column: 22,
        span: 15685..15686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 585,
        column: 23,
        span: 15686..15687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 585,
        column: 24,
        span: 15687..15688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 586,
        column: 9,
        span: 15691..15697,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 586,
        column: 10,
        span: 15697..15698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 586,
        column: 11,
        span: 15698..15699,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 586,
        column: 14,
        span: 15700..15702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 586,
        column: 17,
        span: 15703..15705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 586,
        column: 18,
        span: 15705..15706,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 587,
        column: 0,
        span: 15752..15755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 589,
        column: 2,
        span: 15757..15758,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 589,
        column: 4,
        span: 15759..15760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 589,
        column: 7,
        span: 15761..15763,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 589,
        column: 8,
        span: 15763..15764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 589,
        column: 12,
        span: 15764..15768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 589,
        column: 13,
        span: 15768..15769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 589,
        column: 14,
        span: 15769..15770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 589,
        column: 15,
        span: 15770..15771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 590,
        column: 2,
        span: 15772..15773,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 590,
        column: 3,
        span: 15773..15774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 590,
        column: 7,
        span: 15774..15778,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 590,
        column: 9,
        span: 15779..15780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 590,
        column: 11,
        span: 15781..15782,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 590,
        column: 12,
        span: 15782..15783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 590,
        column: 16,
        span: 15783..15787,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 590,
        column: 17,
        span: 15787..15788,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 590,
        column: 18,
        span: 15787..15789,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 590,
        column: 19,
        span: 15789..15790,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 591,
        column: 6,
        span: 15791..15796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 591,
        column: 9,
        span: 15797..15799,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 591,
        column: 11,
        span: 15800..15801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 591,
        column: 14,
        span: 15802..15804,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 591,
        column: 15,
        span: 15804..15805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 591,
        column: 19,
        span: 15805..15809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 591,
        column: 20,
        span: 15809..15810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 591,
        column: 21,
        span: 15810..15811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 591,
        column: 22,
        span: 15811..15812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 593,
        column: 7,
        span: 15837..15843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 593,
        column: 8,
        span: 15843..15844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 593,
        column: 12,
        span: 15844..15848,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 593,
        column: 13,
        span: 15848..15849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 593,
        column: 16,
        span: 15849..15852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 593,
        column: 17,
        span: 15852..15853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 593,
        column: 19,
        span: 15853..15855,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 593,
        column: 20,
        span: 15855..15856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 593,
        column: 28,
        span: 15856..15864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 593,
        column: 29,
        span: 15864..15865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 593,
        column: 30,
        span: 15865..15866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 593,
        column: 31,
        span: 15866..15867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 593,
        column: 33,
        span: 15867..15869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 593,
        column: 34,
        span: 15869..15870,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 593,
        column: 35,
        span: 15870..15871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 593,
        column: 36,
        span: 15871..15872,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 593,
        column: 38,
        span: 15871..15874,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 593,
        column: 39,
        span: 15874..15875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3600",
                    after_decimal: "",
                },
            ),
        ),
        line: 593,
        column: 43,
        span: 15874..15879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 593,
        column: 44,
        span: 15879..15880,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 593,
        column: 46,
        span: 15881..15882,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "365",
                    after_decimal: "",
                },
            ),
        ),
        line: 593,
        column: 50,
        span: 15882..15886,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 593,
        column: 51,
        span: 15886..15887,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 593,
        column: 53,
        span: 15888..15889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 593,
        column: 55,
        span: 15889..15891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 593,
        column: 56,
        span: 15891..15892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 595,
        column: 2,
        span: 15894..15895,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 595,
        column: 4,
        span: 15896..15897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 595,
        column: 7,
        span: 15898..15900,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 595,
        column: 8,
        span: 15900..15901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 595,
        column: 12,
        span: 15901..15905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 595,
        column: 13,
        span: 15905..15906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 595,
        column: 14,
        span: 15906..15907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 596,
        column: 3,
        span: 15908..15910,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 596,
        column: 5,
        span: 15911..15912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 596,
        column: 8,
        span: 15913..15915,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 596,
        column: 9,
        span: 15915..15916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 596,
        column: 13,
        span: 15916..15920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 596,
        column: 14,
        span: 15920..15921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 596,
        column: 16,
        span: 15921..15923,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 596,
        column: 17,
        span: 15923..15924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 596,
        column: 21,
        span: 15924..15928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 596,
        column: 22,
        span: 15928..15929,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*t\"",
        ),
        line: 596,
        column: 26,
        span: 15929..15933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 596,
        column: 27,
        span: 15933..15934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 596,
        column: 28,
        span: 15934..15935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 597,
        column: 7,
        span: 15936..15942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 597,
        column: 8,
        span: 15942..15943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 597,
        column: 10,
        span: 15943..15945,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 597,
        column: 11,
        span: 15945..15946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 597,
        column: 19,
        span: 15946..15954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 597,
        column: 20,
        span: 15954..15955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 597,
        column: 22,
        span: 15955..15957,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 597,
        column: 23,
        span: 15957..15958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 597,
        column: 24,
        span: 15958..15959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 597,
        column: 25,
        span: 15959..15960,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 597,
        column: 28,
        span: 15961..15963,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 597,
        column: 30,
        span: 15963..15965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 597,
        column: 31,
        span: 15965..15966,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 599,
        column: 6,
        span: 15968..15973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 599,
        column: 9,
        span: 15974..15976,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 599,
        column: 11,
        span: 15977..15978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 599,
        column: 14,
        span: 15979..15981,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 599,
        column: 15,
        span: 15981..15982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 599,
        column: 19,
        span: 15982..15986,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 599,
        column: 20,
        span: 15986..15987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 599,
        column: 24,
        span: 15987..15991,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 599,
        column: 25,
        span: 15991..15992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
        column: 29,
        span: 15991..15996,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 599,
        column: 30,
        span: 15996..15997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 599,
        column: 36,
        span: 15998..16003,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 599,
        column: 37,
        span: 16003..16004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
        column: 39,
        span: 16003..16006,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 599,
        column: 40,
        span: 16006..16007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 599,
        column: 44,
        span: 16008..16011,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 599,
        column: 45,
        span: 16011..16012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
        column: 46,
        span: 16011..16013,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 599,
        column: 47,
        span: 16013..16014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 599,
        column: 52,
        span: 16015..16019,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 599,
        column: 53,
        span: 16019..16020,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
        column: 55,
        span: 16019..16022,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 599,
        column: 56,
        span: 16022..16023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 599,
        column: 60,
        span: 16024..16027,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 599,
        column: 61,
        span: 16027..16028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 599,
        column: 63,
        span: 16027..16030,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 599,
        column: 64,
        span: 16030..16031,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 600,
        column: 6,
        span: 16032..16037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 600,
        column: 9,
        span: 16038..16040,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 600,
        column: 11,
        span: 16041..16042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 600,
        column: 14,
        span: 16043..16045,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 600,
        column: 15,
        span: 16045..16046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "time",
        ),
        line: 600,
        column: 19,
        span: 16046..16050,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 600,
        column: 20,
        span: 16050..16051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "year",
        ),
        line: 600,
        column: 24,
        span: 16051..16055,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 600,
        column: 25,
        span: 16055..16056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
        column: 29,
        span: 16055..16060,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 600,
        column: 30,
        span: 16060..16061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "month",
        ),
        line: 600,
        column: 36,
        span: 16062..16067,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 600,
        column: 37,
        span: 16067..16068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
        column: 39,
        span: 16067..16070,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 600,
        column: 40,
        span: 16070..16071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "day",
        ),
        line: 600,
        column: 44,
        span: 16072..16075,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 600,
        column: 45,
        span: 16075..16076,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
        column: 46,
        span: 16075..16077,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 600,
        column: 47,
        span: 16077..16078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hour",
        ),
        line: 600,
        column: 52,
        span: 16079..16083,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 600,
        column: 53,
        span: 16083..16084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
        column: 55,
        span: 16083..16086,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 600,
        column: 56,
        span: 16086..16087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 600,
        column: 60,
        span: 16088..16091,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 600,
        column: 61,
        span: 16091..16092,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
        column: 63,
        span: 16091..16094,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 600,
        column: 64,
        span: 16094..16095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sec",
        ),
        line: 600,
        column: 68,
        span: 16096..16099,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 600,
        column: 69,
        span: 16099..16100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 600,
        column: 71,
        span: 16099..16102,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 600,
        column: 72,
        span: 16102..16103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 601,
        column: 7,
        span: 16104..16110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 601,
        column: 8,
        span: 16110..16111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 601,
        column: 10,
        span: 16111..16113,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 601,
        column: 11,
        span: 16113..16114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "difftime",
        ),
        line: 601,
        column: 19,
        span: 16114..16122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 601,
        column: 20,
        span: 16122..16123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 601,
        column: 22,
        span: 16123..16125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 601,
        column: 23,
        span: 16125..16126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 601,
        column: 25,
        span: 16126..16128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 601,
        column: 26,
        span: 16128..16129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 601,
        column: 29,
        span: 16130..16132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 601,
        column: 32,
        span: 16132..16135,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 601,
        column: 33,
        span: 16135..16136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 601,
        column: 34,
        span: 16135..16137,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 601,
        column: 35,
        span: 16137..16138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 601,
        column: 37,
        span: 16137..16140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 601,
        column: 38,
        span: 16140..16141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 603,
        column: 3,
        span: 16143..16145,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 603,
        column: 4,
        span: 16145..16146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 603,
        column: 10,
        span: 16146..16152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 603,
        column: 11,
        span: 16152..16153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 603,
        column: 13,
        span: 16153..16155,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 603,
        column: 14,
        span: 16155..16156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdout",
        ),
        line: 603,
        column: 20,
        span: 16156..16162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 603,
        column: 21,
        span: 16162..16163,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 604,
        column: 6,
        span: 16164..16169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 604,
        column: 8,
        span: 16170..16171,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 604,
        column: 10,
        span: 16172..16173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 604,
        column: 13,
        span: 16174..16176,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 604,
        column: 14,
        span: 16176..16177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 604,
        column: 18,
        span: 16177..16181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 604,
        column: 19,
        span: 16181..16182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%d'",
        ),
        line: 604,
        column: 23,
        span: 16182..16186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 604,
        column: 24,
        span: 16186..16187,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 605,
        column: 6,
        span: 16188..16193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 605,
        column: 8,
        span: 16194..16195,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 605,
        column: 10,
        span: 16196..16197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 605,
        column: 13,
        span: 16198..16200,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 605,
        column: 14,
        span: 16200..16201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 605,
        column: 18,
        span: 16201..16205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 605,
        column: 19,
        span: 16205..16206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%m'",
        ),
        line: 605,
        column: 23,
        span: 16206..16210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 605,
        column: 24,
        span: 16210..16211,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 606,
        column: 6,
        span: 16212..16217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 606,
        column: 8,
        span: 16218..16219,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 606,
        column: 10,
        span: 16220..16221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 606,
        column: 13,
        span: 16222..16224,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 606,
        column: 14,
        span: 16224..16225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 606,
        column: 18,
        span: 16225..16229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 606,
        column: 19,
        span: 16229..16230,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%Y'",
        ),
        line: 606,
        column: 23,
        span: 16230..16234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 606,
        column: 24,
        span: 16234..16235,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 607,
        column: 6,
        span: 16236..16241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ds",
        ),
        line: 607,
        column: 9,
        span: 16242..16244,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 607,
        column: 11,
        span: 16245..16246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 607,
        column: 14,
        span: 16247..16249,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 607,
        column: 15,
        span: 16249..16250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 607,
        column: 19,
        span: 16250..16254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 607,
        column: 20,
        span: 16254..16255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%w'",
        ),
        line: 607,
        column: 24,
        span: 16255..16259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 607,
        column: 25,
        span: 16259..16260,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 607,
        column: 27,
        span: 16261..16262,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 607,
        column: 0,
        span: 16262..16264,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 608,
        column: 6,
        span: 16265..16270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 608,
        column: 8,
        span: 16271..16272,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 608,
        column: 10,
        span: 16273..16274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 608,
        column: 13,
        span: 16275..16277,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 608,
        column: 14,
        span: 16277..16278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 608,
        column: 18,
        span: 16278..16282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 608,
        column: 19,
        span: 16282..16283,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%H'",
        ),
        line: 608,
        column: 23,
        span: 16283..16287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 608,
        column: 24,
        span: 16287..16288,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 609,
        column: 6,
        span: 16289..16294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 609,
        column: 10,
        span: 16295..16298,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 609,
        column: 12,
        span: 16299..16300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 609,
        column: 15,
        span: 16301..16303,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 609,
        column: 16,
        span: 16303..16304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 609,
        column: 20,
        span: 16304..16308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 609,
        column: 21,
        span: 16308..16309,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%M'",
        ),
        line: 609,
        column: 25,
        span: 16309..16313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 609,
        column: 26,
        span: 16313..16314,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 610,
        column: 6,
        span: 16315..16320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 610,
        column: 8,
        span: 16321..16322,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 610,
        column: 10,
        span: 16323..16324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 610,
        column: 13,
        span: 16325..16327,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 610,
        column: 14,
        span: 16327..16328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "date",
        ),
        line: 610,
        column: 18,
        span: 16328..16332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 610,
        column: 19,
        span: 16332..16333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%S'",
        ),
        line: 610,
        column: 23,
        span: 16333..16337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 610,
        column: 24,
        span: 16337..16338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 611,
        column: 3,
        span: 16339..16341,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 611,
        column: 4,
        span: 16341..16342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 611,
        column: 9,
        span: 16342..16347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
        column: 10,
        span: 16347..16348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 611,
        column: 16,
        span: 16348..16354,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 611,
        column: 17,
        span: 16354..16355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 611,
        column: 23,
        span: 16355..16361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 611,
        column: 24,
        span: 16361..16362,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'test done on %2.2d/%2.2d/%d'",
        ),
        line: 611,
        column: 53,
        span: 16362..16391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 611,
        column: 54,
        span: 16391..16392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 611,
        column: 56,
        span: 16393..16394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 611,
        column: 57,
        span: 16394..16395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 611,
        column: 59,
        span: 16396..16397,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 611,
        column: 60,
        span: 16397..16398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 611,
        column: 62,
        span: 16399..16400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
        column: 63,
        span: 16400..16401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 611,
        column: 64,
        span: 16401..16402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 612,
        column: 3,
        span: 16403..16405,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 612,
        column: 4,
        span: 16405..16406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 612,
        column: 9,
        span: 16406..16411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
        column: 10,
        span: 16411..16412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 612,
        column: 16,
        span: 16412..16418,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 612,
        column: 17,
        span: 16418..16419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 612,
        column: 23,
        span: 16419..16425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 612,
        column: 24,
        span: 16425..16426,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "', at %2.2d:%2.2d:%2.2d\\n'",
        ),
        line: 612,
        column: 50,
        span: 16426..16452,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 612,
        column: 51,
        span: 16452..16453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 612,
        column: 53,
        span: 16454..16455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 612,
        column: 54,
        span: 16455..16456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 612,
        column: 58,
        span: 16457..16460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 612,
        column: 59,
        span: 16460..16461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 612,
        column: 61,
        span: 16462..16463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
        column: 62,
        span: 16463..16464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 612,
        column: 63,
        span: 16464..16465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 613,
        column: 3,
        span: 16466..16468,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 613,
        column: 4,
        span: 16468..16469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 613,
        column: 9,
        span: 16469..16474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 10,
        span: 16474..16475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 613,
        column: 16,
        span: 16475..16481,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 613,
        column: 17,
        span: 16481..16482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 613,
        column: 23,
        span: 16482..16488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 613,
        column: 24,
        span: 16488..16489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%s\\n'",
        ),
        line: 613,
        column: 30,
        span: 16489..16495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 613,
        column: 31,
        span: 16495..16496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_VERSION",
        ),
        line: 613,
        column: 40,
        span: 16497..16505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 41,
        span: 16505..16506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 613,
        column: 42,
        span: 16506..16507,
    },
]
