---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/db.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 3,
            column: 6,
            span: 26..31,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 3,
            column: 8,
            span: 32..33,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 3,
            column: 16,
            span: 34..41,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 3,
            column: 24,
            span: 42..49,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 5,
            column: 6,
            span: 51..56,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 5,
            column: 15,
            span: 57..65,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 5,
            column: 24,
            span: 66..74,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 25,
            span: 74..75,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 5,
            column: 26,
            span: 75..76,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 27,
            span: 76..77,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 5,
            column: 34,
            span: 78..84,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 5,
            column: 41,
            span: 85..91,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 42,
            span: 91..92,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 5,
            column: 46,
            span: 92..96,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 47,
            span: 96..97,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 5,
            column: 48,
            span: 97..98,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 49,
            span: 98..99,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 50,
            span: 99..100,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 51,
            span: 100..101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 52,
            span: 101..102,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 5,
            column: 0,
            span: 103..106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 7,
            column: 6,
            span: 108..113,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing debug library and debug information\"",
        ),
        position: Position {
            line: 7,
            column: 51,
            span: 113..158,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 9,
            column: 0,
            span: 160..162,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 10,
            column: 6,
            span: 163..168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 10,
            column: 8,
            span: 169..170,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 10,
            column: 9,
            span: 170..171,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 10,
            column: 0,
            span: 170..172,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 11,
            column: 0,
            span: 173..176,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 13,
            column: 9,
            span: 178..186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 13,
            column: 14,
            span: 187..191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 16,
            span: 192..193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 13,
            column: 17,
            span: 193..194,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 13,
            column: 18,
            span: 194..195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 13,
            column: 20,
            span: 196..197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 13,
            column: 21,
            span: 197..198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 13,
            column: 23,
            span: 199..200,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 24,
            span: 200..201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 14,
            column: 17,
            span: 204..218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 18,
            span: 218..219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 19,
            span: 219..220,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 15,
            column: 8,
            span: 250..255,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 15,
            column: 17,
            span: 256..264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 15,
            column: 19,
            span: 265..266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 21,
            span: 267..268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        position: Position {
            line: 15,
            column: 26,
            span: 268..273,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 15,
            column: 27,
            span: 273..274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 15,
            column: 32,
            span: 275..279,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 33,
            span: 279..280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 16,
            column: 11,
            span: 285..291,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 12,
            span: 291..292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "event",
        ),
        position: Position {
            line: 16,
            column: 17,
            span: 292..297,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 20,
            span: 298..300,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'line'",
        ),
        position: Position {
            line: 16,
            column: 27,
            span: 301..307,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 28,
            span: 307..308,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 17,
            column: 10,
            span: 313..318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 17,
            column: 12,
            span: 319..320,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 17,
            column: 14,
            span: 321..322,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 17,
            column: 20,
            span: 323..328,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 17,
            column: 21,
            span: 328..329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 17,
            column: 27,
            span: 329..335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 28,
            span: 335..336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 17,
            column: 29,
            span: 336..337,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 30,
            span: 337..338,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 17,
            column: 32,
            span: 338..340,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 33,
            span: 340..341,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 18,
            column: 7,
            span: 346..348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 18,
            column: 9,
            span: 349..350,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 18,
            column: 14,
            span: 351..355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 18,
            column: 20,
            span: 356..361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 21,
            span: 361..362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 18,
            column: 22,
            span: 362..363,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 18,
            column: 23,
            span: 363..364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 18,
            column: 28,
            span: 365..369,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 29,
            span: 369..370,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 18,
            column: 0,
            span: 371..374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 19,
            column: 11,
            span: 379..385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 12,
            span: 385..386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 19,
            column: 13,
            span: 386..387,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 19,
            column: 16,
            span: 388..390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 19,
            column: 21,
            span: 391..395,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 19,
            column: 22,
            span: 395..396,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"wrong trace!!\"",
        ),
        position: Position {
            line: 19,
            column: 38,
            span: 397..412,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 39,
            span: 412..413,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 20,
            column: 0,
            span: 416..419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 21,
            column: 8,
            span: 422..427,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 21,
            column: 9,
            span: 427..428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 21,
            column: 16,
            span: 428..435,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 17,
            span: 435..436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 21,
            column: 18,
            span: 436..437,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 19,
            span: 437..438,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 21,
            column: 22,
            span: 438..441,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 23,
            span: 441..442,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 21,
            column: 24,
            span: 442..443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 21,
            column: 29,
            span: 444..448,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 30,
            span: 448..449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 21,
            column: 31,
            span: 449..450,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 32,
            span: 450..451,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 33,
            span: 451..452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 34,
            span: 452..453,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 21,
            column: 35,
            span: 453..454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 21,
            column: 41,
            span: 455..460,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 21,
            column: 42,
            span: 460..461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 21,
            column: 49,
            span: 461..468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 50,
            span: 468..469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 51,
            span: 469..470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 22,
            column: 9,
            span: 473..479,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 10,
            span: 479..480,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 22,
            column: 11,
            span: 480..481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 22,
            column: 12,
            span: 481..482,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 22,
            column: 15,
            span: 483..485,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 22,
            column: 17,
            span: 485..487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 18,
            span: 487..488,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 23,
            column: 0,
            span: 489..492,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 26,
            column: 0,
            span: 495..497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 27,
            column: 9,
            span: 500..506,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 10,
            span: 506..507,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 27,
            column: 13,
            span: 507..510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 27,
            column: 19,
            span: 511..516,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 20,
            span: 516..517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 27,
            column: 25,
            span: 517..522,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 27,
            column: 26,
            span: 522..523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 27,
            column: 33,
            span: 523..530,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 34,
            span: 530..531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 27,
            column: 40,
            span: 532..537,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 41,
            span: 537..538,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        position: Position {
            line: 27,
            column: 45,
            span: 539..542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 46,
            span: 542..543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 47,
            span: 543..544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 28,
            column: 9,
            span: 567..573,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 10,
            span: 573..574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 28,
            column: 15,
            span: 574..579,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 16,
            span: 579..580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 28,
            column: 23,
            span: 580..587,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 24,
            span: 587..588,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 28,
            column: 28,
            span: 587..592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 29,
            span: 592..593,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 28,
            column: 32,
            span: 594..596,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 28,
            column: 36,
            span: 597..600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 37,
            span: 600..601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 29,
            column: 9,
            span: 628..634,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 10,
            span: 634..635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 29,
            column: 15,
            span: 635..640,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 29,
            column: 16,
            span: 640..641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 29,
            column: 23,
            span: 641..648,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 24,
            span: 648..649,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 29,
            column: 25,
            span: 649..650,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 29,
            column: 26,
            span: 649..651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 27,
            span: 651..652,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 29,
            column: 30,
            span: 653..655,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 29,
            column: 34,
            span: 656..659,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 35,
            span: 659..660,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 30,
            column: 8,
            span: 689..694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 30,
            column: 10,
            span: 695..696,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 30,
            column: 12,
            span: 697..698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 30,
            column: 18,
            span: 699..704,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 30,
            column: 19,
            span: 704..705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 30,
            column: 26,
            span: 705..712,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 27,
            span: 712..713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 30,
            column: 32,
            span: 713..718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 33,
            span: 718..719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 31,
            column: 9,
            span: 722..728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 10,
            span: 728..729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 31,
            column: 11,
            span: 729..730,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 12,
            span: 730..731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 31,
            column: 16,
            span: 731..735,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 31,
            column: 19,
            span: 736..738,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        position: Position {
            line: 31,
            column: 23,
            span: 739..742,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 31,
            column: 27,
            span: 743..746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 31,
            column: 29,
            span: 747..748,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 30,
            span: 748..749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 31,
            column: 39,
            span: 749..758,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 31,
            column: 42,
            span: 759..761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[C]\"",
        ),
        position: Position {
            line: 31,
            column: 48,
            span: 762..767,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 49,
            span: 767..768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 32,
            column: 4,
            span: 771..772,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 32,
            column: 6,
            span: 773..774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 32,
            column: 12,
            span: 775..780,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 13,
            span: 780..781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 32,
            column: 20,
            span: 781..788,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 21,
            span: 788..789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 32,
            column: 26,
            span: 789..794,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 27,
            span: 794..795,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        position: Position {
            line: 32,
            column: 31,
            span: 796..799,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 32,
            span: 799..800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 9,
            span: 803..809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 10,
            span: 809..810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 33,
            column: 11,
            span: 810..811,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 12,
            span: 811..812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 33,
            column: 23,
            span: 812..823,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 33,
            column: 26,
            span: 824..826,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 33,
            column: 30,
            span: 827..830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 31,
            span: 830..831,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 34,
            column: 8,
            span: 834..839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 34,
            column: 10,
            span: 840..841,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 34,
            column: 12,
            span: 842..843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 34,
            column: 18,
            span: 844..849,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 34,
            column: 19,
            span: 849..850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 34,
            column: 26,
            span: 850..857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 27,
            span: 857..858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 34,
            column: 31,
            span: 858..862,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 34,
            column: 32,
            span: 862..863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"SfL\"",
        ),
        position: Position {
            line: 34,
            column: 38,
            span: 864..869,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 39,
            span: 869..870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 35,
            column: 9,
            span: 873..879,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 10,
            span: 879..880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 35,
            column: 11,
            span: 880..881,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 35,
            column: 12,
            span: 881..882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 35,
            column: 16,
            span: 882..886,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 35,
            column: 19,
            span: 887..889,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 35,
            column: 23,
            span: 890..893,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 35,
            column: 27,
            span: 894..897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 35,
            column: 29,
            span: 898..899,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 35,
            column: 30,
            span: 899..900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 35,
            column: 34,
            span: 900..904,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 35,
            column: 37,
            span: 905..907,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        position: Position {
            line: 35,
            column: 43,
            span: 908..913,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 35,
            column: 47,
            span: 914..917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 35,
            column: 49,
            span: 918..919,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 35,
            column: 50,
            span: 919..920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 35,
            column: 61,
            span: 920..931,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 35,
            column: 64,
            span: 932..934,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 35,
            column: 67,
            span: 934..937,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 35,
            column: 0,
            span: 938..941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 36,
            column: 11,
            span: 951..952,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 12,
            span: 952..953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        position: Position {
            line: 36,
            column: 27,
            span: 953..968,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 36,
            column: 30,
            span: 969..971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 36,
            column: 32,
            span: 972..973,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 33,
            span: 973..974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 36,
            column: 44,
            span: 974..985,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 36,
            column: 46,
            span: 986..987,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 49,
            span: 987..990,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 36,
            column: 0,
            span: 991..994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 37,
            column: 11,
            span: 1004..1005,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 37,
            column: 12,
            span: 1005..1006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 37,
            column: 16,
            span: 1006..1010,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 37,
            column: 19,
            span: 1011..1013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 37,
            column: 24,
            span: 1014..1018,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 37,
            column: 28,
            span: 1019..1022,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 37,
            column: 32,
            span: 1023..1026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 37,
            column: 39,
            span: 1027..1033,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 37,
            column: 40,
            span: 1033..1034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 37,
            column: 44,
            span: 1034..1038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 45,
            span: 1038..1039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 37,
            column: 46,
            span: 1039..1040,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 37,
            column: 47,
            span: 1040..1041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 37,
            column: 56,
            span: 1041..1050,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 37,
            column: 57,
            span: 1050..1051,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%[\"",
        ),
        position: Position {
            line: 37,
            column: 62,
            span: 1052..1056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 63,
            span: 1056..1057,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 64,
            span: 1057..1058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 38,
            column: 9,
            span: 1061..1067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 10,
            span: 1067..1068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 38,
            column: 11,
            span: 1068..1069,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 12,
            span: 1069..1070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 38,
            column: 23,
            span: 1070..1081,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 38,
            column: 24,
            span: 1081..1082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 38,
            column: 25,
            span: 1082..1083,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 26,
            span: 1083..1084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 38,
            column: 37,
            span: 1084..1095,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 38,
            column: 39,
            span: 1096..1097,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 41,
            span: 1097..1099,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 38,
            column: 42,
            span: 1099..1100,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 38,
            column: 0,
            span: 1101..1104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 39,
            column: 11,
            span: 1114..1115,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 39,
            column: 12,
            span: 1115..1116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 39,
            column: 23,
            span: 1116..1127,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 39,
            column: 24,
            span: 1127..1128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 39,
            column: 25,
            span: 1128..1129,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 39,
            column: 26,
            span: 1129..1130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        position: Position {
            line: 39,
            column: 41,
            span: 1130..1145,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 39,
            column: 42,
            span: 1145..1146,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 43,
            span: 1146..1147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 40,
            column: 9,
            span: 1150..1156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 10,
            span: 1156..1157,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 40,
            column: 13,
            span: 1157..1160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 40,
            column: 15,
            span: 1161..1162,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 40,
            column: 16,
            span: 1162..1163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 40,
            column: 27,
            span: 1163..1174,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 40,
            column: 28,
            span: 1174..1175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 40,
            column: 29,
            span: 1175..1176,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 40,
            column: 30,
            span: 1176..1177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 40,
            column: 41,
            span: 1177..1188,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 40,
            column: 42,
            span: 1188..1189,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 40,
            column: 0,
            span: 1190..1193,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 1203..1206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 41,
            column: 15,
            span: 1207..1208,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 16,
            span: 1208..1209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 41,
            column: 27,
            span: 1209..1220,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 41,
            column: 28,
            span: 1220..1221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 41,
            column: 29,
            span: 1221..1222,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 30,
            span: 1222..1223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        position: Position {
            line: 41,
            column: 45,
            span: 1223..1238,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 41,
            column: 47,
            span: 1239..1240,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 41,
            column: 49,
            span: 1240..1242,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 41,
            column: 50,
            span: 1242..1243,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 51,
            span: 1243..1244,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 42,
            column: 0,
            span: 1245..1248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 46,
            column: 2,
            span: 1292..1293,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 46,
            column: 4,
            span: 1294..1295,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function f () end\"",
        ),
        position: Position {
            line: 46,
            column: 24,
            span: 1296..1315,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 47,
            column: 6,
            span: 1316..1321,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 47,
            column: 15,
            span: 1322..1330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 47,
            column: 24,
            span: 1331..1339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 26,
            span: 1340..1341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 47,
            column: 27,
            span: 1341..1342,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 28,
            span: 1342..1343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 47,
            column: 30,
            span: 1344..1345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 31,
            span: 1345..1346,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 47,
            column: 38,
            span: 1347..1353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 47,
            column: 43,
            span: 1354..1358,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 44,
            span: 1358..1359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 47,
            column: 45,
            span: 1359..1360,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 46,
            span: 1360..1361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 47,
            column: 48,
            span: 1362..1363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 49,
            span: 1363..1364,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 50,
            span: 1364..1365,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 51,
            span: 1365..1366,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 47,
            column: 0,
            span: 1367..1370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 48,
            column: 9,
            span: 1371..1379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 10,
            span: 1379..1380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 48,
            column: 11,
            span: 1380..1381,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 12,
            span: 1381..1382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 49,
            column: 7,
            span: 1383..1389,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 8,
            span: 1389..1390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 49,
            column: 13,
            span: 1390..1395,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 1395..1396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 49,
            column: 21,
            span: 1396..1403,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 22,
            span: 1403..1404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 49,
            column: 23,
            span: 1404..1405,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 24,
            span: 1405..1406,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 49,
            column: 25,
            span: 1406..1407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 49,
            column: 34,
            span: 1407..1416,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 49,
            column: 37,
            span: 1417..1419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 49,
            column: 44,
            span: 1420..1426,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 49,
            column: 45,
            span: 1426..1427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 49,
            column: 51,
            span: 1427..1433,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 52,
            span: 1433..1434,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"%s\"]'",
        ),
        position: Position {
            line: 49,
            column: 67,
            span: 1434..1449,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 68,
            span: 1449..1450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 49,
            column: 70,
            span: 1451..1452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 71,
            span: 1452..1453,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 72,
            span: 1453..1454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 50,
            column: 9,
            span: 1455..1463,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 10,
            span: 1463..1464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 50,
            column: 11,
            span: 1464..1465,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 50,
            column: 13,
            span: 1465..1467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 50,
            column: 19,
            span: 1467..1473,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 50,
            column: 20,
            span: 1473..1474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 50,
            column: 26,
            span: 1474..1480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 27,
            span: 1480..1481,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; %s\\n=1\"",
        ),
        position: Position {
            line: 50,
            column: 37,
            span: 1481..1491,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 38,
            span: 1491..1492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 50,
            column: 45,
            span: 1493..1499,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 50,
            column: 46,
            span: 1499..1500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 50,
            column: 49,
            span: 1500..1503,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 50,
            span: 1503..1504,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        position: Position {
            line: 50,
            column: 53,
            span: 1504..1507,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 54,
            span: 1507..1508,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "400",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 58,
            span: 1508..1512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 59,
            span: 1512..1513,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 60,
            span: 1513..1514,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 61,
            span: 1514..1515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 51,
            column: 7,
            span: 1516..1522,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1522..1523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 51,
            column: 14,
            span: 1523..1529,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 51,
            column: 15,
            span: 1529..1530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 51,
            column: 19,
            span: 1530..1534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 20,
            span: 1534..1535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 51,
            column: 25,
            span: 1535..1540,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 51,
            column: 26,
            span: 1540..1541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 51,
            column: 33,
            span: 1541..1548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 34,
            span: 1548..1549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 51,
            column: 35,
            span: 1549..1550,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 36,
            span: 1550..1551,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 51,
            column: 37,
            span: 1551..1552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 51,
            column: 46,
            span: 1552..1561,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 47,
            span: 1561..1562,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%[string [^\\n]*%.%.%.\"%]$'",
        ),
        position: Position {
            line: 51,
            column: 76,
            span: 1563..1591,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 77,
            span: 1591..1592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 78,
            span: 1592..1593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 52,
            column: 9,
            span: 1594..1602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 10,
            span: 1602..1603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 52,
            column: 11,
            span: 1603..1604,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 52,
            column: 13,
            span: 1604..1606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 52,
            column: 19,
            span: 1606..1612,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 52,
            column: 20,
            span: 1612..1613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 52,
            column: 26,
            span: 1613..1619,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 27,
            span: 1619..1620,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; %s=1\"",
        ),
        position: Position {
            line: 52,
            column: 35,
            span: 1620..1628,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 36,
            span: 1628..1629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 52,
            column: 43,
            span: 1630..1636,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 52,
            column: 44,
            span: 1636..1637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 52,
            column: 47,
            span: 1637..1640,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 48,
            span: 1640..1641,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        position: Position {
            line: 52,
            column: 51,
            span: 1641..1644,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 52,
            span: 1644..1645,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "400",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 52,
            column: 56,
            span: 1645..1649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 57,
            span: 1649..1650,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 58,
            span: 1650..1651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 59,
            span: 1651..1652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 53,
            column: 7,
            span: 1653..1659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 8,
            span: 1659..1660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 53,
            column: 14,
            span: 1660..1666,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 53,
            column: 15,
            span: 1666..1667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 53,
            column: 19,
            span: 1667..1671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 20,
            span: 1671..1672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 53,
            column: 25,
            span: 1672..1677,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 53,
            column: 26,
            span: 1677..1678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 53,
            column: 33,
            span: 1678..1685,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 34,
            span: 1685..1686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 53,
            column: 35,
            span: 1686..1687,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 36,
            span: 1687..1688,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 53,
            column: 37,
            span: 1688..1689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 53,
            column: 46,
            span: 1689..1698,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 47,
            span: 1698..1699,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%[string [^\\n]*%.%.%.\"%]$'",
        ),
        position: Position {
            line: 53,
            column: 76,
            span: 1700..1728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 77,
            span: 1728..1729,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 78,
            span: 1729..1730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 54,
            column: 9,
            span: 1731..1739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 10,
            span: 1739..1740,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        position: Position {
            line: 54,
            column: 14,
            span: 1740..1744,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 54,
            column: 16,
            span: 1744..1746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 54,
            column: 17,
            span: 1746..1747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 18,
            span: 1747..1748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 55,
            column: 7,
            span: 1749..1755,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1755..1756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 55,
            column: 13,
            span: 1756..1761,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 55,
            column: 14,
            span: 1761..1762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 55,
            column: 21,
            span: 1762..1769,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 22,
            span: 1769..1770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 55,
            column: 23,
            span: 1770..1771,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 24,
            span: 1771..1772,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 55,
            column: 25,
            span: 1772..1773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 55,
            column: 34,
            span: 1773..1782,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 55,
            column: 37,
            span: 1783..1785,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"...\"]'",
        ),
        position: Position {
            line: 55,
            column: 54,
            span: 1786..1802,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 55,
            span: 1802..1803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 56,
            column: 9,
            span: 1804..1812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 10,
            span: 1812..1813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 56,
            column: 11,
            span: 1813..1814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 12,
            span: 1814..1815,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 56,
            column: 15,
            span: 1816..1818,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 16,
            span: 1818..1819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 57,
            column: 7,
            span: 1820..1826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 8,
            span: 1826..1827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 57,
            column: 13,
            span: 1827..1832,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 57,
            column: 14,
            span: 1832..1833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 57,
            column: 21,
            span: 1833..1840,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 22,
            span: 1840..1841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 57,
            column: 23,
            span: 1841..1842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 24,
            span: 1842..1843,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 57,
            column: 25,
            span: 1843..1844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 57,
            column: 34,
            span: 1844..1853,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 57,
            column: 37,
            span: 1854..1856,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[string \"\"]'",
        ),
        position: Position {
            line: 57,
            column: 51,
            span: 1857..1870,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 52,
            span: 1870..1871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 1872..1880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 10,
            span: 1880..1881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 58,
            column: 11,
            span: 1881..1882,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 12,
            span: 1882..1883,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@xuxu\"",
        ),
        position: Position {
            line: 58,
            column: 20,
            span: 1884..1891,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 21,
            span: 1891..1892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 59,
            column: 7,
            span: 1893..1899,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 1899..1900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 59,
            column: 13,
            span: 1900..1905,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 59,
            column: 14,
            span: 1905..1906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 59,
            column: 21,
            span: 1906..1913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 22,
            span: 1913..1914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 59,
            column: 23,
            span: 1914..1915,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 24,
            span: 1915..1916,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 59,
            column: 25,
            span: 1916..1917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 59,
            column: 34,
            span: 1917..1926,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 59,
            column: 37,
            span: 1927..1929,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 59,
            column: 44,
            span: 1930..1936,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 45,
            span: 1936..1937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 60,
            column: 9,
            span: 1938..1946,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 1946..1947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 60,
            column: 11,
            span: 1947..1948,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 12,
            span: 1948..1949,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@\"",
        ),
        position: Position {
            line: 60,
            column: 16,
            span: 1950..1953,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 60,
            column: 18,
            span: 1953..1955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 60,
            column: 24,
            span: 1955..1961,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 60,
            column: 25,
            span: 1961..1962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 60,
            column: 28,
            span: 1962..1965,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 29,
            span: 1965..1966,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'p'",
        ),
        position: Position {
            line: 60,
            column: 32,
            span: 1966..1969,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 33,
            span: 1969..1970,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 60,
            column: 38,
            span: 1970..1975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 39,
            span: 1975..1976,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 60,
            column: 41,
            span: 1976..1978,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'t'",
        ),
        position: Position {
            line: 60,
            column: 44,
            span: 1978..1981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 45,
            span: 1981..1982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 61,
            column: 7,
            span: 1983..1989,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 1989..1990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 61,
            column: 14,
            span: 1990..1996,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 15,
            span: 1996..1997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 61,
            column: 19,
            span: 1997..2001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 20,
            span: 2001..2002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 61,
            column: 25,
            span: 2002..2007,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 26,
            span: 2007..2008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 61,
            column: 33,
            span: 2008..2015,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 34,
            span: 2015..2016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 61,
            column: 35,
            span: 2016..2017,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 36,
            span: 2017..2018,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 37,
            span: 2018..2019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 61,
            column: 46,
            span: 2019..2028,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 47,
            span: 2028..2029,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%.%.%.p*t$\"",
        ),
        position: Position {
            line: 61,
            column: 61,
            span: 2030..2043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 62,
            span: 2043..2044,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 63,
            span: 2044..2045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 2046..2054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 2054..2055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 62,
            column: 11,
            span: 2055..2056,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 12,
            span: 2056..2057,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=xuxu\"",
        ),
        position: Position {
            line: 62,
            column: 20,
            span: 2058..2065,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 21,
            span: 2065..2066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 63,
            column: 7,
            span: 2067..2073,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 8,
            span: 2073..2074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 63,
            column: 13,
            span: 2074..2079,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 63,
            column: 14,
            span: 2079..2080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 63,
            column: 21,
            span: 2080..2087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 22,
            span: 2087..2088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 63,
            column: 23,
            span: 2088..2089,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 24,
            span: 2089..2090,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 63,
            column: 25,
            span: 2090..2091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 63,
            column: 34,
            span: 2091..2100,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 63,
            column: 37,
            span: 2101..2103,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 63,
            column: 44,
            span: 2104..2110,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 45,
            span: 2110..2111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 64,
            column: 9,
            span: 2112..2120,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 10,
            span: 2120..2121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 64,
            column: 11,
            span: 2121..2122,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 12,
            span: 2122..2123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 64,
            column: 19,
            span: 2124..2130,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 64,
            column: 20,
            span: 2130..2131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 64,
            column: 26,
            span: 2131..2137,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 27,
            span: 2137..2138,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=%s\"",
        ),
        position: Position {
            line: 64,
            column: 32,
            span: 2138..2143,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 33,
            span: 2143..2144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 64,
            column: 40,
            span: 2145..2151,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 64,
            column: 41,
            span: 2151..2152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 64,
            column: 44,
            span: 2152..2155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 45,
            span: 2155..2156,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 64,
            column: 48,
            span: 2156..2159,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 49,
            span: 2159..2160,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 64,
            column: 53,
            span: 2160..2164,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 54,
            span: 2164..2165,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 55,
            span: 2165..2166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 56,
            span: 2166..2167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 7,
            span: 2168..2174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 8,
            span: 2174..2175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 65,
            column: 14,
            span: 2175..2181,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 65,
            column: 15,
            span: 2181..2182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 65,
            column: 19,
            span: 2182..2186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 20,
            span: 2186..2187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 65,
            column: 25,
            span: 2187..2192,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 65,
            column: 26,
            span: 2192..2193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 65,
            column: 33,
            span: 2193..2200,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 34,
            span: 2200..2201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 65,
            column: 35,
            span: 2201..2202,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 36,
            span: 2202..2203,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 65,
            column: 37,
            span: 2203..2204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 65,
            column: 46,
            span: 2204..2213,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 47,
            span: 2213..2214,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^x*$\"",
        ),
        position: Position {
            line: 65,
            column: 54,
            span: 2215..2221,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 55,
            span: 2221..2222,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 56,
            span: 2222..2223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 66,
            column: 9,
            span: 2224..2232,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 10,
            span: 2232..2233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 66,
            column: 11,
            span: 2233..2234,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 12,
            span: 2234..2235,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        position: Position {
            line: 66,
            column: 16,
            span: 2236..2239,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 17,
            span: 2239..2240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 67,
            column: 7,
            span: 2241..2247,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 8,
            span: 2247..2248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 67,
            column: 13,
            span: 2248..2253,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 67,
            column: 14,
            span: 2253..2254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 67,
            column: 21,
            span: 2254..2261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 22,
            span: 2261..2262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 67,
            column: 23,
            span: 2262..2263,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 24,
            span: 2263..2264,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 67,
            column: 25,
            span: 2264..2265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "short_src",
        ),
        position: Position {
            line: 67,
            column: 34,
            span: 2265..2274,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 67,
            column: 37,
            span: 2275..2277,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 67,
            column: 40,
            span: 2278..2280,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 41,
            span: 2280..2281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 68,
            column: 2,
            span: 2282..2283,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 68,
            column: 4,
            span: 2284..2285,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 68,
            column: 8,
            span: 2286..2289,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 2289..2290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 68,
            column: 11,
            span: 2291..2292,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 68,
            column: 13,
            span: 2293..2294,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 68,
            column: 17,
            span: 2295..2298,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 68,
            column: 18,
            span: 2298..2299,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 71,
            column: 0,
            span: 2302..2308,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 72,
            column: 8,
            span: 2311..2316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 72,
            column: 10,
            span: 2317..2318,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 72,
            column: 12,
            span: 2319..2320,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 72,
            column: 14,
            span: 2321..2322,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 72,
            column: 15,
            span: 2322..2323,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 72,
            column: 17,
            span: 2324..2325,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 72,
            column: 26,
            span: 2326..2334,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 28,
            span: 2335..2336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 29,
            span: 2336..2337,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 2342..2347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 73,
            column: 12,
            span: 2348..2349,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 73,
            column: 14,
            span: 2350..2351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 73,
            column: 20,
            span: 2352..2357,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 21,
            span: 2357..2358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 73,
            column: 28,
            span: 2358..2365,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 29,
            span: 2365..2366,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 30,
            span: 2365..2367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 31,
            span: 2367..2368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 74,
            column: 11,
            span: 2373..2379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 2379..2380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 13,
            span: 2380..2381,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 74,
            column: 14,
            span: 2381..2382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 74,
            column: 18,
            span: 2382..2386,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 74,
            column: 21,
            span: 2387..2389,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'f'",
        ),
        position: Position {
            line: 74,
            column: 25,
            span: 2390..2393,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 74,
            column: 29,
            span: 2394..2397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 31,
            span: 2398..2399,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 74,
            column: 32,
            span: 2399..2400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        position: Position {
            line: 74,
            column: 40,
            span: 2400..2408,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 74,
            column: 43,
            span: 2409..2411,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local'",
        ),
        position: Position {
            line: 74,
            column: 51,
            span: 2412..2419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 52,
            span: 2419..2420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 75,
            column: 6,
            span: 2425..2426,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 75,
            column: 8,
            span: 2427..2428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 75,
            column: 14,
            span: 2429..2434,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 75,
            column: 15,
            span: 2434..2435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 75,
            column: 22,
            span: 2435..2442,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 23,
            span: 2442..2443,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 24,
            span: 2442..2444,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 25,
            span: 2444..2445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 11,
            span: 2450..2456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 12,
            span: 2456..2457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 76,
            column: 13,
            span: 2457..2458,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 14,
            span: 2458..2459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 76,
            column: 18,
            span: 2459..2463,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 76,
            column: 21,
            span: 2464..2466,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 76,
            column: 25,
            span: 2467..2470,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 76,
            column: 29,
            span: 2471..2474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 76,
            column: 31,
            span: 2475..2476,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 32,
            span: 2476..2477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        position: Position {
            line: 76,
            column: 40,
            span: 2477..2485,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 76,
            column: 43,
            span: 2486..2488,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'field'",
        ),
        position: Position {
            line: 76,
            column: 51,
            span: 2489..2496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 52,
            span: 2496..2497,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 77,
            column: 11,
            span: 2502..2508,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xixi'",
        ),
        position: Position {
            line: 77,
            column: 18,
            span: 2509..2515,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 78,
            column: 6,
            span: 2518..2521,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 78,
            column: 7,
            span: 2521..2522,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 79,
            column: 8,
            span: 2525..2530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 79,
            column: 10,
            span: 2531..2532,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 79,
            column: 12,
            span: 2533..2534,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 79,
            column: 21,
            span: 2535..2543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 23,
            span: 2544..2545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 24,
            span: 2545..2546,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 79,
            column: 31,
            span: 2547..2553,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 33,
            span: 2553..2555,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 79,
            column: 34,
            span: 2555..2556,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 35,
            span: 2555..2557,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 79,
            column: 39,
            span: 2558..2561,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 41,
            span: 2562..2563,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 79,
            column: 44,
            span: 2563..2566,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 46,
            span: 2566..2568,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 79,
            column: 49,
            span: 2569..2571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 79,
            column: 51,
            span: 2572..2573,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 79,
            column: 52,
            span: 2573..2574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 79,
            column: 53,
            span: 2574..2575,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 54,
            span: 2575..2576,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 55,
            span: 2576..2577,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 56,
            span: 2577..2578,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 79,
            column: 0,
            span: 2579..2582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 80,
            column: 9,
            span: 2585..2591,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 10,
            span: 2591..2592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 80,
            column: 11,
            span: 2592..2593,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 12,
            span: 2593..2594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 13,
            span: 2594..2595,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 80,
            column: 16,
            span: 2596..2598,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xixi'",
        ),
        position: Position {
            line: 80,
            column: 23,
            span: 2599..2605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 24,
            span: 2605..2606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 81,
            column: 4,
            span: 2609..2610,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 81,
            column: 6,
            span: 2611..2612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 81,
            column: 12,
            span: 2613..2618,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 81,
            column: 13,
            span: 2618..2619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 81,
            column: 20,
            span: 2619..2626,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 21,
            span: 2626..2627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 81,
            column: 22,
            span: 2627..2628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 23,
            span: 2628..2629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 82,
            column: 9,
            span: 2632..2638,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 10,
            span: 2638..2639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 82,
            column: 11,
            span: 2639..2640,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 82,
            column: 12,
            span: 2640..2641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 82,
            column: 16,
            span: 2641..2645,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 82,
            column: 19,
            span: 2646..2648,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        position: Position {
            line: 82,
            column: 25,
            span: 2649..2654,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 82,
            column: 29,
            span: 2655..2658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 82,
            column: 31,
            span: 2659..2660,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 82,
            column: 32,
            span: 2660..2661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 82,
            column: 36,
            span: 2661..2665,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 82,
            column: 39,
            span: 2666..2668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 82,
            column: 41,
            span: 2669..2670,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 82,
            column: 45,
            span: 2671..2674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 82,
            column: 47,
            span: 2675..2676,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 82,
            column: 48,
            span: 2676..2677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        position: Position {
            line: 82,
            column: 56,
            span: 2677..2685,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 82,
            column: 59,
            span: 2686..2688,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 82,
            column: 62,
            span: 2689..2691,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 82,
            column: 66,
            span: 2692..2695,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 82,
            column: 70,
            span: 2696..2699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 82,
            column: 72,
            span: 2700..2701,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 82,
            column: 73,
            span: 2701..2702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 82,
            column: 77,
            span: 2702..2706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 78,
            span: 2706..2707,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 84,
            column: 11,
            span: 2711..2719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 84,
            column: 13,
            span: 2720..2721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 15,
            span: 2722..2723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 84,
            column: 16,
            span: 2723..2724,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 84,
            column: 17,
            span: 2724..2725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 84,
            column: 22,
            span: 2726..2730,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 23,
            span: 2730..2731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 2748..2752,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 85,
            column: 11,
            span: 2753..2754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 85,
            column: 16,
            span: 2755..2759,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 85,
            column: 19,
            span: 2760..2762,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'f'",
        ),
        position: Position {
            line: 85,
            column: 23,
            span: 2763..2766,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 86,
            column: 10,
            span: 2771..2776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 86,
            column: 12,
            span: 2777..2778,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 86,
            column: 14,
            span: 2779..2780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 86,
            column: 20,
            span: 2781..2786,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 86,
            column: 21,
            span: 2786..2787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 86,
            column: 28,
            span: 2787..2794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 29,
            span: 2794..2795,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 30,
            span: 2794..2796,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 31,
            span: 2796..2797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 87,
            column: 11,
            span: 2802..2808,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 12,
            span: 2808..2809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 87,
            column: 13,
            span: 2809..2810,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 87,
            column: 14,
            span: 2810..2811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 87,
            column: 18,
            span: 2811..2815,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 87,
            column: 21,
            span: 2816..2818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 87,
            column: 26,
            span: 2819..2823,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 87,
            column: 30,
            span: 2824..2827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 87,
            column: 32,
            span: 2828..2829,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 87,
            column: 33,
            span: 2829..2830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        position: Position {
            line: 87,
            column: 41,
            span: 2830..2838,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 87,
            column: 44,
            span: 2839..2841,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'local'",
        ),
        position: Position {
            line: 87,
            column: 52,
            span: 2842..2849,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 53,
            span: 2849..2850,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 2855..2861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 88,
            column: 0,
            span: 2862..2863,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 89,
            column: 0,
            span: 2866..2869,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 92,
            column: 5,
            span: 2909..2911,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 7,
            span: 2911..2913,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 92,
            column: 8,
            span: 2913..2914,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 9,
            span: 2913..2915,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 92,
            column: 14,
            span: 2916..2920,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 92,
            column: 20,
            span: 2921..2926,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 92,
            column: 24,
            span: 2927..2930,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 92,
            column: 25,
            span: 2930..2931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 92,
            column: 27,
            span: 2932..2933,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 28,
            span: 2933..2934,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 29,
            span: 2934..2935,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 93,
            column: 5,
            span: 2938..2940,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 93,
            column: 7,
            span: 2940..2942,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 93,
            column: 8,
            span: 2942..2943,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 93,
            column: 9,
            span: 2942..2944,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 93,
            column: 14,
            span: 2945..2949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 93,
            column: 16,
            span: 2950..2951,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 93,
            column: 17,
            span: 2951..2952,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 93,
            column: 18,
            span: 2951..2953,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 93,
            column: 23,
            span: 2954..2958,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 93,
            column: 29,
            span: 2959..2964,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 93,
            column: 33,
            span: 2965..2968,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 93,
            column: 34,
            span: 2968..2969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 93,
            column: 36,
            span: 2970..2971,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 37,
            span: 2971..2972,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 38,
            span: 2972..2973,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 94,
            column: 8,
            span: 2976..2981,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 94,
            column: 10,
            span: 2981..2983,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 94,
            column: 13,
            span: 2984..2986,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 94,
            column: 19,
            span: 2987..2992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 94,
            column: 21,
            span: 2993..2994,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 94,
            column: 22,
            span: 2994..2995,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 94,
            column: 24,
            span: 2994..2997,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 94,
            column: 25,
            span: 2997..2998,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 94,
            column: 31,
            span: 2999..3004,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 94,
            column: 35,
            span: 3005..3008,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 94,
            column: 36,
            span: 3008..3009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 94,
            column: 38,
            span: 3010..3011,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 39,
            span: 3011..3012,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 40,
            span: 3012..3013,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 95,
            column: 8,
            span: 3016..3021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 95,
            column: 10,
            span: 3022..3023,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 95,
            column: 12,
            span: 3024..3025,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 0,
            span: 3025..3027,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 96,
            column: 5,
            span: 3030..3032,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 7,
            span: 3032..3034,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 96,
            column: 8,
            span: 3034..3035,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 9,
            span: 3034..3036,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 96,
            column: 14,
            span: 3037..3041,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 96,
            column: 21,
            span: 3042..3048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 96,
            column: 26,
            span: 3049..3053,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 96,
            column: 27,
            span: 3053..3054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        position: Position {
            line: 96,
            column: 30,
            span: 3054..3057,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 31,
            span: 3057..3058,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 32,
            span: 3057..3059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 33,
            span: 3059..3060,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 96,
            column: 37,
            span: 3061..3064,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 96,
            column: 38,
            span: 3064..3065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 96,
            column: 40,
            span: 3066..3067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 41,
            span: 3067..3068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 42,
            span: 3068..3069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 97,
            column: 4,
            span: 3072..3073,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 97,
            column: 6,
            span: 3074..3075,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 3075..3077,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 97,
            column: 9,
            span: 3077..3078,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 10,
            span: 3077..3079,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 97,
            column: 11,
            span: 3079..3080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 97,
            column: 13,
            span: 3081..3082,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 14,
            span: 3082..3083,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 15,
            span: 3083..3084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 98,
            column: 4,
            span: 3087..3088,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 6,
            span: 3089..3090,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 8,
            span: 3090..3092,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 98,
            column: 9,
            span: 3092..3093,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 3092..3094,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 98,
            column: 13,
            span: 3095..3097,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 15,
            span: 3097..3099,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 98,
            column: 16,
            span: 3099..3100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 98,
            column: 18,
            span: 3101..3102,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 19,
            span: 3102..3103,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 20,
            span: 3103..3104,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 99,
            column: 9,
            span: 3107..3113,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 99,
            column: 15,
            span: 3114..3119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 99,
            column: 17,
            span: 3120..3121,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 99,
            column: 18,
            span: 3121..3122,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 20,
            span: 3121..3124,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 99,
            column: 21,
            span: 3124..3125,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 99,
            column: 24,
            span: 3126..3128,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 26,
            span: 3128..3130,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 99,
            column: 27,
            span: 3130..3131,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 28,
            span: 3130..3132,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 99,
            column: 33,
            span: 3133..3137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 99,
            column: 35,
            span: 3138..3139,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 36,
            span: 3139..3140,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 37,
            span: 3140..3141,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 99,
            column: 42,
            span: 3142..3146,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 99,
            column: 48,
            span: 3147..3152,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 99,
            column: 52,
            span: 3153..3156,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 99,
            column: 53,
            span: 3156..3157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 99,
            column: 55,
            span: 3158..3159,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 56,
            span: 3159..3160,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 57,
            span: 3160..3161,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 99,
            column: 63,
            span: 3162..3167,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 0,
            span: 3167..3169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 100,
            column: 4,
            span: 3172..3173,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 100,
            column: 6,
            span: 3174..3175,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 100,
            column: 8,
            span: 3176..3177,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 100,
            column: 9,
            span: 3177..3178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 101,
            column: 4,
            span: 3181..3182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 5,
            span: 3182..3183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 101,
            column: 6,
            span: 3183..3184,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 7,
            span: 3184..3185,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 101,
            column: 8,
            span: 3185..3186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 101,
            column: 9,
            span: 3186..3187,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 101,
            column: 11,
            span: 3188..3189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 101,
            column: 13,
            span: 3190..3191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 14,
            span: 3191..3192,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 15,
            span: 3191..3193,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 16,
            span: 3193..3194,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 101,
            column: 20,
            span: 3195..3198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 101,
            column: 22,
            span: 3199..3200,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 23,
            span: 3200..3201,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 25,
            span: 3200..3203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 26,
            span: 3203..3204,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 101,
            column: 27,
            span: 3204..3205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 101,
            column: 28,
            span: 3205..3206,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 29,
            span: 3206..3207,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 30,
            span: 3206..3208,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 31,
            span: 3208..3209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 102,
            column: 9,
            span: 3212..3218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 10,
            span: 3218..3219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 102,
            column: 11,
            span: 3219..3220,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 102,
            column: 12,
            span: 3220..3221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 102,
            column: 13,
            span: 3221..3222,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 102,
            column: 16,
            span: 3223..3225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 102,
            column: 18,
            span: 3226..3227,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 19,
            span: 3227..3228,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 21,
            span: 3227..3230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 22,
            span: 3230..3231,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 23,
            span: 3231..3232,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 103,
            column: 11,
            span: 3235..3243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 103,
            column: 13,
            span: 3244..3245,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 14,
            span: 3245..3246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 103,
            column: 15,
            span: 3246..3247,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 16,
            span: 3247..3248,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 103,
            column: 19,
            span: 3249..3251,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 103,
            column: 23,
            span: 3252..3255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 103,
            column: 25,
            span: 3256..3257,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 103,
            column: 30,
            span: 3258..3262,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 103,
            column: 37,
            span: 3263..3269,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 39,
            span: 3269..3271,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 103,
            column: 43,
            span: 3272..3275,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 103,
            column: 50,
            span: 3276..3282,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 52,
            span: 3283..3284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 103,
            column: 53,
            span: 3284..3285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 54,
            span: 3285..3286,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 103,
            column: 57,
            span: 3286..3289,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 58,
            span: 3289..3290,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 103,
            column: 62,
            span: 3291..3294,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 63,
            span: 3294..3295,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 64,
            span: 3295..3296,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 103,
            column: 0,
            span: 3297..3300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 104,
            column: 9,
            span: 3303..3309,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 10,
            span: 3309..3310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 104,
            column: 11,
            span: 3310..3311,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 12,
            span: 3311..3312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 104,
            column: 13,
            span: 3312..3313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 14,
            span: 3313..3314,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 104,
            column: 17,
            span: 3315..3317,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 104,
            column: 21,
            span: 3318..3321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 22,
            span: 3321..3322,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 105,
            column: 6,
            span: 3323..3328,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 0,
            span: 3328..3330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 107,
            column: 5,
            span: 3332..3336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 6,
            span: 3336..3337,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[if\nmath.sin(1)\nthen\n  a=1\nelse\n  a=2\nend\n]]",
        ),
        position: Position {
            line: 114,
            column: 3,
            span: 3337..3382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 4,
            span: 3382..3383,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 114,
            column: 6,
            span: 3384..3385,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 7,
            span: 3384..3386,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 8,
            span: 3386..3387,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 9,
            span: 3386..3388,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 10,
            span: 3388..3389,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 11,
            span: 3388..3390,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 12,
            span: 3390..3391,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 13,
            span: 3390..3392,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 114,
            column: 14,
            span: 3392..3393,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 15,
            span: 3393..3394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 116,
            column: 5,
            span: 3396..3400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 6,
            span: 3400..3401,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[--\nif nil then\n  a=1\nelse\n  a=2\nend\n]]",
        ),
        position: Position {
            line: 122,
            column: 3,
            span: 3401..3441,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 122,
            column: 4,
            span: 3441..3442,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 122,
            column: 6,
            span: 3443..3444,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 122,
            column: 7,
            span: 3443..3445,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 122,
            column: 8,
            span: 3445..3446,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 122,
            column: 9,
            span: 3445..3447,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 122,
            column: 10,
            span: 3447..3448,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 122,
            column: 11,
            span: 3447..3449,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 122,
            column: 12,
            span: 3449..3450,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 13,
            span: 3450..3451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 124,
            column: 5,
            span: 3453..3457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 6,
            span: 3457..3458,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[a=1\nrepeat\n  a=a+1\nuntil a==3\n]]",
        ),
        position: Position {
            line: 128,
            column: 3,
            span: 3458..3492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 4,
            span: 3492..3493,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 128,
            column: 6,
            span: 3494..3495,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 7,
            span: 3494..3496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 8,
            span: 3496..3497,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 9,
            span: 3496..3498,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 10,
            span: 3498..3499,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 11,
            span: 3498..3500,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 12,
            span: 3500..3501,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 13,
            span: 3500..3502,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 14,
            span: 3502..3503,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 15,
            span: 3502..3504,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 128,
            column: 16,
            span: 3504..3505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 17,
            span: 3505..3506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 130,
            column: 5,
            span: 3508..3512,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 6,
            span: 3512..3513,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ do\n  return\nend\n]]",
        ),
        position: Position {
            line: 133,
            column: 3,
            span: 3513..3534,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 133,
            column: 4,
            span: 3534..3535,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 133,
            column: 6,
            span: 3536..3537,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 133,
            column: 7,
            span: 3536..3538,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 133,
            column: 8,
            span: 3538..3539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 9,
            span: 3539..3540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 135,
            column: 5,
            span: 3542..3546,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 6,
            span: 3546..3547,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[local a\na=1\nwhile a<=3 do\n  a=a+1\nend\n]]",
        ),
        position: Position {
            line: 140,
            column: 3,
            span: 3547..3589,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 4,
            span: 3589..3590,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 140,
            column: 6,
            span: 3591..3592,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 7,
            span: 3591..3593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 8,
            span: 3593..3594,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 9,
            span: 3593..3595,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 10,
            span: 3595..3596,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 11,
            span: 3595..3597,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 12,
            span: 3597..3598,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 13,
            span: 3597..3599,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 14,
            span: 3599..3600,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 15,
            span: 3599..3601,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 16,
            span: 3601..3602,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 17,
            span: 3601..3603,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 18,
            span: 3603..3604,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 19,
            span: 3603..3605,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 20,
            span: 3605..3606,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 21,
            span: 3605..3607,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 22,
            span: 3607..3608,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 23,
            span: 3607..3609,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 24,
            span: 3609..3610,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 25,
            span: 3609..3611,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 140,
            column: 26,
            span: 3611..3612,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 27,
            span: 3612..3613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 142,
            column: 5,
            span: 3615..3619,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 142,
            column: 6,
            span: 3619..3620,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[while math.sin(1) do\n  if math.sin(1)\n  then break\n  end\nend\na=1]]",
        ),
        position: Position {
            line: 147,
            column: 6,
            span: 3620..3688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 7,
            span: 3688..3689,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 147,
            column: 9,
            span: 3690..3691,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 10,
            span: 3690..3692,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 11,
            span: 3692..3693,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 12,
            span: 3692..3694,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 13,
            span: 3694..3695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 14,
            span: 3694..3696,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 15,
            span: 3696..3697,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 16,
            span: 3696..3698,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 147,
            column: 17,
            span: 3698..3699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 18,
            span: 3699..3700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 149,
            column: 5,
            span: 3702..3706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 6,
            span: 3706..3707,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i=1,3 do\n  a=i\nend\n]]",
        ),
        position: Position {
            line: 152,
            column: 3,
            span: 3707..3734,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 4,
            span: 3734..3735,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 152,
            column: 6,
            span: 3736..3737,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 7,
            span: 3736..3738,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 8,
            span: 3738..3739,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 9,
            span: 3738..3740,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 10,
            span: 3740..3741,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 11,
            span: 3740..3742,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 12,
            span: 3742..3743,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 3742..3744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 14,
            span: 3744..3745,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 15,
            span: 3744..3746,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 16,
            span: 3746..3747,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 17,
            span: 3746..3748,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 18,
            span: 3748..3749,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 19,
            span: 3748..3750,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 20,
            span: 3750..3751,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 152,
            column: 21,
            span: 3750..3752,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 152,
            column: 22,
            span: 3752..3753,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 23,
            span: 3753..3754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 154,
            column: 5,
            span: 3756..3760,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 6,
            span: 3760..3761,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i,v in pairs{'a','b'} do\n  a=i..v\nend\n]]",
        ),
        position: Position {
            line: 157,
            column: 3,
            span: 3761..3807,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 4,
            span: 3807..3808,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 157,
            column: 6,
            span: 3809..3810,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 7,
            span: 3809..3811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 8,
            span: 3811..3812,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 9,
            span: 3811..3813,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 10,
            span: 3813..3814,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 11,
            span: 3813..3815,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 12,
            span: 3815..3816,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 13,
            span: 3815..3817,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 14,
            span: 3817..3818,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 15,
            span: 3817..3819,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 16,
            span: 3819..3820,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 157,
            column: 17,
            span: 3819..3821,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 157,
            column: 18,
            span: 3821..3822,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 19,
            span: 3822..3823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        position: Position {
            line: 159,
            column: 5,
            span: 3825..3829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 6,
            span: 3829..3830,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[for i=1,4 do a=1 end]]",
        ),
        position: Position {
            line: 159,
            column: 30,
            span: 3830..3854,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 31,
            span: 3854..3855,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 159,
            column: 33,
            span: 3856..3857,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 159,
            column: 34,
            span: 3856..3858,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 35,
            span: 3858..3859,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 159,
            column: 36,
            span: 3858..3860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 37,
            span: 3860..3861,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 159,
            column: 38,
            span: 3860..3862,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 39,
            span: 3862..3863,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 159,
            column: 40,
            span: 3862..3864,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 159,
            column: 41,
            span: 3864..3865,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 159,
            column: 42,
            span: 3864..3866,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 159,
            column: 43,
            span: 3866..3867,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 44,
            span: 3867..3868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 163,
            column: 6,
            span: 3872..3877,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 163,
            column: 9,
            span: 3877..3880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 166,
            column: 7,
            span: 3915..3921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 8,
            span: 3921..3922,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 166,
            column: 11,
            span: 3922..3925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 166,
            column: 17,
            span: 3926..3931,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 18,
            span: 3931..3932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 166,
            column: 23,
            span: 3932..3937,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 166,
            column: 24,
            span: 3937..3938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 166,
            column: 32,
            span: 3938..3946,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 33,
            span: 3946..3947,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 36,
            span: 3947..3950,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 37,
            span: 3950..3951,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 39,
            span: 3951..3953,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 40,
            span: 3953..3954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 41,
            span: 3954..3955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 167,
            column: 7,
            span: 3956..3962,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 8,
            span: 3962..3963,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 167,
            column: 11,
            span: 3963..3966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 167,
            column: 17,
            span: 3967..3972,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 18,
            span: 3972..3973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 167,
            column: 23,
            span: 3973..3978,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 24,
            span: 3978..3979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 167,
            column: 32,
            span: 3979..3987,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 33,
            span: 3987..3988,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 167,
            column: 35,
            span: 3989..3990,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 167,
            column: 36,
            span: 3989..3991,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 37,
            span: 3991..3992,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 167,
            column: 39,
            span: 3992..3994,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 40,
            span: 3994..3995,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 167,
            column: 43,
            span: 3995..3998,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 44,
            span: 3998..3999,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 45,
            span: 3999..4000,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 171,
            column: 6,
            span: 4022..4027,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 171,
            column: 15,
            span: 4028..4036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 171,
            column: 19,
            span: 4037..4040,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 21,
            span: 4041..4042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 171,
            column: 22,
            span: 4042..4043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 23,
            span: 4043..4044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 171,
            column: 24,
            span: 4044..4045,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 25,
            span: 4045..4046,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 171,
            column: 28,
            span: 4046..4049,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 29,
            span: 4049..4050,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 171,
            column: 35,
            span: 4051..4056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 171,
            column: 37,
            span: 4057..4058,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 38,
            span: 4058..4059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 171,
            column: 40,
            span: 4060..4061,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 171,
            column: 0,
            span: 4062..4065,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 172,
            column: 6,
            span: 4066..4071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 172,
            column: 9,
            span: 4072..4074,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 172,
            column: 11,
            span: 4075..4076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 172,
            column: 21,
            span: 4077..4086,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 172,
            column: 22,
            span: 4086..4087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 172,
            column: 28,
            span: 4087..4093,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 29,
            span: 4093..4094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 172,
            column: 32,
            span: 4094..4097,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 33,
            span: 4097..4098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 174,
            column: 7,
            span: 4100..4106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 8,
            span: 4106..4107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 174,
            column: 13,
            span: 4107..4112,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 174,
            column: 14,
            span: 4112..4113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 174,
            column: 22,
            span: 4113..4121,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 23,
            span: 4121..4122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 174,
            column: 26,
            span: 4122..4125,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 174,
            column: 27,
            span: 4125..4126,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 174,
            column: 29,
            span: 4126..4128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 30,
            span: 4128..4129,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 174,
            column: 33,
            span: 4130..4132,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 174,
            column: 37,
            span: 4133..4136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 38,
            span: 4136..4137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 175,
            column: 7,
            span: 4138..4144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 8,
            span: 4144..4145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 175,
            column: 13,
            span: 4145..4150,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 175,
            column: 14,
            span: 4150..4151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 175,
            column: 22,
            span: 4151..4159,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 23,
            span: 4159..4160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 175,
            column: 26,
            span: 4160..4163,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 175,
            column: 27,
            span: 4163..4164,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 175,
            column: 29,
            span: 4164..4166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 30,
            span: 4166..4167,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 175,
            column: 33,
            span: 4168..4170,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 175,
            column: 37,
            span: 4171..4174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 38,
            span: 4174..4175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 176,
            column: 7,
            span: 4176..4182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 8,
            span: 4182..4183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 176,
            column: 13,
            span: 4183..4188,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 176,
            column: 14,
            span: 4188..4189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 176,
            column: 22,
            span: 4189..4197,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 23,
            span: 4197..4198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 176,
            column: 26,
            span: 4198..4201,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 176,
            column: 27,
            span: 4201..4202,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 176,
            column: 29,
            span: 4202..4204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 30,
            span: 4204..4205,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 176,
            column: 33,
            span: 4206..4208,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 176,
            column: 37,
            span: 4209..4212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 38,
            span: 4212..4213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 177,
            column: 7,
            span: 4214..4220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 8,
            span: 4220..4221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 177,
            column: 13,
            span: 4221..4226,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 177,
            column: 14,
            span: 4226..4227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 177,
            column: 22,
            span: 4227..4235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 23,
            span: 4235..4236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 177,
            column: 25,
            span: 4236..4238,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 177,
            column: 26,
            span: 4238..4239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 177,
            column: 30,
            span: 4240..4243,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 177,
            column: 31,
            span: 4243..4244,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 177,
            column: 33,
            span: 4244..4246,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 34,
            span: 4246..4247,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 177,
            column: 37,
            span: 4248..4250,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 177,
            column: 41,
            span: 4251..4254,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 42,
            span: 4254..4255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 178,
            column: 7,
            span: 4256..4262,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 178,
            column: 8,
            span: 4262..4263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 178,
            column: 13,
            span: 4263..4268,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 178,
            column: 14,
            span: 4268..4269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 178,
            column: 22,
            span: 4269..4277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 178,
            column: 23,
            span: 4277..4278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 178,
            column: 25,
            span: 4278..4280,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 26,
            span: 4280..4281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 178,
            column: 30,
            span: 4282..4285,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 31,
            span: 4285..4286,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 33,
            span: 4286..4288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 178,
            column: 34,
            span: 4288..4289,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 178,
            column: 37,
            span: 4290..4292,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 178,
            column: 41,
            span: 4293..4296,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 178,
            column: 42,
            span: 4296..4297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 179,
            column: 7,
            span: 4298..4304,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 8,
            span: 4304..4305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 179,
            column: 13,
            span: 4305..4310,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 179,
            column: 14,
            span: 4310..4311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 179,
            column: 22,
            span: 4311..4319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 23,
            span: 4319..4320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 179,
            column: 25,
            span: 4320..4322,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 26,
            span: 4322..4323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 179,
            column: 30,
            span: 4324..4327,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 179,
            column: 31,
            span: 4327..4328,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 179,
            column: 33,
            span: 4328..4330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 34,
            span: 4330..4331,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 179,
            column: 37,
            span: 4332..4334,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 179,
            column: 41,
            span: 4335..4338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 42,
            span: 4338..4339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 181,
            column: 7,
            span: 4341..4347,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 8,
            span: 4347..4348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 181,
            column: 13,
            span: 4348..4353,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 181,
            column: 14,
            span: 4353..4354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 181,
            column: 22,
            span: 4354..4362,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 23,
            span: 4362..4363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 181,
            column: 28,
            span: 4363..4368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 181,
            column: 29,
            span: 4368..4369,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 181,
            column: 31,
            span: 4369..4371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 32,
            span: 4371..4372,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 181,
            column: 35,
            span: 4373..4375,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 181,
            column: 39,
            span: 4376..4379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 40,
            span: 4379..4380,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 185,
            column: 6,
            span: 4394..4399,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 185,
            column: 15,
            span: 4400..4408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 185,
            column: 19,
            span: 4409..4412,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 21,
            span: 4413..4414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 185,
            column: 22,
            span: 4414..4415,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 185,
            column: 23,
            span: 4415..4416,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 185,
            column: 27,
            span: 4417..4420,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 28,
            span: 4420..4421,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 186,
            column: 8,
            span: 4424..4429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 186,
            column: 10,
            span: 4430..4431,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 186,
            column: 12,
            span: 4432..4433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 186,
            column: 18,
            span: 4434..4439,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 186,
            column: 19,
            span: 4439..4440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 186,
            column: 23,
            span: 4440..4444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 24,
            span: 4444..4445,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 186,
            column: 27,
            span: 4445..4448,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 28,
            span: 4448..4449,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 187,
            column: 6,
            span: 4452..4455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 187,
            column: 8,
            span: 4456..4457,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 187,
            column: 10,
            span: 4458..4459,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 12,
            span: 4459..4461,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 13,
            span: 4461..4462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 187,
            column: 15,
            span: 4463..4464,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 187,
            column: 16,
            span: 4464..4465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 187,
            column: 17,
            span: 4465..4466,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 187,
            column: 0,
            span: 4467..4469,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 188,
            column: 10,
            span: 4474..4479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 188,
            column: 12,
            span: 4480..4481,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 13,
            span: 4481..4482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 188,
            column: 15,
            span: 4483..4484,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 188,
            column: 17,
            span: 4485..4486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 188,
            column: 23,
            span: 4487..4492,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 188,
            column: 24,
            span: 4492..4493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 188,
            column: 32,
            span: 4493..4501,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 33,
            span: 4501..4502,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 188,
            column: 34,
            span: 4501..4503,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 188,
            column: 35,
            span: 4503..4504,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 188,
            column: 37,
            span: 4505..4506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 188,
            column: 38,
            span: 4506..4507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 39,
            span: 4507..4508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 189,
            column: 11,
            span: 4513..4519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 12,
            span: 4519..4520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 189,
            column: 13,
            span: 4520..4521,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 189,
            column: 16,
            span: 4522..4524,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*vararg)\"",
        ),
        position: Position {
            line: 189,
            column: 28,
            span: 4525..4536,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 189,
            column: 32,
            span: 4537..4540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 189,
            column: 34,
            span: 4541..4542,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 189,
            column: 37,
            span: 4543..4545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 189,
            column: 39,
            span: 4546..4547,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 189,
            column: 40,
            span: 4547..4548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 189,
            column: 41,
            span: 4548..4549,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 189,
            column: 42,
            span: 4549..4550,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 43,
            span: 4550..4551,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 190,
            column: 0,
            span: 4554..4557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 191,
            column: 9,
            span: 4560..4566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 10,
            span: 4566..4567,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 191,
            column: 13,
            span: 4567..4570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 191,
            column: 19,
            span: 4571..4576,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 191,
            column: 20,
            span: 4576..4577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 191,
            column: 28,
            span: 4577..4585,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 29,
            span: 4585..4586,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 191,
            column: 30,
            span: 4585..4587,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 31,
            span: 4587..4588,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 191,
            column: 33,
            span: 4589..4590,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 34,
            span: 4590..4591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 191,
            column: 35,
            span: 4591..4592,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 191,
            column: 36,
            span: 4592..4593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 191,
            column: 37,
            span: 4593..4594,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 191,
            column: 39,
            span: 4595..4596,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 191,
            column: 41,
            span: 4596..4598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 42,
            span: 4598..4599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 43,
            span: 4599..4600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 44,
            span: 4600..4601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 192,
            column: 9,
            span: 4604..4610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 10,
            span: 4610..4611,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 192,
            column: 13,
            span: 4611..4614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 192,
            column: 19,
            span: 4615..4620,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 192,
            column: 20,
            span: 4620..4621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 192,
            column: 28,
            span: 4621..4629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 29,
            span: 4629..4630,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 192,
            column: 30,
            span: 4629..4631,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 192,
            column: 31,
            span: 4631..4632,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 192,
            column: 33,
            span: 4633..4634,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 34,
            span: 4634..4635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 192,
            column: 35,
            span: 4635..4636,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 192,
            column: 36,
            span: 4636..4637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 192,
            column: 37,
            span: 4637..4638,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 192,
            column: 39,
            span: 4639..4640,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 192,
            column: 41,
            span: 4640..4642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 42,
            span: 4642..4643,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 192,
            column: 43,
            span: 4643..4644,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 192,
            column: 46,
            span: 4644..4647,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 47,
            span: 4647..4648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 48,
            span: 4648..4649,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 193,
            column: 5,
            span: 4652..4654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 193,
            column: 7,
            span: 4655..4656,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 193,
            column: 8,
            span: 4656..4657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 193,
            column: 9,
            span: 4657..4658,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 193,
            column: 11,
            span: 4659..4660,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 193,
            column: 13,
            span: 4660..4662,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 193,
            column: 0,
            span: 4663..4667,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 6,
            span: 4672..4673,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 194,
            column: 14,
            span: 4673..4681,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 16,
            span: 4682..4683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 194,
            column: 17,
            span: 4683..4684,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 18,
            span: 4684..4685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 195,
            column: 13,
            span: 4692..4698,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 14,
            span: 4698..4699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 195,
            column: 19,
            span: 4699..4704,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 195,
            column: 20,
            span: 4704..4705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 195,
            column: 28,
            span: 4705..4713,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 29,
            span: 4713..4714,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 30,
            span: 4713..4715,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 31,
            span: 4715..4716,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 195,
            column: 33,
            span: 4717..4718,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 34,
            span: 4717..4719,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 35,
            span: 4719..4720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 195,
            column: 37,
            span: 4721..4722,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 38,
            span: 4722..4723,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 195,
            column: 41,
            span: 4724..4726,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*vararg)\"",
        ),
        position: Position {
            line: 195,
            column: 53,
            span: 4727..4738,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 54,
            span: 4738..4739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 196,
            column: 13,
            span: 4746..4752,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 14,
            span: 4752..4753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 196,
            column: 19,
            span: 4753..4758,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 196,
            column: 20,
            span: 4758..4759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 196,
            column: 28,
            span: 4759..4767,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 29,
            span: 4767..4768,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 196,
            column: 30,
            span: 4767..4769,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 196,
            column: 31,
            span: 4769..4770,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 196,
            column: 33,
            span: 4771..4772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 196,
            column: 34,
            span: 4772..4773,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 196,
            column: 35,
            span: 4773..4774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 196,
            column: 36,
            span: 4774..4775,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 196,
            column: 37,
            span: 4775..4776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 196,
            column: 39,
            span: 4777..4778,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 40,
            span: 4778..4779,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 196,
            column: 43,
            span: 4780..4782,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*vararg)\"",
        ),
        position: Position {
            line: 196,
            column: 55,
            span: 4783..4794,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 56,
            span: 4794..4795,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 197,
            column: 9,
            span: 4801..4804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 10,
            span: 4804..4805,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 11,
            span: 4805..4806,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "430",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 197,
            column: 14,
            span: 4805..4809,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 15,
            span: 4809..4810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 198,
            column: 12,
            span: 4816..4822,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 198,
            column: 13,
            span: 4822..4823,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 198,
            column: 16,
            span: 4823..4826,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 19,
            span: 4827..4829,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "430",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 23,
            span: 4829..4833,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 198,
            column: 24,
            span: 4833..4834,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 199,
            column: 0,
            span: 4837..4840,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 200,
            column: 0,
            span: 4841..4844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 202,
            column: 4,
            span: 4846..4849,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 5,
            span: 4849..4850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 6,
            span: 4850..4851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 203,
            column: 4,
            span: 4852..4855,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 5,
            span: 4855..4856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 203,
            column: 10,
            span: 4856..4861,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 11,
            span: 4861..4862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 204,
            column: 4,
            span: 4863..4866,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 5,
            span: 4866..4867,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 8,
            span: 4866..4870,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 9,
            span: 4870..4871,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 11,
            span: 4871..4873,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 12,
            span: 4873..4874,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 14,
            span: 4874..4876,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 15,
            span: 4876..4877,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 205,
            column: 6,
            span: 4878..4883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 205,
            column: 8,
            span: 4884..4885,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 205,
            column: 10,
            span: 4886..4887,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 205,
            column: 12,
            span: 4888..4889,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 205,
            column: 13,
            span: 4889..4890,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 206,
            column: 4,
            span: 4891..4894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 206,
            column: 6,
            span: 4895..4896,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 206,
            column: 8,
            span: 4897..4898,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 10,
            span: 4898..4900,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 11,
            span: 4900..4901,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 15,
            span: 4900..4905,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 206,
            column: 18,
            span: 4906..4908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 206,
            column: 20,
            span: 4909..4910,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 206,
            column: 21,
            span: 4910..4911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 206,
            column: 22,
            span: 4911..4912,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 206,
            column: 23,
            span: 4912..4913,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 206,
            column: 25,
            span: 4914..4915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 206,
            column: 27,
            span: 4916..4917,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 206,
            column: 0,
            span: 4918..4921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 207,
            column: 4,
            span: 4922..4925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 5,
            span: 4925..4926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 207,
            column: 10,
            span: 4926..4931,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 207,
            column: 11,
            span: 4931..4932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 207,
            column: 17,
            span: 4932..4938,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 18,
            span: 4938..4939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 207,
            column: 19,
            span: 4939..4940,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 20,
            span: 4940..4941,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 21,
            span: 4941..4942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 208,
            column: 2,
            span: 4943..4944,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 208,
            column: 4,
            span: 4945..4946,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 208,
            column: 0,
            span: 4947..4950,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 211,
            column: 6,
            span: 4995..5000,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 211,
            column: 15,
            span: 5001..5009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 211,
            column: 19,
            span: 5010..5013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 21,
            span: 5014..5015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 22,
            span: 5015..5016,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 211,
            column: 29,
            span: 5017..5023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 211,
            column: 35,
            span: 5024..5029,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 211,
            column: 36,
            span: 5029..5030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 211,
            column: 44,
            span: 5030..5038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 45,
            span: 5038..5039,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 46,
            span: 5038..5040,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 47,
            span: 5040..5041,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 211,
            column: 49,
            span: 5042..5043,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 50,
            span: 5042..5044,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 51,
            span: 5044..5045,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 211,
            column: 0,
            span: 5046..5049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 212,
            column: 7,
            span: 5050..5056,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 8,
            span: 5056..5057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 212,
            column: 11,
            span: 5057..5060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 12,
            span: 5060..5061,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 212,
            column: 14,
            span: 5060..5063,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 15,
            span: 5063..5064,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 212,
            column: 18,
            span: 5065..5067,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 212,
            column: 22,
            span: 5068..5071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 23,
            span: 5071..5072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 215,
            column: 2,
            span: 5075..5076,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 215,
            column: 4,
            span: 5077..5078,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 215,
            column: 6,
            span: 5079..5080,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 215,
            column: 7,
            span: 5080..5081,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 215,
            column: 8,
            span: 5081..5082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 215,
            column: 10,
            span: 5083..5084,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 215,
            column: 12,
            span: 5085..5086,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 215,
            column: 0,
            span: 5087..5090,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 216,
            column: 6,
            span: 5091..5096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 216,
            column: 11,
            span: 5097..5101,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 216,
            column: 13,
            span: 5102..5103,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 216,
            column: 0,
            span: 5103..5105,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 217,
            column: 6,
            span: 5106..5111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        position: Position {
            line: 217,
            column: 14,
            span: 5112..5119,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 217,
            column: 16,
            span: 5120..5121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 217,
            column: 0,
            span: 5122..5126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 218,
            column: 6,
            span: 5127..5132,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 218,
            column: 7,
            span: 5132..5133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 218,
            column: 14,
            span: 5133..5140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 15,
            span: 5140..5141,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 218,
            column: 23,
            span: 5141..5149,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 25,
            span: 5150..5151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 218,
            column: 26,
            span: 5151..5152,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 218,
            column: 27,
            span: 5152..5153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 218,
            column: 28,
            span: 5153..5154,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 29,
            span: 5154..5155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 219,
            column: 17,
            span: 5158..5172,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 18,
            span: 5172..5173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 19,
            span: 5173..5174,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 220,
            column: 8,
            span: 5205..5210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 220,
            column: 10,
            span: 5211..5212,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 11,
            span: 5212..5213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 220,
            column: 13,
            span: 5214..5215,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 220,
            column: 14,
            span: 5215..5216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 220,
            column: 16,
            span: 5217..5218,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 220,
            column: 18,
            span: 5219..5220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 220,
            column: 24,
            span: 5221..5226,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 220,
            column: 25,
            span: 5226..5227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 220,
            column: 32,
            span: 5227..5234,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 33,
            span: 5234..5235,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 34,
            span: 5235..5236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 221,
            column: 9,
            span: 5239..5245,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 10,
            span: 5245..5246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 221,
            column: 11,
            span: 5246..5247,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 221,
            column: 14,
            span: 5248..5250,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'crl'",
        ),
        position: Position {
            line: 221,
            column: 20,
            span: 5251..5256,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 221,
            column: 24,
            span: 5257..5260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 221,
            column: 26,
            span: 5261..5262,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 221,
            column: 29,
            span: 5263..5265,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 221,
            column: 31,
            span: 5265..5267,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 32,
            span: 5267..5268,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 222,
            column: 5,
            span: 5271..5273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 222,
            column: 7,
            span: 5274..5275,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 222,
            column: 10,
            span: 5276..5278,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        position: Position {
            line: 222,
            column: 17,
            span: 5279..5285,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 222,
            column: 0,
            span: 5286..5290,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 223,
            column: 7,
            span: 5295..5297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 223,
            column: 12,
            span: 5298..5302,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 223,
            column: 15,
            span: 5303..5305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        position: Position {
            line: 223,
            column: 23,
            span: 5306..5313,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 223,
            column: 0,
            span: 5314..5318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 224,
            column: 8,
            span: 5325..5326,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 224,
            column: 10,
            span: 5327..5328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 224,
            column: 12,
            span: 5329..5330,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 224,
            column: 13,
            span: 5330..5331,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 14,
            span: 5330..5332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldglob",
        ),
        position: Position {
            line: 225,
            column: 14,
            span: 5388..5395,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 225,
            column: 16,
            span: 5396..5397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 225,
            column: 0,
            span: 5398..5402,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 226,
            column: 0,
            span: 5407..5410,
        },
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        position: Position {
            line: 227,
            column: 9,
            span: 5413..5419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 227,
            column: 11,
            span: 5420..5421,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 227,
            column: 14,
            span: 5422..5424,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 227,
            column: 21,
            span: 5425..5431,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 227,
            column: 0,
            span: 5432..5436,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 228,
            column: 12,
            span: 5443..5448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 228,
            column: 14,
            span: 5449..5450,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 228,
            column: 16,
            span: 5451..5452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 228,
            column: 22,
            span: 5453..5458,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 228,
            column: 23,
            span: 5458..5459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 228,
            column: 30,
            span: 5459..5466,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 31,
            span: 5466..5467,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 228,
            column: 32,
            span: 5466..5468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 33,
            span: 5468..5469,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        position: Position {
            line: 228,
            column: 37,
            span: 5470..5473,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 38,
            span: 5473..5474,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 228,
            column: 39,
            span: 5474..5475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 228,
            column: 0,
            span: 5475..5479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 229,
            column: 8,
            span: 5486..5487,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 229,
            column: 9,
            span: 5487..5488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 229,
            column: 10,
            span: 5488..5489,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 229,
            column: 11,
            span: 5489..5490,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 229,
            column: 13,
            span: 5491..5492,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 229,
            column: 0,
            span: 5492..5494,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 230,
            column: 7,
            span: 5497..5501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 230,
            column: 14,
            span: 5502..5508,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 15,
            span: 5508..5509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 230,
            column: 16,
            span: 5509..5510,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 230,
            column: 19,
            span: 5511..5513,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        position: Position {
            line: 230,
            column: 28,
            span: 5514..5522,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 29,
            span: 5522..5523,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 231,
            column: 0,
            span: 5526..5529,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 232,
            column: 4,
            span: 5530..5533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 232,
            column: 5,
            span: 5533..5534,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"crl\"",
        ),
        position: Position {
            line: 232,
            column: 11,
            span: 5535..5540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 12,
            span: 5540..5541,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 235,
            column: 9,
            span: 5544..5552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 235,
            column: 11,
            span: 5553..5554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 235,
            column: 12,
            span: 5554..5555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 235,
            column: 13,
            span: 5555..5556,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 235,
            column: 14,
            span: 5556..5557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 235,
            column: 15,
            span: 5557..5558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 16,
            span: 5558..5559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 236,
            column: 17,
            span: 5562..5576,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 236,
            column: 18,
            span: 5576..5577,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 236,
            column: 19,
            span: 5577..5578,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 237,
            column: 8,
            span: 5581..5586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 237,
            column: 10,
            span: 5587..5588,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 11,
            span: 5588..5589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 237,
            column: 13,
            span: 5590..5591,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 237,
            column: 15,
            span: 5592..5593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 237,
            column: 21,
            span: 5594..5599,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 237,
            column: 22,
            span: 5599..5600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 237,
            column: 30,
            span: 5600..5608,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 237,
            column: 31,
            span: 5608..5609,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 237,
            column: 32,
            span: 5608..5610,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 33,
            span: 5610..5611,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 237,
            column: 35,
            span: 5611..5613,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 237,
            column: 36,
            span: 5613..5614,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 238,
            column: 8,
            span: 5617..5622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 238,
            column: 10,
            span: 5623..5624,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 11,
            span: 5624..5625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 238,
            column: 13,
            span: 5626..5627,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 238,
            column: 15,
            span: 5628..5629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 238,
            column: 21,
            span: 5630..5635,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 238,
            column: 22,
            span: 5635..5636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 238,
            column: 30,
            span: 5636..5644,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 31,
            span: 5644..5645,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 32,
            span: 5644..5646,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 33,
            span: 5646..5647,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 35,
            span: 5647..5649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 36,
            span: 5649..5650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 239,
            column: 9,
            span: 5653..5659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 10,
            span: 5659..5660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 239,
            column: 11,
            span: 5660..5661,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 239,
            column: 14,
            span: 5662..5664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 239,
            column: 16,
            span: 5665..5666,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 239,
            column: 20,
            span: 5667..5670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 239,
            column: 22,
            span: 5671..5672,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 239,
            column: 25,
            span: 5673..5675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 239,
            column: 27,
            span: 5676..5677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 28,
            span: 5677..5678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 240,
            column: 9,
            span: 5681..5687,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 10,
            span: 5687..5688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 240,
            column: 15,
            span: 5688..5693,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 240,
            column: 16,
            span: 5693..5694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 240,
            column: 24,
            span: 5694..5702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 240,
            column: 25,
            span: 5702..5703,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 26,
            span: 5702..5704,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 27,
            span: 5704..5705,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 240,
            column: 29,
            span: 5705..5707,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 240,
            column: 30,
            span: 5707..5708,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pera\"",
        ),
        position: Position {
            line: 240,
            column: 37,
            span: 5709..5715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 38,
            span: 5715..5716,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 240,
            column: 41,
            span: 5717..5719,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        position: Position {
            line: 240,
            column: 46,
            span: 5720..5724,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 240,
            column: 48,
            span: 5724..5726,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        position: Position {
            line: 240,
            column: 52,
            span: 5726..5730,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 240,
            column: 53,
            span: 5730..5731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 241,
            column: 9,
            span: 5734..5740,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 10,
            span: 5740..5741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 241,
            column: 15,
            span: 5741..5746,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 241,
            column: 16,
            span: 5746..5747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 241,
            column: 24,
            span: 5747..5755,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 241,
            column: 25,
            span: 5755..5756,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 241,
            column: 26,
            span: 5755..5757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 241,
            column: 27,
            span: 5757..5758,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 241,
            column: 29,
            span: 5758..5760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 241,
            column: 30,
            span: 5760..5761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"maçã\"",
        ),
        position: Position {
            line: 241,
            column: 37,
            span: 5762..5768,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 241,
            column: 38,
            span: 5768..5769,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 241,
            column: 41,
            span: 5770..5772,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        position: Position {
            line: 241,
            column: 45,
            span: 5773..5776,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 241,
            column: 46,
            span: 5776..5777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 242,
            column: 4,
            span: 5780..5781,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 242,
            column: 6,
            span: 5782..5783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 242,
            column: 12,
            span: 5784..5789,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 242,
            column: 13,
            span: 5789..5790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 242,
            column: 20,
            span: 5790..5797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 21,
            span: 5797..5798,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 242,
            column: 22,
            span: 5797..5799,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 23,
            span: 5799..5800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 243,
            column: 9,
            span: 5803..5809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 10,
            span: 5809..5810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 243,
            column: 11,
            span: 5810..5811,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 243,
            column: 12,
            span: 5811..5812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 243,
            column: 16,
            span: 5812..5816,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 19,
            span: 5817..5819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 243,
            column: 21,
            span: 5820..5821,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 243,
            column: 25,
            span: 5822..5825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 243,
            column: 27,
            span: 5826..5827,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 243,
            column: 28,
            span: 5827..5828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 243,
            column: 32,
            span: 5828..5832,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 35,
            span: 5833..5835,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        position: Position {
            line: 243,
            column: 41,
            span: 5836..5841,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 243,
            column: 45,
            span: 5842..5845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 243,
            column: 47,
            span: 5846..5847,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 243,
            column: 48,
            span: 5847..5848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 243,
            column: 52,
            span: 5848..5852,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 55,
            span: 5853..5855,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'g'",
        ),
        position: Position {
            line: 243,
            column: 59,
            span: 5856..5859,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 243,
            column: 0,
            span: 5860..5863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 244,
            column: 11,
            span: 5873..5874,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 244,
            column: 12,
            span: 5874..5875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        position: Position {
            line: 244,
            column: 16,
            span: 5875..5879,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 244,
            column: 19,
            span: 5880..5882,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 21,
            span: 5882..5884,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 244,
            column: 25,
            span: 5885..5888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 244,
            column: 32,
            span: 5889..5895,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 244,
            column: 33,
            span: 5895..5896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 244,
            column: 37,
            span: 5896..5900,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 38,
            span: 5900..5901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 244,
            column: 39,
            span: 5901..5902,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 244,
            column: 40,
            span: 5902..5903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        position: Position {
            line: 244,
            column: 46,
            span: 5903..5909,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 244,
            column: 47,
            span: 5909..5910,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^@.*db%.lua$\"",
        ),
        position: Position {
            line: 244,
            column: 62,
            span: 5911..5925,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 63,
            span: 5925..5926,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 64,
            span: 5926..5927,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 245,
            column: 7,
            span: 5930..5934,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 245,
            column: 9,
            span: 5935..5936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 245,
            column: 14,
            span: 5937..5941,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 245,
            column: 15,
            span: 5941..5942,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 245,
            column: 0,
            span: 5941..5943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 246,
            column: 9,
            span: 5946..5952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 10,
            span: 5952..5953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 246,
            column: 15,
            span: 5953..5958,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 246,
            column: 16,
            span: 5958..5959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 246,
            column: 23,
            span: 5959..5966,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 246,
            column: 24,
            span: 5966..5967,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 25,
            span: 5966..5968,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 246,
            column: 26,
            span: 5968..5969,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 246,
            column: 30,
            span: 5970..5973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 31,
            span: 5973..5974,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 246,
            column: 32,
            span: 5974..5975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 246,
            column: 43,
            span: 5975..5986,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 246,
            column: 46,
            span: 5987..5989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 246,
            column: 48,
            span: 5990..5991,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 246,
            column: 49,
            span: 5991..5992,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 50,
            span: 5991..5993,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 246,
            column: 51,
            span: 5993..5994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 247,
            column: 9,
            span: 5997..6003,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 10,
            span: 6003..6004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 247,
            column: 15,
            span: 6004..6009,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 247,
            column: 16,
            span: 6009..6010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 247,
            column: 23,
            span: 6010..6017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 24,
            span: 6017..6018,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 247,
            column: 25,
            span: 6017..6019,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 26,
            span: 6019..6020,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 247,
            column: 30,
            span: 6021..6024,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 31,
            span: 6024..6025,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 247,
            column: 32,
            span: 6025..6026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 247,
            column: 43,
            span: 6026..6037,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 247,
            column: 46,
            span: 6038..6040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 247,
            column: 48,
            span: 6041..6042,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 247,
            column: 49,
            span: 6042..6043,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 247,
            column: 50,
            span: 6042..6044,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 51,
            span: 6044..6045,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 248,
            column: 0,
            span: 6046..6049,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 250,
            column: 9,
            span: 6051..6059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 250,
            column: 13,
            span: 6060..6063,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 14,
            span: 6063..6064,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 15,
            span: 6064..6065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 251,
            column: 7,
            span: 6068..6072,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 251,
            column: 9,
            span: 6073..6074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "glob",
        ),
        position: Position {
            line: 251,
            column: 14,
            span: 6075..6079,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 251,
            column: 15,
            span: 6079..6080,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 251,
            column: 0,
            span: 6079..6081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 252,
            column: 9,
            span: 6084..6090,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 10,
            span: 6090..6091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 252,
            column: 15,
            span: 6091..6096,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 252,
            column: 16,
            span: 6096..6097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 252,
            column: 23,
            span: 6097..6104,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 24,
            span: 6104..6105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 25,
            span: 6104..6106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 26,
            span: 6106..6107,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 252,
            column: 30,
            span: 6108..6111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 31,
            span: 6111..6112,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 252,
            column: 32,
            span: 6112..6113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 252,
            column: 43,
            span: 6113..6124,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 252,
            column: 46,
            span: 6125..6127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 252,
            column: 48,
            span: 6128..6129,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 252,
            column: 49,
            span: 6129..6130,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 50,
            span: 6129..6131,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 51,
            span: 6131..6132,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 253,
            column: 4,
            span: 6133..6136,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 253,
            column: 5,
            span: 6136..6137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 253,
            column: 9,
            span: 6138..6141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 10,
            span: 6141..6142,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 11,
            span: 6142..6143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 256,
            column: 2,
            span: 6209..6210,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 256,
            column: 4,
            span: 6211..6212,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\\nalo'",
        ),
        position: Position {
            line: 257,
            column: 5,
            span: 6213..6223,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 257,
            column: 8,
            span: 6224..6226,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n]]",
        ),
        position: Position {
            line: 259,
            column: 3,
            span: 6227..6233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 262,
            column: 7,
            span: 6242..6248,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 8,
            span: 6248..6249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 262,
            column: 13,
            span: 6249..6254,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 262,
            column: 14,
            span: 6254..6255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 262,
            column: 21,
            span: 6255..6262,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 262,
            column: 22,
            span: 6262..6263,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 262,
            column: 23,
            span: 6262..6264,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 262,
            column: 24,
            span: 6264..6265,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 262,
            column: 28,
            span: 6266..6269,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 29,
            span: 6269..6270,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 262,
            column: 30,
            span: 6270..6271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 262,
            column: 41,
            span: 6271..6282,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 262,
            column: 44,
            span: 6283..6285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L",
        ),
        position: Position {
            line: 262,
            column: 46,
            span: 6286..6287,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 262,
            column: 47,
            span: 6287..6288,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 262,
            column: 49,
            span: 6287..6290,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 262,
            column: 50,
            span: 6290..6291,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 265,
            column: 9,
            span: 6319..6327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 265,
            column: 11,
            span: 6328..6329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 265,
            column: 12,
            span: 6329..6330,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 265,
            column: 15,
            span: 6330..6333,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 265,
            column: 16,
            span: 6333..6334,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 266,
            column: 8,
            span: 6337..6342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 266,
            column: 12,
            span: 6343..6346,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 266,
            column: 14,
            span: 6347..6348,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 266,
            column: 16,
            span: 6349..6350,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 266,
            column: 19,
            span: 6350..6353,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 266,
            column: 20,
            span: 6353..6354,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 267,
            column: 5,
            span: 6357..6359,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 267,
            column: 11,
            span: 6360..6365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 267,
            column: 13,
            span: 6366..6367,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 267,
            column: 14,
            span: 6367..6368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 267,
            column: 15,
            span: 6368..6369,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 267,
            column: 16,
            span: 6369..6370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 267,
            column: 17,
            span: 6370..6371,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 267,
            column: 18,
            span: 6371..6372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 267,
            column: 20,
            span: 6373..6374,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 267,
            column: 21,
            span: 6374..6375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 267,
            column: 25,
            span: 6375..6379,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 267,
            column: 26,
            span: 6379..6380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        position: Position {
            line: 267,
            column: 29,
            span: 6380..6383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 30,
            span: 6383..6384,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 267,
            column: 32,
            span: 6383..6386,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 33,
            span: 6386..6387,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 267,
            column: 34,
            span: 6387..6388,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 267,
            column: 0,
            span: 6389..6392,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 268,
            column: 8,
            span: 6395..6400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "feijao",
        ),
        position: Position {
            line: 268,
            column: 0,
            span: 6401..6407,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 269,
            column: 8,
            span: 6410..6415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        position: Position {
            line: 269,
            column: 13,
            span: 6416..6420,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 269,
            column: 14,
            span: 6420..6421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 269,
            column: 15,
            span: 6421..6422,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 269,
            column: 17,
            span: 6423..6424,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 269,
            column: 24,
            span: 6425..6431,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 269,
            column: 25,
            span: 6431..6432,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mamão\"",
        ),
        position: Position {
            line: 269,
            column: 33,
            span: 6433..6440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 270,
            column: 4,
            span: 6443..6444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 5,
            span: 6444..6445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        position: Position {
            line: 270,
            column: 9,
            span: 6445..6449,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 10,
            span: 6449..6450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 270,
            column: 11,
            span: 6450..6451,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 12,
            span: 6451..6452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 271,
            column: 9,
            span: 6455..6461,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 10,
            span: 6461..6462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAAA",
        ),
        position: Position {
            line: 271,
            column: 14,
            span: 6462..6466,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 271,
            column: 17,
            span: 6467..6469,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pera\"",
        ),
        position: Position {
            line: 271,
            column: 24,
            span: 6470..6476,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 271,
            column: 28,
            span: 6477..6480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 271,
            column: 30,
            span: 6481..6482,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 271,
            column: 33,
            span: 6483..6485,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"maçã\"",
        ),
        position: Position {
            line: 271,
            column: 40,
            span: 6486..6492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 41,
            span: 6492..6493,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 272,
            column: 0,
            span: 6496..6498,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 273,
            column: 11,
            span: 6504..6509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 273,
            column: 13,
            span: 6510..6511,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 273,
            column: 15,
            span: 6512..6513,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 273,
            column: 0,
            span: 6513..6516,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 274,
            column: 11,
            span: 6522..6527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 274,
            column: 13,
            span: 6528..6529,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 14,
            span: 6529..6530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 274,
            column: 15,
            span: 6530..6531,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 274,
            column: 17,
            span: 6532..6533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 274,
            column: 23,
            span: 6534..6539,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 274,
            column: 24,
            span: 6539..6540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 274,
            column: 32,
            span: 6540..6548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 274,
            column: 33,
            span: 6548..6549,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 34,
            span: 6548..6550,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 35,
            span: 6550..6551,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 36,
            span: 6550..6552,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 37,
            span: 6552..6553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 275,
            column: 12,
            span: 6559..6565,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 13,
            span: 6565..6566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 275,
            column: 14,
            span: 6566..6567,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 275,
            column: 17,
            span: 6568..6570,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        position: Position {
            line: 275,
            column: 21,
            span: 6571..6574,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 275,
            column: 25,
            span: 6575..6578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 275,
            column: 27,
            span: 6579..6580,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 275,
            column: 30,
            span: 6581..6583,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 33,
            span: 6583..6586,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 34,
            span: 6586..6587,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 276,
            column: 0,
            span: 6590..6593,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 277,
            column: 0,
            span: 6594..6597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 279,
            column: 2,
            span: 6599..6600,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 279,
            column: 3,
            span: 6600..6601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 4,
            span: 6601..6602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 282,
            column: 7,
            span: 6605..6611,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 8,
            span: 6611..6612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 282,
            column: 9,
            span: 6612..6613,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 282,
            column: 10,
            span: 6613..6614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 282,
            column: 11,
            span: 6614..6615,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 282,
            column: 12,
            span: 6615..6616,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 282,
            column: 16,
            span: 6617..6620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 282,
            column: 18,
            span: 6621..6622,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 282,
            column: 19,
            span: 6622..6623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 282,
            column: 20,
            span: 6623..6624,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 282,
            column: 21,
            span: 6624..6625,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 282,
            column: 25,
            span: 6626..6629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 282,
            column: 27,
            span: 6630..6631,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 282,
            column: 28,
            span: 6631..6632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 282,
            column: 34,
            span: 6632..6638,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 282,
            column: 35,
            span: 6638..6639,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 282,
            column: 39,
            span: 6640..6643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 282,
            column: 41,
            span: 6644..6645,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 282,
            column: 42,
            span: 6645..6646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 282,
            column: 47,
            span: 6646..6651,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 282,
            column: 48,
            span: 6651..6652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 282,
            column: 56,
            span: 6652..6660,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 282,
            column: 57,
            span: 6660..6661,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 282,
            column: 61,
            span: 6662..6665,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 282,
            column: 65,
            span: 6666..6669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 282,
            column: 67,
            span: 6670..6671,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 282,
            column: 68,
            span: 6671..6672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 282,
            column: 73,
            span: 6672..6677,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 282,
            column: 74,
            span: 6677..6678,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 75,
            span: 6678..6679,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 287,
            column: 6,
            span: 6755..6760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 287,
            column: 8,
            span: 6761..6762,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 287,
            column: 9,
            span: 6762..6763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 287,
            column: 11,
            span: 6764..6765,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 287,
            column: 13,
            span: 6766..6767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 287,
            column: 19,
            span: 6768..6773,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 287,
            column: 20,
            span: 6773..6774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 287,
            column: 28,
            span: 6774..6782,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 29,
            span: 6782..6783,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 287,
            column: 30,
            span: 6782..6784,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 287,
            column: 31,
            span: 6784..6785,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 287,
            column: 33,
            span: 6785..6787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 34,
            span: 6787..6788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 288,
            column: 7,
            span: 6789..6795,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 8,
            span: 6795..6796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 288,
            column: 9,
            span: 6796..6797,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 288,
            column: 12,
            span: 6798..6800,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 288,
            column: 14,
            span: 6800..6802,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 288,
            column: 18,
            span: 6803..6806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 288,
            column: 20,
            span: 6807..6808,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 288,
            column: 23,
            span: 6809..6811,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*temporary)\"",
        ),
        position: Position {
            line: 288,
            column: 38,
            span: 6812..6826,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 39,
            span: 6826..6827,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 289,
            column: 6,
            span: 6828..6833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 289,
            column: 8,
            span: 6834..6835,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 9,
            span: 6835..6836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 289,
            column: 11,
            span: 6837..6838,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 289,
            column: 13,
            span: 6839..6840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 289,
            column: 19,
            span: 6841..6846,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 289,
            column: 20,
            span: 6846..6847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 289,
            column: 28,
            span: 6847..6855,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 29,
            span: 6855..6856,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 289,
            column: 30,
            span: 6855..6857,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 31,
            span: 6857..6858,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 289,
            column: 33,
            span: 6858..6860,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 34,
            span: 6860..6861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 290,
            column: 7,
            span: 6862..6868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 290,
            column: 8,
            span: 6868..6869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 290,
            column: 9,
            span: 6869..6870,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 290,
            column: 12,
            span: 6871..6873,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 290,
            column: 14,
            span: 6873..6875,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 290,
            column: 18,
            span: 6876..6879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 290,
            column: 20,
            span: 6880..6881,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 290,
            column: 23,
            span: 6882..6884,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*temporary)\"",
        ),
        position: Position {
            line: 290,
            column: 38,
            span: 6885..6899,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 290,
            column: 39,
            span: 6899..6900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 291,
            column: 7,
            span: 6901..6907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 8,
            span: 6907..6908,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 291,
            column: 11,
            span: 6908..6911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 291,
            column: 17,
            span: 6912..6917,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 291,
            column: 18,
            span: 6917..6918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 291,
            column: 26,
            span: 6918..6926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 27,
            span: 6926..6927,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 291,
            column: 28,
            span: 6926..6928,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 291,
            column: 29,
            span: 6928..6929,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 291,
            column: 31,
            span: 6929..6931,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 32,
            span: 6931..6932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 33,
            span: 6932..6933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 292,
            column: 7,
            span: 6934..6940,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 292,
            column: 8,
            span: 6940..6941,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 292,
            column: 11,
            span: 6941..6944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 292,
            column: 17,
            span: 6945..6950,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 292,
            column: 18,
            span: 6950..6951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 292,
            column: 26,
            span: 6951..6959,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 292,
            column: 27,
            span: 6959..6960,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 292,
            column: 28,
            span: 6959..6961,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 292,
            column: 29,
            span: 6961..6962,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 292,
            column: 31,
            span: 6962..6964,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 292,
            column: 32,
            span: 6964..6965,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 292,
            column: 33,
            span: 6965..6966,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 294,
            column: 9,
            span: 6968..6976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 294,
            column: 11,
            span: 6977..6978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 12,
            span: 6978..6979,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 13,
            span: 6979..6980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 295,
            column: 9,
            span: 6983..6989,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 10,
            span: 6989..6990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        position: Position {
            line: 295,
            column: 16,
            span: 6990..6996,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 17,
            span: 6996..6997,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 18,
            span: 6996..6998,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 19,
            span: 6998..6999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 295,
            column: 25,
            span: 7000..7005,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 295,
            column: 26,
            span: 7005..7006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 295,
            column: 34,
            span: 7006..7014,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 35,
            span: 7014..7015,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 36,
            span: 7014..7016,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 37,
            span: 7016..7017,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 38,
            span: 7016..7018,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 39,
            span: 7018..7019,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 40,
            span: 7019..7020,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 295,
            column: 43,
            span: 7021..7023,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 45,
            span: 7023..7025,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 46,
            span: 7025..7026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 296,
            column: 9,
            span: 7029..7035,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 10,
            span: 7035..7036,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 296,
            column: 13,
            span: 7036..7039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 296,
            column: 19,
            span: 7040..7045,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 296,
            column: 20,
            span: 7045..7046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 296,
            column: 28,
            span: 7046..7054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 29,
            span: 7054..7055,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 30,
            span: 7054..7056,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 296,
            column: 31,
            span: 7056..7057,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 32,
            span: 7056..7058,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 33,
            span: 7058..7059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 34,
            span: 7059..7060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 297,
            column: 8,
            span: 7063..7068,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 297,
            column: 9,
            span: 7068..7069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 297,
            column: 17,
            span: 7069..7077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 297,
            column: 18,
            span: 7077..7078,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 19,
            span: 7077..7079,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 297,
            column: 20,
            span: 7079..7080,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 22,
            span: 7080..7082,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 297,
            column: 23,
            span: 7082..7083,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 26,
            span: 7083..7086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 297,
            column: 27,
            span: 7086..7087,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 298,
            column: 9,
            span: 7090..7096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 298,
            column: 0,
            span: 7096..7099,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 299,
            column: 0,
            span: 7100..7103,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 301,
            column: 9,
            span: 7105..7113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 301,
            column: 11,
            span: 7114..7115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 12,
            span: 7115..7116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 301,
            column: 13,
            span: 7116..7117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 301,
            column: 14,
            span: 7117..7118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 301,
            column: 15,
            span: 7118..7119,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 16,
            span: 7119..7120,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 301,
            column: 23,
            span: 7121..7127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 25,
            span: 7128..7129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 301,
            column: 26,
            span: 7129..7130,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 301,
            column: 27,
            span: 7130..7131,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 301,
            column: 28,
            span: 7130..7132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 29,
            span: 7132..7133,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 301,
            column: 31,
            span: 7134..7135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 301,
            column: 33,
            span: 7136..7137,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 34,
            span: 7137..7138,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 35,
            span: 7138..7139,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 301,
            column: 0,
            span: 7140..7143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 303,
            column: 7,
            span: 7145..7151,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 8,
            span: 7151..7152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 303,
            column: 9,
            span: 7152..7153,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 10,
            span: 7153..7154,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 11,
            span: 7153..7155,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 12,
            span: 7155..7156,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 13,
            span: 7155..7157,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 14,
            span: 7157..7158,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 303,
            column: 17,
            span: 7159..7161,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 303,
            column: 20,
            span: 7161..7164,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 21,
            span: 7164..7165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 306,
            column: 6,
            span: 7169..7174,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 306,
            column: 7,
            span: 7174..7175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 306,
            column: 14,
            span: 7175..7182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 306,
            column: 15,
            span: 7182..7183,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 306,
            column: 18,
            span: 7183..7186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 306,
            column: 19,
            span: 7186..7187,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 306,
            column: 20,
            span: 7187..7188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 307,
            column: 7,
            span: 7189..7195,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 8,
            span: 7195..7196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 307,
            column: 13,
            span: 7196..7201,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 307,
            column: 14,
            span: 7201..7202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 307,
            column: 21,
            span: 7202..7209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 22,
            span: 7209..7210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 23,
            span: 7210..7211,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 307,
            column: 26,
            span: 7212..7214,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 307,
            column: 30,
            span: 7215..7218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 31,
            span: 7218..7219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 312,
            column: 2,
            span: 7263..7264,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 312,
            column: 4,
            span: 7265..7266,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 312,
            column: 0,
            span: 7267..7270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 313,
            column: 2,
            span: 7271..7272,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 313,
            column: 4,
            span: 7273..7274,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 313,
            column: 6,
            span: 7275..7276,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 313,
            column: 7,
            span: 7276..7277,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 314,
            column: 9,
            span: 7278..7286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 314,
            column: 11,
            span: 7287..7288,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 314,
            column: 12,
            span: 7288..7289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 314,
            column: 13,
            span: 7289..7290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 314,
            column: 15,
            span: 7291..7292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 314,
            column: 16,
            span: 7292..7293,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 314,
            column: 17,
            span: 7293..7294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 314,
            column: 19,
            span: 7295..7296,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 314,
            column: 20,
            span: 7296..7297,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 314,
            column: 24,
            span: 7298..7301,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 314,
            column: 25,
            span: 7301..7302,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 314,
            column: 31,
            span: 7303..7308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 314,
            column: 35,
            span: 7309..7312,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 314,
            column: 37,
            span: 7313..7314,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 314,
            column: 39,
            span: 7315..7316,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 314,
            column: 42,
            span: 7316..7319,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 314,
            column: 43,
            span: 7319..7320,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 314,
            column: 44,
            span: 7320..7321,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 314,
            column: 50,
            span: 7322..7327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 314,
            column: 52,
            span: 7328..7329,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 314,
            column: 54,
            span: 7330..7331,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 314,
            column: 57,
            span: 7331..7334,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 314,
            column: 0,
            span: 7335..7338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 315,
            column: 6,
            span: 7339..7344,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 315,
            column: 7,
            span: 7344..7345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 315,
            column: 14,
            span: 7345..7352,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 15,
            span: 7352..7353,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 315,
            column: 23,
            span: 7353..7361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 25,
            span: 7362..7363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 315,
            column: 26,
            span: 7363..7364,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 27,
            span: 7364..7365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 316,
            column: 9,
            span: 7368..7374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 316,
            column: 10,
            span: 7374..7375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 316,
            column: 11,
            span: 7375..7376,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 316,
            column: 14,
            span: 7377..7379,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 316,
            column: 21,
            span: 7380..7386,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 316,
            column: 22,
            span: 7386..7387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 317,
            column: 11,
            span: 7390..7398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 12,
            span: 7398..7399,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XX = 12\"",
        ),
        position: Position {
            line: 317,
            column: 21,
            span: 7399..7408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 22,
            span: 7408..7409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 319,
            column: 9,
            span: 7476..7482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 10,
            span: 7482..7483,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 319,
            column: 13,
            span: 7483..7486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 319,
            column: 19,
            span: 7487..7492,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 20,
            span: 7492..7493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 319,
            column: 24,
            span: 7493..7497,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 319,
            column: 25,
            span: 7497..7498,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a='joao'+1\"",
        ),
        position: Position {
            line: 319,
            column: 37,
            span: 7498..7510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 38,
            span: 7510..7511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 39,
            span: 7511..7512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 319,
            column: 40,
            span: 7512..7513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 320,
            column: 8,
            span: 7516..7521,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 320,
            column: 9,
            span: 7521..7522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 320,
            column: 16,
            span: 7522..7529,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 320,
            column: 17,
            span: 7529..7530,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 320,
            column: 25,
            span: 7530..7538,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 320,
            column: 27,
            span: 7539..7540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 320,
            column: 28,
            span: 7540..7541,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 320,
            column: 29,
            span: 7541..7542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 320,
            column: 31,
            span: 7543..7544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 320,
            column: 32,
            span: 7544..7545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 321,
            column: 11,
            span: 7551..7557,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 12,
            span: 7557..7558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 321,
            column: 17,
            span: 7558..7563,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 321,
            column: 18,
            span: 7563..7564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 321,
            column: 25,
            span: 7564..7571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 26,
            span: 7571..7572,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 321,
            column: 27,
            span: 7571..7573,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 321,
            column: 28,
            span: 7573..7574,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 321,
            column: 32,
            span: 7575..7578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 33,
            span: 7578..7579,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 321,
            column: 34,
            span: 7579..7580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 321,
            column: 45,
            span: 7580..7591,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 321,
            column: 48,
            span: 7592..7594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 321,
            column: 50,
            span: 7595..7596,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 51,
            span: 7596..7597,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 322,
            column: 10,
            span: 7602..7607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 322,
            column: 12,
            span: 7608..7609,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 322,
            column: 13,
            span: 7609..7610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 322,
            column: 14,
            span: 7610..7611,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 322,
            column: 15,
            span: 7611..7612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 322,
            column: 16,
            span: 7612..7613,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 322,
            column: 18,
            span: 7614..7615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 322,
            column: 24,
            span: 7616..7621,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 322,
            column: 25,
            span: 7621..7622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 322,
            column: 32,
            span: 7622..7629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 33,
            span: 7629..7630,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 34,
            span: 7630..7631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 323,
            column: 11,
            span: 7636..7642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 323,
            column: 12,
            span: 7642..7643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 323,
            column: 13,
            span: 7643..7644,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 323,
            column: 16,
            span: 7645..7647,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        position: Position {
            line: 323,
            column: 23,
            span: 7648..7654,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 323,
            column: 24,
            span: 7654..7655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 324,
            column: 11,
            span: 7660..7666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 324,
            column: 12,
            span: 7666..7667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 324,
            column: 13,
            span: 7667..7668,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 324,
            column: 16,
            span: 7669..7671,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'l'",
        ),
        position: Position {
            line: 324,
            column: 20,
            span: 7672..7675,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 324,
            column: 24,
            span: 7676..7679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 324,
            column: 26,
            span: 7680..7681,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 324,
            column: 29,
            span: 7682..7684,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 324,
            column: 31,
            span: 7684..7686,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 324,
            column: 32,
            span: 7686..7687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 325,
            column: 10,
            span: 7692..7697,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 325,
            column: 11,
            span: 7697..7698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 325,
            column: 18,
            span: 7698..7705,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 325,
            column: 19,
            span: 7705..7706,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 325,
            column: 22,
            span: 7706..7709,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 325,
            column: 23,
            span: 7709..7710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 326,
            column: 11,
            span: 7744..7750,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 326,
            column: 12,
            span: 7750..7751,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 326,
            column: 15,
            span: 7751..7754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 326,
            column: 17,
            span: 7755..7756,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 326,
            column: 18,
            span: 7756..7757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 327,
            column: 6,
            span: 7782..7783,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 327,
            column: 8,
            span: 7784..7785,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 327,
            column: 10,
            span: 7786..7787,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 327,
            column: 11,
            span: 7787..7788,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 327,
            column: 12,
            span: 7788..7789,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 327,
            column: 18,
            span: 7790..7795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 327,
            column: 20,
            span: 7796..7797,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 327,
            column: 22,
            span: 7798..7799,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 327,
            column: 0,
            span: 7799..7801,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 328,
            column: 10,
            span: 7806..7811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 328,
            column: 12,
            span: 7812..7813,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 328,
            column: 13,
            span: 7813..7814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 328,
            column: 0,
            span: 7814..7815,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 329,
            column: 10,
            span: 7820..7825,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 329,
            column: 12,
            span: 7825..7827,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 329,
            column: 0,
            span: 7828..7830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 330,
            column: 8,
            span: 7837..7838,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 9,
            span: 7838..7839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 330,
            column: 10,
            span: 7839..7840,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 330,
            column: 12,
            span: 7841..7842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 330,
            column: 18,
            span: 7843..7848,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 330,
            column: 19,
            span: 7848..7849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 330,
            column: 27,
            span: 7849..7857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 28,
            span: 7857..7858,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 330,
            column: 29,
            span: 7857..7859,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 30,
            span: 7859..7860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 330,
            column: 32,
            span: 7861..7862,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 33,
            span: 7862..7863,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 331,
            column: 9,
            span: 7870..7872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 331,
            column: 11,
            span: 7873..7874,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 331,
            column: 13,
            span: 7874..7876,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 331,
            column: 16,
            span: 7876..7879,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 331,
            column: 21,
            span: 7880..7884,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 331,
            column: 27,
            span: 7885..7890,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 331,
            column: 0,
            span: 7891..7894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 332,
            column: 8,
            span: 7901..7902,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 332,
            column: 9,
            span: 7902..7903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 332,
            column: 10,
            span: 7903..7904,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 332,
            column: 11,
            span: 7904..7905,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 332,
            column: 13,
            span: 7906..7907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 332,
            column: 0,
            span: 7908..7909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 333,
            column: 8,
            span: 7916..7917,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 333,
            column: 10,
            span: 7918..7919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 333,
            column: 12,
            span: 7920..7921,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 333,
            column: 13,
            span: 7921..7922,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 0,
            span: 7921..7923,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 334,
            column: 0,
            span: 7928..7931,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 335,
            column: 6,
            span: 7934..7937,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 335,
            column: 7,
            span: 7937..7938,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 335,
            column: 11,
            span: 7939..7942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 12,
            span: 7942..7943,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 336,
            column: 4,
            span: 7944..7947,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 5,
            span: 7947..7948,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        position: Position {
            line: 336,
            column: 9,
            span: 7949..7952,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 10,
            span: 7952..7953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 338,
            column: 2,
            span: 7955..7956,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 338,
            column: 3,
            span: 7956..7957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 338,
            column: 4,
            span: 7957..7958,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 5,
            span: 7958..7959,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 6,
            span: 7958..7960,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 7,
            span: 7960..7961,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 8,
            span: 7960..7962,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 9,
            span: 7962..7963,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 10,
            span: 7962..7964,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 11,
            span: 7964..7965,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 12,
            span: 7964..7966,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 13,
            span: 7966..7967,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 14,
            span: 7966..7968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 15,
            span: 7968..7969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 339,
            column: 7,
            span: 7970..7976,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 8,
            span: 7976..7977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 339,
            column: 9,
            span: 7977..7978,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 339,
            column: 10,
            span: 7978..7979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "self",
        ),
        position: Position {
            line: 339,
            column: 14,
            span: 7979..7983,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 339,
            column: 17,
            span: 7984..7986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 339,
            column: 19,
            span: 7987..7988,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 339,
            column: 23,
            span: 7989..7992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 339,
            column: 25,
            span: 7993..7994,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 339,
            column: 26,
            span: 7994..7995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 339,
            column: 27,
            span: 7995..7996,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 339,
            column: 30,
            span: 7997..7999,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 32,
            span: 7999..8001,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 339,
            column: 38,
            span: 8004..8007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 339,
            column: 40,
            span: 8008..8009,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 339,
            column: 41,
            span: 8009..8010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 339,
            column: 42,
            span: 8010..8011,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 339,
            column: 45,
            span: 8012..8014,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 47,
            span: 8014..8016,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 339,
            column: 51,
            span: 8017..8020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 339,
            column: 53,
            span: 8021..8022,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 339,
            column: 54,
            span: 8022..8023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 339,
            column: 55,
            span: 8023..8024,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 339,
            column: 58,
            span: 8025..8027,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 339,
            column: 62,
            span: 8028..8031,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 63,
            span: 8031..8032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 340,
            column: 7,
            span: 8033..8039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 8,
            span: 8039..8040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 340,
            column: 10,
            span: 8040..8042,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 340,
            column: 13,
            span: 8043..8045,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 16,
            span: 8045..8048,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 17,
            span: 8048..8049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 341,
            column: 7,
            span: 8050..8056,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 8,
            span: 8056..8057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 341,
            column: 13,
            span: 8057..8062,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 341,
            column: 14,
            span: 8062..8063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 341,
            column: 21,
            span: 8063..8070,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 22,
            span: 8070..8071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 23,
            span: 8071..8072,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 341,
            column: 26,
            span: 8073..8075,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 341,
            column: 30,
            span: 8076..8079,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 31,
            span: 8079..8080,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 345,
            column: 6,
            span: 8109..8114,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 345,
            column: 15,
            span: 8115..8123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        position: Position {
            line: 345,
            column: 27,
            span: 8124..8135,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 345,
            column: 29,
            span: 8136..8137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 345,
            column: 30,
            span: 8137..8138,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 345,
            column: 31,
            span: 8138..8139,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 346,
            column: 8,
            span: 8142..8147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 346,
            column: 10,
            span: 8148..8149,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 346,
            column: 12,
            span: 8150..8151,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 346,
            column: 14,
            span: 8152..8153,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 346,
            column: 15,
            span: 8153..8154,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 347,
            column: 8,
            span: 8157..8162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 347,
            column: 10,
            span: 8163..8164,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 347,
            column: 12,
            span: 8165..8166,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 347,
            column: 0,
            span: 8166..8168,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 348,
            column: 8,
            span: 8171..8176,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 348,
            column: 13,
            span: 8177..8181,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 348,
            column: 0,
            span: 8182..8184,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 349,
            column: 10,
            span: 8189..8194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 349,
            column: 15,
            span: 8195..8199,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 349,
            column: 16,
            span: 8199..8200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "value",
        ),
        position: Position {
            line: 349,
            column: 22,
            span: 8201..8206,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 349,
            column: 24,
            span: 8207..8208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 349,
            column: 30,
            span: 8209..8214,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 349,
            column: 31,
            span: 8214..8215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 349,
            column: 41,
            span: 8215..8225,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 349,
            column: 42,
            span: 8225..8226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 349,
            column: 43,
            span: 8226..8227,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 349,
            column: 44,
            span: 8227..8228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 349,
            column: 46,
            span: 8229..8230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 349,
            column: 47,
            span: 8230..8231,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 350,
            column: 7,
            span: 8236..8238,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 350,
            column: 11,
            span: 8239..8242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 350,
            column: 16,
            span: 8243..8247,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 350,
            column: 21,
            span: 8248..8252,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 350,
            column: 27,
            span: 8253..8258,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 350,
            column: 0,
            span: 8259..8262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 351,
            column: 11,
            span: 8267..8273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 12,
            span: 8273..8274,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 351,
            column: 15,
            span: 8274..8277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 351,
            column: 17,
            span: 8278..8279,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 351,
            column: 18,
            span: 8279..8280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 351,
            column: 22,
            span: 8280..8284,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 351,
            column: 23,
            span: 8284..8285,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 24,
            span: 8285..8286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 352,
            column: 6,
            span: 8291..8292,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 352,
            column: 7,
            span: 8292..8293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 352,
            column: 11,
            span: 8293..8297,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 352,
            column: 12,
            span: 8297..8298,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 352,
            column: 14,
            span: 8299..8300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "value",
        ),
        position: Position {
            line: 352,
            column: 0,
            span: 8301..8306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 353,
            column: 6,
            span: 8311..8312,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 353,
            column: 8,
            span: 8313..8314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 353,
            column: 10,
            span: 8315..8316,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 353,
            column: 12,
            span: 8317..8318,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 353,
            column: 0,
            span: 8318..8320,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 354,
            column: 0,
            span: 8323..8326,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 355,
            column: 9,
            span: 8329..8335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 355,
            column: 0,
            span: 8336..8337,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 356,
            column: 0,
            span: 8338..8341,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 358,
            column: 6,
            span: 8343..8348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 358,
            column: 8,
            span: 8349..8350,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 358,
            column: 9,
            span: 8350..8351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 358,
            column: 10,
            span: 8351..8352,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 358,
            column: 11,
            span: 8352..8353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 358,
            column: 12,
            span: 8353..8354,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 358,
            column: 14,
            span: 8355..8356,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 358,
            column: 16,
            span: 8356..8358,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 358,
            column: 17,
            span: 8358..8359,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 358,
            column: 18,
            span: 8358..8360,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 358,
            column: 19,
            span: 8360..8361,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 358,
            column: 0,
            span: 8360..8362,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 359,
            column: 6,
            span: 8363..8368,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 359,
            column: 15,
            span: 8369..8377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 359,
            column: 20,
            span: 8378..8382,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 359,
            column: 22,
            span: 8383..8384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 359,
            column: 23,
            span: 8384..8385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 359,
            column: 24,
            span: 8385..8386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 359,
            column: 26,
            span: 8387..8388,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 359,
            column: 28,
            span: 8389..8390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 359,
            column: 30,
            span: 8391..8392,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 359,
            column: 31,
            span: 8392..8393,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 359,
            column: 38,
            span: 8394..8400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 359,
            column: 40,
            span: 8401..8402,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 359,
            column: 0,
            span: 8403..8406,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 360,
            column: 6,
            span: 8407..8412,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 360,
            column: 15,
            span: 8413..8421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        position: Position {
            line: 360,
            column: 20,
            span: 8422..8426,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 22,
            span: 8427..8428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 360,
            column: 23,
            span: 8428..8429,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 24,
            span: 8429..8430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 360,
            column: 26,
            span: 8431..8432,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 360,
            column: 28,
            span: 8433..8434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 360,
            column: 30,
            span: 8435..8436,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 360,
            column: 31,
            span: 8436..8437,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 360,
            column: 38,
            span: 8438..8444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 360,
            column: 40,
            span: 8445..8446,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 360,
            column: 41,
            span: 8446..8447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 360,
            column: 42,
            span: 8447..8448,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 360,
            column: 0,
            span: 8449..8452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 361,
            column: 7,
            span: 8453..8459,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 8,
            span: 8459..8460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 361,
            column: 13,
            span: 8460..8465,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 361,
            column: 14,
            span: 8465..8466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 361,
            column: 24,
            span: 8466..8476,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 361,
            column: 25,
            span: 8476..8477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 361,
            column: 29,
            span: 8477..8481,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 361,
            column: 30,
            span: 8481..8482,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 361,
            column: 32,
            span: 8482..8484,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 33,
            span: 8484..8485,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 361,
            column: 36,
            span: 8486..8488,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 361,
            column: 40,
            span: 8489..8492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 361,
            column: 41,
            span: 8492..8493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 362,
            column: 7,
            span: 8494..8500,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 8,
            span: 8500..8501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 362,
            column: 13,
            span: 8501..8506,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 362,
            column: 14,
            span: 8506..8507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 362,
            column: 24,
            span: 8507..8517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 362,
            column: 25,
            span: 8517..8518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 362,
            column: 29,
            span: 8518..8522,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 362,
            column: 30,
            span: 8522..8523,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 362,
            column: 32,
            span: 8523..8525,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 33,
            span: 8525..8526,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 362,
            column: 36,
            span: 8527..8529,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 362,
            column: 40,
            span: 8530..8533,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 362,
            column: 41,
            span: 8533..8534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 363,
            column: 7,
            span: 8535..8541,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 363,
            column: 8,
            span: 8541..8542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 363,
            column: 13,
            span: 8542..8547,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 363,
            column: 14,
            span: 8547..8548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        position: Position {
            line: 363,
            column: 24,
            span: 8548..8558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 363,
            column: 25,
            span: 8558..8559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 363,
            column: 29,
            span: 8559..8563,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 363,
            column: 30,
            span: 8563..8564,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 363,
            column: 32,
            span: 8564..8566,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 363,
            column: 33,
            span: 8566..8567,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 363,
            column: 40,
            span: 8568..8574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 363,
            column: 41,
            span: 8574..8575,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 363,
            column: 44,
            span: 8576..8578,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 363,
            column: 48,
            span: 8579..8582,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 363,
            column: 49,
            span: 8582..8583,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 364,
            column: 6,
            span: 8584..8589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 364,
            column: 8,
            span: 8590..8591,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 364,
            column: 10,
            span: 8592..8593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        position: Position {
            line: 364,
            column: 22,
            span: 8594..8605,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 364,
            column: 23,
            span: 8605..8606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 364,
            column: 27,
            span: 8606..8610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 28,
            span: 8610..8611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 365,
            column: 7,
            span: 8612..8618,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 8,
            span: 8618..8619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 365,
            column: 9,
            span: 8619..8620,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 365,
            column: 10,
            span: 8620..8621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 365,
            column: 11,
            span: 8621..8622,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 365,
            column: 14,
            span: 8623..8625,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 365,
            column: 18,
            span: 8626..8629,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 365,
            column: 22,
            span: 8630..8633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 365,
            column: 24,
            span: 8634..8635,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 365,
            column: 25,
            span: 8635..8636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 365,
            column: 26,
            span: 8636..8637,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 365,
            column: 29,
            span: 8638..8640,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 365,
            column: 31,
            span: 8640..8642,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 365,
            column: 35,
            span: 8643..8646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 365,
            column: 37,
            span: 8647..8648,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 365,
            column: 38,
            span: 8648..8649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 365,
            column: 39,
            span: 8649..8650,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 365,
            column: 42,
            span: 8651..8653,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 365,
            column: 44,
            span: 8653..8655,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 45,
            span: 8655..8656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 366,
            column: 2,
            span: 8657..8658,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 366,
            column: 4,
            span: 8659..8660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalues",
        ),
        position: Position {
            line: 366,
            column: 16,
            span: 8661..8672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 17,
            span: 8672..8673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        position: Position {
            line: 366,
            column: 21,
            span: 8673..8677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 22,
            span: 8677..8678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 367,
            column: 7,
            span: 8679..8685,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 367,
            column: 8,
            span: 8685..8686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 367,
            column: 9,
            span: 8686..8687,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 367,
            column: 10,
            span: 8687..8688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 367,
            column: 11,
            span: 8688..8689,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 14,
            span: 8690..8692,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 16,
            span: 8692..8694,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 367,
            column: 20,
            span: 8695..8698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 367,
            column: 22,
            span: 8699..8700,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 367,
            column: 23,
            span: 8700..8701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 367,
            column: 24,
            span: 8701..8702,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 27,
            span: 8703..8705,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 29,
            span: 8705..8707,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 367,
            column: 33,
            span: 8708..8711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 367,
            column: 35,
            span: 8712..8713,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 367,
            column: 36,
            span: 8713..8714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 367,
            column: 37,
            span: 8714..8715,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 40,
            span: 8716..8718,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 42,
            span: 8718..8720,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 43,
            span: 8720..8721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 368,
            column: 7,
            span: 8722..8728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 8,
            span: 8728..8729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 368,
            column: 13,
            span: 8729..8734,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 368,
            column: 14,
            span: 8734..8735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        position: Position {
            line: 368,
            column: 24,
            span: 8735..8745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 368,
            column: 25,
            span: 8745..8746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        position: Position {
            line: 368,
            column: 29,
            span: 8746..8750,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 368,
            column: 30,
            span: 8750..8751,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 368,
            column: 32,
            span: 8751..8753,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 368,
            column: 33,
            span: 8753..8754,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 368,
            column: 40,
            span: 8755..8761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 41,
            span: 8761..8762,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 368,
            column: 44,
            span: 8763..8765,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 368,
            column: 48,
            span: 8766..8769,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 368,
            column: 49,
            span: 8769..8770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 369,
            column: 7,
            span: 8771..8777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 8,
            span: 8777..8778,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 9,
            span: 8778..8779,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 369,
            column: 10,
            span: 8779..8780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 369,
            column: 15,
            span: 8780..8785,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 369,
            column: 16,
            span: 8785..8786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 369,
            column: 26,
            span: 8786..8796,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 27,
            span: 8796..8797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        position: Position {
            line: 369,
            column: 31,
            span: 8797..8801,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 32,
            span: 8801..8802,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 369,
            column: 34,
            span: 8802..8804,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 35,
            span: 8804..8805,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 369,
            column: 36,
            span: 8805..8806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 37,
            span: 8806..8807,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 369,
            column: 38,
            span: 8807..8808,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 369,
            column: 39,
            span: 8807..8809,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 369,
            column: 40,
            span: 8809..8810,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 369,
            column: 43,
            span: 8811..8813,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 369,
            column: 50,
            span: 8814..8820,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 369,
            column: 51,
            span: 8820..8821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 371,
            column: 7,
            span: 8892..8898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 371,
            column: 8,
            span: 8898..8899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 371,
            column: 13,
            span: 8899..8904,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 371,
            column: 14,
            span: 8904..8905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 371,
            column: 24,
            span: 8905..8915,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 371,
            column: 25,
            span: 8915..8916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 371,
            column: 31,
            span: 8916..8922,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 371,
            column: 32,
            span: 8922..8923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 371,
            column: 38,
            span: 8923..8929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 371,
            column: 39,
            span: 8929..8930,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 371,
            column: 42,
            span: 8930..8933,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 371,
            column: 43,
            span: 8933..8934,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 371,
            column: 47,
            span: 8935..8938,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 48,
            span: 8938..8939,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 371,
            column: 49,
            span: 8939..8940,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 371,
            column: 51,
            span: 8940..8942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 52,
            span: 8942..8943,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 371,
            column: 55,
            span: 8944..8946,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 371,
            column: 58,
            span: 8947..8949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 59,
            span: 8949..8950,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 375,
            column: 6,
            span: 8978..8983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 375,
            column: 8,
            span: 8984..8985,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 375,
            column: 9,
            span: 8985..8986,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 375,
            column: 0,
            span: 8985..8987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 376,
            column: 6,
            span: 8988..8993,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 376,
            column: 7,
            span: 8993..8994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 376,
            column: 14,
            span: 8994..9001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 376,
            column: 15,
            span: 9001..9002,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 376,
            column: 23,
            span: 9002..9010,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 376,
            column: 25,
            span: 9011..9012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 376,
            column: 26,
            span: 9012..9013,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 27,
            span: 9013..9014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 376,
            column: 29,
            span: 9015..9016,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 376,
            column: 30,
            span: 9016..9017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 376,
            column: 31,
            span: 9017..9018,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 376,
            column: 32,
            span: 9018..9019,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 376,
            column: 33,
            span: 9018..9020,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 376,
            column: 37,
            span: 9021..9024,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 376,
            column: 38,
            span: 9024..9025,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 376,
            column: 41,
            span: 9026..9028,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 376,
            column: 42,
            span: 9028..9029,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 376,
            column: 44,
            span: 9029..9031,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 45,
            span: 9031..9032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 377,
            column: 2,
            span: 9033..9034,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 377,
            column: 3,
            span: 9034..9035,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 377,
            column: 4,
            span: 9034..9036,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 377,
            column: 5,
            span: 9036..9037,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 377,
            column: 9,
            span: 9038..9041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 377,
            column: 11,
            span: 9042..9043,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 377,
            column: 12,
            span: 9043..9044,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 377,
            column: 13,
            span: 9043..9045,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 377,
            column: 14,
            span: 9045..9046,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 377,
            column: 18,
            span: 9045..9050,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 377,
            column: 21,
            span: 9051..9053,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 377,
            column: 25,
            span: 9054..9057,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 377,
            column: 26,
            span: 9057..9058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 377,
            column: 33,
            span: 9059..9065,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 34,
            span: 9065..9066,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 377,
            column: 38,
            span: 9065..9070,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 377,
            column: 40,
            span: 9071..9072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 377,
            column: 42,
            span: 9073..9074,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 377,
            column: 46,
            span: 9075..9078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 377,
            column: 48,
            span: 9079..9080,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 377,
            column: 50,
            span: 9081..9082,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1012",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 377,
            column: 55,
            span: 9082..9087,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 56,
            span: 9087..9088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 378,
            column: 6,
            span: 9089..9094,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 378,
            column: 7,
            span: 9094..9095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 378,
            column: 14,
            span: 9095..9102,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 378,
            column: 15,
            span: 9102..9103,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 378,
            column: 23,
            span: 9103..9111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 378,
            column: 25,
            span: 9112..9113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 378,
            column: 26,
            span: 9113..9114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 378,
            column: 27,
            span: 9114..9115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 378,
            column: 29,
            span: 9116..9117,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 378,
            column: 30,
            span: 9117..9118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 378,
            column: 31,
            span: 9118..9119,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 378,
            column: 32,
            span: 9119..9120,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 378,
            column: 33,
            span: 9119..9121,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 378,
            column: 37,
            span: 9122..9125,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 378,
            column: 38,
            span: 9125..9126,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 378,
            column: 41,
            span: 9127..9129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 378,
            column: 42,
            span: 9129..9130,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 378,
            column: 44,
            span: 9130..9132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 378,
            column: 45,
            span: 9132..9133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 379,
            column: 2,
            span: 9134..9135,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 379,
            column: 3,
            span: 9135..9136,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 379,
            column: 4,
            span: 9135..9137,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 379,
            column: 5,
            span: 9137..9138,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 379,
            column: 9,
            span: 9139..9142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 379,
            column: 11,
            span: 9143..9144,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 379,
            column: 12,
            span: 9144..9145,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 379,
            column: 13,
            span: 9144..9146,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 379,
            column: 14,
            span: 9146..9147,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 379,
            column: 18,
            span: 9146..9151,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 379,
            column: 21,
            span: 9152..9154,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 379,
            column: 25,
            span: 9155..9158,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 379,
            column: 26,
            span: 9158..9159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 379,
            column: 33,
            span: 9160..9166,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 379,
            column: 34,
            span: 9166..9167,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "250",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 379,
            column: 37,
            span: 9166..9170,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 379,
            column: 39,
            span: 9171..9172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 379,
            column: 41,
            span: 9173..9174,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 379,
            column: 45,
            span: 9175..9178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 379,
            column: 47,
            span: 9179..9180,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 379,
            column: 49,
            span: 9181..9182,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 379,
            column: 53,
            span: 9182..9186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 379,
            column: 54,
            span: 9186..9187,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 380,
            column: 6,
            span: 9188..9193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 380,
            column: 8,
            span: 9194..9195,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 9,
            span: 9195..9196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 380,
            column: 10,
            span: 9196..9197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 380,
            column: 11,
            span: 9197..9198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 380,
            column: 12,
            span: 9198..9199,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 380,
            column: 14,
            span: 9200..9201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 380,
            column: 20,
            span: 9202..9207,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 380,
            column: 21,
            span: 9207..9208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 380,
            column: 28,
            span: 9208..9215,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 380,
            column: 29,
            span: 9215..9216,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 380,
            column: 30,
            span: 9216..9217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 381,
            column: 7,
            span: 9218..9224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 381,
            column: 8,
            span: 9224..9225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 381,
            column: 9,
            span: 9225..9226,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 381,
            column: 12,
            span: 9227..9229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 381,
            column: 15,
            span: 9230..9232,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 381,
            column: 19,
            span: 9233..9236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 381,
            column: 21,
            span: 9237..9238,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 381,
            column: 24,
            span: 9239..9241,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 381,
            column: 26,
            span: 9241..9243,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 381,
            column: 27,
            span: 9243..9244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 382,
            column: 6,
            span: 9245..9250,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 382,
            column: 7,
            span: 9250..9251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 382,
            column: 14,
            span: 9251..9258,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 15,
            span: 9258..9259,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 382,
            column: 23,
            span: 9259..9267,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 25,
            span: 9268..9269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 382,
            column: 26,
            span: 9269..9270,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 27,
            span: 9270..9271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 382,
            column: 29,
            span: 9272..9273,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 382,
            column: 30,
            span: 9273..9274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 382,
            column: 31,
            span: 9274..9275,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 382,
            column: 32,
            span: 9275..9276,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 382,
            column: 33,
            span: 9275..9277,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 382,
            column: 37,
            span: 9278..9281,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 382,
            column: 38,
            span: 9281..9282,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 382,
            column: 41,
            span: 9283..9285,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 382,
            column: 42,
            span: 9285..9286,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 382,
            column: 47,
            span: 9286..9291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 48,
            span: 9291..9292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 383,
            column: 2,
            span: 9293..9294,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 383,
            column: 3,
            span: 9294..9295,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 383,
            column: 4,
            span: 9294..9296,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 383,
            column: 5,
            span: 9296..9297,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 383,
            column: 9,
            span: 9298..9301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 383,
            column: 11,
            span: 9302..9303,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 383,
            column: 12,
            span: 9303..9304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 383,
            column: 13,
            span: 9303..9305,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 383,
            column: 14,
            span: 9305..9306,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 383,
            column: 18,
            span: 9305..9310,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 383,
            column: 21,
            span: 9311..9313,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 383,
            column: 25,
            span: 9314..9317,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 383,
            column: 26,
            span: 9317..9318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 383,
            column: 33,
            span: 9319..9325,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 383,
            column: 34,
            span: 9325..9326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 383,
            column: 35,
            span: 9326..9327,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 383,
            column: 38,
            span: 9328..9330,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 383,
            column: 40,
            span: 9330..9332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 383,
            column: 41,
            span: 9332..9333,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 385,
            column: 3,
            span: 9335..9337,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 385,
            column: 7,
            span: 9338..9341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_no32",
        ),
        position: Position {
            line: 385,
            column: 13,
            span: 9342..9347,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 385,
            column: 0,
            span: 9348..9352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 386,
            column: 8,
            span: 9355..9360,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 386,
            column: 9,
            span: 9360..9361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 386,
            column: 16,
            span: 9361..9368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 17,
            span: 9368..9369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 386,
            column: 22,
            span: 9369..9374,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 23,
            span: 9374..9375,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 386,
            column: 26,
            span: 9376..9378,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 27,
            span: 9378..9379,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 386,
            column: 29,
            span: 9379..9381,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 386,
            column: 30,
            span: 9381..9382,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 386,
            column: 32,
            span: 9381..9384,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 386,
            column: 34,
            span: 9385..9386,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 386,
            column: 36,
            span: 9386..9388,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 37,
            span: 9388..9389,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 387,
            column: 8,
            span: 9414..9419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 387,
            column: 10,
            span: 9420..9421,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 387,
            column: 11,
            span: 9421..9422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 387,
            column: 12,
            span: 9422..9423,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 387,
            column: 13,
            span: 9423..9424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 387,
            column: 14,
            span: 9424..9425,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 387,
            column: 16,
            span: 9426..9427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 387,
            column: 22,
            span: 9428..9433,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 387,
            column: 23,
            span: 9433..9434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 387,
            column: 30,
            span: 9434..9441,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 387,
            column: 31,
            span: 9441..9442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 387,
            column: 32,
            span: 9442..9443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 388,
            column: 9,
            span: 9446..9452,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 10,
            span: 9452..9453,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 11,
            span: 9453..9454,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 388,
            column: 12,
            span: 9454..9455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 388,
            column: 17,
            span: 9455..9460,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 388,
            column: 18,
            span: 9460..9461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 388,
            column: 25,
            span: 9461..9468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 388,
            column: 26,
            span: 9468..9469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 27,
            span: 9469..9470,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 388,
            column: 28,
            span: 9470..9471,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 29,
            span: 9471..9472,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 388,
            column: 30,
            span: 9472..9473,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 388,
            column: 31,
            span: 9472..9474,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 388,
            column: 32,
            span: 9474..9475,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 388,
            column: 35,
            span: 9476..9478,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 388,
            column: 37,
            span: 9478..9480,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 388,
            column: 38,
            span: 9480..9481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 388,
            column: 40,
            span: 9480..9483,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 388,
            column: 42,
            span: 9484..9485,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 388,
            column: 44,
            span: 9485..9487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 45,
            span: 9487..9488,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 389,
            column: 0,
            span: 9489..9492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 391,
            column: 6,
            span: 9494..9499,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 391,
            column: 7,
            span: 9499..9500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 391,
            column: 14,
            span: 9500..9507,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 391,
            column: 15,
            span: 9507..9508,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 391,
            column: 16,
            span: 9508..9509,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 395,
            column: 6,
            span: 9536..9541,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 395,
            column: 15,
            span: 9542..9550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 395,
            column: 17,
            span: 9551..9552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 395,
            column: 19,
            span: 9553..9554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 395,
            column: 20,
            span: 9554..9555,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 395,
            column: 21,
            span: 9555..9556,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 396,
            column: 5,
            span: 9559..9561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 396,
            column: 7,
            span: 9562..9563,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 396,
            column: 0,
            span: 9564..9568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 397,
            column: 11,
            span: 9573..9579,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 12,
            span: 9579..9580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 397,
            column: 17,
            span: 9580..9585,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 397,
            column: 18,
            span: 9585..9586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 397,
            column: 25,
            span: 9586..9593,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 26,
            span: 9593..9594,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 397,
            column: 27,
            span: 9593..9595,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 397,
            column: 28,
            span: 9595..9596,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        position: Position {
            line: 397,
            column: 32,
            span: 9597..9600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 33,
            span: 9600..9601,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 397,
            column: 34,
            span: 9601..9602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 397,
            column: 38,
            span: 9602..9606,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 397,
            column: 41,
            span: 9607..9609,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Lua\"",
        ),
        position: Position {
            line: 397,
            column: 47,
            span: 9610..9615,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 48,
            span: 9615..9616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 398,
            column: 11,
            span: 9621..9627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 398,
            column: 12,
            span: 9627..9628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 398,
            column: 17,
            span: 9628..9633,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 398,
            column: 18,
            span: 9633..9634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 398,
            column: 25,
            span: 9634..9641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 398,
            column: 26,
            span: 9641..9642,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 398,
            column: 27,
            span: 9641..9643,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 398,
            column: 28,
            span: 9643..9644,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        position: Position {
            line: 398,
            column: 32,
            span: 9645..9648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 398,
            column: 33,
            span: 9648..9649,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 398,
            column: 34,
            span: 9649..9650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        position: Position {
            line: 398,
            column: 44,
            span: 9650..9660,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 398,
            column: 47,
            span: 9661..9663,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 398,
            column: 52,
            span: 9664..9668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 398,
            column: 53,
            span: 9668..9669,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 399,
            column: 10,
            span: 9674..9679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        position: Position {
            line: 399,
            column: 15,
            span: 9680..9684,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 399,
            column: 17,
            span: 9685..9686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 399,
            column: 23,
            span: 9687..9692,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 399,
            column: 24,
            span: 9692..9693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 399,
            column: 31,
            span: 9693..9700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 399,
            column: 32,
            span: 9700..9701,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 399,
            column: 33,
            span: 9700..9702,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 399,
            column: 34,
            span: 9702..9703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 400,
            column: 11,
            span: 9708..9714,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 400,
            column: 12,
            span: 9714..9715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        position: Position {
            line: 400,
            column: 16,
            span: 9715..9719,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 400,
            column: 17,
            span: 9719..9720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 400,
            column: 21,
            span: 9720..9724,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 400,
            column: 24,
            span: 9725..9727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        position: Position {
            line: 400,
            column: 27,
            span: 9728..9730,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 400,
            column: 31,
            span: 9731..9734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tail",
        ),
        position: Position {
            line: 400,
            column: 36,
            span: 9735..9739,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 400,
            column: 37,
            span: 9739..9740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        position: Position {
            line: 400,
            column: 47,
            span: 9740..9750,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 400,
            column: 50,
            span: 9751..9753,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 400,
            column: 55,
            span: 9754..9758,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 400,
            column: 56,
            span: 9758..9759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 401,
            column: 11,
            span: 9764..9770,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 401,
            column: 12,
            span: 9770..9771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 401,
            column: 17,
            span: 9771..9776,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 401,
            column: 18,
            span: 9776..9777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 401,
            column: 25,
            span: 9777..9784,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 401,
            column: 26,
            span: 9784..9785,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 401,
            column: 27,
            span: 9784..9786,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 401,
            column: 28,
            span: 9786..9787,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"S\"",
        ),
        position: Position {
            line: 401,
            column: 32,
            span: 9788..9791,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 401,
            column: 33,
            span: 9791..9792,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 401,
            column: 34,
            span: 9792..9793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 401,
            column: 38,
            span: 9793..9797,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 401,
            column: 41,
            span: 9798..9800,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"main\"",
        ),
        position: Position {
            line: 401,
            column: 48,
            span: 9801..9807,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 401,
            column: 49,
            span: 9807..9808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 402,
            column: 10,
            span: 9813..9818,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 402,
            column: 13,
            span: 9818..9821,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 403,
            column: 0,
            span: 9826..9829,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 404,
            column: 0,
            span: 9830..9833,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 406,
            column: 9,
            span: 9835..9843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 406,
            column: 11,
            span: 9844..9845,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 406,
            column: 12,
            span: 9845..9846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 406,
            column: 13,
            span: 9846..9847,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 406,
            column: 14,
            span: 9847..9848,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 406,
            column: 21,
            span: 9849..9855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 406,
            column: 23,
            span: 9856..9857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 406,
            column: 24,
            span: 9857..9858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 406,
            column: 25,
            span: 9858..9859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 406,
            column: 26,
            span: 9859..9860,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 406,
            column: 0,
            span: 9861..9864,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 408,
            column: 9,
            span: 9866..9874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        position: Position {
            line: 408,
            column: 12,
            span: 9875..9877,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 408,
            column: 13,
            span: 9877..9878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 408,
            column: 14,
            span: 9878..9879,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 408,
            column: 15,
            span: 9879..9880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 408,
            column: 17,
            span: 9881..9882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 408,
            column: 18,
            span: 9882..9883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 408,
            column: 19,
            span: 9883..9884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 408,
            column: 20,
            span: 9884..9885,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 408,
            column: 0,
            span: 9886..9889,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 410,
            column: 6,
            span: 9891..9896,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 410,
            column: 15,
            span: 9897..9905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 410,
            column: 17,
            span: 9906..9907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 410,
            column: 19,
            span: 9908..9909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 410,
            column: 20,
            span: 9909..9910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 410,
            column: 21,
            span: 9910..9911,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 410,
            column: 27,
            span: 9912..9917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 410,
            column: 29,
            span: 9918..9919,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 410,
            column: 30,
            span: 9919..9920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g1",
        ),
        position: Position {
            line: 410,
            column: 32,
            span: 9920..9922,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 410,
            column: 33,
            span: 9922..9923,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 410,
            column: 40,
            span: 9924..9930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 410,
            column: 42,
            span: 9931..9932,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 410,
            column: 43,
            span: 9932..9933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 410,
            column: 44,
            span: 9933..9934,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 410,
            column: 45,
            span: 9934..9935,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 410,
            column: 0,
            span: 9936..9939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 412,
            column: 2,
            span: 9941..9942,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 412,
            column: 3,
            span: 9942..9943,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 412,
            column: 7,
            span: 9943..9947,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 8,
            span: 9947..9948,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 414,
            column: 6,
            span: 9950..9955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 414,
            column: 8,
            span: 9956..9957,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 414,
            column: 10,
            span: 9958..9959,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 414,
            column: 12,
            span: 9960..9961,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 414,
            column: 13,
            span: 9961..9962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 415,
            column: 6,
            span: 9963..9968,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 415,
            column: 7,
            span: 9968..9969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 415,
            column: 14,
            span: 9969..9976,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 15,
            span: 9976..9977,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 415,
            column: 23,
            span: 9977..9985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 25,
            span: 9986..9987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 415,
            column: 26,
            span: 9987..9988,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 27,
            span: 9988..9989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 415,
            column: 33,
            span: 9990..9995,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 415,
            column: 34,
            span: 9995..9996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 415,
            column: 40,
            span: 9996..10002,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 41,
            span: 10002..10003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 415,
            column: 42,
            span: 10003..10004,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 415,
            column: 43,
            span: 10004..10005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 415,
            column: 45,
            span: 10006..10007,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 46,
            span: 10007..10008,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 415,
            column: 50,
            span: 10009..10012,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 415,
            column: 51,
            span: 10012..10013,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"cr\"",
        ),
        position: Position {
            line: 415,
            column: 56,
            span: 10014..10018,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 57,
            span: 10018..10019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 416,
            column: 2,
            span: 10020..10021,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 416,
            column: 3,
            span: 10021..10022,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 416,
            column: 8,
            span: 10022..10027,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 416,
            column: 9,
            span: 10027..10028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 417,
            column: 6,
            span: 10029..10034,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 417,
            column: 7,
            span: 10034..10035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 417,
            column: 14,
            span: 10035..10042,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 417,
            column: 15,
            span: 10042..10043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 417,
            column: 16,
            span: 10043..10044,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 418,
            column: 6,
            span: 10045..10050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 418,
            column: 10,
            span: 10051..10054,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 418,
            column: 12,
            span: 10055..10056,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 418,
            column: 14,
            span: 10057..10058,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        position: Position {
            line: 418,
            column: 22,
            span: 10058..10066,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 418,
            column: 23,
            span: 10066..10067,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 419,
            column: 9,
            span: 10103..10109,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 419,
            column: 10,
            span: 10109..10110,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        position: Position {
            line: 419,
            column: 22,
            span: 10111..10122,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 419,
            column: 23,
            span: 10122..10123,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 419,
            column: 30,
            span: 10124..10130,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 419,
            column: 31,
            span: 10130..10131,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        position: Position {
            line: 419,
            column: 43,
            span: 10132..10143,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 419,
            column: 44,
            span: 10143..10144,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        position: Position {
            line: 420,
            column: 11,
            span: 10147..10155,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 420,
            column: 12,
            span: 10155..10156,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        position: Position {
            line: 420,
            column: 21,
            span: 10157..10165,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 420,
            column: 22,
            span: 10165..10166,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call\"",
        ),
        position: Position {
            line: 421,
            column: 9,
            span: 10169..10175,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 421,
            column: 10,
            span: 10175..10176,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 422,
            column: 2,
            span: 10206..10207,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 423,
            column: 4,
            span: 10208..10211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 423,
            column: 6,
            span: 10212..10213,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 423,
            column: 8,
            span: 10214..10215,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 423,
            column: 10,
            span: 10215..10217,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 423,
            column: 11,
            span: 10217..10218,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 423,
            column: 13,
            span: 10219..10220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 423,
            column: 16,
            span: 10220..10223,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 423,
            column: 19,
            span: 10224..10226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 423,
            column: 26,
            span: 10227..10233,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 27,
            span: 10233..10234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 423,
            column: 30,
            span: 10234..10237,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 423,
            column: 31,
            span: 10237..10238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 423,
            column: 32,
            span: 10238..10239,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 423,
            column: 33,
            span: 10239..10240,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 423,
            column: 36,
            span: 10241..10243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 423,
            column: 42,
            span: 10244..10249,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 423,
            column: 43,
            span: 10249..10250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 423,
            column: 49,
            span: 10250..10256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 50,
            span: 10256..10257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 423,
            column: 51,
            span: 10257..10258,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 423,
            column: 52,
            span: 10258..10259,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 423,
            column: 54,
            span: 10259..10261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 55,
            span: 10261..10262,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 56,
            span: 10262..10263,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 423,
            column: 0,
            span: 10264..10267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 425,
            column: 2,
            span: 10269..10270,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 425,
            column: 4,
            span: 10271..10272,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 425,
            column: 0,
            span: 10272..10274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 426,
            column: 6,
            span: 10275..10280,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 426,
            column: 7,
            span: 10280..10281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 426,
            column: 14,
            span: 10281..10288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 426,
            column: 15,
            span: 10288..10289,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 426,
            column: 23,
            span: 10289..10297,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 426,
            column: 25,
            span: 10298..10299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 426,
            column: 26,
            span: 10299..10300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 426,
            column: 27,
            span: 10300..10301,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 427,
            column: 19,
            span: 10318..10320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 427,
            column: 21,
            span: 10321..10322,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 427,
            column: 24,
            span: 10323..10325,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tail call\"",
        ),
        position: Position {
            line: 427,
            column: 36,
            span: 10326..10337,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 427,
            column: 0,
            span: 10338..10342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 428,
            column: 20,
            span: 10361..10362,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 428,
            column: 22,
            span: 10363..10364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 428,
            column: 24,
            span: 10365..10366,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 428,
            column: 26,
            span: 10367..10368,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 428,
            column: 0,
            span: 10368..10370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 429,
            column: 25,
            span: 10389..10395,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 429,
            column: 26,
            span: 10395..10396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 429,
            column: 31,
            span: 10396..10401,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 429,
            column: 32,
            span: 10401..10402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 429,
            column: 39,
            span: 10402..10409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 429,
            column: 40,
            span: 10409..10410,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 429,
            column: 41,
            span: 10409..10411,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 429,
            column: 42,
            span: 10411..10412,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        position: Position {
            line: 429,
            column: 46,
            span: 10413..10416,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 429,
            column: 47,
            span: 10416..10417,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 429,
            column: 48,
            span: 10417..10418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        position: Position {
            line: 429,
            column: 58,
            span: 10418..10428,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 429,
            column: 61,
            span: 10429..10431,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 429,
            column: 66,
            span: 10432..10436,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 429,
            column: 67,
            span: 10436..10437,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 430,
            column: 0,
            span: 10454..10458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 431,
            column: 25,
            span: 10477..10483,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 431,
            column: 26,
            span: 10483..10484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 431,
            column: 31,
            span: 10484..10489,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 431,
            column: 32,
            span: 10489..10490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 431,
            column: 39,
            span: 10490..10497,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 431,
            column: 40,
            span: 10497..10498,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 431,
            column: 41,
            span: 10497..10499,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 431,
            column: 42,
            span: 10499..10500,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"t\"",
        ),
        position: Position {
            line: 431,
            column: 46,
            span: 10501..10504,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 431,
            column: 47,
            span: 10504..10505,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 431,
            column: 48,
            span: 10505..10506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        position: Position {
            line: 431,
            column: 58,
            span: 10506..10516,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 431,
            column: 61,
            span: 10517..10519,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 431,
            column: 67,
            span: 10520..10525,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 431,
            column: 68,
            span: 10525..10526,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 432,
            column: 0,
            span: 10543..10546,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 433,
            column: 18,
            span: 10561..10564,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 433,
            column: 19,
            span: 10564..10565,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        position: Position {
            line: 433,
            column: 23,
            span: 10566..10569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 433,
            column: 24,
            span: 10569..10570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 434,
            column: 2,
            span: 10571..10572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 434,
            column: 3,
            span: 10572..10573,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 434,
            column: 8,
            span: 10573..10578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 434,
            column: 9,
            span: 10578..10579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 435,
            column: 6,
            span: 10580..10585,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 435,
            column: 7,
            span: 10585..10586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 435,
            column: 14,
            span: 10586..10593,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 435,
            column: 15,
            span: 10593..10594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 435,
            column: 16,
            span: 10594..10595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 436,
            column: 7,
            span: 10596..10602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 436,
            column: 8,
            span: 10602..10603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 436,
            column: 9,
            span: 10603..10604,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 436,
            column: 12,
            span: 10605..10607,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 436,
            column: 14,
            span: 10607..10609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 436,
            column: 15,
            span: 10609..10610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 438,
            column: 4,
            span: 10632..10635,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 438,
            column: 6,
            span: 10636..10637,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 438,
            column: 0,
            span: 10637..10643,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 439,
            column: 3,
            span: 10644..10646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 439,
            column: 9,
            span: 10647..10652,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 439,
            column: 14,
            span: 10653..10657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        position: Position {
            line: 439,
            column: 20,
            span: 10658..10663,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 439,
            column: 22,
            span: 10664..10665,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 439,
            column: 27,
            span: 10665..10670,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 439,
            column: 0,
            span: 10671..10674,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 440,
            column: 6,
            span: 10675..10680,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 440,
            column: 15,
            span: 10681..10689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 440,
            column: 19,
            span: 10690..10693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 440,
            column: 21,
            span: 10694..10695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 440,
            column: 22,
            span: 10695..10696,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 440,
            column: 23,
            span: 10696..10697,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 441,
            column: 5,
            span: 10700..10702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 441,
            column: 7,
            span: 10703..10704,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 441,
            column: 9,
            span: 10704..10706,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 441,
            column: 10,
            span: 10705..10707,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 441,
            column: 0,
            span: 10708..10712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 442,
            column: 11,
            span: 10717..10723,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 442,
            column: 12,
            span: 10723..10724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 442,
            column: 17,
            span: 10724..10729,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 442,
            column: 18,
            span: 10729..10730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 442,
            column: 25,
            span: 10730..10737,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 442,
            column: 26,
            span: 10737..10738,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 442,
            column: 27,
            span: 10737..10739,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 442,
            column: 28,
            span: 10739..10740,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 442,
            column: 29,
            span: 10740..10741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "what",
        ),
        position: Position {
            line: 442,
            column: 33,
            span: 10741..10745,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 442,
            column: 36,
            span: 10746..10748,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"main\"",
        ),
        position: Position {
            line: 442,
            column: 43,
            span: 10749..10755,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 442,
            column: 44,
            span: 10755..10756,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 443,
            column: 10,
            span: 10761..10766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        position: Position {
            line: 443,
            column: 15,
            span: 10767..10771,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 443,
            column: 17,
            span: 10772..10773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 443,
            column: 23,
            span: 10774..10779,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 443,
            column: 24,
            span: 10779..10780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 443,
            column: 31,
            span: 10780..10787,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 443,
            column: 32,
            span: 10787..10788,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 443,
            column: 33,
            span: 10787..10789,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 443,
            column: 34,
            span: 10789..10790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 444,
            column: 11,
            span: 10795..10801,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 444,
            column: 12,
            span: 10801..10802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        position: Position {
            line: 444,
            column: 16,
            span: 10802..10806,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 444,
            column: 17,
            span: 10806..10807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "istailcall",
        ),
        position: Position {
            line: 444,
            column: 27,
            span: 10807..10817,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 444,
            column: 30,
            span: 10818..10820,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 444,
            column: 35,
            span: 10821..10825,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 444,
            column: 39,
            span: 10826..10829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        position: Position {
            line: 444,
            column: 44,
            span: 10830..10834,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 444,
            column: 45,
            span: 10834..10835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 444,
            column: 49,
            span: 10835..10839,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 444,
            column: 52,
            span: 10840..10842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 444,
            column: 56,
            span: 10843..10846,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 444,
            column: 57,
            span: 10846..10847,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 445,
            column: 7,
            span: 10850..10854,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 445,
            column: 14,
            span: 10855..10861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 445,
            column: 18,
            span: 10862..10865,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 19,
            span: 10865..10866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 445,
            column: 20,
            span: 10866..10867,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 445,
            column: 21,
            span: 10867..10868,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 445,
            column: 22,
            span: 10867..10869,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 23,
            span: 10869..10870,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 446,
            column: 0,
            span: 10873..10876,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 447,
            column: 0,
            span: 10877..10880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 449,
            column: 4,
            span: 10882..10885,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 449,
            column: 5,
            span: 10885..10886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 449,
            column: 8,
            span: 10886..10889,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 449,
            column: 9,
            span: 10889..10890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 452,
            column: 6,
            span: 10893..10898,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 452,
            column: 9,
            span: 10898..10901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 456,
            column: 3,
            span: 10942..10944,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 456,
            column: 5,
            span: 10945..10946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 456,
            column: 10,
            span: 10947..10951,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local A = function ()\n    return x\n  end\n  return\n]]",
        ),
        position: Position {
            line: 461,
            column: 3,
            span: 10951..11008,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 463,
            column: 6,
            span: 11010..11015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 463,
            column: 8,
            span: 11016..11017,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 463,
            column: 10,
            span: 11018..11019,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 463,
            column: 0,
            span: 11019..11021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 465,
            column: 6,
            span: 11094..11099,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 465,
            column: 7,
            span: 11099..11100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 465,
            column: 14,
            span: 11100..11107,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 465,
            column: 15,
            span: 11107..11108,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 465,
            column: 23,
            span: 11108..11116,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 465,
            column: 25,
            span: 11117..11118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 465,
            column: 26,
            span: 11118..11119,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 465,
            column: 27,
            span: 11119..11120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 465,
            column: 29,
            span: 11121..11122,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 465,
            column: 30,
            span: 11122..11123,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 466,
            column: 5,
            span: 11126..11128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 466,
            column: 7,
            span: 11129..11130,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 466,
            column: 10,
            span: 11131..11133,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 466,
            column: 12,
            span: 11133..11135,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 466,
            column: 17,
            span: 11136..11140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 466,
            column: 19,
            span: 11141..11142,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 466,
            column: 21,
            span: 11143..11144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 466,
            column: 23,
            span: 11145..11146,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 466,
            column: 25,
            span: 11147..11148,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 466,
            column: 27,
            span: 11148..11150,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 466,
            column: 28,
            span: 11150..11151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 466,
            column: 35,
            span: 11152..11158,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 466,
            column: 36,
            span: 11158..11159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 466,
            column: 41,
            span: 11159..11164,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 466,
            column: 42,
            span: 11164..11165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 466,
            column: 50,
            span: 11165..11173,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 466,
            column: 51,
            span: 11173..11174,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 466,
            column: 52,
            span: 11173..11175,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 466,
            column: 53,
            span: 11175..11176,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 466,
            column: 55,
            span: 11176..11178,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 466,
            column: 56,
            span: 11178..11179,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 466,
            column: 59,
            span: 11180..11182,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(*temporary)\"",
        ),
        position: Position {
            line: 466,
            column: 74,
            span: 11183..11197,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 466,
            column: 75,
            span: 11197..11198,
        },
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        position: Position {
            line: 467,
            column: 9,
            span: 11201..11207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 467,
            column: 11,
            span: 11208..11209,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 467,
            column: 14,
            span: 11210..11212,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 16,
            span: 11212..11214,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 467,
            column: 21,
            span: 11215..11219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 467,
            column: 23,
            span: 11220..11221,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 467,
            column: 25,
            span: 11222..11223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 467,
            column: 27,
            span: 11224..11225,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 467,
            column: 29,
            span: 11226..11227,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 31,
            span: 11227..11229,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 467,
            column: 32,
            span: 11229..11230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 467,
            column: 39,
            span: 11231..11237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 467,
            column: 40,
            span: 11237..11238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 467,
            column: 45,
            span: 11238..11243,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 467,
            column: 46,
            span: 11243..11244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 467,
            column: 54,
            span: 11244..11252,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 467,
            column: 55,
            span: 11252..11253,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 56,
            span: 11252..11254,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 57,
            span: 11254..11255,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 59,
            span: 11255..11257,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 467,
            column: 60,
            span: 11257..11258,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 467,
            column: 63,
            span: 11259..11261,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        position: Position {
            line: 467,
            column: 67,
            span: 11262..11265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 467,
            column: 68,
            span: 11265..11266,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 468,
            column: 0,
            span: 11269..11272,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 469,
            column: 4,
            span: 11273..11276,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 469,
            column: 5,
            span: 11276..11277,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 469,
            column: 9,
            span: 11278..11281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 469,
            column: 10,
            span: 11281..11282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 470,
            column: 3,
            span: 11283..11285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 470,
            column: 4,
            span: 11285..11286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 470,
            column: 5,
            span: 11286..11287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 471,
            column: 6,
            span: 11322..11327,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 471,
            column: 7,
            span: 11327..11328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 471,
            column: 14,
            span: 11328..11335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 471,
            column: 15,
            span: 11335..11336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 471,
            column: 16,
            span: 11336..11337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 472,
            column: 7,
            span: 11356..11362,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 472,
            column: 8,
            span: 11362..11363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 472,
            column: 9,
            span: 11363..11364,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 472,
            column: 12,
            span: 11365..11367,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 472,
            column: 14,
            span: 11367..11369,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 472,
            column: 15,
            span: 11369..11370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 476,
            column: 7,
            span: 11433..11439,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 8,
            span: 11439..11440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 476,
            column: 13,
            span: 11440..11445,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 476,
            column: 14,
            span: 11445..11446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 476,
            column: 23,
            span: 11446..11455,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 24,
            span: 11455..11456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 476,
            column: 29,
            span: 11456..11461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 30,
            span: 11461..11462,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 476,
            column: 33,
            span: 11463..11465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 476,
            column: 39,
            span: 11466..11471,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 40,
            span: 11471..11472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 477,
            column: 7,
            span: 11473..11479,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 8,
            span: 11479..11480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 477,
            column: 13,
            span: 11480..11485,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 477,
            column: 14,
            span: 11485..11486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 477,
            column: 23,
            span: 11486..11495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 24,
            span: 11495..11496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 477,
            column: 29,
            span: 11496..11501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 477,
            column: 30,
            span: 11501..11502,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 477,
            column: 32,
            span: 11502..11504,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 33,
            span: 11504..11505,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 477,
            column: 36,
            span: 11506..11508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 477,
            column: 42,
            span: 11509..11514,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 43,
            span: 11514..11515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 478,
            column: 7,
            span: 11516..11522,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 8,
            span: 11522..11523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 478,
            column: 14,
            span: 11523..11529,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 478,
            column: 15,
            span: 11529..11530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 478,
            column: 19,
            span: 11530..11534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 20,
            span: 11534..11535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 478,
            column: 25,
            span: 11535..11540,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 478,
            column: 26,
            span: 11540..11541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 478,
            column: 35,
            span: 11541..11550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 478,
            column: 36,
            span: 11550..11551,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 478,
            column: 40,
            span: 11551..11555,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 478,
            column: 41,
            span: 11555..11556,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 478,
            column: 43,
            span: 11556..11558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 44,
            span: 11558..11559,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 478,
            column: 45,
            span: 11559..11560,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^hi\\n\"",
        ),
        position: Position {
            line: 478,
            column: 53,
            span: 11561..11568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 54,
            span: 11568..11569,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 478,
            column: 55,
            span: 11569..11570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 479,
            column: 7,
            span: 11571..11577,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 479,
            column: 8,
            span: 11577..11578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 479,
            column: 14,
            span: 11578..11584,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 479,
            column: 15,
            span: 11584..11585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 479,
            column: 19,
            span: 11585..11589,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 479,
            column: 20,
            span: 11589..11590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 479,
            column: 25,
            span: 11590..11595,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 479,
            column: 26,
            span: 11595..11596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 479,
            column: 35,
            span: 11596..11605,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 479,
            column: 36,
            span: 11605..11606,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 479,
            column: 40,
            span: 11606..11610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 479,
            column: 41,
            span: 11610..11611,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 479,
            column: 42,
            span: 11611..11612,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^hi\\n\"",
        ),
        position: Position {
            line: 479,
            column: 50,
            span: 11613..11620,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 479,
            column: 51,
            span: 11620..11621,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 479,
            column: 52,
            span: 11621..11622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 480,
            column: 7,
            span: 11623..11629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 480,
            column: 8,
            span: 11629..11630,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 480,
            column: 11,
            span: 11630..11633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 480,
            column: 18,
            span: 11634..11640,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 480,
            column: 19,
            span: 11640..11641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 480,
            column: 23,
            span: 11641..11645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 480,
            column: 24,
            span: 11645..11646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 480,
            column: 29,
            span: 11646..11651,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 480,
            column: 30,
            span: 11651..11652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 480,
            column: 39,
            span: 11652..11661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 480,
            column: 40,
            span: 11661..11662,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 480,
            column: 44,
            span: 11662..11666,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 480,
            column: 45,
            span: 11666..11667,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 480,
            column: 46,
            span: 11667..11668,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'traceback'\"",
        ),
        position: Position {
            line: 480,
            column: 60,
            span: 11669..11682,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 480,
            column: 61,
            span: 11682..11683,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 480,
            column: 62,
            span: 11683..11684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 481,
            column: 7,
            span: 11685..11691,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 481,
            column: 8,
            span: 11691..11692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 481,
            column: 14,
            span: 11692..11698,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 481,
            column: 15,
            span: 11698..11699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 481,
            column: 19,
            span: 11699..11703,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 481,
            column: 20,
            span: 11703..11704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 481,
            column: 25,
            span: 11704..11709,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 481,
            column: 26,
            span: 11709..11710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 481,
            column: 35,
            span: 11710..11719,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 481,
            column: 36,
            span: 11719..11720,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 481,
            column: 40,
            span: 11720..11724,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 481,
            column: 41,
            span: 11724..11725,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 481,
            column: 43,
            span: 11725..11727,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 481,
            column: 44,
            span: 11727..11728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 481,
            column: 45,
            span: 11728..11729,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'traceback'\"",
        ),
        position: Position {
            line: 481,
            column: 59,
            span: 11730..11743,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 481,
            column: 60,
            span: 11743..11744,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 481,
            column: 61,
            span: 11744..11745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 482,
            column: 7,
            span: 11746..11752,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 482,
            column: 8,
            span: 11752..11753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 482,
            column: 14,
            span: 11753..11759,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 482,
            column: 15,
            span: 11759..11760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 482,
            column: 19,
            span: 11760..11764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 482,
            column: 20,
            span: 11764..11765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 482,
            column: 25,
            span: 11765..11770,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 482,
            column: 26,
            span: 11770..11771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 482,
            column: 35,
            span: 11771..11780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 482,
            column: 36,
            span: 11780..11781,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 482,
            column: 37,
            span: 11781..11782,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 482,
            column: 38,
            span: 11782..11783,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^stack traceback:\\n\"",
        ),
        position: Position {
            line: 482,
            column: 60,
            span: 11784..11805,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 482,
            column: 61,
            span: 11805..11806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 482,
            column: 62,
            span: 11806..11807,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 486,
            column: 6,
            span: 11846..11851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 486,
            column: 8,
            span: 11852..11853,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 486,
            column: 10,
            span: 11854..11855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 486,
            column: 16,
            span: 11856..11861,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 486,
            column: 17,
            span: 11861..11862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 486,
            column: 24,
            span: 11862..11869,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 25,
            span: 11869..11870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 486,
            column: 30,
            span: 11870..11875,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 31,
            span: 11875..11876,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        position: Position {
            line: 486,
            column: 35,
            span: 11877..11880,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 36,
            span: 11880..11881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 487,
            column: 7,
            span: 11882..11888,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 487,
            column: 8,
            span: 11888..11889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 487,
            column: 9,
            span: 11889..11890,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 487,
            column: 10,
            span: 11890..11891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        position: Position {
            line: 487,
            column: 18,
            span: 11891..11899,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 487,
            column: 21,
            span: 11900..11902,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 487,
            column: 26,
            span: 11903..11907,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 487,
            column: 30,
            span: 11908..11911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 487,
            column: 32,
            span: 11912..11913,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 487,
            column: 33,
            span: 11913..11914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        position: Position {
            line: 487,
            column: 40,
            span: 11914..11921,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 487,
            column: 43,
            span: 11922..11924,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 487,
            column: 45,
            span: 11924..11926,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 487,
            column: 49,
            span: 11927..11930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 487,
            column: 51,
            span: 11931..11932,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 487,
            column: 52,
            span: 11932..11933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        position: Position {
            line: 487,
            column: 56,
            span: 11933..11937,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 487,
            column: 59,
            span: 11938..11940,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 487,
            column: 61,
            span: 11940..11942,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 487,
            column: 62,
            span: 11942..11943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 489,
            column: 2,
            span: 11945..11946,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 489,
            column: 4,
            span: 11947..11948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 489,
            column: 10,
            span: 11949..11954,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 489,
            column: 11,
            span: 11954..11955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 489,
            column: 18,
            span: 11955..11962,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 489,
            column: 19,
            span: 11962..11963,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 489,
            column: 27,
            span: 11963..11971,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 489,
            column: 29,
            span: 11972..11973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 489,
            column: 30,
            span: 11973..11974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 489,
            column: 31,
            span: 11974..11975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 489,
            column: 32,
            span: 11975..11976,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 489,
            column: 33,
            span: 11976..11977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 489,
            column: 34,
            span: 11977..11978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 489,
            column: 35,
            span: 11978..11979,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 489,
            column: 39,
            span: 11980..11983,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 489,
            column: 40,
            span: 11983..11984,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        position: Position {
            line: 489,
            column: 44,
            span: 11985..11988,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 489,
            column: 45,
            span: 11988..11989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 490,
            column: 7,
            span: 11990..11996,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 490,
            column: 8,
            span: 11996..11997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 490,
            column: 9,
            span: 11997..11998,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 490,
            column: 10,
            span: 11998..11999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        position: Position {
            line: 490,
            column: 18,
            span: 11999..12007,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 490,
            column: 21,
            span: 12008..12010,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 490,
            column: 27,
            span: 12011..12016,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 490,
            column: 31,
            span: 12017..12020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 490,
            column: 33,
            span: 12021..12022,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 490,
            column: 34,
            span: 12022..12023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        position: Position {
            line: 490,
            column: 41,
            span: 12023..12030,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 490,
            column: 44,
            span: 12031..12033,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 490,
            column: 46,
            span: 12033..12035,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 490,
            column: 50,
            span: 12036..12039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 490,
            column: 52,
            span: 12040..12041,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 490,
            column: 53,
            span: 12041..12042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        position: Position {
            line: 490,
            column: 57,
            span: 12042..12046,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 490,
            column: 60,
            span: 12047..12049,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 490,
            column: 62,
            span: 12049..12051,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 490,
            column: 63,
            span: 12051..12052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 492,
            column: 2,
            span: 12054..12055,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 492,
            column: 4,
            span: 12056..12057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 492,
            column: 10,
            span: 12058..12063,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 492,
            column: 11,
            span: 12063..12064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 492,
            column: 18,
            span: 12064..12071,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 19,
            span: 12071..12072,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 492,
            column: 27,
            span: 12072..12080,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 29,
            span: 12081..12082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 492,
            column: 30,
            span: 12082..12083,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 31,
            span: 12083..12084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 492,
            column: 32,
            span: 12084..12085,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 33,
            span: 12085..12086,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 492,
            column: 36,
            span: 12086..12089,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 492,
            column: 37,
            span: 12089..12090,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 492,
            column: 44,
            span: 12091..12097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 492,
            column: 46,
            span: 12098..12099,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 492,
            column: 47,
            span: 12099..12100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 492,
            column: 48,
            span: 12100..12101,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 492,
            column: 49,
            span: 12101..12102,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 492,
            column: 53,
            span: 12103..12106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 54,
            span: 12106..12107,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        position: Position {
            line: 492,
            column: 58,
            span: 12108..12111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 492,
            column: 59,
            span: 12111..12112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 493,
            column: 7,
            span: 12113..12119,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 493,
            column: 8,
            span: 12119..12120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 493,
            column: 9,
            span: 12120..12121,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 493,
            column: 10,
            span: 12121..12122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        position: Position {
            line: 493,
            column: 18,
            span: 12122..12130,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 493,
            column: 21,
            span: 12131..12133,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 493,
            column: 26,
            span: 12134..12138,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 493,
            column: 30,
            span: 12139..12142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 493,
            column: 32,
            span: 12143..12144,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 493,
            column: 33,
            span: 12144..12145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        position: Position {
            line: 493,
            column: 40,
            span: 12145..12152,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 493,
            column: 43,
            span: 12153..12155,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 493,
            column: 45,
            span: 12155..12157,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 493,
            column: 49,
            span: 12158..12161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 493,
            column: 51,
            span: 12162..12163,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 493,
            column: 52,
            span: 12163..12164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        position: Position {
            line: 493,
            column: 56,
            span: 12164..12168,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 493,
            column: 59,
            span: 12169..12171,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 493,
            column: 61,
            span: 12171..12173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 493,
            column: 62,
            span: 12173..12174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 495,
            column: 2,
            span: 12176..12177,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 495,
            column: 4,
            span: 12178..12179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 495,
            column: 10,
            span: 12180..12185,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 495,
            column: 11,
            span: 12185..12186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 495,
            column: 18,
            span: 12186..12193,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 495,
            column: 19,
            span: 12193..12194,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 20,
            span: 12193..12195,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 495,
            column: 21,
            span: 12195..12196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 496,
            column: 7,
            span: 12207..12213,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 496,
            column: 8,
            span: 12213..12214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 496,
            column: 9,
            span: 12214..12215,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 496,
            column: 10,
            span: 12215..12216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isvararg",
        ),
        position: Position {
            line: 496,
            column: 18,
            span: 12216..12224,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 496,
            column: 21,
            span: 12225..12227,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 496,
            column: 26,
            span: 12228..12232,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 496,
            column: 30,
            span: 12233..12236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 496,
            column: 32,
            span: 12237..12238,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 496,
            column: 33,
            span: 12238..12239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nparams",
        ),
        position: Position {
            line: 496,
            column: 40,
            span: 12239..12246,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 496,
            column: 43,
            span: 12247..12249,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 496,
            column: 45,
            span: 12249..12251,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 496,
            column: 49,
            span: 12252..12255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 496,
            column: 51,
            span: 12256..12257,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 496,
            column: 52,
            span: 12257..12258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nups",
        ),
        position: Position {
            line: 496,
            column: 56,
            span: 12258..12262,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 496,
            column: 59,
            span: 12263..12265,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 496,
            column: 61,
            span: 12265..12267,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 496,
            column: 0,
            span: 12268..12271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 497,
            column: 13,
            span: 12279..12284,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 497,
            column: 14,
            span: 12284..12285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 497,
            column: 24,
            span: 12285..12295,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 497,
            column: 25,
            span: 12295..12296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 497,
            column: 26,
            span: 12296..12297,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 497,
            column: 27,
            span: 12297..12298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 497,
            column: 31,
            span: 12298..12302,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 497,
            column: 32,
            span: 12302..12303,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 497,
            column: 34,
            span: 12303..12305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 497,
            column: 35,
            span: 12305..12306,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 497,
            column: 38,
            span: 12307..12309,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_ENV\"",
        ),
        position: Position {
            line: 497,
            column: 45,
            span: 12310..12316,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 497,
            column: 46,
            span: 12316..12317,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 502,
            column: 6,
            span: 12356..12361,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 502,
            column: 15,
            span: 12362..12370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 502,
            column: 30,
            span: 12371..12385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 502,
            column: 32,
            span: 12386..12387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 502,
            column: 34,
            span: 12387..12389,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 502,
            column: 35,
            span: 12389..12390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 502,
            column: 37,
            span: 12391..12392,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 502,
            column: 38,
            span: 12392..12393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        position: Position {
            line: 502,
            column: 44,
            span: 12394..12399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 502,
            column: 45,
            span: 12399..12400,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 503,
            column: 8,
            span: 12403..12408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tb",
        ),
        position: Position {
            line: 503,
            column: 11,
            span: 12409..12411,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 503,
            column: 13,
            span: 12412..12413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 503,
            column: 19,
            span: 12414..12419,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 503,
            column: 20,
            span: 12419..12420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        position: Position {
            line: 503,
            column: 29,
            span: 12420..12429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 503,
            column: 30,
            span: 12429..12430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 503,
            column: 32,
            span: 12430..12432,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 503,
            column: 33,
            span: 12432..12433,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 503,
            column: 37,
            span: 12434..12437,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 503,
            column: 38,
            span: 12437..12438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "level",
        ),
        position: Position {
            line: 503,
            column: 44,
            span: 12439..12444,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 503,
            column: 45,
            span: 12444..12445,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 504,
            column: 8,
            span: 12448..12453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 504,
            column: 10,
            span: 12454..12455,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 504,
            column: 12,
            span: 12456..12457,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 504,
            column: 0,
            span: 12457..12459,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 505,
            column: 6,
            span: 12462..12465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 505,
            column: 8,
            span: 12466..12467,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 505,
            column: 11,
            span: 12468..12470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 505,
            column: 18,
            span: 12471..12477,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 505,
            column: 19,
            span: 12477..12478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 505,
            column: 25,
            span: 12478..12484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 505,
            column: 26,
            span: 12484..12485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tb",
        ),
        position: Position {
            line: 505,
            column: 28,
            span: 12485..12487,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 505,
            column: 29,
            span: 12487..12488,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]+\\n?\"",
        ),
        position: Position {
            line: 505,
            column: 41,
            span: 12489..12500,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 505,
            column: 42,
            span: 12500..12501,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 505,
            column: 0,
            span: 12502..12504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 506,
            column: 11,
            span: 12509..12515,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 12,
            span: 12515..12516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 506,
            column: 13,
            span: 12516..12517,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 506,
            column: 16,
            span: 12518..12520,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 506,
            column: 18,
            span: 12520..12522,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 506,
            column: 21,
            span: 12523..12525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 506,
            column: 28,
            span: 12526..12532,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 506,
            column: 29,
            span: 12532..12533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 506,
            column: 33,
            span: 12533..12537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 34,
            span: 12537..12538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 506,
            column: 35,
            span: 12538..12539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 506,
            column: 36,
            span: 12539..12540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 506,
            column: 38,
            span: 12541..12542,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 506,
            column: 39,
            span: 12542..12543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 506,
            column: 40,
            span: 12543..12544,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 506,
            column: 41,
            span: 12544..12545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 42,
            span: 12545..12546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 43,
            span: 12546..12547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 507,
            column: 6,
            span: 12552..12553,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 507,
            column: 8,
            span: 12554..12555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 507,
            column: 10,
            span: 12556..12557,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 507,
            column: 11,
            span: 12557..12558,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 507,
            column: 0,
            span: 12557..12559,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 508,
            column: 0,
            span: 12562..12565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 509,
            column: 9,
            span: 12568..12574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 509,
            column: 10,
            span: 12574..12575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 509,
            column: 11,
            span: 12575..12576,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 509,
            column: 12,
            span: 12576..12577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 509,
            column: 13,
            span: 12577..12578,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 509,
            column: 14,
            span: 12578..12579,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 509,
            column: 17,
            span: 12580..12582,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 509,
            column: 21,
            span: 12583..12586,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 509,
            column: 22,
            span: 12586..12587,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 510,
            column: 0,
            span: 12588..12591,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 513,
            column: 6,
            span: 12594..12599,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 513,
            column: 15,
            span: 12600..12608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 513,
            column: 17,
            span: 12609..12610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 513,
            column: 19,
            span: 12611..12612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 513,
            column: 20,
            span: 12612..12613,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 513,
            column: 21,
            span: 12613..12614,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 514,
            column: 5,
            span: 12617..12619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 514,
            column: 7,
            span: 12620..12621,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 514,
            column: 9,
            span: 12622..12623,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 514,
            column: 11,
            span: 12623..12625,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 514,
            column: 16,
            span: 12626..12630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 514,
            column: 18,
            span: 12631..12632,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 514,
            column: 19,
            span: 12632..12633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 514,
            column: 20,
            span: 12633..12634,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 514,
            column: 21,
            span: 12634..12635,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 514,
            column: 22,
            span: 12634..12636,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 514,
            column: 23,
            span: 12636..12637,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 515,
            column: 7,
            span: 12640..12644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 515,
            column: 17,
            span: 12645..12654,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 515,
            column: 18,
            span: 12654..12655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 515,
            column: 23,
            span: 12655..12660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 515,
            column: 24,
            span: 12660..12661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 515,
            column: 25,
            span: 12661..12662,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 515,
            column: 0,
            span: 12663..12666,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 516,
            column: 0,
            span: 12667..12670,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 518,
            column: 6,
            span: 12672..12677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 518,
            column: 9,
            span: 12678..12680,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 518,
            column: 11,
            span: 12681..12682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 518,
            column: 21,
            span: 12683..12692,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 518,
            column: 22,
            span: 12692..12693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 518,
            column: 28,
            span: 12693..12699,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 518,
            column: 29,
            span: 12699..12700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 518,
            column: 30,
            span: 12700..12701,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 518,
            column: 31,
            span: 12701..12702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 519,
            column: 10,
            span: 12703..12712,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 519,
            column: 11,
            span: 12712..12713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 519,
            column: 17,
            span: 12713..12719,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 519,
            column: 18,
            span: 12719..12720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 519,
            column: 20,
            span: 12720..12722,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 519,
            column: 21,
            span: 12722..12723,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 519,
            column: 23,
            span: 12723..12725,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 519,
            column: 24,
            span: 12725..12726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 520,
            column: 15,
            span: 12727..12741,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 16,
            span: 12741..12742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 520,
            column: 18,
            span: 12742..12744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 19,
            span: 12744..12745,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 520,
            column: 21,
            span: 12746..12747,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield\"",
        ),
        position: Position {
            line: 520,
            column: 28,
            span: 12747..12754,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 29,
            span: 12754..12755,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 520,
            column: 38,
            span: 12756..12764,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 39,
            span: 12764..12765,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 520,
            column: 48,
            span: 12766..12774,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 49,
            span: 12774..12775,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 520,
            column: 58,
            span: 12776..12784,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 59,
            span: 12784..12785,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 520,
            column: 68,
            span: 12786..12794,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 520,
            column: 69,
            span: 12794..12795,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 70,
            span: 12795..12796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 521,
            column: 15,
            span: 12797..12811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 521,
            column: 16,
            span: 12811..12812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 521,
            column: 18,
            span: 12812..12814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 521,
            column: 19,
            span: 12814..12815,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 521,
            column: 21,
            span: 12816..12817,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 521,
            column: 29,
            span: 12817..12825,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 521,
            column: 30,
            span: 12825..12826,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 521,
            column: 39,
            span: 12827..12835,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 521,
            column: 40,
            span: 12835..12836,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 521,
            column: 49,
            span: 12837..12845,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 521,
            column: 50,
            span: 12845..12846,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 521,
            column: 59,
            span: 12847..12855,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 521,
            column: 60,
            span: 12855..12856,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 521,
            column: 61,
            span: 12856..12857,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 521,
            column: 63,
            span: 12857..12859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 521,
            column: 64,
            span: 12859..12860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 522,
            column: 15,
            span: 12861..12875,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 522,
            column: 16,
            span: 12875..12876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 522,
            column: 18,
            span: 12876..12878,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 522,
            column: 19,
            span: 12878..12879,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 522,
            column: 21,
            span: 12880..12881,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 522,
            column: 29,
            span: 12881..12889,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 522,
            column: 30,
            span: 12889..12890,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 522,
            column: 39,
            span: 12891..12899,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 522,
            column: 40,
            span: 12899..12900,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 522,
            column: 49,
            span: 12901..12909,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 522,
            column: 50,
            span: 12909..12910,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 522,
            column: 51,
            span: 12910..12911,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 522,
            column: 53,
            span: 12911..12913,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 522,
            column: 54,
            span: 12913..12914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 523,
            column: 15,
            span: 12915..12929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 523,
            column: 16,
            span: 12929..12930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 523,
            column: 18,
            span: 12930..12932,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 523,
            column: 19,
            span: 12932..12933,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 523,
            column: 21,
            span: 12934..12935,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"db.lua\"",
        ),
        position: Position {
            line: 523,
            column: 29,
            span: 12935..12943,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 523,
            column: 30,
            span: 12943..12944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 523,
            column: 31,
            span: 12944..12945,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 523,
            column: 33,
            span: 12945..12947,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 523,
            column: 34,
            span: 12947..12948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 524,
            column: 15,
            span: 12949..12963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 524,
            column: 16,
            span: 12963..12964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 524,
            column: 18,
            span: 12964..12966,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 524,
            column: 19,
            span: 12966..12967,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 524,
            column: 21,
            span: 12968..12969,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 524,
            column: 22,
            span: 12969..12970,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 524,
            column: 23,
            span: 12970..12971,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 524,
            column: 26,
            span: 12971..12974,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 524,
            column: 27,
            span: 12974..12975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 527,
            column: 3,
            span: 12978..12980,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 527,
            column: 5,
            span: 12981..12982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 527,
            column: 15,
            span: 12983..12992,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 527,
            column: 16,
            span: 12992..12993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 527,
            column: 22,
            span: 12993..12999,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 527,
            column: 23,
            span: 12999..13000,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 527,
            column: 31,
            span: 13000..13008,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 527,
            column: 33,
            span: 13009..13010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 527,
            column: 34,
            span: 13010..13011,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 527,
            column: 35,
            span: 13011..13012,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 528,
            column: 13,
            span: 13020..13025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 528,
            column: 15,
            span: 13026..13027,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 528,
            column: 17,
            span: 13028..13029,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 528,
            column: 0,
            span: 13029..13031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 529,
            column: 17,
            span: 13039..13048,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 529,
            column: 18,
            span: 13048..13049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 529,
            column: 23,
            span: 13049..13054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 529,
            column: 24,
            span: 13054..13055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 529,
            column: 29,
            span: 13055..13060,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 529,
            column: 30,
            span: 13060..13061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 529,
            column: 37,
            span: 13061..13068,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 529,
            column: 38,
            span: 13068..13069,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 529,
            column: 39,
            span: 13068..13070,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 529,
            column: 40,
            span: 13070..13071,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 529,
            column: 44,
            span: 13072..13075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 529,
            column: 45,
            span: 13075..13076,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 529,
            column: 46,
            span: 13076..13077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 530,
            column: 17,
            span: 13085..13094,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 530,
            column: 18,
            span: 13094..13095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 530,
            column: 23,
            span: 13095..13100,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 530,
            column: 24,
            span: 13100..13101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 530,
            column: 29,
            span: 13101..13106,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 530,
            column: 30,
            span: 13106..13107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 530,
            column: 37,
            span: 13107..13114,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 530,
            column: 38,
            span: 13114..13115,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 530,
            column: 39,
            span: 13114..13116,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 530,
            column: 40,
            span: 13116..13117,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 530,
            column: 44,
            span: 13118..13121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 530,
            column: 45,
            span: 13121..13122,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 530,
            column: 46,
            span: 13122..13123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 530,
            column: 57,
            span: 13123..13134,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 530,
            column: 58,
            span: 13134..13135,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 531,
            column: 14,
            span: 13143..13149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 531,
            column: 0,
            span: 13150..13151,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 532,
            column: 9,
            span: 13157..13160,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 532,
            column: 10,
            span: 13160..13161,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 534,
            column: 6,
            span: 13163..13168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 534,
            column: 9,
            span: 13169..13171,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 534,
            column: 11,
            span: 13172..13173,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 534,
            column: 13,
            span: 13174..13175,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 534,
            column: 14,
            span: 13175..13176,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 535,
            column: 6,
            span: 13177..13182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 535,
            column: 10,
            span: 13183..13186,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 535,
            column: 12,
            span: 13187..13188,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 535,
            column: 21,
            span: 13189..13197,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 535,
            column: 23,
            span: 13198..13199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 535,
            column: 24,
            span: 13199..13200,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 535,
            column: 25,
            span: 13200..13201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 535,
            column: 27,
            span: 13202..13203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 535,
            column: 28,
            span: 13203..13204,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 535,
            column: 31,
            span: 13205..13207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 535,
            column: 33,
            span: 13208..13209,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 535,
            column: 38,
            span: 13210..13214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 535,
            column: 44,
            span: 13215..13220,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 535,
            column: 45,
            span: 13220..13221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 535,
            column: 51,
            span: 13221..13227,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 535,
            column: 52,
            span: 13227..13228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 535,
            column: 54,
            span: 13228..13230,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 535,
            column: 55,
            span: 13230..13231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 535,
            column: 57,
            span: 13232..13233,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 535,
            column: 58,
            span: 13233..13234,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 535,
            column: 62,
            span: 13235..13238,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 535,
            column: 0,
            span: 13239..13242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 536,
            column: 6,
            span: 13243..13248,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 536,
            column: 7,
            span: 13248..13249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 536,
            column: 14,
            span: 13249..13256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 536,
            column: 15,
            span: 13256..13257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 536,
            column: 17,
            span: 13257..13259,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 536,
            column: 18,
            span: 13259..13260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 536,
            column: 22,
            span: 13261..13264,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 536,
            column: 23,
            span: 13264..13265,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lcr\"",
        ),
        position: Position {
            line: 536,
            column: 29,
            span: 13266..13271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 536,
            column: 30,
            span: 13271..13272,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 538,
            column: 6,
            span: 13274..13279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 538,
            column: 8,
            span: 13280..13281,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 538,
            column: 9,
            span: 13281..13282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 538,
            column: 11,
            span: 13283..13284,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 538,
            column: 13,
            span: 13285..13286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 538,
            column: 23,
            span: 13287..13296,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 538,
            column: 24,
            span: 13296..13297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 538,
            column: 30,
            span: 13297..13303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 538,
            column: 31,
            span: 13303..13304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 538,
            column: 33,
            span: 13304..13306,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 538,
            column: 34,
            span: 13306..13307,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 538,
            column: 37,
            span: 13307..13310,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 538,
            column: 38,
            span: 13310..13311,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 539,
            column: 6,
            span: 13312..13317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 539,
            column: 8,
            span: 13318..13319,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 539,
            column: 10,
            span: 13320..13321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 539,
            column: 16,
            span: 13322..13327,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 539,
            column: 17,
            span: 13327..13328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 539,
            column: 24,
            span: 13328..13335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 539,
            column: 25,
            span: 13335..13336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 539,
            column: 27,
            span: 13336..13338,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 539,
            column: 28,
            span: 13338..13339,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 539,
            column: 30,
            span: 13339..13341,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 539,
            column: 31,
            span: 13341..13342,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lfLS\"",
        ),
        position: Position {
            line: 539,
            column: 38,
            span: 13343..13349,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 539,
            column: 39,
            span: 13349..13350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 540,
            column: 7,
            span: 13351..13357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 540,
            column: 8,
            span: 13357..13358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 540,
            column: 9,
            span: 13358..13359,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 540,
            column: 10,
            span: 13359..13360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 540,
            column: 21,
            span: 13360..13371,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 540,
            column: 24,
            span: 13372..13374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 540,
            column: 26,
            span: 13375..13376,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 540,
            column: 27,
            span: 13376..13377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 540,
            column: 38,
            span: 13377..13388,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 540,
            column: 42,
            span: 13389..13392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 540,
            column: 44,
            span: 13393..13394,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 540,
            column: 45,
            span: 13394..13395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 540,
            column: 56,
            span: 13395..13406,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 540,
            column: 57,
            span: 13406..13407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 540,
            column: 58,
            span: 13407..13408,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 540,
            column: 59,
            span: 13408..13409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 540,
            column: 70,
            span: 13409..13420,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 540,
            column: 71,
            span: 13420..13421,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 540,
            column: 72,
            span: 13421..13422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 541,
            column: 7,
            span: 13423..13429,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 541,
            column: 8,
            span: 13429..13430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 541,
            column: 12,
            span: 13430..13434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 541,
            column: 13,
            span: 13434..13435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 541,
            column: 14,
            span: 13435..13436,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 541,
            column: 15,
            span: 13436..13437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "func",
        ),
        position: Position {
            line: 541,
            column: 19,
            span: 13437..13441,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 541,
            column: 20,
            span: 13441..13442,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 541,
            column: 23,
            span: 13443..13445,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 541,
            column: 34,
            span: 13446..13456,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 541,
            column: 35,
            span: 13456..13457,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 542,
            column: 4,
            span: 13458..13461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 542,
            column: 6,
            span: 13462..13463,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 542,
            column: 7,
            span: 13463..13464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 542,
            column: 8,
            span: 13464..13465,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 542,
            column: 9,
            span: 13465..13466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 542,
            column: 20,
            span: 13466..13477,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 542,
            column: 22,
            span: 13478..13479,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 542,
            column: 24,
            span: 13479..13481,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 542,
            column: 25,
            span: 13481..13482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 542,
            column: 27,
            span: 13483..13484,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 542,
            column: 28,
            span: 13484..13485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lastlinedefined",
        ),
        position: Position {
            line: 542,
            column: 43,
            span: 13485..13500,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 542,
            column: 0,
            span: 13501..13503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 543,
            column: 9,
            span: 13506..13512,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 543,
            column: 10,
            span: 13512..13513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 543,
            column: 11,
            span: 13513..13514,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 543,
            column: 12,
            span: 13514..13515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 543,
            column: 23,
            span: 13515..13526,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 543,
            column: 24,
            span: 13526..13527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 543,
            column: 25,
            span: 13527..13528,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 543,
            column: 26,
            span: 13528..13529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 543,
            column: 27,
            span: 13529..13530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 544,
            column: 4,
            span: 13533..13534,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 544,
            column: 5,
            span: 13534..13535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 544,
            column: 16,
            span: 13535..13546,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 544,
            column: 17,
            span: 13546..13547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 544,
            column: 18,
            span: 13547..13548,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 544,
            column: 19,
            span: 13548..13549,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 544,
            column: 21,
            span: 13550..13551,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 544,
            column: 0,
            span: 13552..13555,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 545,
            column: 0,
            span: 13556..13559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 546,
            column: 7,
            span: 13560..13566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 546,
            column: 8,
            span: 13566..13567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 546,
            column: 12,
            span: 13567..13571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 546,
            column: 13,
            span: 13571..13572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 546,
            column: 14,
            span: 13572..13573,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 546,
            column: 15,
            span: 13573..13574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "activelines",
        ),
        position: Position {
            line: 546,
            column: 26,
            span: 13574..13585,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 546,
            column: 27,
            span: 13585..13586,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 546,
            column: 30,
            span: 13587..13589,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 546,
            column: 34,
            span: 13590..13593,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 546,
            column: 35,
            span: 13593..13594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 547,
            column: 7,
            span: 13620..13626,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 547,
            column: 8,
            span: 13626..13627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 547,
            column: 13,
            span: 13627..13632,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 547,
            column: 14,
            span: 13632..13633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 547,
            column: 21,
            span: 13633..13640,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 547,
            column: 22,
            span: 13640..13641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 547,
            column: 24,
            span: 13641..13643,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 547,
            column: 25,
            span: 13643..13644,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 547,
            column: 27,
            span: 13644..13646,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 547,
            column: 28,
            span: 13646..13647,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 547,
            column: 31,
            span: 13648..13650,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 547,
            column: 35,
            span: 13651..13654,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 547,
            column: 36,
            span: 13654..13655,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 548,
            column: 6,
            span: 13656..13661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 548,
            column: 8,
            span: 13662..13663,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 548,
            column: 9,
            span: 13663..13664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 548,
            column: 10,
            span: 13664..13665,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 548,
            column: 12,
            span: 13666..13667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 548,
            column: 18,
            span: 13668..13673,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 548,
            column: 19,
            span: 13673..13674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 548,
            column: 27,
            span: 13674..13682,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 548,
            column: 28,
            span: 13682..13683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 548,
            column: 30,
            span: 13683..13685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 548,
            column: 31,
            span: 13685..13686,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 548,
            column: 33,
            span: 13686..13688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 548,
            column: 34,
            span: 13688..13689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 548,
            column: 36,
            span: 13689..13691,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 548,
            column: 37,
            span: 13691..13692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 549,
            column: 7,
            span: 13693..13699,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 549,
            column: 8,
            span: 13699..13700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 549,
            column: 9,
            span: 13700..13701,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 549,
            column: 12,
            span: 13702..13704,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 549,
            column: 16,
            span: 13705..13708,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 549,
            column: 20,
            span: 13709..13712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 549,
            column: 22,
            span: 13713..13714,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 549,
            column: 25,
            span: 13715..13717,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 549,
            column: 28,
            span: 13717..13720,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 549,
            column: 29,
            span: 13720..13721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 550,
            column: 2,
            span: 13722..13723,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 550,
            column: 3,
            span: 13723..13724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 550,
            column: 4,
            span: 13724..13725,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 550,
            column: 6,
            span: 13726..13727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 550,
            column: 12,
            span: 13728..13733,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 550,
            column: 13,
            span: 13733..13734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getlocal",
        ),
        position: Position {
            line: 550,
            column: 21,
            span: 13734..13742,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 550,
            column: 22,
            span: 13742..13743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 550,
            column: 24,
            span: 13743..13745,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 550,
            column: 25,
            span: 13745..13746,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 550,
            column: 27,
            span: 13746..13748,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 550,
            column: 28,
            span: 13748..13749,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 550,
            column: 30,
            span: 13749..13751,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 550,
            column: 31,
            span: 13751..13752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 551,
            column: 7,
            span: 13753..13759,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 551,
            column: 8,
            span: 13759..13760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 551,
            column: 9,
            span: 13760..13761,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 551,
            column: 12,
            span: 13762..13764,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 551,
            column: 16,
            span: 13765..13768,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 551,
            column: 20,
            span: 13769..13772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 551,
            column: 22,
            span: 13773..13774,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 551,
            column: 25,
            span: 13775..13777,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 551,
            column: 27,
            span: 13777..13779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 551,
            column: 28,
            span: 13779..13780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 552,
            column: 6,
            span: 13781..13786,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 552,
            column: 7,
            span: 13786..13787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocal",
        ),
        position: Position {
            line: 552,
            column: 15,
            span: 13787..13795,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 552,
            column: 16,
            span: 13795..13796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 552,
            column: 18,
            span: 13796..13798,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 552,
            column: 19,
            span: 13798..13799,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 552,
            column: 21,
            span: 13799..13801,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 552,
            column: 22,
            span: 13801..13802,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 552,
            column: 24,
            span: 13802..13804,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 552,
            column: 25,
            span: 13804..13805,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 552,
            column: 30,
            span: 13806..13810,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 552,
            column: 31,
            span: 13810..13811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 553,
            column: 7,
            span: 13812..13818,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 553,
            column: 8,
            span: 13818..13819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 553,
            column: 13,
            span: 13819..13824,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 553,
            column: 14,
            span: 13824..13825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 553,
            column: 21,
            span: 13825..13832,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 553,
            column: 22,
            span: 13832..13833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 553,
            column: 24,
            span: 13833..13835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 553,
            column: 25,
            span: 13835..13836,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 553,
            column: 28,
            span: 13837..13839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 553,
            column: 32,
            span: 13840..13843,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 553,
            column: 33,
            span: 13843..13844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 554,
            column: 7,
            span: 13845..13851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 554,
            column: 8,
            span: 13851..13852,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 554,
            column: 9,
            span: 13852..13853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 554,
            column: 11,
            span: 13853..13855,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 554,
            column: 14,
            span: 13856..13858,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 554,
            column: 16,
            span: 13858..13860,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 554,
            column: 0,
            span: 13861..13864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 555,
            column: 10,
            span: 13872..13874,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 555,
            column: 11,
            span: 13874..13875,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 555,
            column: 12,
            span: 13874..13876,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 555,
            column: 13,
            span: 13876..13877,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 555,
            column: 16,
            span: 13878..13880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 555,
            column: 18,
            span: 13881..13882,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 555,
            column: 19,
            span: 13882..13883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 555,
            column: 30,
            span: 13883..13894,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 555,
            column: 31,
            span: 13894..13895,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 555,
            column: 32,
            span: 13894..13896,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 555,
            column: 36,
            span: 13897..13900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 555,
            column: 39,
            span: 13901..13903,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 555,
            column: 40,
            span: 13903..13904,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 555,
            column: 41,
            span: 13903..13905,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 555,
            column: 42,
            span: 13905..13906,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 555,
            column: 45,
            span: 13907..13909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 555,
            column: 47,
            span: 13910..13911,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 555,
            column: 48,
            span: 13911..13912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 555,
            column: 59,
            span: 13912..13923,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 555,
            column: 60,
            span: 13923..13924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 557,
            column: 2,
            span: 13926..13927,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 557,
            column: 3,
            span: 13927..13928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 557,
            column: 4,
            span: 13928..13929,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 557,
            column: 5,
            span: 13929..13930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 557,
            column: 6,
            span: 13930..13931,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 557,
            column: 8,
            span: 13932..13933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 557,
            column: 14,
            span: 13934..13939,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 557,
            column: 15,
            span: 13939..13940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 557,
            column: 24,
            span: 13940..13949,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 557,
            column: 25,
            span: 13949..13950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 557,
            column: 31,
            span: 13950..13956,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 557,
            column: 32,
            span: 13956..13957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 557,
            column: 35,
            span: 13958..13960,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 557,
            column: 36,
            span: 13960..13961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 558,
            column: 7,
            span: 13962..13968,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 558,
            column: 8,
            span: 13968..13969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 558,
            column: 9,
            span: 13969..13970,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 558,
            column: 13,
            span: 13971..13974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 558,
            column: 15,
            span: 13975..13976,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 558,
            column: 19,
            span: 13977..13980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 558,
            column: 21,
            span: 13981..13982,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 558,
            column: 24,
            span: 13983..13985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 558,
            column: 26,
            span: 13986..13987,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 558,
            column: 27,
            span: 13987..13988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 558,
            column: 38,
            span: 13988..13999,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 558,
            column: 39,
            span: 13999..14000,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 558,
            column: 40,
            span: 13999..14001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 558,
            column: 41,
            span: 14001..14002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 559,
            column: 15,
            span: 14003..14017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 559,
            column: 16,
            span: 14017..14018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 559,
            column: 18,
            span: 14018..14020,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 559,
            column: 19,
            span: 14020..14021,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 559,
            column: 21,
            span: 14022..14023,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield\"",
        ),
        position: Position {
            line: 559,
            column: 28,
            span: 14023..14030,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 559,
            column: 29,
            span: 14030..14031,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in function <\"",
        ),
        position: Position {
            line: 559,
            column: 45,
            span: 14032..14047,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 559,
            column: 46,
            span: 14047..14048,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 559,
            column: 47,
            span: 14048..14049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 561,
            column: 2,
            span: 14051..14052,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 561,
            column: 3,
            span: 14052..14053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 561,
            column: 4,
            span: 14053..14054,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 561,
            column: 6,
            span: 14055..14056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 561,
            column: 16,
            span: 14057..14066,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 561,
            column: 17,
            span: 14066..14067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 561,
            column: 23,
            span: 14067..14073,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 561,
            column: 24,
            span: 14073..14074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 561,
            column: 26,
            span: 14074..14076,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 561,
            column: 27,
            span: 14076..14077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 562,
            column: 7,
            span: 14078..14084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 562,
            column: 8,
            span: 14084..14085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 562,
            column: 9,
            span: 14085..14086,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 562,
            column: 13,
            span: 14087..14090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 562,
            column: 15,
            span: 14091..14092,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 562,
            column: 18,
            span: 14093..14095,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 562,
            column: 23,
            span: 14096..14100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 562,
            column: 24,
            span: 14100..14101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 563,
            column: 7,
            span: 14102..14108,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 563,
            column: 8,
            span: 14108..14109,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 563,
            column: 9,
            span: 14109..14110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 563,
            column: 11,
            span: 14110..14112,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 563,
            column: 14,
            span: 14113..14115,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 563,
            column: 16,
            span: 14115..14117,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 563,
            column: 20,
            span: 14118..14121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tr",
        ),
        position: Position {
            line: 563,
            column: 23,
            span: 14122..14124,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 563,
            column: 24,
            span: 14124..14125,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 563,
            column: 25,
            span: 14124..14126,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 563,
            column: 26,
            span: 14126..14127,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 563,
            column: 29,
            span: 14128..14130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 563,
            column: 31,
            span: 14131..14132,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 563,
            column: 32,
            span: 14132..14133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 563,
            column: 43,
            span: 14133..14144,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 563,
            column: 44,
            span: 14144..14145,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 563,
            column: 45,
            span: 14144..14146,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 563,
            column: 46,
            span: 14146..14147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 564,
            column: 7,
            span: 14148..14154,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 564,
            column: 8,
            span: 14154..14155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 564,
            column: 13,
            span: 14155..14160,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 564,
            column: 14,
            span: 14160..14161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 564,
            column: 21,
            span: 14161..14168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 564,
            column: 22,
            span: 14168..14169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 564,
            column: 24,
            span: 14169..14171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 564,
            column: 25,
            span: 14171..14172,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 564,
            column: 28,
            span: 14173..14175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 564,
            column: 32,
            span: 14176..14179,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 564,
            column: 33,
            span: 14179..14180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 565,
            column: 7,
            span: 14181..14187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 565,
            column: 8,
            span: 14187..14188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 565,
            column: 13,
            span: 14188..14193,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 565,
            column: 14,
            span: 14193..14194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gethook",
        ),
        position: Position {
            line: 565,
            column: 21,
            span: 14194..14201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 565,
            column: 22,
            span: 14201..14202,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 565,
            column: 23,
            span: 14202..14203,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 565,
            column: 26,
            span: 14204..14206,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 565,
            column: 30,
            span: 14207..14210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 565,
            column: 31,
            span: 14210..14211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 566,
            column: 15,
            span: 14212..14226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 566,
            column: 16,
            span: 14226..14227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 566,
            column: 18,
            span: 14227..14229,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 566,
            column: 19,
            span: 14229..14230,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 566,
            column: 21,
            span: 14231..14232,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 566,
            column: 22,
            span: 14232..14233,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 566,
            column: 23,
            span: 14233..14234,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 571,
            column: 9,
            span: 14302..14310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 571,
            column: 11,
            span: 14311..14312,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 571,
            column: 12,
            span: 14312..14313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 571,
            column: 13,
            span: 14313..14314,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 571,
            column: 14,
            span: 14314..14315,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 571,
            column: 17,
            span: 14316..14318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 571,
            column: 19,
            span: 14319..14320,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 571,
            column: 21,
            span: 14320..14322,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 571,
            column: 22,
            span: 14321..14323,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 571,
            column: 27,
            span: 14324..14328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 571,
            column: 33,
            span: 14329..14334,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 571,
            column: 34,
            span: 14334..14335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 571,
            column: 35,
            span: 14335..14336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 571,
            column: 36,
            span: 14336..14337,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 571,
            column: 41,
            span: 14338..14342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 571,
            column: 51,
            span: 14343..14352,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 571,
            column: 52,
            span: 14352..14353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 571,
            column: 57,
            span: 14353..14358,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 571,
            column: 58,
            span: 14358..14359,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 571,
            column: 59,
            span: 14359..14360,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 571,
            column: 60,
            span: 14360..14361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 571,
            column: 62,
            span: 14362..14363,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 571,
            column: 63,
            span: 14363..14364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 571,
            column: 64,
            span: 14364..14365,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 571,
            column: 65,
            span: 14365..14366,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 571,
            column: 66,
            span: 14365..14367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 571,
            column: 67,
            span: 14367..14368,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 571,
            column: 71,
            span: 14369..14372,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 571,
            column: 0,
            span: 14373..14376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 573,
            column: 3,
            span: 14378..14380,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 573,
            column: 5,
            span: 14381..14382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 573,
            column: 15,
            span: 14383..14392,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 573,
            column: 16,
            span: 14392..14393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 573,
            column: 22,
            span: 14393..14399,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 573,
            column: 23,
            span: 14399..14400,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 573,
            column: 31,
            span: 14400..14408,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 573,
            column: 33,
            span: 14409..14410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 573,
            column: 34,
            span: 14410..14411,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 573,
            column: 35,
            span: 14411..14412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 573,
            column: 37,
            span: 14413..14414,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 573,
            column: 38,
            span: 14414..14415,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 573,
            column: 39,
            span: 14415..14416,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 573,
            column: 40,
            span: 14416..14417,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 573,
            column: 44,
            span: 14418..14421,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 573,
            column: 45,
            span: 14421..14422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 574,
            column: 2,
            span: 14423..14424,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 574,
            column: 3,
            span: 14424..14425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 574,
            column: 5,
            span: 14426..14427,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 574,
            column: 7,
            span: 14428..14429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 574,
            column: 17,
            span: 14430..14439,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 574,
            column: 18,
            span: 14439..14440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 574,
            column: 24,
            span: 14440..14446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 574,
            column: 25,
            span: 14446..14447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 574,
            column: 27,
            span: 14447..14449,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 574,
            column: 28,
            span: 14449..14450,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 574,
            column: 30,
            span: 14450..14452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 574,
            column: 31,
            span: 14452..14453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 575,
            column: 2,
            span: 14454..14455,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 575,
            column: 4,
            span: 14456..14457,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 575,
            column: 6,
            span: 14458..14459,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'yield'\"",
        ),
        position: Position {
            line: 575,
            column: 15,
            span: 14459..14468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 575,
            column: 16,
            span: 14468..14469,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'f'\"",
        ),
        position: Position {
            line: 575,
            column: 22,
            span: 14470..14475,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 575,
            column: 23,
            span: 14475..14476,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"in function <\"",
        ),
        position: Position {
            line: 575,
            column: 39,
            span: 14477..14492,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 575,
            column: 40,
            span: 14492..14493,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 576,
            column: 6,
            span: 14494..14499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 576,
            column: 16,
            span: 14500..14509,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 576,
            column: 17,
            span: 14509..14510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 576,
            column: 23,
            span: 14510..14516,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 576,
            column: 24,
            span: 14516..14517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 576,
            column: 26,
            span: 14517..14519,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 576,
            column: 27,
            span: 14519..14520,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 576,
            column: 30,
            span: 14521..14523,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"suspended\"",
        ),
        position: Position {
            line: 576,
            column: 42,
            span: 14524..14535,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 576,
            column: 0,
            span: 14536..14538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 577,
            column: 17,
            span: 14541..14555,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 577,
            column: 18,
            span: 14555..14556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 577,
            column: 20,
            span: 14556..14558,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 577,
            column: 21,
            span: 14558..14559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 577,
            column: 23,
            span: 14560..14561,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 577,
            column: 24,
            span: 14561..14562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 578,
            column: 4,
            span: 14565..14566,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 5,
            span: 14566..14567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 578,
            column: 7,
            span: 14568..14569,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 578,
            column: 9,
            span: 14570..14571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 578,
            column: 19,
            span: 14572..14581,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 578,
            column: 20,
            span: 14581..14582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 578,
            column: 26,
            span: 14582..14588,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 578,
            column: 27,
            span: 14588..14589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 578,
            column: 29,
            span: 14589..14591,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 578,
            column: 30,
            span: 14591..14592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 579,
            column: 8,
            span: 14595..14600,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 579,
            column: 9,
            span: 14600..14601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 579,
            column: 15,
            span: 14601..14607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 579,
            column: 16,
            span: 14607..14608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 579,
            column: 17,
            span: 14608..14609,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 18,
            span: 14609..14610,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 579,
            column: 20,
            span: 14610..14612,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 21,
            span: 14612..14613,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'f'\"",
        ),
        position: Position {
            line: 579,
            column: 27,
            span: 14614..14619,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 579,
            column: 28,
            span: 14619..14620,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 580,
            column: 0,
            span: 14657..14660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 581,
            column: 2,
            span: 14661..14662,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 581,
            column: 3,
            span: 14662..14663,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 581,
            column: 4,
            span: 14662..14664,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 581,
            column: 5,
            span: 14664..14665,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 581,
            column: 7,
            span: 14666..14667,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'error'\"",
        ),
        position: Position {
            line: 581,
            column: 17,
            span: 14668..14677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checktraceback",
        ),
        position: Position {
            line: 582,
            column: 15,
            span: 14678..14692,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 582,
            column: 16,
            span: 14692..14693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 582,
            column: 18,
            span: 14693..14695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 582,
            column: 19,
            span: 14695..14696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 582,
            column: 21,
            span: 14697..14698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 582,
            column: 22,
            span: 14698..14699,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 588,
            column: 6,
            span: 14818..14823,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 588,
            column: 15,
            span: 14824..14832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 588,
            column: 17,
            span: 14833..14834,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 588,
            column: 18,
            span: 14834..14835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 588,
            column: 19,
            span: 14835..14836,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 588,
            column: 20,
            span: 14836..14837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 589,
            column: 14,
            span: 14842..14851,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 589,
            column: 15,
            span: 14851..14852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 589,
            column: 20,
            span: 14852..14857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 589,
            column: 21,
            span: 14857..14858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 589,
            column: 22,
            span: 14858..14859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 589,
            column: 23,
            span: 14859..14860,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 590,
            column: 0,
            span: 14861..14864,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 592,
            column: 6,
            span: 14866..14871,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 592,
            column: 15,
            span: 14872..14880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 592,
            column: 17,
            span: 14881..14882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 592,
            column: 19,
            span: 14883..14884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 592,
            column: 20,
            span: 14884..14885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 592,
            column: 21,
            span: 14885..14886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 593,
            column: 8,
            span: 14889..14894,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 593,
            column: 9,
            span: 14894..14895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 593,
            column: 16,
            span: 14895..14902,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 593,
            column: 17,
            span: 14902..14903,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 593,
            column: 25,
            span: 14903..14911,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 593,
            column: 27,
            span: 14912..14913,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 593,
            column: 28,
            span: 14913..14914,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 593,
            column: 32,
            span: 14915..14918,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 593,
            column: 33,
            span: 14918..14919,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 593,
            column: 37,
            span: 14920..14923,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 593,
            column: 38,
            span: 14923..14924,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 594,
            column: 6,
            span: 14927..14930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 594,
            column: 8,
            span: 14931..14932,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 594,
            column: 9,
            span: 14932..14933,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 594,
            column: 10,
            span: 14932..14934,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 594,
            column: 11,
            span: 14934..14935,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 594,
            column: 15,
            span: 14934..14939,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 594,
            column: 0,
            span: 14940..14942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 595,
            column: 6,
            span: 14947..14948,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 595,
            column: 7,
            span: 14948..14949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 595,
            column: 8,
            span: 14949..14950,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 595,
            column: 9,
            span: 14950..14951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 595,
            column: 10,
            span: 14951..14952,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 595,
            column: 11,
            span: 14952..14953,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 596,
            column: 0,
            span: 14956..14959,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 597,
            column: 0,
            span: 14960..14963,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 599,
            column: 6,
            span: 14965..14970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 599,
            column: 9,
            span: 14971..14973,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 599,
            column: 11,
            span: 14974..14975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 599,
            column: 21,
            span: 14976..14985,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 599,
            column: 22,
            span: 14985..14986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 599,
            column: 26,
            span: 14986..14990,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 599,
            column: 27,
            span: 14990..14991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 599,
            column: 28,
            span: 14991..14992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 599,
            column: 29,
            span: 14992..14993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 600,
            column: 3,
            span: 14994..14996,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 600,
            column: 4,
            span: 14996..14997,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 600,
            column: 6,
            span: 14996..14999,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 600,
            column: 7,
            span: 14999..15000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 601,
            column: 6,
            span: 15001..15006,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 601,
            column: 7,
            span: 15006..15007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 601,
            column: 9,
            span: 15007..15009,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 601,
            column: 10,
            span: 15009..15010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 602,
            column: 6,
            span: 15011..15016,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 602,
            column: 7,
            span: 15016..15017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 602,
            column: 9,
            span: 15017..15019,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 602,
            column: 10,
            span: 15019..15020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 605,
            column: 7,
            span: 15023..15029,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 605,
            column: 8,
            span: 15029..15030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 605,
            column: 12,
            span: 15030..15034,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 605,
            column: 13,
            span: 15034..15035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 605,
            column: 18,
            span: 15035..15040,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 605,
            column: 19,
            span: 15040..15041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        position: Position {
            line: 605,
            column: 30,
            span: 15041..15052,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 605,
            column: 31,
            span: 15052..15053,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 605,
            column: 32,
            span: 15053..15054,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 605,
            column: 33,
            span: 15054..15055,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 605,
            column: 36,
            span: 15056..15058,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 605,
            column: 44,
            span: 15059..15066,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 605,
            column: 45,
            span: 15066..15067,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 609,
            column: 6,
            span: 15100..15105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 609,
            column: 8,
            span: 15106..15107,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 609,
            column: 10,
            span: 15108..15109,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 609,
            column: 12,
            span: 15110..15111,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 609,
            column: 13,
            span: 15111..15112,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 610,
            column: 6,
            span: 15113..15118,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 610,
            column: 15,
            span: 15119..15127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 610,
            column: 17,
            span: 15128..15129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 610,
            column: 19,
            span: 15130..15131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 610,
            column: 20,
            span: 15131..15132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 610,
            column: 21,
            span: 15132..15133,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 611,
            column: 8,
            span: 15136..15141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        position: Position {
            line: 611,
            column: 13,
            span: 15142..15146,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 611,
            column: 15,
            span: 15147..15148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 611,
            column: 21,
            span: 15149..15154,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 611,
            column: 22,
            span: 15154..15155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 611,
            column: 29,
            span: 15155..15162,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 611,
            column: 30,
            span: 15162..15163,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 611,
            column: 31,
            span: 15162..15164,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 611,
            column: 32,
            span: 15164..15165,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 611,
            column: 33,
            span: 15165..15166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 612,
            column: 9,
            span: 15169..15175,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 612,
            column: 10,
            span: 15175..15176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        position: Position {
            line: 612,
            column: 14,
            span: 15176..15180,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 612,
            column: 15,
            span: 15180..15181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "namewhat",
        ),
        position: Position {
            line: 612,
            column: 23,
            span: 15181..15189,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 612,
            column: 26,
            span: 15190..15192,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"metamethod\"",
        ),
        position: Position {
            line: 612,
            column: 39,
            span: 15193..15205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 612,
            column: 40,
            span: 15205..15206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 613,
            column: 4,
            span: 15209..15210,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 613,
            column: 5,
            span: 15210..15211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        position: Position {
            line: 613,
            column: 7,
            span: 15211..15213,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 613,
            column: 9,
            span: 15214..15215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        position: Position {
            line: 613,
            column: 14,
            span: 15216..15220,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 613,
            column: 15,
            span: 15220..15221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 613,
            column: 0,
            span: 15221..15225,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 614,
            column: 9,
            span: 15228..15234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "info",
        ),
        position: Position {
            line: 614,
            column: 14,
            span: 15235..15239,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 614,
            column: 15,
            span: 15239..15240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        position: Position {
            line: 614,
            column: 0,
            span: 15240..15244,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 615,
            column: 0,
            span: 15245..15248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 616,
            column: 13,
            span: 15249..15261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 616,
            column: 14,
            span: 15261..15262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 616,
            column: 15,
            span: 15262..15263,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 616,
            column: 16,
            span: 15263..15264,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 616,
            column: 18,
            span: 15265..15266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 617,
            column: 10,
            span: 15269..15276,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 617,
            column: 12,
            span: 15277..15278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 617,
            column: 14,
            span: 15279..15280,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 617,
            column: 15,
            span: 15280..15281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        position: Position {
            line: 617,
            column: 21,
            span: 15282..15287,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 617,
            column: 23,
            span: 15288..15289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 617,
            column: 25,
            span: 15290..15291,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 617,
            column: 26,
            span: 15291..15292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__div",
        ),
        position: Position {
            line: 617,
            column: 32,
            span: 15293..15298,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 617,
            column: 34,
            span: 15299..15300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 617,
            column: 36,
            span: 15301..15302,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 617,
            column: 37,
            span: 15302..15303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mod",
        ),
        position: Position {
            line: 617,
            column: 43,
            span: 15304..15309,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 617,
            column: 45,
            span: 15310..15311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 617,
            column: 47,
            span: 15312..15313,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 617,
            column: 48,
            span: 15313..15314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        position: Position {
            line: 617,
            column: 57,
            span: 15315..15323,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 617,
            column: 59,
            span: 15324..15325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 617,
            column: 61,
            span: 15326..15327,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 617,
            column: 62,
            span: 15327..15328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__pow",
        ),
        position: Position {
            line: 617,
            column: 68,
            span: 15329..15334,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 617,
            column: 70,
            span: 15335..15336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 617,
            column: 72,
            span: 15337..15338,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 617,
            column: 73,
            span: 15338..15339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        position: Position {
            line: 618,
            column: 7,
            span: 15342..15346,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 618,
            column: 9,
            span: 15347..15348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 618,
            column: 11,
            span: 15349..15350,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 618,
            column: 12,
            span: 15350..15351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        position: Position {
            line: 618,
            column: 17,
            span: 15352..15356,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 618,
            column: 19,
            span: 15357..15358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 618,
            column: 21,
            span: 15359..15360,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 618,
            column: 22,
            span: 15360..15361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        position: Position {
            line: 618,
            column: 27,
            span: 15362..15366,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 618,
            column: 29,
            span: 15367..15368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 618,
            column: 31,
            span: 15369..15370,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 618,
            column: 32,
            span: 15370..15371,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 619,
            column: 2,
            span: 15372..15373,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 619,
            column: 3,
            span: 15373..15374,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 621,
            column: 6,
            span: 15376..15381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 621,
            column: 8,
            span: 15382..15383,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 621,
            column: 10,
            span: 15384..15385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 621,
            column: 23,
            span: 15386..15398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 621,
            column: 24,
            span: 15398..15399,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 621,
            column: 25,
            span: 15399..15400,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 621,
            column: 26,
            span: 15400..15401,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 621,
            column: 27,
            span: 15401..15402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 621,
            column: 40,
            span: 15403..15415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 621,
            column: 41,
            span: 15415..15416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 621,
            column: 42,
            span: 15416..15417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 621,
            column: 43,
            span: 15417..15418,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 621,
            column: 44,
            span: 15418..15419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 623,
            column: 7,
            span: 15421..15427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 623,
            column: 8,
            span: 15427..15428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 623,
            column: 9,
            span: 15428..15429,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 623,
            column: 10,
            span: 15429..15430,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 623,
            column: 11,
            span: 15429..15431,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 623,
            column: 12,
            span: 15431..15432,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 623,
            column: 15,
            span: 15433..15435,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__index\"",
        ),
        position: Position {
            line: 623,
            column: 25,
            span: 15436..15445,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 623,
            column: 29,
            span: 15446..15449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 623,
            column: 31,
            span: 15450..15451,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 623,
            column: 32,
            span: 15451..15452,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 623,
            column: 33,
            span: 15451..15453,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 623,
            column: 36,
            span: 15454..15456,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__pow\"",
        ),
        position: Position {
            line: 623,
            column: 44,
            span: 15457..15464,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 623,
            column: 48,
            span: 15465..15468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 623,
            column: 50,
            span: 15469..15470,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 623,
            column: 52,
            span: 15470..15472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 623,
            column: 53,
            span: 15472..15473,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 623,
            column: 56,
            span: 15474..15476,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__concat\"",
        ),
        position: Position {
            line: 623,
            column: 67,
            span: 15477..15487,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 623,
            column: 68,
            span: 15487..15488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 624,
            column: 7,
            span: 15489..15495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 624,
            column: 8,
            span: 15495..15496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 624,
            column: 9,
            span: 15496..15497,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 624,
            column: 10,
            span: 15497..15498,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 624,
            column: 11,
            span: 15497..15499,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 624,
            column: 14,
            span: 15500..15502,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__div\"",
        ),
        position: Position {
            line: 624,
            column: 22,
            span: 15503..15510,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 624,
            column: 26,
            span: 15511..15514,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 624,
            column: 28,
            span: 15514..15516,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 624,
            column: 29,
            span: 15516..15517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 624,
            column: 30,
            span: 15517..15518,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 624,
            column: 33,
            span: 15519..15521,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__mod\"",
        ),
        position: Position {
            line: 624,
            column: 41,
            span: 15522..15529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 624,
            column: 42,
            span: 15529..15530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 625,
            column: 7,
            span: 15531..15537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 625,
            column: 9,
            span: 15538..15539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 625,
            column: 10,
            span: 15539..15540,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 625,
            column: 12,
            span: 15540..15542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 625,
            column: 13,
            span: 15542..15543,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 625,
            column: 17,
            span: 15544..15547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 625,
            column: 19,
            span: 15548..15549,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 625,
            column: 20,
            span: 15549..15550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        position: Position {
            line: 625,
            column: 22,
            span: 15550..15552,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 625,
            column: 25,
            span: 15553..15555,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__eq\"",
        ),
        position: Position {
            line: 625,
            column: 32,
            span: 15556..15562,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 625,
            column: 33,
            span: 15562..15563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 626,
            column: 7,
            span: 15564..15570,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 626,
            column: 9,
            span: 15571..15572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 626,
            column: 10,
            span: 15572..15573,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 626,
            column: 12,
            span: 15573..15575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 626,
            column: 13,
            span: 15575..15576,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 626,
            column: 17,
            span: 15577..15580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 626,
            column: 19,
            span: 15581..15582,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 626,
            column: 20,
            span: 15582..15583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        position: Position {
            line: 626,
            column: 22,
            span: 15583..15585,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 626,
            column: 25,
            span: 15586..15588,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__le\"",
        ),
        position: Position {
            line: 626,
            column: 32,
            span: 15589..15595,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 626,
            column: 33,
            span: 15595..15596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 627,
            column: 7,
            span: 15597..15603,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 627,
            column: 9,
            span: 15604..15605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 627,
            column: 10,
            span: 15605..15606,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 627,
            column: 11,
            span: 15606..15607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 627,
            column: 12,
            span: 15607..15608,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 627,
            column: 16,
            span: 15609..15612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 627,
            column: 18,
            span: 15613..15614,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 627,
            column: 19,
            span: 15614..15615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        position: Position {
            line: 627,
            column: 21,
            span: 15615..15617,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 627,
            column: 24,
            span: 15618..15620,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__lt\"",
        ),
        position: Position {
            line: 627,
            column: 31,
            span: 15621..15627,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 627,
            column: 32,
            span: 15627..15628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 630,
            column: 6,
            span: 15631..15636,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 630,
            column: 10,
            span: 15636..15640,
        },
    },
]
