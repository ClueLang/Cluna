---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/errors.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
        column: 6,
        span: 5..6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing errors\"",
        ),
        line: 1,
        column: 22,
        span: 6..22,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
        column: 23,
        span: 22..23,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 3,
        column: 6,
        span: 25..30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 3,
        column: 12,
        span: 31..36,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
        column: 14,
        span: 37..38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 3,
        column: 22,
        span: 39..46,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 3,
        column: 29,
        span: 46..53,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 136..141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 6,
        column: 9,
        span: 142..144,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 11,
        span: 145..146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 6,
        column: 24,
        span: 147..159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 25,
        span: 159..160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 6,
        column: 27,
        span: 160..162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 28,
        span: 162..163,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 6,
        column: 31,
        span: 164..166,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 6,
        column: 33,
        span: 167..168,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 6,
        column: 34,
        span: 168..169,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 6,
        span: 170..175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmm",
        ),
        line: 7,
        column: 12,
        span: 176..181,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 14,
        span: 182..183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 7,
        column: 17,
        span: 184..186,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 7,
        column: 18,
        span: 186..187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 7,
        column: 0,
        span: 187..194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 8,
        column: 3,
        span: 195..197,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
        column: 4,
        span: 197..198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 8,
        column: 11,
        span: 198..205,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 8,
        column: 13,
        span: 206..207,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 8,
        column: 0,
        span: 208..211,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 10,
        column: 9,
        span: 213..221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 10,
        column: 14,
        span: 222..226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 16,
        span: 227..228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 10,
        column: 17,
        span: 228..229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 18,
        span: 229..230,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 11,
        column: 8,
        span: 233..238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 11,
        column: 10,
        span: 239..240,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 11,
        span: 240..241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 11,
        column: 15,
        span: 242..245,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
        column: 17,
        span: 246..247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 11,
        column: 22,
        span: 248..252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 23,
        span: 252..253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 11,
        column: 24,
        span: 253..254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 25,
        span: 254..255,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 12,
        column: 5,
        span: 258..260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 12,
        column: 7,
        span: 261..262,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
        column: 10,
        span: 263..265,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 12,
        column: 14,
        span: 266..269,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 12,
        column: 19,
        span: 270..274,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 12,
        column: 26,
        span: 275..281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 12,
        column: 30,
        span: 282..285,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 12,
        column: 0,
        span: 286..289,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 13,
        column: 8,
        span: 292..297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        line: 13,
        column: 13,
        span: 298..302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 13,
        column: 14,
        span: 302..303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 13,
        column: 18,
        span: 304..307,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
        column: 20,
        span: 308..309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 13,
        column: 26,
        span: 310..315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 27,
        span: 315..316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 13,
        column: 28,
        span: 316..317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 29,
        span: 317..318,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 14,
        column: 9,
        span: 321..327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 11,
        span: 328..329,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 14,
        column: 14,
        span: 329..332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cond",
        ),
        line: 14,
        column: 19,
        span: 333..337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 20,
        span: 337..338,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 14,
        column: 24,
        span: 339..342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 14,
        column: 0,
        span: 343..346,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 15,
        column: 0,
        span: 347..350,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 18,
        column: 9,
        span: 353..361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 18,
        column: 22,
        span: 362..374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 24,
        span: 375..376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 18,
        column: 28,
        span: 376..380,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 18,
        column: 29,
        span: 380..381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 18,
        column: 33,
        span: 382..385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 34,
        span: 385..386,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 19,
        column: 8,
        span: 389..394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 19,
        column: 10,
        span: 395..396,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
        column: 12,
        span: 397..398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 19,
        column: 17,
        span: 399..403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 18,
        span: 403..404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 19,
        column: 22,
        span: 404..408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 23,
        span: 408..409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
        column: 9,
        span: 412..418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 10,
        span: 418..419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 20,
        column: 16,
        span: 419..425,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 20,
        column: 17,
        span: 425..426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 20,
        column: 21,
        span: 426..430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 22,
        span: 430..431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 20,
        column: 23,
        span: 431..432,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 24,
        span: 432..433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 20,
        column: 28,
        span: 434..437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 29,
        span: 437..438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 31,
        span: 438..440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 32,
        span: 440..441,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 20,
        column: 37,
        span: 442..446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 38,
        span: 446..447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 39,
        span: 447..448,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 21,
        column: 0,
        span: 449..452,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 23,
        column: 9,
        span: 454..462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 23,
        column: 21,
        span: 463..474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 23,
        span: 475..476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 23,
        column: 27,
        span: 476..480,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 28,
        span: 480..481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extra",
        ),
        line: 23,
        column: 34,
        span: 482..487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 35,
        span: 487..488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 23,
        column: 41,
        span: 489..494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 42,
        span: 494..495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 23,
        column: 47,
        span: 496..500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 48,
        span: 500..501,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 24,
        column: 8,
        span: 504..509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 24,
        column: 12,
        span: 510..513,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 14,
        span: 514..515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 24,
        column: 19,
        span: 516..520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 20,
        span: 520..521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 24,
        column: 24,
        span: 521..525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 25,
        span: 525..526,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 25,
        column: 5,
        span: 529..531,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 25,
        column: 9,
        span: 532..535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 25,
        column: 16,
        span: 536..542,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
        column: 17,
        span: 542..543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 25,
        column: 21,
        span: 543..547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 22,
        span: 547..548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 25,
        column: 27,
        span: 548..553,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 28,
        span: 553..554,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^<%a\"",
        ),
        line: 25,
        column: 35,
        span: 555..561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 36,
        span: 561..562,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 25,
        column: 40,
        span: 563..566,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 25,
        column: 44,
        span: 567..570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 25,
        column: 51,
        span: 571..577,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
        column: 52,
        span: 577..578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 25,
        column: 56,
        span: 578..582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 57,
        span: 582..583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 25,
        column: 62,
        span: 583..588,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 63,
        span: 588..589,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^char%(\"",
        ),
        line: 25,
        column: 73,
        span: 590..599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 74,
        span: 599..600,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 26,
        column: 9,
        span: 605..609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 26,
        column: 15,
        span: 610..615,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 17,
        span: 616..617,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 26,
        column: 21,
        span: 618..621,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 26,
        column: 23,
        span: 621..623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 26,
        column: 28,
        span: 623..628,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 26,
        column: 30,
        span: 628..630,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 26,
        column: 33,
        span: 630..633,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 26,
        column: 0,
        span: 634..637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 27,
        column: 8,
        span: 640..645,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 10,
        span: 646..647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 27,
        column: 17,
        span: 648..654,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 18,
        span: 654..655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 27,
        column: 22,
        span: 655..659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 23,
        span: 659..660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 27,
        column: 28,
        span: 660..665,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 29,
        span: 665..666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%p)\"",
        ),
        line: 27,
        column: 36,
        span: 667..673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 37,
        span: 673..674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%%1\"",
        ),
        line: 27,
        column: 44,
        span: 675..681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 45,
        span: 681..682,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
        column: 8,
        span: 685..690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        line: 28,
        column: 11,
        span: 691..693,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 13,
        span: 694..695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 28,
        column: 20,
        span: 696..702,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 21,
        span: 702..703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 28,
        column: 27,
        span: 703..709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 28,
        span: 709..710,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[^%%[string \".*\"%%]:%d: .- near %s$]]",
        ),
        line: 28,
        column: 66,
        span: 710..748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 67,
        span: 748..749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 29,
        column: 32,
        span: 777..781,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 33,
        span: 781..782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "token",
        ),
        line: 29,
        column: 39,
        span: 783..788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 40,
        span: 788..789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 9,
        span: 792..798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 10,
        span: 798..799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 30,
        column: 16,
        span: 799..805,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 30,
        column: 17,
        span: 805..806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 30,
        column: 21,
        span: 806..810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 22,
        span: 810..811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 30,
        column: 25,
        span: 811..814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 26,
        span: 814..815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pt",
        ),
        line: 30,
        column: 29,
        span: 816..818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 30,
        span: 818..819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 31,
        span: 819..820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 9,
        span: 823..829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 10,
        span: 829..830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 31,
        column: 16,
        span: 830..836,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 31,
        column: 17,
        span: 836..837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 31,
        column: 21,
        span: 837..841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 22,
        span: 841..842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 31,
        column: 25,
        span: 842..845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 26,
        span: 845..846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 31,
        column: 30,
        span: 847..850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 31,
        span: 850..851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 33,
        span: 851..853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 34,
        span: 853..854,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 31,
        column: 39,
        span: 855..859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 40,
        span: 859..860,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 41,
        span: 860..861,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 32,
        column: 0,
        span: 862..865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 909..915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 915..916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 36,
        column: 12,
        span: 916..920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 13,
        span: 920..921,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error('hi', 0)\"",
        ),
        line: 36,
        column: 29,
        span: 921..937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 30,
        span: 937..938,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 33,
        span: 939..941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'hi'",
        ),
        line: 36,
        column: 38,
        span: 942..946,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 39,
        span: 946..947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 984..990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 990..991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 39,
        column: 12,
        span: 991..995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 13,
        span: 995..996,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error()\"",
        ),
        line: 39,
        column: 22,
        span: 996..1005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 23,
        span: 1005..1006,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 26,
        span: 1007..1009,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 39,
        column: 30,
        span: 1010..1013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 31,
        span: 1013..1014,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 43,
        column: 3,
        span: 1071..1073,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 43,
        column: 7,
        span: 1074..1077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_no32",
        ),
        line: 43,
        column: 13,
        span: 1078..1083,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 43,
        column: 0,
        span: 1084..1088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 9,
        span: 1091..1097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 10,
        span: 1097..1098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 44,
        column: 14,
        span: 1098..1102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 15,
        span: 1102..1103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.unpack({}, 1, n=2^30)\"",
        ),
        line: 44,
        column: 44,
        span: 1103..1132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 45,
        span: 1132..1133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 46,
        span: 1133..1134,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 45,
        column: 0,
        span: 1135..1138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 7,
        span: 1139..1145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 8,
        span: 1145..1146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 46,
        column: 12,
        span: 1146..1150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 13,
        span: 1150..1151,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=math.sin()\"",
        ),
        line: 46,
        column: 27,
        span: 1151..1165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 28,
        span: 1165..1166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 29,
        span: 1166..1167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 7,
        span: 1168..1174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 8,
        span: 1174..1175,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 47,
        column: 11,
        span: 1175..1178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 47,
        column: 16,
        span: 1179..1183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 17,
        span: 1183..1184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring(1)\"",
        ),
        line: 47,
        column: 30,
        span: 1184..1197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 31,
        span: 1197..1198,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
        column: 35,
        span: 1199..1202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 47,
        column: 40,
        span: 1203..1207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 41,
        span: 1207..1208,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring()\"",
        ),
        line: 47,
        column: 53,
        span: 1208..1220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 54,
        span: 1220..1221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 55,
        span: 1221..1222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
        column: 7,
        span: 1223..1229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 8,
        span: 1229..1230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 48,
        column: 12,
        span: 1230..1234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber()\"",
        ),
        line: 48,
        column: 24,
        span: 1234..1246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 25,
        span: 1246..1247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 1248..1254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 1254..1255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 49,
        column: 12,
        span: 1255..1259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"repeat until 1; a\"",
        ),
        line: 49,
        column: 31,
        span: 1259..1278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 32,
        span: 1278..1279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 50,
        column: 7,
        span: 1280..1286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 8,
        span: 1286..1287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 50,
        column: 12,
        span: 1287..1291,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return;;\"",
        ),
        line: 50,
        column: 22,
        span: 1291..1301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 23,
        span: 1301..1302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 51,
        column: 7,
        span: 1303..1309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 8,
        span: 1309..1310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 51,
        column: 12,
        span: 1310..1314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(false)\"",
        ),
        line: 51,
        column: 27,
        span: 1314..1329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 28,
        span: 1329..1330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 52,
        column: 7,
        span: 1331..1337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 8,
        span: 1337..1338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 52,
        column: 12,
        span: 1338..1342,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(nil)\"",
        ),
        line: 52,
        column: 25,
        span: 1342..1355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 26,
        span: 1355..1356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
        column: 7,
        span: 1357..1363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 8,
        span: 1363..1364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 53,
        column: 12,
        span: 1364..1368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 13,
        span: 1368..1369,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (... , ...) end\"",
        ),
        line: 53,
        column: 41,
        span: 1369..1397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 42,
        span: 1397..1398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 43,
        span: 1398..1399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
        column: 7,
        span: 1400..1406,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 8,
        span: 1406..1407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 54,
        column: 12,
        span: 1407..1411,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 13,
        span: 1411..1412,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a (, ...) end\"",
        ),
        line: 54,
        column: 37,
        span: 1412..1436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 38,
        span: 1436..1437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 39,
        span: 1437..1438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 7,
        span: 1439..1445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 8,
        span: 1445..1446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 55,
        column: 12,
        span: 1446..1450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 13,
        span: 1450..1451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local t={}; t = t[#t] + 1\"",
        ),
        line: 55,
        column: 40,
        span: 1451..1478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 41,
        span: 1478..1479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 42,
        span: 1479..1480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 57,
        column: 12,
        span: 1482..1493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 13,
        span: 1493..1494,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  local a = {4\n\n]]",
        ),
        line: 60,
        column: 3,
        span: 1494..1515,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 4,
        span: 1515..1516,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'}' expected (to close '{' at line 1)\"",
        ),
        line: 60,
        column: 44,
        span: 1517..1556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 45,
        span: 1556..1557,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 60,
        column: 53,
        span: 1558..1565,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 54,
        span: 1565..1566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 56,
        span: 1566..1568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 57,
        span: 1568..1569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 65,
        column: 13,
        span: 1608..1620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 14,
        span: 1620..1621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; bbbb=2; a=math.sin(3)+bbbb(3)\"",
        ),
        line: 65,
        column: 50,
        span: 1621..1657,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 51,
        span: 1657..1658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbbb'\"",
        ),
        line: 65,
        column: 67,
        span: 1659..1674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 68,
        span: 1674..1675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 66,
        column: 13,
        span: 1676..1688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 14,
        span: 1688..1689,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=1; local a,bbbb=2,3; a = math.sin(1) and bbbb(3)\"",
        ),
        line: 66,
        column: 66,
        span: 1689..1741,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 67,
        span: 1741..1742,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'bbbb'\"",
        ),
        line: 67,
        column: 22,
        span: 1750..1764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 23,
        span: 1764..1765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 68,
        column: 13,
        span: 1766..1778,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 14,
        span: 1778..1779,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={}; do local a=1 end a:bbbb(3)\"",
        ),
        line: 68,
        column: 48,
        span: 1779..1813,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 49,
        span: 1813..1814,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbbb'\"",
        ),
        line: 68,
        column: 65,
        span: 1815..1830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 66,
        span: 1830..1831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 69,
        column: 13,
        span: 1832..1844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 14,
        span: 1844..1845,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; a.bbbb(3)\"",
        ),
        line: 69,
        column: 37,
        span: 1845..1868,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 38,
        span: 1868..1869,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbbb'\"",
        ),
        line: 69,
        column: 53,
        span: 1870..1884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 54,
        span: 1884..1885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
        column: 7,
        span: 1886..1892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 8,
        span: 1892..1893,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 70,
        column: 11,
        span: 1893..1896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 70,
        column: 18,
        span: 1897..1903,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 19,
        span: 1903..1904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 70,
        column: 23,
        span: 1904..1908,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 24,
        span: 1908..1909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 70,
        column: 28,
        span: 1909..1913,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        line: 70,
        column: 62,
        span: 1913..1947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 63,
        span: 1947..1948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'bbbb'\"",
        ),
        line: 70,
        column: 72,
        span: 1949..1957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 73,
        span: 1957..1958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 74,
        span: 1958..1959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 71,
        column: 13,
        span: 1960..1972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 14,
        span: 1972..1973,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        ),
        line: 71,
        column: 48,
        span: 1973..2007,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 49,
        span: 2007..2008,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 71,
        column: 58,
        span: 2009..2017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 59,
        span: 2017..2018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 72,
        column: 13,
        span: 2019..2031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 14,
        span: 2031..2032,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=(1)..{}\"",
        ),
        line: 72,
        column: 25,
        span: 2032..2043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 26,
        span: 2043..2044,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a table value\"",
        ),
        line: 72,
        column: 42,
        span: 2045..2060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 43,
        span: 2060..2061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aaa",
        ),
        line: 74,
        column: 4,
        span: 2063..2066,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 6,
        span: 2067..2068,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 74,
        column: 0,
        span: 2069..2072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 75,
        column: 13,
        span: 2073..2085,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 14,
        span: 2085..2086,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa.bbb:ddd(9)\"",
        ),
        line: 75,
        column: 30,
        span: 2086..2102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 31,
        span: 2102..2103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 75,
        column: 46,
        span: 2104..2118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 47,
        span: 2118..2119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 76,
        column: 13,
        span: 2120..2132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 14,
        span: 2132..2133,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb=1}; aaa.bbb:ddd(9)\"",
        ),
        line: 76,
        column: 49,
        span: 2133..2168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 50,
        span: 2168..2169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbb'\"",
        ),
        line: 76,
        column: 64,
        span: 2170..2183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 65,
        span: 2183..2184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 77,
        column: 13,
        span: 2185..2197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 14,
        span: 2197..2198,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={}}; aaa.bbb:ddd(9)\"",
        ),
        line: 77,
        column: 50,
        span: 2198..2234,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 51,
        span: 2234..2235,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'ddd'\"",
        ),
        line: 77,
        column: 66,
        span: 2236..2250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 67,
        span: 2250..2251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 78,
        column: 13,
        span: 2252..2264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 14,
        span: 2264..2265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a,b,c; (function () a = b+1 end)()\"",
        ),
        line: 78,
        column: 56,
        span: 2265..2307,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 57,
        span: 2307..2308,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"upvalue 'b'\"",
        ),
        line: 78,
        column: 71,
        span: 2309..2322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 72,
        span: 2322..2323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 79,
        column: 7,
        span: 2324..2330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 8,
        span: 2330..2331,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 79,
        column: 11,
        span: 2331..2334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 79,
        column: 16,
        span: 2335..2339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local aaa={bbb={ddd=next}}; aaa.bbb:ddd(nil)\"",
        ),
        line: 79,
        column: 62,
        span: 2339..2385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 63,
        span: 2385..2386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 81,
        column: 13,
        span: 2388..2400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 14,
        span: 2400..2401,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local _ENV = {x={}}; a = a + 1\"",
        ),
        line: 81,
        column: 46,
        span: 2401..2433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 47,
        span: 2433..2434,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'a'\"",
        ),
        line: 81,
        column: 60,
        span: 2435..2447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 61,
        span: 2447..2448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 83,
        column: 13,
        span: 2450..2462,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 14,
        span: 2462..2463,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b=1; local aaa='a'; x=aaa+b\"",
        ),
        line: 83,
        column: 43,
        span: 2463..2492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 44,
        span: 2492..2493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aaa'\"",
        ),
        line: 83,
        column: 58,
        span: 2494..2507,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 59,
        span: 2507..2508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 84,
        column: 13,
        span: 2509..2521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 14,
        span: 2521..2522,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=3/aaa\"",
        ),
        line: 84,
        column: 31,
        span: 2522..2539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 32,
        span: 2539..2540,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 84,
        column: 47,
        span: 2541..2555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 48,
        span: 2555..2556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 85,
        column: 13,
        span: 2557..2569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 14,
        span: 2569..2570,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa='2'; b=nil;x=aaa*b\"",
        ),
        line: 85,
        column: 38,
        span: 2570..2594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 39,
        span: 2594..2595,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'b'\"",
        ),
        line: 85,
        column: 52,
        span: 2596..2608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 53,
        span: 2608..2609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 86,
        column: 13,
        span: 2610..2622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 14,
        span: 2622..2623,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=-aaa\"",
        ),
        line: 86,
        column: 30,
        span: 2623..2639,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 31,
        span: 2639..2640,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 86,
        column: 46,
        span: 2641..2655,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 47,
        span: 2655..2656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
        column: 7,
        span: 2657..2663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 8,
        span: 2663..2664,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 87,
        column: 11,
        span: 2664..2667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 87,
        column: 18,
        span: 2668..2674,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 87,
        column: 19,
        span: 2674..2675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 87,
        column: 23,
        span: 2675..2679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 24,
        span: 2679..2680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 87,
        column: 28,
        span: 2680..2684,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; x=(aaa or aaa)+(aaa and aaa)\"",
        ),
        line: 87,
        column: 66,
        span: 2684..2722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 67,
        span: 2722..2723,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        line: 87,
        column: 75,
        span: 2724..2731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 76,
        span: 2731..2732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 77,
        span: 2732..2733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 7,
        span: 2734..2740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 8,
        span: 2740..2741,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 88,
        column: 11,
        span: 2741..2744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 88,
        column: 18,
        span: 2745..2751,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 19,
        span: 2751..2752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 88,
        column: 23,
        span: 2752..2756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 24,
        span: 2756..2757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 88,
        column: 28,
        span: 2757..2761,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa={}; (aaa or aaa)()\"",
        ),
        line: 88,
        column: 52,
        span: 2761..2785,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 53,
        span: 2785..2786,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aaa'\"",
        ),
        line: 88,
        column: 61,
        span: 2787..2794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 62,
        span: 2794..2795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 63,
        span: 2795..2796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 90,
        column: 13,
        span: 2798..2810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 14,
        span: 2810..2811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(print < 10)\"",
        ),
        line: 90,
        column: 33,
        span: 2811..2830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 34,
        span: 2830..2831,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 90,
        column: 45,
        span: 2832..2842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 46,
        span: 2842..2843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 91,
        column: 13,
        span: 2844..2856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 14,
        span: 2856..2857,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(print < print)\"",
        ),
        line: 91,
        column: 36,
        span: 2857..2879,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 37,
        span: 2879..2880,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"two function\"",
        ),
        line: 91,
        column: 52,
        span: 2881..2895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 53,
        span: 2895..2896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 95,
        column: 3,
        span: 2950..2952,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
        column: 4,
        span: 2952..2953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 95,
        column: 5,
        span: 2953..2954,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 7,
        span: 2955..2956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 95,
        column: 0,
        span: 2957..2962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 96,
        column: 13,
        span: 2963..2975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 14,
        span: 2975..2976,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  -- create light udata\n  local x = D.upvalueid(function () return debug end, 1)\n  D.setuservalue(x, {})\n]]",
        ),
        line: 100,
        column: 3,
        span: 2976..3086,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 4,
        span: 3086..3087,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"light userdata\"",
        ),
        line: 100,
        column: 21,
        span: 3088..3104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 22,
        span: 3104..3105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 101,
        column: 3,
        span: 3106..3108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
        column: 4,
        span: 3108..3109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 101,
        column: 5,
        span: 3109..3110,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 7,
        span: 3111..3112,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 101,
        column: 0,
        span: 3113..3116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 105,
        column: 13,
        span: 3139..3151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 14,
        span: 3151..3152,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(io.write or print){}\"",
        ),
        line: 105,
        column: 37,
        span: 3152..3175,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 105,
        column: 38,
        span: 3175..3176,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io.write\"",
        ),
        line: 105,
        column: 49,
        span: 3177..3187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 50,
        span: 3187..3188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 106,
        column: 13,
        span: 3189..3201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 14,
        span: 3201..3202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(collectgarbage or print){}\"",
        ),
        line: 106,
        column: 43,
        span: 3202..3231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 44,
        span: 3231..3232,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"collectgarbage\"",
        ),
        line: 106,
        column: 61,
        span: 3233..3249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 62,
        span: 3249..3250,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 109,
        column: 6,
        span: 3295..3300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 109,
        column: 8,
        span: 3301..3302,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 109,
        column: 10,
        span: 3303..3304,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 109,
        column: 12,
        span: 3305..3306,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 109,
        column: 13,
        span: 3306..3307,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 110,
        column: 4,
        span: 3308..3311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 110,
        column: 6,
        span: 3312..3313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 8,
        span: 3314..3315,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 10,
        span: 3315..3317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 11,
        span: 3317..3318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 16,
        span: 3318..3323,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 110,
        column: 0,
        span: 3324..3326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 111,
        column: 4,
        span: 3329..3330,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 111,
        column: 5,
        span: 3330..3331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 111,
        column: 6,
        span: 3331..3332,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 111,
        column: 7,
        span: 3332..3333,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 9,
        span: 3334..3335,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = x\"",
        ),
        line: 111,
        column: 17,
        span: 3336..3343,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 111,
        column: 20,
        span: 3344..3346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 111,
        column: 0,
        span: 3347..3348,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 112,
        column: 0,
        span: 3349..3352,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 113,
        column: 6,
        span: 3353..3358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 113,
        column: 8,
        span: 3359..3360,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 113,
        column: 10,
        span: 3361..3362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 113,
        column: 16,
        span: 3363..3368,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 113,
        column: 17,
        span: 3368..3369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 113,
        column: 23,
        span: 3369..3375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 24,
        span: 3375..3376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 113,
        column: 25,
        span: 3376..3377,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 26,
        span: 3377..3378,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; \"",
        ),
        line: 113,
        column: 31,
        span: 3379..3383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 32,
        span: 3383..3384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 114,
        column: 2,
        span: 3385..3386,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 114,
        column: 4,
        span: 3387..3388,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 114,
        column: 0,
        span: 3389..3392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 115,
        column: 13,
        span: 3393..3405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 14,
        span: 3405..3406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 115,
        column: 15,
        span: 3406..3407,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 115,
        column: 17,
        span: 3407..3409,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; a = bbb + 1\"",
        ),
        line: 115,
        column: 32,
        span: 3409..3424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
        column: 33,
        span: 3424..3425,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbb'\"",
        ),
        line: 115,
        column: 48,
        span: 3426..3440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 49,
        span: 3440..3441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 116,
        column: 13,
        span: 3442..3454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 14,
        span: 3454..3455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local _ENV=_ENV;\"",
        ),
        line: 116,
        column: 32,
        span: 3455..3473,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 116,
        column: 34,
        span: 3473..3475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 116,
        column: 35,
        span: 3475..3476,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 116,
        column: 37,
        span: 3476..3478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; a = bbb + 1\"",
        ),
        line: 116,
        column: 52,
        span: 3478..3493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 53,
        span: 3493..3494,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'bbb'\"",
        ),
        line: 116,
        column: 68,
        span: 3495..3509,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 69,
        span: 3509..3510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 117,
        column: 13,
        span: 3511..3523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 14,
        span: 3523..3524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 117,
        column: 15,
        span: 3524..3525,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 117,
        column: 17,
        span: 3525..3527,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; local t = {}; a = t.bbb + 1\"",
        ),
        line: 117,
        column: 48,
        span: 3527..3558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 49,
        span: 3558..3559,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'bbb'\"",
        ),
        line: 117,
        column: 63,
        span: 3560..3573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 64,
        span: 3573..3574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 118,
        column: 13,
        span: 3575..3587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 14,
        span: 3587..3588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 118,
        column: 15,
        span: 3588..3589,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 118,
        column: 17,
        span: 3589..3591,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"; local t = {}; t:bbb()\"",
        ),
        line: 118,
        column: 42,
        span: 3591..3616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 43,
        span: 3616..3617,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"method 'bbb'\"",
        ),
        line: 118,
        column: 58,
        span: 3618..3632,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 59,
        span: 3632..3633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 120,
        column: 13,
        span: 3635..3647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 14,
        span: 3647..3648,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[aaa=9\nrepeat until 3==3\nlocal x=math.sin(math.cos(3))\nif math.sin(1) == x then return math.sin(1) end   -- tail call\nlocal a,b = 1, {\n  {x='a'..'b'..'c', y='b', z=x},\n  {1,2,3,4,5} or 3+3<=3+3,\n  3+1>3+1,\n  {d = x and aaa[x or y]}}\n]]",
        ),
        line: 129,
        column: 3,
        span: 3648..3884,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 4,
        span: 3884..3885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'aaa'\"",
        ),
        line: 129,
        column: 19,
        span: 3886..3900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 20,
        span: 3900..3901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 131,
        column: 13,
        span: 3903..3915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 14,
        span: 3915..3916,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal x,y = {},1\nif math.sin(1) == 0 then return 3 end    -- return\nx.a()]]",
        ),
        line: 134,
        column: 8,
        span: 3916..3994,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 9,
        span: 3994..3995,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"field 'a'\"",
        ),
        line: 134,
        column: 21,
        span: 3996..4007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 22,
        span: 4007..4008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 136,
        column: 13,
        span: 4010..4022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 14,
        span: 4022..4023,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nprefix = nil\ninsert = nil\nwhile 1 do\n  local a\n  if nil then break end\n  insert(prefix, a)\nend]]",
        ),
        line: 143,
        column: 6,
        span: 4023..4122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 7,
        span: 4122..4123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'insert'\"",
        ),
        line: 143,
        column: 25,
        span: 4124..4141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 26,
        span: 4141..4142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 145,
        column: 13,
        span: 4144..4156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 14,
        span: 4156..4157,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[  -- tail call\n  return math.sin(\"a\")\n]]",
        ),
        line: 147,
        column: 3,
        span: 4157..4199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 4,
        span: 4199..4200,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'sin'\"",
        ),
        line: 147,
        column: 12,
        span: 4201..4208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 13,
        span: 4208..4209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 149,
        column: 13,
        span: 4211..4223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 14,
        span: 4223..4224,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[collectgarbage(\"nooption\")]]",
        ),
        line: 149,
        column: 44,
        span: 4224..4254,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 149,
        column: 45,
        span: 4254..4255,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid option\"",
        ),
        line: 149,
        column: 62,
        span: 4256..4272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 63,
        span: 4272..4273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 151,
        column: 13,
        span: 4275..4287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 14,
        span: 4287..4288,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[x = print .. \"a\"]]",
        ),
        line: 151,
        column: 34,
        span: 4288..4308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 35,
        span: 4308..4309,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concatenate\"",
        ),
        line: 151,
        column: 49,
        span: 4310..4323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 50,
        span: 4323..4324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 153,
        column: 13,
        span: 4326..4338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 14,
        span: 4338..4339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getmetatable(io.stdin).__gc()\"",
        ),
        line: 153,
        column: 45,
        span: 4339..4370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 46,
        span: 4370..4371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no value\"",
        ),
        line: 153,
        column: 57,
        span: 4372..4382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 58,
        span: 4382..4383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 155,
        column: 13,
        span: 4385..4397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 14,
        span: 4397..4398,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal Var\nlocal function main()\n  NoSuchName (function() Var=0 end)\nend\nmain()\n]]",
        ),
        line: 161,
        column: 3,
        span: 4398..4482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 4,
        span: 4482..4483,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"global 'NoSuchName'\"",
        ),
        line: 161,
        column: 26,
        span: 4484..4505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 27,
        span: 4505..4506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 162,
        column: 6,
        span: 4507..4512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 162,
        column: 9,
        span: 4512..4515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 164,
        column: 2,
        span: 4517..4518,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 164,
        column: 4,
        span: 4519..4520,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 164,
        column: 6,
        span: 4521..4522,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 164,
        column: 7,
        span: 4522..4523,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 164,
        column: 8,
        span: 4523..4524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 164,
        column: 21,
        span: 4525..4537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 22,
        span: 4537..4538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 164,
        column: 23,
        span: 4538..4539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 24,
        span: 4539..4540,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 164,
        column: 26,
        span: 4541..4542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 164,
        column: 33,
        span: 4542..4549,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 164,
        column: 35,
        span: 4550..4551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 164,
        column: 42,
        span: 4552..4558,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 164,
        column: 43,
        span: 4558..4559,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 44,
        span: 4559..4560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 165,
        column: 13,
        span: 4561..4573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 14,
        span: 4573..4574,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a:sub()\"",
        ),
        line: 165,
        column: 23,
        span: 4574..4583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 24,
        span: 4583..4584,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bad self\"",
        ),
        line: 165,
        column: 35,
        span: 4585..4595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 36,
        span: 4595..4596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 166,
        column: 13,
        span: 4597..4609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 14,
        span: 4609..4610,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.sub('a', {})\"",
        ),
        line: 166,
        column: 35,
        span: 4610..4631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 36,
        span: 4631..4632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#2\"",
        ),
        line: 166,
        column: 41,
        span: 4633..4637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 42,
        span: 4637..4638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 167,
        column: 13,
        span: 4639..4651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 14,
        span: 4651..4652,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"('a'):sub{}\"",
        ),
        line: 167,
        column: 27,
        span: 4652..4665,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
        column: 28,
        span: 4665..4666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"#1\"",
        ),
        line: 167,
        column: 33,
        span: 4667..4671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 34,
        span: 4671..4672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 169,
        column: 13,
        span: 4674..4686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 14,
        span: 4686..4687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.sort({1,2,3}, table.sort)\"",
        ),
        line: 169,
        column: 47,
        span: 4687..4720,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 48,
        span: 4720..4721,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'table.sort'\"",
        ),
        line: 169,
        column: 63,
        span: 4722..4736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 64,
        span: 4736..4737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 171,
        column: 13,
        span: 4797..4809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 14,
        span: 4809..4810,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string.gsub('s', 's', setmetatable)\"",
        ),
        line: 171,
        column: 51,
        span: 4810..4847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 52,
        span: 4847..4848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setmetatable'\"",
        ),
        line: 171,
        column: 68,
        span: 4849..4864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 69,
        span: 4864..4865,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 175,
        column: 9,
        span: 4902..4910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 175,
        column: 11,
        span: 4911..4912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 13,
        span: 4913..4914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 175,
        column: 14,
        span: 4914..4915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 15,
        span: 4915..4916,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 176,
        column: 8,
        span: 4919..4924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 176,
        column: 10,
        span: 4925..4926,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 176,
        column: 12,
        span: 4927..4928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 176,
        column: 22,
        span: 4929..4938,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 23,
        span: 4938..4939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        line: 176,
        column: 29,
        span: 4939..4945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 30,
        span: 4945..4946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 176,
        column: 31,
        span: 4946..4947,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 32,
        span: 4947..4948,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 177,
        column: 8,
        span: 4951..4956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 177,
        column: 10,
        span: 4957..4958,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 11,
        span: 4958..4959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 177,
        column: 12,
        span: 4959..4960,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 177,
        column: 14,
        span: 4961..4962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 177,
        column: 24,
        span: 4963..4972,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 177,
        column: 25,
        span: 4972..4973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        line: 177,
        column: 31,
        span: 4973..4979,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 32,
        span: 4979..4980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 177,
        column: 33,
        span: 4980..4981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 34,
        span: 4981..4982,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 178,
        column: 9,
        span: 4985..4991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 178,
        column: 0,
        span: 4992..4993,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 179,
        column: 0,
        span: 4994..4997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 180,
        column: 7,
        span: 4998..5004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 8,
        span: 5004..5005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 180,
        column: 14,
        span: 5005..5011,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
        column: 15,
        span: 5011..5012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 180,
        column: 19,
        span: 5012..5016,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 20,
        span: 5016..5017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 180,
        column: 21,
        span: 5017..5018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 22,
        span: 5018..5019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 23,
        span: 5019..5020,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 24,
        span: 5020..5021,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C stack overflow\"",
        ),
        line: 180,
        column: 43,
        span: 5022..5040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 44,
        span: 5040..5041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 45,
        span: 5041..5042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmessage",
        ),
        line: 182,
        column: 13,
        span: 5044..5056,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 14,
        span: 5056..5057,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutine.yield()\"",
        ),
        line: 182,
        column: 33,
        span: 5057..5076,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 34,
        span: 5076..5077,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"outside a coroutine\"",
        ),
        line: 182,
        column: 56,
        span: 5078..5099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 57,
        span: 5099..5100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 184,
        column: 3,
        span: 5102..5104,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
        column: 5,
        span: 5105..5106,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 184,
        column: 14,
        span: 5107..5115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 16,
        span: 5116..5117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 17,
        span: 5117..5118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 184,
        column: 23,
        span: 5119..5124,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 184,
        column: 24,
        span: 5124..5125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        line: 184,
        column: 28,
        span: 5125..5129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 29,
        span: 5129..5130,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 184,
        column: 30,
        span: 5130..5131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 31,
        span: 5130..5132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 32,
        span: 5132..5133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 33,
        span: 5132..5134,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 34,
        span: 5134..5135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 35,
        span: 5134..5136,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 184,
        column: 36,
        span: 5136..5137,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 37,
        span: 5137..5138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 184,
        column: 47,
        span: 5139..5148,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 184,
        column: 48,
        span: 5148..5149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 184,
        column: 53,
        span: 5149..5154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 54,
        span: 5154..5155,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 184,
        column: 0,
        span: 5156..5159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 185,
        column: 2,
        span: 5160..5161,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 4,
        span: 5162..5163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 185,
        column: 14,
        span: 5164..5173,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 15,
        span: 5173..5174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 185,
        column: 19,
        span: 5174..5178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 20,
        span: 5178..5179,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 185,
        column: 28,
        span: 5179..5187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 30,
        span: 5188..5189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 31,
        span: 5189..5190,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 185,
        column: 38,
        span: 5191..5197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 185,
        column: 44,
        span: 5198..5203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 45,
        span: 5203..5204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        line: 185,
        column: 47,
        span: 5204..5206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 48,
        span: 5206..5207,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 185,
        column: 52,
        span: 5208..5211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 53,
        span: 5211..5212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 7,
        span: 5213..5219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 8,
        span: 5219..5220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 186,
        column: 14,
        span: 5220..5226,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 15,
        span: 5226..5227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 186,
        column: 19,
        span: 5227..5231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 20,
        span: 5231..5232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 186,
        column: 26,
        span: 5232..5238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 27,
        span: 5238..5239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 28,
        span: 5238..5240,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 29,
        span: 5240..5241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 186,
        column: 31,
        span: 5242..5243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 32,
        span: 5243..5244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 33,
        span: 5244..5245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 34,
        span: 5245..5246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 35,
        span: 5246..5247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield across\"",
        ),
        line: 186,
        column: 50,
        span: 5248..5262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 51,
        span: 5262..5263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 52,
        span: 5263..5264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "idsize",
        ),
        line: 191,
        column: 7,
        span: 5402..5408,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 191,
        column: 9,
        span: 5409..5410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 12,
        span: 5410..5413,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 191,
        column: 14,
        span: 5414..5415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 0,
        span: 5415..5417,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 192,
        column: 6,
        span: 5418..5423,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 192,
        column: 15,
        span: 5424..5432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 192,
        column: 25,
        span: 5433..5442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 27,
        span: 5443..5444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 192,
        column: 33,
        span: 5444..5450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 34,
        span: 5450..5451,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 194,
        column: 8,
        span: 5472..5477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 194,
        column: 10,
        span: 5478..5479,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 11,
        span: 5479..5480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 194,
        column: 15,
        span: 5481..5484,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 194,
        column: 17,
        span: 5485..5486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 194,
        column: 22,
        span: 5487..5491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 23,
        span: 5491..5492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 194,
        column: 26,
        span: 5492..5495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 27,
        span: 5495..5496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "source",
        ),
        line: 194,
        column: 34,
        span: 5497..5503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 35,
        span: 5503..5504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 195,
        column: 6,
        span: 5507..5510,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
        column: 8,
        span: 5511..5512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 195,
        column: 15,
        span: 5513..5519,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 16,
        span: 5519..5520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 195,
        column: 21,
        span: 5520..5525,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 22,
        span: 5525..5526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 195,
        column: 25,
        span: 5526..5529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 26,
        span: 5529..5530,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^([^:]*):\"",
        ),
        line: 195,
        column: 38,
        span: 5531..5542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 39,
        span: 5542..5543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 9,
        span: 5584..5590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 10,
        span: 5590..5591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 196,
        column: 13,
        span: 5591..5594,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 196,
        column: 14,
        span: 5594..5595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 196,
        column: 17,
        span: 5595..5598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 18,
        span: 5598..5599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 19,
        span: 5599..5600,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 196,
        column: 22,
        span: 5601..5603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "idsize",
        ),
        line: 196,
        column: 29,
        span: 5604..5610,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 30,
        span: 5610..5611,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 197,
        column: 0,
        span: 5612..5615,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 199,
        column: 4,
        span: 5617..5620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 199,
        column: 6,
        span: 5621..5622,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 199,
        column: 8,
        span: 5623..5624,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 11,
        span: 5624..5627,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 199,
        column: 13,
        span: 5628..5629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 16,
        span: 5629..5632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 17,
        span: 5632..5633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 20,
        span: 5633..5636,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 199,
        column: 22,
        span: 5637..5638,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 25,
        span: 5638..5641,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 199,
        column: 28,
        span: 5642..5644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 200,
        column: 12,
        span: 5681..5690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 13,
        span: 5690..5691,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"@\"",
        ),
        line: 200,
        column: 16,
        span: 5691..5694,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 200,
        column: 19,
        span: 5695..5697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 200,
        column: 26,
        span: 5698..5704,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 27,
        span: 5704..5705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 200,
        column: 30,
        span: 5705..5708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 31,
        span: 5708..5709,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 200,
        column: 34,
        span: 5709..5712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 35,
        span: 5712..5713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 200,
        column: 37,
        span: 5714..5715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 38,
        span: 5715..5716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 39,
        span: 5716..5717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 201,
        column: 12,
        span: 5736..5745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 13,
        span: 5745..5746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 201,
        column: 19,
        span: 5746..5752,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 20,
        span: 5752..5753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 201,
        column: 23,
        span: 5753..5756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 24,
        span: 5756..5757,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 201,
        column: 27,
        span: 5757..5760,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 28,
        span: 5760..5761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 201,
        column: 30,
        span: 5762..5763,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 201,
        column: 32,
        span: 5764..5765,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 201,
        column: 35,
        span: 5765..5768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 36,
        span: 5768..5769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 37,
        span: 5769..5770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksize",
        ),
        line: 202,
        column: 12,
        span: 5795..5804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 13,
        span: 5804..5805,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        line: 202,
        column: 16,
        span: 5805..5808,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 202,
        column: 19,
        span: 5809..5811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 202,
        column: 26,
        span: 5812..5818,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 202,
        column: 27,
        span: 5818..5819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 202,
        column: 30,
        span: 5819..5822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 31,
        span: 5822..5823,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 202,
        column: 34,
        span: 5823..5826,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 35,
        span: 5826..5827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 202,
        column: 37,
        span: 5828..5829,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 38,
        span: 5829..5830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 39,
        span: 5830..5831,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 203,
        column: 0,
        span: 5851..5854,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 208,
        column: 6,
        span: 5880..5885,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 208,
        column: 15,
        span: 5886..5894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 208,
        column: 25,
        span: 5895..5904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 27,
        span: 5905..5906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 208,
        column: 28,
        span: 5906..5907,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 29,
        span: 5907..5908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 208,
        column: 31,
        span: 5909..5910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 32,
        span: 5910..5911,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 209,
        column: 8,
        span: 5914..5919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 209,
        column: 12,
        span: 5920..5923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 209,
        column: 13,
        span: 5923..5924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 209,
        column: 16,
        span: 5924..5927,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 209,
        column: 18,
        span: 5928..5929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 209,
        column: 24,
        span: 5930..5935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 25,
        span: 5935..5936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 209,
        column: 29,
        span: 5936..5940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 30,
        span: 5940..5941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 209,
        column: 31,
        span: 5941..5942,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 32,
        span: 5942..5943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 33,
        span: 5943..5944,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 210,
        column: 8,
        span: 5947..5952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 210,
        column: 13,
        span: 5953..5957,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 210,
        column: 15,
        span: 5958..5959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 210,
        column: 22,
        span: 5960..5966,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 210,
        column: 23,
        span: 5966..5967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 210,
        column: 28,
        span: 5967..5972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 29,
        span: 5972..5973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 210,
        column: 32,
        span: 5973..5976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 210,
        column: 33,
        span: 5976..5977,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        line: 210,
        column: 43,
        span: 5978..5987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 44,
        span: 5987..5988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 211,
        column: 9,
        span: 5991..5997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 10,
        span: 5997..5998,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 11,
        span: 5998..5999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 211,
        column: 15,
        span: 5999..6003,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 211,
        column: 19,
        span: 6004..6007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 211,
        column: 24,
        span: 6008..6012,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 211,
        column: 25,
        span: 6012..6013,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 26,
        span: 6012..6014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 27,
        span: 6014..6015,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 30,
        span: 6016..6018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 211,
        column: 32,
        span: 6019..6020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 33,
        span: 6020..6021,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 212,
        column: 0,
        span: 6022..6025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 214,
        column: 10,
        span: 6027..6036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 11,
        span: 6036..6037,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a\\n for i=1,'a' do \\n print(i) \\n end\"",
        ),
        line: 214,
        column: 56,
        span: 6037..6082,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 57,
        span: 6082..6083,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 59,
        span: 6083..6085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 60,
        span: 6085..6086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 215,
        column: 10,
        span: 6087..6096,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 11,
        span: 6096..6097,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n local a \\n for k,v in 3 \\n do \\n print(k) \\n end\"",
        ),
        line: 215,
        column: 64,
        span: 6097..6150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 65,
        span: 6150..6151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 67,
        span: 6151..6153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 68,
        span: 6153..6154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 216,
        column: 10,
        span: 6155..6164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 11,
        span: 6164..6165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n for k,v in \\n 3 \\n do \\n print(k) \\n end\"",
        ),
        line: 216,
        column: 58,
        span: 6165..6212,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 59,
        span: 6212..6213,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 61,
        span: 6213..6215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 62,
        span: 6215..6216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 217,
        column: 10,
        span: 6217..6226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 11,
        span: 6226..6227,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function a.x.y ()\\na=a+1\\nend\"",
        ),
        line: 217,
        column: 42,
        span: 6227..6258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 43,
        span: 6258..6259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 45,
        span: 6259..6261,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 46,
        span: 6261..6262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 219,
        column: 10,
        span: 6264..6273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 11,
        span: 6273..6274,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\na\\n+\\n{}\"",
        ),
        line: 219,
        column: 27,
        span: 6274..6290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 28,
        span: 6290..6291,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
        column: 30,
        span: 6291..6293,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 31,
        span: 6293..6294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 220,
        column: 10,
        span: 6295..6304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 11,
        span: 6304..6305,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\n3\\n+\\n(\\n4\\n/\\nprint)\"",
        ),
        line: 220,
        column: 40,
        span: 6305..6334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 41,
        span: 6334..6335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 220,
        column: 43,
        span: 6335..6337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 44,
        span: 6337..6338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 221,
        column: 10,
        span: 6339..6348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 11,
        span: 6348..6349,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = \\nprint\\n+\\n(\\n4\\n/\\n7)\"",
        ),
        line: 221,
        column: 40,
        span: 6349..6378,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 41,
        span: 6378..6379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 43,
        span: 6379..6381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 44,
        span: 6381..6382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 223,
        column: 10,
        span: 6384..6393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 11,
        span: 6393..6394,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n=\\n-\\n\\nprint\\n;\"",
        ),
        line: 223,
        column: 32,
        span: 6394..6415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 33,
        span: 6415..6416,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 35,
        span: 6416..6418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 36,
        span: 6418..6419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 225,
        column: 10,
        span: 6421..6430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 11,
        span: 6430..6431,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\na\n(\n23)\n]]",
        ),
        line: 229,
        column: 3,
        span: 6431..6444,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 229,
        column: 4,
        span: 6444..6445,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 229,
        column: 6,
        span: 6445..6447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 7,
        span: 6447..6448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 231,
        column: 10,
        span: 6450..6459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 11,
        span: 6459..6460,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23\n)\n]]",
        ),
        line: 239,
        column: 3,
        span: 6460..6497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 4,
        span: 6497..6498,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 6,
        span: 6498..6500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 7,
        span: 6500..6501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 241,
        column: 10,
        span: 6503..6512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 11,
        span: 6512..6513,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23 + a\n)\n]]",
        ),
        line: 249,
        column: 3,
        span: 6513..6554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 4,
        span: 6554..6555,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 6,
        span: 6555..6557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 7,
        span: 6557..6558,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 251,
        column: 6,
        span: 6560..6565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 251,
        column: 8,
        span: 6566..6567,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 251,
        column: 10,
        span: 6568..6569,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nfunction g() f() end\nfunction f(x) error('a', X) end\ng()\n]]",
        ),
        line: 255,
        column: 3,
        span: 6570..6632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 256,
        column: 2,
        span: 6633..6634,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 256,
        column: 3,
        span: 6634..6635,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 4,
        span: 6634..6636,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 256,
        column: 5,
        span: 6636..6637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 256,
        column: 14,
        span: 6637..6646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 15,
        span: 6646..6647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 16,
        span: 6647..6648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 256,
        column: 17,
        span: 6648..6649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 18,
        span: 6649..6650,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 19,
        span: 6650..6651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 21,
        span: 6651..6653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 22,
        span: 6653..6654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 257,
        column: 2,
        span: 6655..6656,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 257,
        column: 3,
        span: 6656..6657,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 4,
        span: 6656..6658,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 257,
        column: 5,
        span: 6658..6659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 257,
        column: 14,
        span: 6659..6668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 15,
        span: 6668..6669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 16,
        span: 6669..6670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 257,
        column: 17,
        span: 6670..6671,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 18,
        span: 6671..6672,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 19,
        span: 6672..6673,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 257,
        column: 23,
        span: 6674..6677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 24,
        span: 6677..6678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 258,
        column: 2,
        span: 6679..6680,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 258,
        column: 3,
        span: 6680..6681,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 4,
        span: 6680..6682,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 258,
        column: 5,
        span: 6682..6683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 258,
        column: 14,
        span: 6683..6692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 15,
        span: 6692..6693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 16,
        span: 6693..6694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 258,
        column: 17,
        span: 6694..6695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 18,
        span: 6695..6696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 19,
        span: 6696..6697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 21,
        span: 6697..6699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 22,
        span: 6699..6700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 259,
        column: 2,
        span: 6701..6702,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 259,
        column: 3,
        span: 6702..6703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 4,
        span: 6702..6704,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 259,
        column: 5,
        span: 6704..6705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lineerror",
        ),
        line: 259,
        column: 14,
        span: 6705..6714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 15,
        span: 6714..6715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 16,
        span: 6715..6716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 259,
        column: 17,
        span: 6716..6717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 18,
        span: 6717..6718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 19,
        span: 6718..6719,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 21,
        span: 6719..6721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 22,
        span: 6721..6722,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 262,
        column: 3,
        span: 6725..6727,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 262,
        column: 7,
        span: 6728..6731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 262,
        column: 13,
        span: 6732..6737,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 262,
        column: 0,
        span: 6738..6742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 264,
        column: 4,
        span: 6790..6791,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 6,
        span: 6792..6793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
        column: 0,
        span: 6793..6795,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 265,
        column: 8,
        span: 6798..6803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 265,
        column: 10,
        span: 6804..6805,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 12,
        span: 6806..6807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 265,
        column: 18,
        span: 6808..6813,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 19,
        span: 6813..6814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 265,
        column: 26,
        span: 6814..6821,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 27,
        span: 6821..6822,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 28,
        span: 6821..6823,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 29,
        span: 6823..6824,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 265,
        column: 33,
        span: 6825..6828,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 34,
        span: 6828..6829,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 35,
        span: 6829..6830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 265,
        column: 46,
        span: 6830..6841,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 265,
        column: 47,
        span: 6841..6842,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 265,
        column: 56,
        span: 6843..6851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 265,
        column: 58,
        span: 6852..6853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 60,
        span: 6854..6855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 61,
        span: 6855..6856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 265,
        column: 63,
        span: 6857..6858,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 64,
        span: 6858..6859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 265,
        column: 65,
        span: 6859..6860,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 265,
        column: 66,
        span: 6860..6861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 265,
        column: 67,
        span: 6860..6862,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 265,
        column: 68,
        span: 6862..6863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 265,
        column: 70,
        span: 6864..6865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 71,
        span: 6865..6866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 72,
        span: 6866..6867,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 265,
        column: 0,
        span: 6868..6871,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 267,
        column: 8,
        span: 6875..6880,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 267,
        column: 17,
        span: 6881..6889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 267,
        column: 35,
        span: 6890..6907,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 37,
        span: 6908..6909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 267,
        column: 38,
        span: 6909..6910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 39,
        span: 6910..6911,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 268,
        column: 11,
        span: 6916..6922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 13,
        span: 6923..6924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 268,
        column: 19,
        span: 6924..6930,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
        column: 20,
        span: 6930..6931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 268,
        column: 24,
        span: 6931..6935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 25,
        span: 6935..6936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 268,
        column: 26,
        span: 6936..6937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 27,
        span: 6937..6938,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^.-:%d+: stack overflow\"",
        ),
        line: 268,
        column: 53,
        span: 6939..6964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 54,
        span: 6964..6965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 55,
        span: 6965..6966,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 269,
        column: 0,
        span: 6969..6972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
        column: 9,
        span: 7031..7037,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 10,
        span: 7037..7038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 271,
        column: 27,
        span: 7038..7055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 28,
        span: 7055..7056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 271,
        column: 32,
        span: 7056..7060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 33,
        span: 7060..7061,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 271,
        column: 38,
        span: 7061..7066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 39,
        span: 7066..7067,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 40,
        span: 7067..7068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 41,
        span: 7068..7069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 272,
        column: 8,
        span: 7072..7077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 9,
        span: 7077..7078,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 272,
        column: 12,
        span: 7078..7081,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 13,
        span: 7081..7082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 273,
        column: 9,
        span: 7085..7091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 10,
        span: 7091..7092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 273,
        column: 27,
        span: 7092..7109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 28,
        span: 7109..7110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 273,
        column: 32,
        span: 7110..7114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 33,
        span: 7114..7115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 273,
        column: 38,
        span: 7115..7120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 39,
        span: 7120..7121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 40,
        span: 7121..7122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 41,
        span: 7122..7123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 274,
        column: 8,
        span: 7126..7131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 9,
        span: 7131..7132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 274,
        column: 12,
        span: 7132..7135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 13,
        span: 7135..7136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 275,
        column: 9,
        span: 7139..7145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 10,
        span: 7145..7146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkstackmessage",
        ),
        line: 275,
        column: 27,
        span: 7146..7163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 28,
        span: 7163..7164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 275,
        column: 32,
        span: 7164..7168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 33,
        span: 7168..7169,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y()'",
        ),
        line: 275,
        column: 38,
        span: 7169..7174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 39,
        span: 7174..7175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 40,
        span: 7175..7176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 41,
        span: 7176..7177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 276,
        column: 8,
        span: 7180..7185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 9,
        span: 7185..7186,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 276,
        column: 12,
        span: 7186..7189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 13,
        span: 7189..7190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        line: 280,
        column: 4,
        span: 7230..7231,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 280,
        column: 6,
        span: 7232..7233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 0,
        span: 7233..7235,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 281,
        column: 8,
        span: 7238..7243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 281,
        column: 0,
        span: 7244..7246,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 282,
        column: 8,
        span: 7249..7254,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 282,
        column: 17,
        span: 7255..7263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 282,
        column: 19,
        span: 7264..7265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 20,
        span: 7265..7266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 282,
        column: 21,
        span: 7266..7267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 22,
        span: 7267..7268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 283,
        column: 7,
        span: 7273..7275,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 283,
        column: 9,
        span: 7276..7277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 283,
        column: 15,
        span: 7278..7283,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 283,
        column: 16,
        span: 7283..7284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        line: 283,
        column: 23,
        span: 7284..7291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 24,
        span: 7291..7292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 283,
        column: 25,
        span: 7292..7293,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 26,
        span: 7293..7294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        line: 283,
        column: 30,
        span: 7295..7298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 31,
        span: 7298..7299,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 283,
        column: 32,
        span: 7299..7300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        line: 283,
        column: 43,
        span: 7300..7311,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 283,
        column: 44,
        span: 7311..7312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 283,
        column: 46,
        span: 7313..7314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 47,
        span: 7314..7315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 48,
        span: 7315..7316,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 284,
        column: 0,
        span: 7319..7322,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 285,
        column: 8,
        span: 7325..7330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 285,
        column: 10,
        span: 7331..7332,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 11,
        span: 7332..7333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        line: 285,
        column: 20,
        span: 7334..7342,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 285,
        column: 22,
        span: 7343..7344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 285,
        column: 29,
        span: 7345..7351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 30,
        span: 7351..7352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 285,
        column: 31,
        span: 7352..7353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 32,
        span: 7353..7354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 285,
        column: 38,
        span: 7355..7360,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 285,
        column: 39,
        span: 7360..7361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "traceback",
        ),
        line: 285,
        column: 48,
        span: 7361..7370,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 49,
        span: 7370..7371,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 51,
        span: 7371..7373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 52,
        span: 7373..7374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 286,
        column: 8,
        span: 7377..7382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 9,
        span: 7382..7383,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 286,
        column: 12,
        span: 7383..7386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 13,
        span: 7386..7387,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 287,
        column: 8,
        span: 7390..7395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 287,
        column: 14,
        span: 7396..7401,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 287,
        column: 16,
        span: 7402..7403,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 287,
        column: 18,
        span: 7404..7405,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 287,
        column: 19,
        span: 7405..7406,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 288,
        column: 6,
        span: 7409..7412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 288,
        column: 11,
        span: 7413..7417,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 288,
        column: 14,
        span: 7418..7420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 288,
        column: 21,
        span: 7421..7427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 288,
        column: 22,
        span: 7427..7428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 288,
        column: 28,
        span: 7428..7434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 29,
        span: 7434..7435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stackmsg",
        ),
        line: 288,
        column: 37,
        span: 7435..7443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 38,
        span: 7443..7444,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]*\"",
        ),
        line: 288,
        column: 47,
        span: 7445..7453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 48,
        span: 7453..7454,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 288,
        column: 0,
        span: 7455..7457,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 289,
        column: 10,
        span: 7462..7467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 289,
        column: 15,
        span: 7468..7472,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 289,
        column: 17,
        span: 7473..7474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 289,
        column: 24,
        span: 7475..7481,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 289,
        column: 25,
        span: 7481..7482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 289,
        column: 30,
        span: 7482..7487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 31,
        span: 7487..7488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 289,
        column: 35,
        span: 7488..7492,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 289,
        column: 36,
        span: 7492..7493,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":(%d+):\"",
        ),
        line: 289,
        column: 46,
        span: 7494..7503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 47,
        span: 7503..7504,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 290,
        column: 7,
        span: 7509..7511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 290,
        column: 12,
        span: 7512..7516,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 290,
        column: 17,
        span: 7517..7521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 290,
        column: 23,
        span: 7522..7527,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 290,
        column: 24,
        span: 7527..7528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 290,
        column: 30,
        span: 7528..7534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 31,
        span: 7534..7535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 290,
        column: 36,
        span: 7535..7540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 290,
        column: 37,
        span: 7540..7541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 290,
        column: 46,
        span: 7542..7550,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 47,
        span: 7550..7551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "curr",
        ),
        line: 290,
        column: 51,
        span: 7551..7555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 52,
        span: 7555..7556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 53,
        span: 7556..7557,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 290,
        column: 0,
        span: 7558..7561,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 291,
        column: 0,
        span: 7564..7567,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 292,
        column: 8,
        span: 7570..7575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 292,
        column: 10,
        span: 7576..7577,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 292,
        column: 11,
        span: 7577..7578,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 0,
        span: 7577..7579,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 293,
        column: 8,
        span: 7582..7587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 293,
        column: 14,
        span: 7588..7593,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 293,
        column: 15,
        span: 7593..7594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 293,
        column: 16,
        span: 7594..7595,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 293,
        column: 17,
        span: 7595..7596,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 293,
        column: 20,
        span: 7597..7599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l1",
        ),
        line: 293,
        column: 23,
        span: 7600..7602,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 293,
        column: 0,
        span: 7603..7605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 294,
        column: 11,
        span: 7610..7616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 12,
        span: 7616..7617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stack",
        ),
        line: 294,
        column: 17,
        span: 7617..7622,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 294,
        column: 18,
        span: 7622..7623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 294,
        column: 19,
        span: 7623..7624,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 294,
        column: 20,
        span: 7624..7625,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 294,
        column: 23,
        span: 7626..7628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 294,
        column: 25,
        span: 7629..7630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 26,
        span: 7630..7631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 295,
        column: 6,
        span: 7636..7637,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 295,
        column: 8,
        span: 7638..7639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 295,
        column: 10,
        span: 7640..7641,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 295,
        column: 11,
        span: 7641..7642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 0,
        span: 7641..7643,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 296,
        column: 0,
        span: 7646..7649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 297,
        column: 9,
        span: 7652..7658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 10,
        span: 7658..7659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 297,
        column: 11,
        span: 7659..7660,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 297,
        column: 13,
        span: 7661..7662,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 16,
        span: 7662..7665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 17,
        span: 7665..7666,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 301,
        column: 8,
        span: 7700..7705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 301,
        column: 12,
        span: 7706..7709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 13,
        span: 7709..7710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 301,
        column: 17,
        span: 7711..7714,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 301,
        column: 19,
        span: 7715..7716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 301,
        column: 26,
        span: 7717..7723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 27,
        span: 7723..7724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 301,
        column: 32,
        span: 7724..7729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 33,
        span: 7729..7730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 301,
        column: 39,
        span: 7731..7736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 40,
        span: 7736..7737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 302,
        column: 9,
        span: 7740..7746,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 10,
        span: 7746..7747,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 302,
        column: 13,
        span: 7747..7750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 302,
        column: 17,
        span: 7751..7754,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 302,
        column: 21,
        span: 7755..7758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 302,
        column: 26,
        span: 7759..7763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 27,
        span: 7763..7764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 302,
        column: 30,
        span: 7764..7767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 31,
        span: 7767..7768,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 302,
        column: 34,
        span: 7769..7771,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 302,
        column: 43,
        span: 7772..7780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 44,
        span: 7780..7781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 303,
        column: 8,
        span: 7784..7789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 9,
        span: 7789..7790,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 303,
        column: 12,
        span: 7790..7793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 13,
        span: 7793..7794,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 305,
        column: 8,
        span: 7798..7803,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 305,
        column: 17,
        span: 7804..7812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 305,
        column: 19,
        span: 7813..7814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 21,
        span: 7815..7816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 305,
        column: 22,
        span: 7816..7817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 23,
        span: 7817..7818,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 306,
        column: 7,
        span: 7823..7825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 306,
        column: 9,
        span: 7826..7827,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 306,
        column: 11,
        span: 7827..7829,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 306,
        column: 12,
        span: 7828..7830,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 306,
        column: 17,
        span: 7831..7835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 306,
        column: 23,
        span: 7836..7841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 24,
        span: 7841..7842,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\n'",
        ),
        line: 306,
        column: 29,
        span: 7842..7847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 30,
        span: 7847..7848,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 307,
        column: 0,
        span: 7853..7857,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 308,
        column: 12,
        span: 7864..7869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 308,
        column: 16,
        span: 7870..7873,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 308,
        column: 18,
        span: 7874..7875,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 308,
        column: 27,
        span: 7876..7884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 29,
        span: 7885..7886,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 30,
        span: 7886..7887,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 308,
        column: 37,
        span: 7888..7894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 308,
        column: 39,
        span: 7895..7896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 40,
        span: 7896..7897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 308,
        column: 41,
        span: 7897..7898,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 308,
        column: 42,
        span: 7898..7899,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 43,
        span: 7898..7900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 44,
        span: 7900..7901,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 308,
        column: 0,
        span: 7902..7905,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 309,
        column: 12,
        span: 7912..7917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 309,
        column: 14,
        span: 7918..7919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 15,
        span: 7919..7920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 309,
        column: 16,
        span: 7920..7921,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 309,
        column: 18,
        span: 7922..7923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 309,
        column: 25,
        span: 7924..7930,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 26,
        span: 7930..7931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 309,
        column: 29,
        span: 7931..7934,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 30,
        span: 7934..7935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 309,
        column: 34,
        span: 7936..7939,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 35,
        span: 7939..7940,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 310,
        column: 13,
        span: 7947..7953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 310,
        column: 15,
        span: 7954..7955,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 310,
        column: 16,
        span: 7955..7956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 310,
        column: 0,
        span: 7956..7957,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 311,
        column: 0,
        span: 7962..7965,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 312,
        column: 0,
        span: 7968..7971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 313,
        column: 4,
        span: 7974..7975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 5,
        span: 7975..7976,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 6,
        span: 7975..7977,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 7,
        span: 7977..7978,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 315,
        column: 8,
        span: 7982..7987,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 315,
        column: 17,
        span: 7988..7996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 315,
        column: 22,
        span: 7997..8001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 24,
        span: 8002..8003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 315,
        column: 25,
        span: 8003..8004,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 26,
        span: 8004..8005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 315,
        column: 27,
        span: 8005..8006,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 28,
        span: 8006..8007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 315,
        column: 29,
        span: 8007..8008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 30,
        span: 8008..8009,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 315,
        column: 37,
        span: 8010..8016,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
        column: 39,
        span: 8016..8018,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 315,
        column: 41,
        span: 8019..8020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 315,
        column: 46,
        span: 8021..8025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 47,
        span: 8025..8026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 315,
        column: 48,
        span: 8026..8027,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 49,
        span: 8027..8028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 315,
        column: 51,
        span: 8029..8030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 52,
        span: 8030..8031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 315,
        column: 54,
        span: 8032..8033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 55,
        span: 8033..8034,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 315,
        column: 0,
        span: 8035..8038,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 317,
        column: 8,
        span: 8043..8048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 317,
        column: 12,
        span: 8049..8052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 13,
        span: 8052..8053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 317,
        column: 17,
        span: 8054..8057,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 317,
        column: 19,
        span: 8058..8059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 317,
        column: 26,
        span: 8060..8066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 27,
        span: 8066..8067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 317,
        column: 31,
        span: 8067..8071,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 32,
        span: 8071..8072,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 317,
        column: 41,
        span: 8073..8081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 43,
        span: 8082..8083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 317,
        column: 44,
        span: 8083..8084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 45,
        span: 8084..8085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 318,
        column: 11,
        span: 8090..8096,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 12,
        span: 8096..8097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 318,
        column: 18,
        span: 8097..8103,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 318,
        column: 19,
        span: 8103..8104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 318,
        column: 23,
        span: 8104..8108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 24,
        span: 8108..8109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 318,
        column: 25,
        span: 8109..8110,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 26,
        span: 8110..8111,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        line: 318,
        column: 43,
        span: 8112..8128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 44,
        span: 8128..8129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 45,
        span: 8129..8130,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 319,
        column: 10,
        span: 8135..8140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 319,
        column: 14,
        span: 8141..8144,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 15,
        span: 8144..8145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 319,
        column: 19,
        span: 8146..8149,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 319,
        column: 21,
        span: 8150..8151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 319,
        column: 27,
        span: 8152..8157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 28,
        span: 8157..8158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loop",
        ),
        line: 319,
        column: 32,
        span: 8158..8162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 33,
        span: 8162..8163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 320,
        column: 11,
        span: 8168..8174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 12,
        span: 8174..8175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 320,
        column: 18,
        span: 8175..8181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 320,
        column: 19,
        span: 8181..8182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 320,
        column: 23,
        span: 8182..8186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 24,
        span: 8186..8187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 320,
        column: 27,
        span: 8187..8190,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 320,
        column: 28,
        span: 8190..8191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error handling\"",
        ),
        line: 320,
        column: 45,
        span: 8192..8208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 46,
        span: 8208..8209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 47,
        span: 8209..8210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
        column: 11,
        span: 8215..8221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 12,
        span: 8221..8222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 321,
        column: 16,
        span: 8222..8226,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 321,
        column: 17,
        span: 8226..8227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 321,
        column: 20,
        span: 8227..8230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 21,
        span: 8230..8231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 22,
        span: 8230..8232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 23,
        span: 8232..8233,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 321,
        column: 26,
        span: 8234..8236,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 28,
        span: 8236..8238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 29,
        span: 8238..8239,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 322,
        column: 11,
        span: 8244..8250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 0,
        span: 8250..8253,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 323,
        column: 6,
        span: 8256..8259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 7,
        span: 8259..8260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 324,
        column: 9,
        span: 8263..8269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 10,
        span: 8269..8270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 324,
        column: 13,
        span: 8270..8273,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 324,
        column: 16,
        span: 8274..8276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 324,
        column: 19,
        span: 8276..8279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 20,
        span: 8279..8280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 326,
        column: 6,
        span: 8284..8287,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
        column: 7,
        span: 8287..8288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 326,
        column: 11,
        span: 8289..8292,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 326,
        column: 13,
        span: 8293..8294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 326,
        column: 19,
        span: 8295..8300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 20,
        span: 8300..8301,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 326,
        column: 28,
        span: 8301..8309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 30,
        span: 8310..8311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 31,
        span: 8311..8312,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 327,
        column: 8,
        span: 8317..8320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 327,
        column: 10,
        span: 8321..8322,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 327,
        column: 12,
        span: 8323..8324,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "999900",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 19,
        span: 8324..8331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 20,
        span: 8331..8332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 28,
        span: 8332..8340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 29,
        span: 8340..8341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 31,
        span: 8341..8343,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 327,
        column: 34,
        span: 8344..8346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 327,
        column: 40,
        span: 8347..8352,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 327,
        column: 41,
        span: 8352..8353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 327,
        column: 47,
        span: 8353..8359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 48,
        span: 8359..8360,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 327,
        column: 49,
        span: 8360..8361,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 327,
        column: 50,
        span: 8361..8362,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 51,
        span: 8362..8363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 53,
        span: 8363..8365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 54,
        span: 8365..8366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 327,
        column: 56,
        span: 8367..8368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 57,
        span: 8368..8369,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 327,
        column: 0,
        span: 8370..8373,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 328,
        column: 6,
        span: 8376..8379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 7,
        span: 8379..8380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 329,
        column: 9,
        span: 8383..8389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 10,
        span: 8389..8390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 329,
        column: 16,
        span: 8390..8396,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 329,
        column: 17,
        span: 8396..8397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 329,
        column: 21,
        span: 8397..8401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 22,
        span: 8401..8402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 329,
        column: 25,
        span: 8402..8405,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 329,
        column: 26,
        span: 8405..8406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many results\"",
        ),
        line: 329,
        column: 45,
        span: 8407..8425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 46,
        span: 8425..8426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 47,
        span: 8426..8427,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 331,
        column: 0,
        span: 8429..8432,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 335,
        column: 9,
        span: 8458..8466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 335,
        column: 11,
        span: 8467..8468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 12,
        span: 8468..8469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 13,
        span: 8469..8470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 335,
        column: 19,
        span: 8471..8476,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 335,
        column: 20,
        span: 8476..8477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 335,
        column: 23,
        span: 8477..8480,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 335,
        column: 24,
        span: 8480..8481,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 335,
        column: 27,
        span: 8481..8484,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 335,
        column: 28,
        span: 8484..8485,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 335,
        column: 0,
        span: 8486..8489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 336,
        column: 4,
        span: 8490..8493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 5,
        span: 8493..8494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 336,
        column: 9,
        span: 8495..8498,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 336,
        column: 11,
        span: 8499..8500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 336,
        column: 18,
        span: 8501..8507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 19,
        span: 8507..8508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 336,
        column: 20,
        span: 8508..8509,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 21,
        span: 8509..8510,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 336,
        column: 30,
        span: 8511..8519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 32,
        span: 8520..8521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 336,
        column: 33,
        span: 8521..8522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 34,
        span: 8522..8523,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 336,
        column: 41,
        span: 8524..8530,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 336,
        column: 43,
        span: 8531..8532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 336,
        column: 46,
        span: 8532..8535,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 336,
        column: 47,
        span: 8535..8536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 336,
        column: 48,
        span: 8536..8537,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 336,
        column: 49,
        span: 8537..8538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 336,
        column: 52,
        span: 8538..8541,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 336,
        column: 54,
        span: 8541..8543,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y'",
        ),
        line: 336,
        column: 57,
        span: 8543..8546,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 336,
        column: 58,
        span: 8546..8547,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 336,
        column: 62,
        span: 8548..8551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 63,
        span: 8551..8552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 337,
        column: 7,
        span: 8553..8559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 8,
        span: 8559..8560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 337,
        column: 11,
        span: 8560..8563,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 337,
        column: 12,
        span: 8563..8564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 337,
        column: 15,
        span: 8564..8567,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 337,
        column: 18,
        span: 8568..8570,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xy'",
        ),
        line: 337,
        column: 23,
        span: 8571..8575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 24,
        span: 8575..8576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 340,
        column: 2,
        span: 8603..8604,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 3,
        span: 8604..8605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 340,
        column: 5,
        span: 8606..8607,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 6,
        span: 8607..8608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 340,
        column: 8,
        span: 8609..8610,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 340,
        column: 10,
        span: 8611..8612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 340,
        column: 17,
        span: 8613..8619,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 18,
        span: 8619..8620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 340,
        column: 24,
        span: 8620..8626,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
        column: 25,
        span: 8626..8627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 340,
        column: 29,
        span: 8627..8631,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 30,
        span: 8631..8632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 340,
        column: 36,
        span: 8633..8638,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 37,
        span: 8638..8639,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 340,
        column: 43,
        span: 8640..8645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 44,
        span: 8645..8646,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"al\"",
        ),
        line: 340,
        column: 49,
        span: 8647..8651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 50,
        span: 8651..8652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 341,
        column: 7,
        span: 8653..8659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 8,
        span: 8659..8660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 341,
        column: 9,
        span: 8660..8661,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 341,
        column: 13,
        span: 8662..8665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 341,
        column: 15,
        span: 8666..8667,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
        column: 18,
        span: 8668..8670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 20,
        span: 8670..8672,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 341,
        column: 24,
        span: 8673..8676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 341,
        column: 26,
        span: 8677..8678,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
        column: 29,
        span: 8679..8681,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 31,
        span: 8681..8683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 32,
        span: 8683..8684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 342,
        column: 2,
        span: 8685..8686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 3,
        span: 8686..8687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 342,
        column: 5,
        span: 8688..8689,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 6,
        span: 8689..8690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 342,
        column: 8,
        span: 8691..8692,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 342,
        column: 10,
        span: 8693..8694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        line: 342,
        column: 17,
        span: 8695..8701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 18,
        span: 8701..8702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 342,
        column: 24,
        span: 8702..8708,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
        column: 25,
        span: 8708..8709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 342,
        column: 29,
        span: 8709..8713,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 30,
        span: 8713..8714,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 342,
        column: 39,
        span: 8715..8723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 41,
        span: 8724..8725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 342,
        column: 42,
        span: 8725..8726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 43,
        span: 8726..8727,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 342,
        column: 50,
        span: 8728..8734,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 342,
        column: 52,
        span: 8735..8736,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 342,
        column: 53,
        span: 8736..8737,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 342,
        column: 57,
        span: 8738..8741,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 58,
        span: 8741..8742,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 342,
        column: 63,
        span: 8743..8747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 64,
        span: 8747..8748,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"al\"",
        ),
        line: 342,
        column: 69,
        span: 8749..8753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 70,
        span: 8753..8754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 343,
        column: 7,
        span: 8755..8761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 8,
        span: 8761..8762,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 343,
        column: 11,
        span: 8762..8765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 343,
        column: 13,
        span: 8766..8767,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 343,
        column: 17,
        span: 8768..8771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 343,
        column: 22,
        span: 8772..8776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 23,
        span: 8776..8777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 343,
        column: 24,
        span: 8777..8778,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 25,
        span: 8778..8779,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 343,
        column: 28,
        span: 8780..8782,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 343,
        column: 36,
        span: 8783..8790,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 343,
        column: 40,
        span: 8791..8794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 343,
        column: 42,
        span: 8795..8796,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 343,
        column: 45,
        span: 8797..8799,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 343,
        column: 49,
        span: 8800..8803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 50,
        span: 8803..8804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 345,
        column: 6,
        span: 8806..8811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 7,
        span: 8811..8812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 345,
        column: 10,
        span: 8812..8815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 11,
        span: 8815..8816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 346,
        column: 12,
        span: 8817..8828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 13,
        span: 8828..8829,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"syntax error\"",
        ),
        line: 346,
        column: 27,
        span: 8829..8843,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 28,
        span: 8843..8844,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 346,
        column: 31,
        span: 8845..8847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 32,
        span: 8847..8848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error\"",
        ),
        line: 346,
        column: 40,
        span: 8849..8856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 41,
        span: 8856..8857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 43,
        span: 8857..8859,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 44,
        span: 8859..8860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 347,
        column: 12,
        span: 8861..8872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 13,
        span: 8872..8873,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        line: 347,
        column: 20,
        span: 8873..8880,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 21,
        span: 8880..8881,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 347,
        column: 24,
        span: 8882..8884,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 25,
        span: 8884..8885,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1.000\"",
        ),
        line: 347,
        column: 33,
        span: 8886..8893,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 34,
        span: 8893..8894,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 36,
        span: 8894..8896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 37,
        span: 8896..8897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 348,
        column: 12,
        span: 8898..8909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 13,
        span: 8909..8910,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        line: 348,
        column: 20,
        span: 8910..8917,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 348,
        column: 21,
        span: 8917..8918,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 348,
        column: 24,
        span: 8919..8921,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 348,
        column: 25,
        span: 8921..8922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[a]]\"",
        ),
        line: 348,
        column: 33,
        span: 8923..8930,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 348,
        column: 34,
        span: 8930..8931,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
        column: 36,
        span: 8931..8933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 37,
        span: 8933..8934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 349,
        column: 12,
        span: 8935..8946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 13,
        span: 8946..8947,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        line: 349,
        column: 19,
        span: 8947..8953,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 349,
        column: 20,
        span: 8953..8954,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 349,
        column: 23,
        span: 8955..8957,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 349,
        column: 24,
        span: 8957..8958,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'aa'\"",
        ),
        line: 349,
        column: 31,
        span: 8959..8965,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 349,
        column: 32,
        span: 8965..8966,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 349,
        column: 34,
        span: 8966..8968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 35,
        span: 8968..8969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checksyntax",
        ),
        line: 352,
        column: 12,
        span: 9008..9019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 13,
        span: 9019..9020,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\255a = 1\"",
        ),
        line: 352,
        column: 24,
        span: 9020..9031,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 352,
        column: 25,
        span: 9031..9032,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 352,
        column: 28,
        span: 9033..9035,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 352,
        column: 29,
        span: 9035..9036,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"char(255)\"",
        ),
        line: 352,
        column: 41,
        span: 9037..9048,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 352,
        column: 42,
        span: 9048..9049,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 352,
        column: 44,
        span: 9049..9051,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 45,
        span: 9051..9052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 354,
        column: 5,
        span: 9054..9058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 6,
        span: 9058..9059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'I = load(\"a=9+\"); a=3'",
        ),
        line: 354,
        column: 29,
        span: 9059..9082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 30,
        span: 9082..9083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 355,
        column: 7,
        span: 9084..9090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 8,
        span: 9090..9091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 355,
        column: 9,
        span: 9091..9092,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 355,
        column: 11,
        span: 9092..9094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 355,
        column: 12,
        span: 9093..9095,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 355,
        column: 16,
        span: 9096..9099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "I",
        ),
        line: 355,
        column: 18,
        span: 9100..9101,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 355,
        column: 21,
        span: 9102..9104,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 355,
        column: 25,
        span: 9105..9108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 26,
        span: 9108..9109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 356,
        column: 6,
        span: 9110..9115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 7,
        span: 9115..9116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 356,
        column: 10,
        span: 9116..9119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 11,
        span: 9119..9120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 358,
        column: 4,
        span: 9122..9125,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 358,
        column: 6,
        span: 9126..9127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 0,
        span: 9127..9132,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 359,
        column: 3,
        span: 9133..9135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 359,
        column: 9,
        span: 9136..9141,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 359,
        column: 14,
        span: 9142..9146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 359,
        column: 18,
        span: 9147..9150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 359,
        column: 20,
        span: 9151..9152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 359,
        column: 24,
        span: 9152..9156,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 359,
        column: 0,
        span: 9157..9160,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 360,
        column: 4,
        span: 9161..9164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 360,
        column: 6,
        span: 9165..9166,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 360,
        column: 7,
        span: 9166..9167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 8,
        span: 9166..9168,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 9,
        span: 9168..9169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 360,
        column: 12,
        span: 9169..9172,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 360,
        column: 0,
        span: 9173..9175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 361,
        column: 7,
        span: 9178..9182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 8,
        span: 9182..9183,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = '",
        ),
        line: 361,
        column: 14,
        span: 9183..9189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 15,
        span: 9189..9190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doit",
        ),
        line: 362,
        column: 7,
        span: 9193..9197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 8,
        span: 9197..9198,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a = 4+nil'",
        ),
        line: 362,
        column: 19,
        span: 9198..9209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 20,
        span: 9209..9210,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 363,
        column: 0,
        span: 9211..9214,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 367,
        column: 6,
        span: 9242..9247,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 367,
        column: 15,
        span: 9248..9256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 367,
        column: 23,
        span: 9257..9264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 25,
        span: 9265..9266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 367,
        column: 29,
        span: 9266..9270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 367,
        column: 30,
        span: 9270..9271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 367,
        column: 34,
        span: 9272..9275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 35,
        span: 9275..9276,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 368,
        column: 8,
        span: 9279..9284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 368,
        column: 10,
        span: 9285..9286,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 12,
        span: 9287..9288,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a; \"",
        ),
        line: 368,
        column: 24,
        span: 9289..9300,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 368,
        column: 26,
        span: 9300..9302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "init",
        ),
        line: 368,
        column: 30,
        span: 9302..9306,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 368,
        column: 33,
        span: 9307..9309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 368,
        column: 40,
        span: 9310..9316,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 368,
        column: 41,
        span: 9316..9317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 368,
        column: 44,
        span: 9317..9320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
        column: 45,
        span: 9320..9321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 368,
        column: 48,
        span: 9321..9324,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 49,
        span: 9324..9325,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "400",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 53,
        span: 9325..9329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
        column: 54,
        span: 9329..9330,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 369,
        column: 8,
        span: 9333..9338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 369,
        column: 10,
        span: 9339..9340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
        column: 11,
        span: 9340..9341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 369,
        column: 12,
        span: 9341..9342,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 369,
        column: 14,
        span: 9343..9344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 369,
        column: 19,
        span: 9345..9349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
        column: 20,
        span: 9349..9350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 369,
        column: 21,
        span: 9350..9351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
        column: 22,
        span: 9351..9352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 370,
        column: 9,
        span: 9355..9361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 10,
        span: 9361..9362,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 370,
        column: 13,
        span: 9362..9365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 370,
        column: 15,
        span: 9366..9367,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 370,
        column: 19,
        span: 9368..9371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 370,
        column: 26,
        span: 9372..9378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 370,
        column: 27,
        span: 9378..9379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 370,
        column: 31,
        span: 9379..9383,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 32,
        span: 9383..9384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 370,
        column: 33,
        span: 9384..9385,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 34,
        span: 9385..9386,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"levels\"",
        ),
        line: 370,
        column: 43,
        span: 9387..9395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 44,
        span: 9395..9396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 45,
        span: 9396..9397,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 371,
        column: 0,
        span: 9398..9401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 372,
        column: 8,
        span: 9402..9409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 9,
        span: 9409..9410,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=\"",
        ),
        line: 372,
        column: 13,
        span: 9410..9414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 372,
        column: 14,
        span: 9414..9415,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"{\"",
        ),
        line: 372,
        column: 18,
        span: 9416..9419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 19,
        span: 9419..9420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 373,
        column: 8,
        span: 9421..9428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 9,
        span: 9428..9429,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=\"",
        ),
        line: 373,
        column: 13,
        span: 9429..9433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 373,
        column: 14,
        span: 9433..9434,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(\"",
        ),
        line: 373,
        column: 18,
        span: 9435..9438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 19,
        span: 9438..9439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 374,
        column: 8,
        span: 9440..9447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 9,
        span: 9447..9448,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 374,
        column: 11,
        span: 9448..9450,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 374,
        column: 12,
        span: 9450..9451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a(\"",
        ),
        line: 374,
        column: 17,
        span: 9452..9456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 18,
        span: 9456..9457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 375,
        column: 8,
        span: 9458..9465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 9,
        span: 9465..9466,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 375,
        column: 11,
        span: 9466..9468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 375,
        column: 12,
        span: 9468..9469,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"do \"",
        ),
        line: 375,
        column: 18,
        span: 9470..9475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 19,
        span: 9475..9476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 376,
        column: 8,
        span: 9477..9484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 376,
        column: 9,
        span: 9484..9485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 376,
        column: 11,
        span: 9485..9487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 12,
        span: 9487..9488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"while a do \"",
        ),
        line: 376,
        column: 26,
        span: 9489..9502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 27,
        span: 9502..9503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 377,
        column: 8,
        span: 9504..9511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 9,
        span: 9511..9512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 377,
        column: 11,
        span: 9512..9514,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 377,
        column: 12,
        span: 9514..9515,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"if a then else \"",
        ),
        line: 377,
        column: 30,
        span: 9516..9533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 31,
        span: 9533..9534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 378,
        column: 8,
        span: 9535..9542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 9,
        span: 9542..9543,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 378,
        column: 11,
        span: 9543..9545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 12,
        span: 9545..9546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function foo () \"",
        ),
        line: 378,
        column: 31,
        span: 9547..9565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 32,
        span: 9565..9566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 379,
        column: 8,
        span: 9567..9574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 9,
        span: 9574..9575,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=\"",
        ),
        line: 379,
        column: 13,
        span: 9575..9579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
        column: 14,
        span: 9579..9580,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a..\"",
        ),
        line: 379,
        column: 20,
        span: 9581..9586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 21,
        span: 9586..9587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testrep",
        ),
        line: 380,
        column: 8,
        span: 9588..9595,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 9,
        span: 9595..9596,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=\"",
        ),
        line: 380,
        column: 13,
        span: 9596..9600,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 14,
        span: 9600..9601,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a^\"",
        ),
        line: 380,
        column: 19,
        span: 9602..9606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 20,
        span: 9606..9607,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 382,
        column: 6,
        span: 9609..9614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 382,
        column: 8,
        span: 9615..9616,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 382,
        column: 10,
        span: 9617..9618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 12,
        span: 9619..9620,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a,\"",
        ),
        line: 382,
        column: 16,
        span: 9620..9624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 17,
        span: 9624..9625,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 382,
        column: 18,
        span: 9625..9626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 382,
        column: 21,
        span: 9626..9629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 22,
        span: 9629..9630,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 25,
        span: 9629..9633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 26,
        span: 9633..9634,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 382,
        column: 28,
        span: 9634..9636,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=nil\"",
        ),
        line: 382,
        column: 35,
        span: 9636..9643,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 383,
        column: 6,
        span: 9644..9649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 8,
        span: 9650..9651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 9,
        span: 9651..9652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 383,
        column: 10,
        span: 9652..9653,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
        column: 12,
        span: 9654..9655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 383,
        column: 17,
        span: 9656..9660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 18,
        span: 9660..9661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 383,
        column: 19,
        span: 9661..9662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 20,
        span: 9662..9663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 384,
        column: 7,
        span: 9664..9670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 8,
        span: 9670..9671,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 384,
        column: 11,
        span: 9671..9674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
        column: 13,
        span: 9675..9676,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 384,
        column: 17,
        span: 9677..9680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 384,
        column: 24,
        span: 9681..9687,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 384,
        column: 25,
        span: 9687..9688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 384,
        column: 29,
        span: 9688..9692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 30,
        span: 9692..9693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 384,
        column: 31,
        span: 9693..9694,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 32,
        span: 9694..9695,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"levels\"",
        ),
        line: 384,
        column: 41,
        span: 9696..9704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 42,
        span: 9704..9705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 43,
        span: 9705..9706,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 389,
        column: 6,
        span: 9745..9750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 389,
        column: 10,
        span: 9751..9754,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 389,
        column: 12,
        span: 9755..9756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 0,
        span: 9756..9760,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 390,
        column: 6,
        span: 9761..9766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 390,
        column: 9,
        span: 9768..9769,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 390,
        column: 11,
        span: 9770..9771,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function fooA ()\\n  local \"",
        ),
        line: 390,
        column: 46,
        span: 9772..9806,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 391,
        column: 4,
        span: 9807..9810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 391,
        column: 6,
        span: 9811..9812,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 391,
        column: 8,
        span: 9813..9814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 391,
        column: 10,
        span: 9814..9816,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 391,
        column: 11,
        span: 9816..9817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 391,
        column: 14,
        span: 9817..9820,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 391,
        column: 0,
        span: 9821..9823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 392,
        column: 4,
        span: 9826..9827,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 392,
        column: 6,
        span: 9828..9829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 392,
        column: 8,
        span: 9830..9831,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 392,
        column: 10,
        span: 9831..9833,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 392,
        column: 13,
        span: 9833..9836,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 392,
        column: 15,
        span: 9836..9838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 392,
        column: 16,
        span: 9838..9839,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 392,
        column: 18,
        span: 9839..9841,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 392,
        column: 22,
        span: 9841..9845,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 393,
        column: 0,
        span: 9846..9849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 394,
        column: 2,
        span: 9850..9851,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 4,
        span: 9852..9853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 394,
        column: 6,
        span: 9854..9855,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 394,
        column: 8,
        span: 9855..9857,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b,c\\n\"",
        ),
        line: 394,
        column: 15,
        span: 9857..9864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 395,
        column: 2,
        span: 9865..9866,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 395,
        column: 4,
        span: 9867..9868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 395,
        column: 6,
        span: 9869..9870,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 395,
        column: 8,
        span: 9870..9872,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local function fooB ()\\n  local \"",
        ),
        line: 395,
        column: 42,
        span: 9872..9906,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 396,
        column: 4,
        span: 9907..9910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 396,
        column: 6,
        span: 9911..9912,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 396,
        column: 8,
        span: 9913..9914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 10,
        span: 9914..9916,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 396,
        column: 11,
        span: 9916..9917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 396,
        column: 14,
        span: 9917..9920,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 396,
        column: 0,
        span: 9921..9923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 397,
        column: 4,
        span: 9926..9927,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 397,
        column: 6,
        span: 9928..9929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 397,
        column: 8,
        span: 9930..9931,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 397,
        column: 10,
        span: 9931..9933,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 397,
        column: 13,
        span: 9933..9936,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 397,
        column: 15,
        span: 9936..9938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 397,
        column: 16,
        span: 9938..9939,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 397,
        column: 18,
        span: 9939..9941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 397,
        column: 22,
        span: 9941..9945,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 398,
        column: 0,
        span: 9946..9949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 399,
        column: 2,
        span: 9950..9951,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 399,
        column: 4,
        span: 9952..9953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 399,
        column: 6,
        span: 9954..9955,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 399,
        column: 8,
        span: 9955..9957,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        line: 399,
        column: 13,
        span: 9957..9962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 400,
        column: 2,
        span: 9963..9964,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 4,
        span: 9965..9966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 400,
        column: 6,
        span: 9967..9968,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 400,
        column: 8,
        span: 9968..9970,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function fooC () return b+c\"",
        ),
        line: 400,
        column: 37,
        span: 9970..9999,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 401,
        column: 6,
        span: 10000..10005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 401,
        column: 8,
        span: 10006..10007,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
        column: 10,
        span: 10008..10009,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 12,
        span: 10009..10011,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 401,
        column: 13,
        span: 10011..10012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 0,
        span: 10011..10013,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 402,
        column: 4,
        span: 10014..10017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 402,
        column: 6,
        span: 10018..10019,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
        column: 8,
        span: 10020..10021,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 10,
        span: 10021..10023,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 402,
        column: 11,
        span: 10023..10024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 402,
        column: 14,
        span: 10024..10027,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 402,
        column: 0,
        span: 10028..10030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 403,
        column: 4,
        span: 10033..10034,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 403,
        column: 6,
        span: 10035..10036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 403,
        column: 8,
        span: 10037..10038,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 403,
        column: 10,
        span: 10038..10040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+a\"",
        ),
        line: 403,
        column: 14,
        span: 10040..10044,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 403,
        column: 16,
        span: 10044..10046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 403,
        column: 17,
        span: 10046..10047,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 403,
        column: 19,
        span: 10047..10049,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+b\"",
        ),
        line: 403,
        column: 23,
        span: 10049..10053,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 403,
        column: 25,
        span: 10053..10055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 403,
        column: 0,
        span: 10055..10056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 404,
        column: 4,
        span: 10059..10060,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 404,
        column: 6,
        span: 10061..10062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 404,
        column: 8,
        span: 10063..10064,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 404,
        column: 10,
        span: 10065..10066,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
        column: 0,
        span: 10066..10068,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 405,
        column: 0,
        span: 10069..10072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 406,
        column: 2,
        span: 10073..10074,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 406,
        column: 4,
        span: 10075..10076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 406,
        column: 6,
        span: 10077..10078,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 406,
        column: 8,
        span: 10078..10080,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nend  end end\"",
        ),
        line: 406,
        column: 24,
        span: 10080..10096,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 407,
        column: 6,
        span: 10097..10102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 407,
        column: 8,
        span: 10103..10104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 407,
        column: 9,
        span: 10104..10105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 407,
        column: 10,
        span: 10105..10106,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 407,
        column: 12,
        span: 10107..10108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 407,
        column: 17,
        span: 10109..10113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 18,
        span: 10113..10114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 407,
        column: 19,
        span: 10114..10115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 20,
        span: 10115..10116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 408,
        column: 7,
        span: 10117..10123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 8,
        span: 10123..10124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 408,
        column: 9,
        span: 10124..10125,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 408,
        column: 11,
        span: 10126..10127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 15,
        span: 10127..10131,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 408,
        column: 19,
        span: 10132..10135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 408,
        column: 26,
        span: 10136..10142,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 408,
        column: 27,
        span: 10142..10143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 408,
        column: 31,
        span: 10143..10147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 32,
        span: 10147..10148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 408,
        column: 33,
        span: 10148..10149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 34,
        span: 10149..10150,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too many upvalues\"",
        ),
        line: 408,
        column: 54,
        span: 10151..10170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 55,
        span: 10170..10171,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 408,
        column: 0,
        span: 10172..10175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 409,
        column: 14,
        span: 10183..10189,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 409,
        column: 15,
        span: 10189..10190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 409,
        column: 19,
        span: 10190..10194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 20,
        span: 10194..10195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 409,
        column: 21,
        span: 10195..10196,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 409,
        column: 22,
        span: 10196..10197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 5\"",
        ),
        line: 409,
        column: 31,
        span: 10198..10206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 32,
        span: 10206..10207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 33,
        span: 10207..10208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 412,
        column: 2,
        span: 10229..10230,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 412,
        column: 4,
        span: 10231..10232,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nfunction foo ()\\n  local \"",
        ),
        line: 412,
        column: 34,
        span: 10233..10262,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 413,
        column: 4,
        span: 10263..10266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 413,
        column: 6,
        span: 10267..10268,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 413,
        column: 8,
        span: 10269..10270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 10,
        span: 10270..10272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 413,
        column: 11,
        span: 10272..10273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 14,
        span: 10272..10276,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 413,
        column: 0,
        span: 10277..10279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 414,
        column: 4,
        span: 10282..10283,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 414,
        column: 6,
        span: 10284..10285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 414,
        column: 8,
        span: 10286..10287,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 414,
        column: 10,
        span: 10287..10289,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 414,
        column: 13,
        span: 10289..10292,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 414,
        column: 15,
        span: 10292..10294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 414,
        column: 16,
        span: 10294..10295,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 414,
        column: 18,
        span: 10295..10297,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\", \"",
        ),
        line: 414,
        column: 22,
        span: 10297..10301,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 415,
        column: 0,
        span: 10302..10305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 416,
        column: 2,
        span: 10306..10307,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 416,
        column: 4,
        span: 10308..10309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 416,
        column: 6,
        span: 10310..10311,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 416,
        column: 8,
        span: 10311..10313,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\n\"",
        ),
        line: 416,
        column: 13,
        span: 10313..10318,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 417,
        column: 6,
        span: 10319..10324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 417,
        column: 8,
        span: 10325..10326,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 417,
        column: 9,
        span: 10326..10327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 417,
        column: 10,
        span: 10327..10328,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 417,
        column: 12,
        span: 10329..10330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 417,
        column: 17,
        span: 10331..10335,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 18,
        span: 10335..10336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 417,
        column: 19,
        span: 10336..10337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 20,
        span: 10337..10338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
        column: 7,
        span: 10339..10345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 8,
        span: 10345..10346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 418,
        column: 14,
        span: 10346..10352,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 418,
        column: 15,
        span: 10352..10353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 418,
        column: 19,
        span: 10353..10357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 20,
        span: 10357..10358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 418,
        column: 21,
        span: 10358..10359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 418,
        column: 22,
        span: 10359..10360,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line 2\"",
        ),
        line: 418,
        column: 31,
        span: 10361..10369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 32,
        span: 10369..10370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 33,
        span: 10370..10371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 420,
        column: 3,
        span: 10373..10375,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 420,
        column: 4,
        span: 10375..10376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 420,
        column: 11,
        span: 10376..10383,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 420,
        column: 13,
        span: 10384..10385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldmm",
        ),
        line: 420,
        column: 0,
        span: 10386..10391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 422,
        column: 6,
        span: 10393..10398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 7,
        span: 10398..10399,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 422,
        column: 11,
        span: 10399..10403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 12,
        span: 10403..10404,
    },
]
