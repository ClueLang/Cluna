---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/locals.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "'testing local variables and environments'",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 3,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "require",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "\"debug\"",
        line: 3,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 8,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 8,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 8,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 8,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 8,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 8,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 9,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 9,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 9,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 11,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 11,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 11,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 11,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 12,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 14,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 14,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 14,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 14,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 14,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 14,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 14,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 14,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 14,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 15,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 15,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 15,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 15,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 15,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 15,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 15,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 15,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 17,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 18,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 19,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 19,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 19,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 19,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 20,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 20,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 20,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 20,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 20,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 20,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 21,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 22,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 22,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 22,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 23,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 23,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 24,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 26,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 26,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 27,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 32,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 32,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 32,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 35,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 35,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 37,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "'local a = {}'",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 39,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "_1",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "_2",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "_3",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "_4",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "_5",
        line: 42,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "_6",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "_7",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "_8",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "_9",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "_10",
        line: 43,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 44,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 45,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 46,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 46,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 47,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 47,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 48,
    },
    Token {
        kind: String,
        lexeme: "'q'",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 49,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 50,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 55,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 55,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 56,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 58,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 59,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 59,
    },
    Token {
        kind: Repeat,
        lexeme: "repeat",
        line: 59,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 59,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 59,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 59,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 59,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 59,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 59,
    },
    Token {
        kind: Until,
        lexeme: "until",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 59,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 59,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 62,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "'function'",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 68,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "getenv",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 69,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 69,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "getupvalue",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 70,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "'_ENV'",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 71,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "getenv",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "\"a=3\"",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 76,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 76,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 76,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 76,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 76,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 76,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "\"a = 3\"",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "getenv",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 78,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 78,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 78,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 80,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 80,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 80,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 84,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "_soft",
        line: 84,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 84,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 85,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 86,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 87,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: Number,
        lexeme: "31",
        line: 87,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 87,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 88,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 88,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 88,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 88,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 89,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[local a=%s;\n                                        a=a+%s;\n                                        assert(a ==2^%s)]]",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 91,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 92,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[local a=%s;\n                                        a=a-%s;\n                                        assert(a==-2^%s)]]",
        line: 94,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 94,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 94,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 94,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 94,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[local a,b=0,%s;\n                                        a=b-%s;\n                                        assert(a==-2^%s)]]",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 97,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 99,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 99,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 99,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 100,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 103,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 103,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "rawget",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "\"querytab\"",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: String,
        lexeme: "\"stop\"",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 109,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 109,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 109,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 109,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 109,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 109,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 109,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 109,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 109,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "alo",
        line: 109,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "a1234567890123456789012345678901234567890",
        line: 110,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 110,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 110,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 112,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "querytab",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 114,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 114,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 114,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 114,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 114,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 114,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 114,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 116,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 116,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 116,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 116,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 116,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 116,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 117,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "querytab",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 118,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 118,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "'number'",
        line: 118,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 119,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "_ENV",
        line: 125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 127,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "_ENV",
        line: 127,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 127,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 127,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 127,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "dummy",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 129,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "_ENV",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 129,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 129,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 129,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 130,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 130,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 130,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 130,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 130,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 131,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 132,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "_ENV",
        line: 132,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 132,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 134,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 135,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "_ENV",
        line: 135,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 135,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 135,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 135,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 135,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 136,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 136,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 136,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 136,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 137,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "getenv",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 140,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "'hi'",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 140,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "'hi'",
        line: 140,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 140,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "'*'",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 141,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 141,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "'*'",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 143,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "_ENV",
        line: 143,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 143,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 143,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 143,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 143,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 143,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 143,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 144,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "_ENV",
        line: 144,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 144,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 144,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 144,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 144,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 144,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 144,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 145,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 145,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 147,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 149,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 149,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 152,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 152,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 154,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 154,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 156,
    },
]
