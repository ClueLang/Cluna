---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/errors.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "\"testing errors\"",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 3,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "require",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "\"debug\"",
        line: 3,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 6,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 6,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 6,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "oldmm",
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 7,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 8,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 8,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 8,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 8,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 11,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 12,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 12,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 12,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 12,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 12,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 12,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "cond",
        line: 13,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 13,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 14,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "cond",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 14,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 15,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 18,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 20,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 20,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 20,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 20,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 20,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 20,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 21,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 23,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "extra",
        line: 23,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 23,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 24,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 25,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 25,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"^<%a\"",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 25,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 25,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 25,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"^char%(\"",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 26,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "\"'\"",
        line: 26,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 26,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "\"'\"",
        line: 26,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 27,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: String,
        lexeme: "\"(%p)\"",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: String,
        lexeme: "\"%%%1\"",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "pt",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 28,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[^%%[string \".*\"%%]:%d: .- near %s$]]",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "token",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 30,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "pt",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 31,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: String,
        lexeme: "\"error('hi', 0)\"",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 36,
    },
    Token {
        kind: String,
        lexeme: "'hi'",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\"error()\"",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 39,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 43,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "_no32",
        line: 43,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: String,
        lexeme: "\"table.unpack({}, 1, n=2^30)\"",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: String,
        lexeme: "\"a=math.sin()\"",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: String,
        lexeme: "\"tostring(1)\"",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: String,
        lexeme: "\"tostring()\"",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 48,
    },
    Token {
        kind: String,
        lexeme: "\"tonumber()\"",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 49,
    },
    Token {
        kind: String,
        lexeme: "\"repeat until 1; a\"",
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 50,
    },
    Token {
        kind: String,
        lexeme: "\"return;;\"",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 51,
    },
    Token {
        kind: String,
        lexeme: "\"assert(false)\"",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 52,
    },
    Token {
        kind: String,
        lexeme: "\"assert(nil)\"",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "\"function a (... , ...) end\"",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: String,
        lexeme: "\"function a (, ...) end\"",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 55,
    },
    Token {
        kind: String,
        lexeme: "\"local t={}; t = t[#t] + 1\"",
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  local a = {4\n\n]]",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: String,
        lexeme: "\"'}' expected (to close '{' at line 1)\"",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: String,
        lexeme: "\"<eof>\"",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "\"a=1; bbbb=2; a=math.sin(3)+bbbb(3)\"",
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "\"global 'bbbb'\"",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: String,
        lexeme: "\"a=1; local a,bbbb=2,3; a = math.sin(1) and bbbb(3)\"",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: String,
        lexeme: "\"local 'bbbb'\"",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "\"a={}; do local a=1 end a:bbbb(3)\"",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "\"method 'bbbb'\"",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "\"local a={}; a.bbbb(3)\"",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "\"field 'bbbb'\"",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 70,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "\"'bbbb'\"",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: String,
        lexeme: "\"a={13}; local bbbb=1; a[bbbb](3)\"",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: String,
        lexeme: "\"number\"",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "\"a=(1)..{}\"",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "\"a table value\"",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "aaa",
        line: 74,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 74,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "\"aaa.bbb:ddd(9)\"",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "\"global 'aaa'\"",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "\"local aaa={bbb=1}; aaa.bbb:ddd(9)\"",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "\"field 'bbb'\"",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "\"local aaa={bbb={}}; aaa.bbb:ddd(9)\"",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "\"method 'ddd'\"",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"local a,b,c; (function () a = b+1 end)()\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"upvalue 'b'\"",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "\"local aaa={bbb={ddd=next}}; aaa.bbb:ddd(nil)\"",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "\"local _ENV = {x={}}; a = a + 1\"",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "\"global 'a'\"",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 83,
    },
    Token {
        kind: String,
        lexeme: "\"b=1; local aaa='a'; x=aaa+b\"",
        line: 83,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 83,
    },
    Token {
        kind: String,
        lexeme: "\"local 'aaa'\"",
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 84,
    },
    Token {
        kind: String,
        lexeme: "\"aaa={}; x=3/aaa\"",
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 84,
    },
    Token {
        kind: String,
        lexeme: "\"global 'aaa'\"",
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 85,
    },
    Token {
        kind: String,
        lexeme: "\"aaa='2'; b=nil;x=aaa*b\"",
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 85,
    },
    Token {
        kind: String,
        lexeme: "\"global 'b'\"",
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: String,
        lexeme: "\"aaa={}; x=-aaa\"",
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 86,
    },
    Token {
        kind: String,
        lexeme: "\"global 'aaa'\"",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 87,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "\"aaa={}; x=(aaa or aaa)+(aaa and aaa)\"",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "\"'aaa'\"",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 88,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"aaa={}; (aaa or aaa)()\"",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"'aaa'\"",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "\"print(print < 10)\"",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "\"function\"",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: String,
        lexeme: "\"print(print < print)\"",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: String,
        lexeme: "\"two function\"",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 95,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  -- create light udata\n  local x = D.upvalueid(function () return debug end, 1)\n  D.setuservalue(x, {})\n]]",
        line: 100,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 100,
    },
    Token {
        kind: String,
        lexeme: "\"light userdata\"",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 101,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "D",
        line: 101,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 101,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "\"(io.write or print){}\"",
        line: 105,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "\"io.write\"",
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "\"(collectgarbage or print){}\"",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "\"collectgarbage\"",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 109,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 109,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 109,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 109,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 110,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 110,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 111,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 111,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 111,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "\"a = x\"",
        line: 111,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 111,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 112,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 113,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 113,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 113,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 113,
    },
    Token {
        kind: String,
        lexeme: "\"; \"",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 114,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 114,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 115,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "\"; a = bbb + 1\"",
        line: 115,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "\"global 'bbb'\"",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: String,
        lexeme: "\"local _ENV=_ENV;\"",
        line: 116,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 116,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 116,
    },
    Token {
        kind: String,
        lexeme: "\"; a = bbb + 1\"",
        line: 116,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 116,
    },
    Token {
        kind: String,
        lexeme: "\"global 'bbb'\"",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 117,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 117,
    },
    Token {
        kind: String,
        lexeme: "\"; local t = {}; a = t.bbb + 1\"",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: String,
        lexeme: "\"field 'bbb'\"",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 118,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "\"; local t = {}; t:bbb()\"",
        line: 118,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "\"method 'bbb'\"",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[aaa=9\nrepeat until 3==3\nlocal x=math.sin(math.cos(3))\nif math.sin(1) == x then return math.sin(1) end   -- tail call\nlocal a,b = 1, {\n  {x='a'..'b'..'c', y='b', z=x},\n  {1,2,3,4,5} or 3+3<=3+3,\n  3+1>3+1,\n  {d = x and aaa[x or y]}}\n]]",
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 129,
    },
    Token {
        kind: String,
        lexeme: "\"global 'aaa'\"",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nlocal x,y = {},1\nif math.sin(1) == 0 then return 3 end    -- return\nx.a()]]",
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 134,
    },
    Token {
        kind: String,
        lexeme: "\"field 'a'\"",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nprefix = nil\ninsert = nil\nwhile 1 do\n  local a\n  if nil then break end\n  insert(prefix, a)\nend]]",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "\"global 'insert'\"",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[  -- tail call\n  return math.sin(\"a\")\n]]",
        line: 147,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 147,
    },
    Token {
        kind: String,
        lexeme: "\"'sin'\"",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[collectgarbage(\"nooption\")]]",
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "\"invalid option\"",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[x = print .. \"a\"]]",
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 151,
    },
    Token {
        kind: String,
        lexeme: "\"concatenate\"",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: String,
        lexeme: "\"getmetatable(io.stdin).__gc()\"",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: String,
        lexeme: "\"no value\"",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nlocal Var\nlocal function main()\n  NoSuchName (function() Var=0 end)\nend\nmain()\n]]",
        line: 161,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 161,
    },
    Token {
        kind: String,
        lexeme: "\"global 'NoSuchName'\"",
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 162,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 164,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 164,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 164,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 164,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 164,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 164,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 164,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 164,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 164,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 165,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 165,
    },
    Token {
        kind: String,
        lexeme: "\"a:sub()\"",
        line: 165,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 165,
    },
    Token {
        kind: String,
        lexeme: "\"bad self\"",
        line: 165,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: String,
        lexeme: "\"string.sub('a', {})\"",
        line: 166,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 166,
    },
    Token {
        kind: String,
        lexeme: "\"#2\"",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: String,
        lexeme: "\"('a'):sub{}\"",
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 167,
    },
    Token {
        kind: String,
        lexeme: "\"#1\"",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: String,
        lexeme: "\"table.sort({1,2,3}, table.sort)\"",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: String,
        lexeme: "\"'table.sort'\"",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: String,
        lexeme: "\"string.gsub('s', 's', setmetatable)\"",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: String,
        lexeme: "\"setmetatable'\"",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 176,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 176,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "create",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 177,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 177,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 177,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "resume",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 178,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 180,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 180,
    },
    Token {
        kind: String,
        lexeme: "\"C stack overflow\"",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "checkmessage",
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 182,
    },
    Token {
        kind: String,
        lexeme: "\"coroutine.yield()\"",
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 182,
    },
    Token {
        kind: String,
        lexeme: "\"outside a coroutine\"",
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "f1",
        line: 184,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 184,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 184,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "sort",
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 184,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 184,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 184,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 184,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 184,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 184,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "yield",
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 184,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 185,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 185,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "wrap",
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 185,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 185,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "f1",
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 185,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 186,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 186,
    },
    Token {
        kind: String,
        lexeme: "\"yield across\"",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "idsize",
        line: 191,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 191,
    },
    Token {
        kind: Number,
        lexeme: "60",
        line: 191,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 191,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 191,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 192,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "checksize",
        line: 192,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "source",
        line: 192,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 192,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 194,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 194,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 194,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 194,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 194,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "source",
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 195,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 195,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 195,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 195,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 195,
    },
    Token {
        kind: String,
        lexeme: "\"^([^:]*):\"",
        line: 195,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 196,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 196,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "idsize",
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 196,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 197,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 199,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 199,
    },
    Token {
        kind: Number,
        lexeme: "60",
        line: 199,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 199,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 199,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 199,
    },
    Token {
        kind: Number,
        lexeme: "60",
        line: 199,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 199,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 199,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "checksize",
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 200,
    },
    Token {
        kind: String,
        lexeme: "\"@\"",
        line: 200,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 200,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 200,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 200,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "checksize",
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 201,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 201,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 201,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 201,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 201,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 201,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 201,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "checksize",
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 202,
    },
    Token {
        kind: String,
        lexeme: "\"=\"",
        line: 202,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 202,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 202,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 202,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 202,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 203,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 208,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "err",
        line: 209,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 209,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 209,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 210,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 210,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 210,
    },
    Token {
        kind: String,
        lexeme: "\":(%d+):\"",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 211,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 211,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 211,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 211,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 211,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 211,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 211,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 211,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 211,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 214,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 214,
    },
    Token {
        kind: String,
        lexeme: "\"local a\\n for i=1,'a' do \\n print(i) \\n end\"",
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 214,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 215,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 215,
    },
    Token {
        kind: String,
        lexeme: "\"\\n local a \\n for k,v in 3 \\n do \\n print(k) \\n end\"",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 215,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 216,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\n for k,v in \\n 3 \\n do \\n print(k) \\n end\"",
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 217,
    },
    Token {
        kind: String,
        lexeme: "\"function a.x.y ()\\na=a+1\\nend\"",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 219,
    },
    Token {
        kind: String,
        lexeme: "\"a = \\na\\n+\\n{}\"",
        line: 219,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 219,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 220,
    },
    Token {
        kind: String,
        lexeme: "\"a = \\n3\\n+\\n(\\n4\\n/\\nprint)\"",
        line: 220,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 220,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 221,
    },
    Token {
        kind: String,
        lexeme: "\"a = \\nprint\\n+\\n(\\n4\\n/\\n7)\"",
        line: 221,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 223,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 223,
    },
    Token {
        kind: String,
        lexeme: "\"a\\n=\\n-\\n\\nprint\\n;\"",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 223,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 225,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\na\n(\n23)\n]]",
        line: 229,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 229,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 231,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23\n)\n]]",
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 239,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 241,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nlocal a = {x = 13}\na\n.\nx\n(\n23 + a\n)\n]]",
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 249,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 249,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 251,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 251,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\nfunction g() f() end\nfunction f(x) error('a', X) end\ng()\n]]",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 256,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 256,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 256,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 256,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 256,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 256,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 256,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 256,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 256,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 257,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 257,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 257,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 257,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 257,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 257,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 257,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 257,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 257,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 258,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 258,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 258,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 259,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 259,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "lineerror",
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 259,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 262,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "_soft",
        line: 262,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "C",
        line: 264,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 264,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 264,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 265,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 265,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "getinfo",
        line: 265,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 265,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 265,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 265,
    },
    Token {
        kind: String,
        lexeme: "\"l\"",
        line: 265,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 265,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "currentline",
        line: 265,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 265,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 265,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 265,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "C",
        line: 265,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "C",
        line: 265,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 265,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 265,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 265,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 265,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 265,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 265,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 267,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "checkstackmessage",
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 267,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 268,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 268,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 268,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 268,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 268,
    },
    Token {
        kind: String,
        lexeme: "\"^.-:%d+: stack overflow\"",
        line: 268,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 268,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 268,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "checkstackmessage",
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 271,
    },
    Token {
        kind: String,
        lexeme: "'y()'",
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 272,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 272,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 272,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "checkstackmessage",
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 273,
    },
    Token {
        kind: String,
        lexeme: "'y()'",
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 274,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 274,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 274,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 274,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "checkstackmessage",
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 275,
    },
    Token {
        kind: String,
        lexeme: "'y()'",
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 276,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "C",
        line: 280,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 280,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 280,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "l1",
        line: 281,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 282,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "l1",
        line: 283,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 283,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: "getinfo",
        line: 283,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 283,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 283,
    },
    Token {
        kind: String,
        lexeme: "\"l\"",
        line: 283,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 283,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: "currentline",
        line: 283,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 283,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 283,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 283,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 283,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 284,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 285,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "stackmsg",
        line: 285,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 285,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "g",
        line: 285,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 285,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "traceback",
        line: 285,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 285,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 285,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 286,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 286,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 286,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 286,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: "stack",
        line: 287,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 287,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 287,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 287,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 288,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 288,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "gmatch",
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "stackmsg",
        line: 288,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 288,
    },
    Token {
        kind: String,
        lexeme: "\"[^\\n]*\"",
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 288,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 288,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "curr",
        line: 289,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 289,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 289,
    },
    Token {
        kind: String,
        lexeme: "\":(%d+):\"",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "curr",
        line: 290,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 290,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "stack",
        line: 290,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "tonumber",
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "curr",
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 290,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 290,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 291,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 292,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 292,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 292,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "stack",
        line: 293,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 293,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 293,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "l1",
        line: 293,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 294,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "stack",
        line: 294,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 294,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 294,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 294,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 295,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 295,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 295,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 295,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 297,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 297,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 297,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 301,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 301,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 301,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 302,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 302,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 302,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 302,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 302,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 302,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 302,
    },
    Token {
        kind: String,
        lexeme: "'string'",
        line: 302,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 303,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 303,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 303,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 303,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 305,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 305,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 305,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 305,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 306,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 306,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 306,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 306,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 306,
    },
    Token {
        kind: String,
        lexeme: "'a\\n'",
        line: 306,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 306,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 307,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "aux",
        line: 308,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 308,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 308,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 308,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 308,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 308,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 308,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 309,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 309,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 309,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "aux",
        line: 309,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "aux",
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 309,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 310,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 310,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 311,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 313,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 313,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 315,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "loop",
        line: 315,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 315,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 315,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 315,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 315,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 315,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 315,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "loop",
        line: 315,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 315,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 315,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 315,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 315,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 315,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 317,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 317,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "loop",
        line: 317,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 317,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 318,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 318,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 318,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 318,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 318,
    },
    Token {
        kind: String,
        lexeme: "\"stack overflow\"",
        line: 318,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 318,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 318,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 319,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 319,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 319,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "loop",
        line: 319,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 320,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 320,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 320,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 320,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 320,
    },
    Token {
        kind: String,
        lexeme: "\"error handling\"",
        line: 320,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 320,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 321,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "sin",
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 321,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 321,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 321,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 321,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 322,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 322,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 323,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 323,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 324,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 324,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 324,
    },
    Token {
        kind: Number,
        lexeme: "15",
        line: 324,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 326,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 326,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 326,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 326,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 326,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 326,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 326,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 327,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 327,
    },
    Token {
        kind: Number,
        lexeme: "999900",
        line: 327,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 327,
    },
    Token {
        kind: Number,
        lexeme: "1000000",
        line: 327,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 327,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 327,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 327,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 327,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 327,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 327,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 327,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 327,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 327,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 327,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 327,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 327,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 328,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 328,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 329,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 329,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 329,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 329,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 329,
    },
    Token {
        kind: String,
        lexeme: "\"too many results\"",
        line: 329,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 329,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 329,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 331,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 335,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 335,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 335,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 335,
    },
    Token {
        kind: String,
        lexeme: "'x'",
        line: 335,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 335,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 336,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 336,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 336,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 336,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 336,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 336,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 336,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 336,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 336,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 336,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 336,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 336,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 336,
    },
    Token {
        kind: String,
        lexeme: "'y'",
        line: 336,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 336,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 336,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 337,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 337,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 337,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 337,
    },
    Token {
        kind: String,
        lexeme: "'xy'",
        line: 337,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 340,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 340,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: String,
        lexeme: "\"al\"",
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 341,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 341,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 342,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 342,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 342,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 342,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 342,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 342,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 342,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 342,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 342,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 342,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 342,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 342,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 342,
    },
    Token {
        kind: String,
        lexeme: "\"al\"",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 343,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 343,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 343,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 343,
    },
    Token {
        kind: String,
        lexeme: "\"table\"",
        line: 343,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 343,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 343,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 345,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 345,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 345,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 345,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 346,
    },
    Token {
        kind: String,
        lexeme: "\"syntax error\"",
        line: 346,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 346,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 346,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 346,
    },
    Token {
        kind: String,
        lexeme: "\"error\"",
        line: 346,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 346,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 347,
    },
    Token {
        kind: String,
        lexeme: "\"1.000\"",
        line: 347,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 347,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 347,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 347,
    },
    Token {
        kind: String,
        lexeme: "\"1.000\"",
        line: 347,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 347,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 348,
    },
    Token {
        kind: String,
        lexeme: "\"[[a]]\"",
        line: 348,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 348,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 348,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 348,
    },
    Token {
        kind: String,
        lexeme: "\"[[a]]\"",
        line: 348,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 348,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 349,
    },
    Token {
        kind: String,
        lexeme: "\"'aa'\"",
        line: 349,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 349,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 349,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 349,
    },
    Token {
        kind: String,
        lexeme: "\"'aa'\"",
        line: 349,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 349,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "checksyntax",
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 352,
    },
    Token {
        kind: String,
        lexeme: "\"\\255a = 1\"",
        line: 352,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 352,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 352,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 352,
    },
    Token {
        kind: String,
        lexeme: "\"char(255)\"",
        line: 352,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 352,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 354,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 354,
    },
    Token {
        kind: String,
        lexeme: "'I = load(\"a=9+\"); a=3'",
        line: 354,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 355,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 355,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 355,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: "I",
        line: 355,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 355,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 356,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 358,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 358,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 358,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: "_soft",
        line: 359,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 359,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 359,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 359,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 359,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 360,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 360,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 360,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 361,
    },
    Token {
        kind: String,
        lexeme: "'a = '",
        line: 361,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "doit",
        line: 362,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 362,
    },
    Token {
        kind: String,
        lexeme: "'a = 4+nil'",
        line: 362,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 362,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 363,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 367,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "init",
        line: 367,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 367,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 368,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 368,
    },
    Token {
        kind: String,
        lexeme: "\"local a; \"",
        line: 368,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "init",
        line: 368,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 368,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 368,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 368,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 368,
    },
    Token {
        kind: Number,
        lexeme: "400",
        line: 368,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 368,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 369,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 370,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 370,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 370,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 370,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 370,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 370,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 370,
    },
    Token {
        kind: String,
        lexeme: "\"levels\"",
        line: 370,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 370,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 370,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 371,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 372,
    },
    Token {
        kind: String,
        lexeme: "\"a=\"",
        line: 372,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 372,
    },
    Token {
        kind: String,
        lexeme: "\"{\"",
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 373,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 373,
    },
    Token {
        kind: String,
        lexeme: "\"a=\"",
        line: 373,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 373,
    },
    Token {
        kind: String,
        lexeme: "\"(\"",
        line: 373,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 373,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 374,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 374,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 374,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 374,
    },
    Token {
        kind: String,
        lexeme: "\"a(\"",
        line: 374,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 375,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 375,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 375,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 375,
    },
    Token {
        kind: String,
        lexeme: "\"do \"",
        line: 375,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 376,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 376,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 376,
    },
    Token {
        kind: String,
        lexeme: "\"while a do \"",
        line: 376,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 377,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 377,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 377,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 377,
    },
    Token {
        kind: String,
        lexeme: "\"if a then else \"",
        line: 377,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 378,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 378,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 378,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 378,
    },
    Token {
        kind: String,
        lexeme: "\"function foo () \"",
        line: 378,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 379,
    },
    Token {
        kind: String,
        lexeme: "\"a=\"",
        line: 379,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 379,
    },
    Token {
        kind: String,
        lexeme: "\"a..\"",
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "testrep",
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 380,
    },
    Token {
        kind: String,
        lexeme: "\"a=\"",
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 380,
    },
    Token {
        kind: String,
        lexeme: "\"a^\"",
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 380,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 382,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 382,
    },
    Token {
        kind: String,
        lexeme: "\"a,\"",
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 382,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 382,
    },
    Token {
        kind: Number,
        lexeme: "200",
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 382,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 382,
    },
    Token {
        kind: String,
        lexeme: "\"a=nil\"",
        line: 382,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 383,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 383,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 383,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 383,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 384,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 384,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 384,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 384,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 384,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 384,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 384,
    },
    Token {
        kind: String,
        lexeme: "\"levels\"",
        line: 384,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 384,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 384,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 389,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: "127",
        line: 389,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 390,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 390,
    },
    Token {
        kind: String,
        lexeme: "\"local function fooA ()\\n  local \"",
        line: 390,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 391,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 391,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 391,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 391,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 391,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 392,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 392,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 392,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 392,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 392,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 392,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 392,
    },
    Token {
        kind: String,
        lexeme: "\", \"",
        line: 392,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 394,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 394,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 394,
    },
    Token {
        kind: String,
        lexeme: "\"b,c\\n\"",
        line: 394,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 395,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 395,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 395,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 395,
    },
    Token {
        kind: String,
        lexeme: "\"local function fooB ()\\n  local \"",
        line: 395,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 396,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 396,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 396,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 396,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 396,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 397,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 397,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 397,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 397,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 397,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 397,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 397,
    },
    Token {
        kind: String,
        lexeme: "\", \"",
        line: 397,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 398,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 399,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 399,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 399,
    },
    Token {
        kind: String,
        lexeme: "\"b\\n\"",
        line: 399,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 400,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 400,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 400,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 400,
    },
    Token {
        kind: String,
        lexeme: "\"function fooC () return b+c\"",
        line: 400,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 401,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 401,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 401,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 401,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 401,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 402,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 402,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 402,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 402,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 403,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 403,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 403,
    },
    Token {
        kind: String,
        lexeme: "\"+a\"",
        line: 403,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 403,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 403,
    },
    Token {
        kind: String,
        lexeme: "\"+b\"",
        line: 403,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 404,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 404,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 404,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 404,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 406,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 406,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 406,
    },
    Token {
        kind: String,
        lexeme: "\"\\nend  end end\"",
        line: 406,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 407,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 407,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 407,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 407,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 407,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 408,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 408,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 408,
    },
    Token {
        kind: Number,
        lexeme: "255",
        line: 408,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 408,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 408,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 408,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 408,
    },
    Token {
        kind: String,
        lexeme: "\"too many upvalues\"",
        line: 408,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 408,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 409,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 409,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 409,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 409,
    },
    Token {
        kind: String,
        lexeme: "\"line 5\"",
        line: 409,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 409,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 409,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 412,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 412,
    },
    Token {
        kind: String,
        lexeme: "\"\\nfunction foo ()\\n  local \"",
        line: 412,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 413,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 413,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 413,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 413,
    },
    Token {
        kind: Number,
        lexeme: "300",
        line: 413,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 414,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 414,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 414,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 414,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 414,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 414,
    },
    Token {
        kind: String,
        lexeme: "\", \"",
        line: 414,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 416,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 416,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 416,
    },
    Token {
        kind: String,
        lexeme: "\"b\\n\"",
        line: 416,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 417,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 417,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 417,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 417,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 417,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 418,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 418,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 418,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 418,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 418,
    },
    Token {
        kind: String,
        lexeme: "\"line 2\"",
        line: 418,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 418,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 418,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 420,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 420,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 420,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 420,
    },
    Token {
        kind: Identifier,
        lexeme: "oldmm",
        line: 420,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 422,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 422,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 422,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 422,
    },
]
