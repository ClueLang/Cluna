---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/main.lua
---
[
    Token {
        kind: If,
        lexeme: "if",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "_port",
        line: 4,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 4,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 4,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: String,
        lexeme: "\"testing lua.c options\"",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 8,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "execute",
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 10,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 10,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 11,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 12,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 12,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "tmpname",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 14,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 15,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 15,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 15,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 16,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 16,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 16,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 16,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 16,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 16,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "progname",
        line: 17,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 17,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 17,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 17,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 17,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 17,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: String,
        lexeme: "\"progname: \"",
        line: 19,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "progname",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 21,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 22,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 22,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 23,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "output",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 24,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "write",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 25,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 26,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "getoutput",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 29,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 30,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "read",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: String,
        lexeme: "\"*a\"",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 31,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "input",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "close",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 32,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 33,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 34,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "checkprogout",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 37,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "getoutput",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 38,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "gmatch",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\".-\\n\"",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "line",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 40,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 41,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "getoutput",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 45,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 45,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"'%s' - '%s'\\n\"",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 46,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 46,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 46,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 46,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 47,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 48,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "auxrun",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 51,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 51,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 52,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: String,
        lexeme: "\"lua\"",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: String,
        lexeme: "'\"'",
        line: 52,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "progname",
        line: 52,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 52,
    },
    Token {
        kind: String,
        lexeme: "'\"'",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "execute",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 54,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 56,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "auxrun",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 58,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRun",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "auxrun",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 62,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRunMsg",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "\"\\n(the next error is expected by the test)\"",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRun",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "\"print(package.path)\"",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "\"env LUA_INIT= LUA_PATH=x lua %s > %s\"",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: String,
        lexeme: "\"x\\n\"",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "\"env LUA_INIT= LUA_PATH_5_2=y LUA_PATH=x lua %s > %s\"",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "\"y\\n\"",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"print(package.cpath)\"",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "\"env LUA_INIT= LUA_CPATH=xuxu lua %s > %s\"",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\\n\"",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 83,
    },
    Token {
        kind: String,
        lexeme: "\"env LUA_INIT= LUA_CPATH_5_2=yacc LUA_CPATH=x lua %s > %s\"",
        line: 83,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 83,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 84,
    },
    Token {
        kind: String,
        lexeme: "\"yacc\\n\"",
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: String,
        lexeme: "\"print(X)\"",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "'env LUA_INIT=\"X=3\" lua %s > %s'",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"3\\n\"",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "\"print(X)\"",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: String,
        lexeme: "'env LUA_INIT_5_2=\"X=10\" LUA_INIT=\"X=3\" lua %s > %s'",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: String,
        lexeme: "\"10\\n\"",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: String,
        lexeme: "\"print(package.path, package.cpath)\"",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: String,
        lexeme: "'env LUA_INIT=\"error(10)\" LUA_PATH=xxx LUA_CPATH=xxx lua -E %s > %s'",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "defaultpath",
        line: 98,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "getoutput",
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "defaultpath",
        line: 99,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 99,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "defaultpath",
        line: 99,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 99,
    },
    Token {
        kind: String,
        lexeme: "\"^(.-)\\t\"",
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 100,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "defaultpath",
        line: 100,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 100,
    },
    Token {
        kind: String,
        lexeme: "\"xxx\"",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 100,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "defaultpath",
        line: 100,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 100,
    },
    Token {
        kind: String,
        lexeme: "\"lua\"",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 104,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "convert",
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "\"print(package.path)\"",
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: String,
        lexeme: "'env LUA_PATH=\"%s\" lua %s > %s'",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "expected",
        line: 107,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "getoutput",
        line: 107,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 107,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "expected",
        line: 108,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 108,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "expected",
        line: 108,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 108,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 108,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 108,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 109,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: String,
        lexeme: "\";;\"",
        line: 109,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 109,
    },
    Token {
        kind: String,
        lexeme: "\";\"",
        line: 109,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "defaultpath",
        line: 109,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 109,
    },
    Token {
        kind: String,
        lexeme: "\";\"",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "expected",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "convert",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: String,
        lexeme: "\";\"",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "convert",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: String,
        lexeme: "\";;\"",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "convert",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: String,
        lexeme: "\";;;\"",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "convert",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "\";;;;\"",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "convert",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: String,
        lexeme: "\";;;;;\"",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "convert",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: String,
        lexeme: "\";;a;;;bc\"",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: String,
        lexeme: "\"print(1); a=2; return {x=15}\"",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 122,
    },
    Token {
        kind: String,
        lexeme: "\"print(a); print(_G['%s'].x)\"",
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 122,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 122,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: String,
        lexeme: "'env LUA_PATH=\"?;;\" lua -l %s -l%s -lstring -l io %s > %s'",
        line: 123,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 123,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 123,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 123,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: String,
        lexeme: "\"1\\n2\\n15\\n2\\n15\\n\"",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 126,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 126,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  assert(#arg == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == \"-e \" and arg[-3] == '%s')\n  assert(arg[4] == nil and arg[-4] == nil)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n]]",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 134,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "progname",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: String,
        lexeme: "'lua \"-e \" -- %s a b c'",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 138,
    },
    Token {
        kind: String,
        lexeme: "\"assert(arg==nil)\"",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: String,
        lexeme: "\"assert(arg)\"",
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "'env LUA_PATH=\"?;;\" lua -l%s - < %s'",
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 142,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "\"lua - < %s > %s\"",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 147,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[print(({...})[30])]]",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s %s > %s\"",
        line: 148,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 148,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 148,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: String,
        lexeme: "\" a\"",
        line: 148,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 148,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "\"a\\n\"",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua \"-eprint(1)\" -ea=3 -e \"print(a)\" > %s]]",
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 152,
    },
    Token {
        kind: String,
        lexeme: "\"1\\n3\\n\"",
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 154,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n  print(\n1, a\n)\n]]",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 159,
    },
    Token {
        kind: String,
        lexeme: "\"lua - < %s > %s\"",
        line: 159,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 159,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 160,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 160,
    },
    Token {
        kind: String,
        lexeme: "\"1\\tnil\\n\"",
        line: 160,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 162,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n= (6*2-6) -- ===\na \n= 10\nprint(a)\n= a]]",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 168,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        line: 168,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 168,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "checkprogout",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: String,
        lexeme: "\"6\\n10\\n10\\n\\n\"",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: String,
        lexeme: "\"a = [[b\\nc\\nd\\ne]]\\n=a\"",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "\"temporary program file: \"",
        line: 172,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        line: 173,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 173,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "checkprogout",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: String,
        lexeme: "\"b\\nc\\nd\\ne\\n\\n\"",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "prompt",
        line: 176,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 176,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 177,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[ --\na = 2\n]]",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua \"-e_PROMPT='%s'\" -i < %s > %s]]",
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "prompt",
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 180,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 181,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "getoutput",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 182,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 182,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "prompt",
        line: 182,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 182,
    },
    Token {
        kind: String,
        lexeme: "\".*\"",
        line: 182,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "prompt",
        line: 182,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 182,
    },
    Token {
        kind: String,
        lexeme: "\".*\"",
        line: 182,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "prompt",
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 185,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\ndebug = require \"debug\"\nm = {x=0}\nsetmetatable(m, {__tostring = function(x)\n  return debug.getinfo(4).currentline + x.x\nend})\nerror(m)\n]]",
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRun",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua %s 2> %s]]",
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 194,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "progname",
        line: 194,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 194,
    },
    Token {
        kind: String,
        lexeme: "\": 6\\n\"",
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 197,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 197,
    },
    Token {
        kind: MultilineString,
        lexeme: "[=[ -- \nfunction f ( x ) \n  local a = [[\nxuxu\n]]\n  local b = \"\\\nxuxu\\n\"\n  if x == 11 then return 1 , 2 end  --[[ test multiple returns ]]\n  return x + 1 \n  --\\\\\nend\n=( f( 10 ) )\nassert( a == b )\n=f( 11 )  ]=]",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 211,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 211,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 211,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 211,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 211,
    },
    Token {
        kind: String,
        lexeme: "' '",
        line: 211,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 211,
    },
    Token {
        kind: String,
        lexeme: "'\\n\\n'",
        line: 211,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 211,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 213,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 213,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        line: 213,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 213,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 213,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "checkprogout",
        line: 214,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 214,
    },
    Token {
        kind: String,
        lexeme: "\"11\\n1\\t2\\n\\n\"",
        line: 214,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 216,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[#comment in 1st line without \\n at the end]]",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 217,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s\"",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 219,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[#test line number when file starts with comment line\ndebug = require\"debug\"\nprint(debug.getinfo(1).currentline)\n]]",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 223,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 223,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s > %s\"",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 223,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 223,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "checkprogout",
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 224,
    },
    Token {
        kind: String,
        lexeme: "'3'",
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 227,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 227,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[io.output(%q); io.write('alo')]]",
        line: 227,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 228,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s\"",
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "checkout",
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 229,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 232,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 232,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[lua -v  -e'print\"hello\"' > %s]]",
        line: 232,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 232,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 233,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "getoutput",
        line: 233,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 233,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 234,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 234,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 234,
    },
    Token {
        kind: String,
        lexeme: "\"PUC%-Rio\\nhello\"",
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 238,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 238,
    },
    Token {
        kind: String,
        lexeme: "\"os.exit(nil, true)\"",
        line: 238,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s\"",
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 240,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 240,
    },
    Token {
        kind: String,
        lexeme: "\"os.exit(0, true)\"",
        line: 240,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 241,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s\"",
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 241,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 242,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 242,
    },
    Token {
        kind: String,
        lexeme: "\"os.exit(true, true)\"",
        line: 242,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 243,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s\"",
        line: 243,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 244,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 244,
    },
    Token {
        kind: String,
        lexeme: "\"os.exit(1, true)\"",
        line: 244,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRun",
        line: 245,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 245,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s\"",
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 245,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "prepfile",
        line: 246,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 246,
    },
    Token {
        kind: String,
        lexeme: "\"os.exit(false, true)\"",
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRun",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: String,
        lexeme: "\"lua %s\"",
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 249,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 250,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "otherprog",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 251,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 251,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 251,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 251,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "out",
        line: 251,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 251,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "RUN",
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 253,
    },
    Token {
        kind: String,
        lexeme: "\"lua -v\"",
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRunMsg",
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 255,
    },
    Token {
        kind: String,
        lexeme: "\"lua -h\"",
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRunMsg",
        line: 256,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 256,
    },
    Token {
        kind: String,
        lexeme: "\"lua -e\"",
        line: 256,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRunMsg",
        line: 257,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 257,
    },
    Token {
        kind: String,
        lexeme: "\"lua -e a\"",
        line: 257,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "NoRunMsg",
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 258,
    },
    Token {
        kind: String,
        lexeme: "\"lua -f\"",
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 260,
    },
    Token {
        kind: String,
        lexeme: "\"OK\"",
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 260,
    },
]
