---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/nextvar.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
        column: 6,
        span: 5..6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing tables, next, and for'",
        ),
        line: 1,
        column: 37,
        span: 6..37,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
        column: 38,
        span: 37..38,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 3,
        column: 6,
        span: 40..45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 3,
        column: 8,
        span: 46..47,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
        column: 10,
        span: 48..49,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 3,
        column: 12,
        span: 50..51,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 3,
        column: 13,
        span: 51..52,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 6,
        column: 4,
        span: 104..107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 6,
        column: 6,
        span: 108..109,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 7,
        span: 109..110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 8,
        span: 109..111,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 9,
        span: 111..112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 12,
        span: 111..115,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 6,
        column: 15,
        span: 116..118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 6,
        column: 17,
        span: 119..120,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 6,
        column: 18,
        span: 120..121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 6,
        column: 19,
        span: 121..122,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 6,
        column: 21,
        span: 122..124,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 6,
        column: 24,
        span: 124..127,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 6,
        column: 25,
        span: 127..128,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 27,
        span: 129..130,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 6,
        column: 32,
        span: 131..135,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 6,
        column: 0,
        span: 136..139,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 7,
        column: 4,
        span: 140..143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 7,
        column: 6,
        span: 144..145,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 7,
        span: 145..146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 7,
        column: 8,
        span: 145..147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
        column: 9,
        span: 147..148,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 7,
        column: 12,
        span: 147..151,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 7,
        column: 15,
        span: 152..154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 7,
        column: 17,
        span: 155..156,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 7,
        column: 18,
        span: 156..157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 7,
        column: 19,
        span: 157..158,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 7,
        column: 21,
        span: 158..160,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        line: 7,
        column: 24,
        span: 160..163,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 7,
        column: 25,
        span: 163..164,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 27,
        span: 165..166,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 7,
        column: 31,
        span: 167..170,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 7,
        column: 0,
        span: 171..174,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 9,
        column: 4,
        span: 236..239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 9,
        column: 6,
        span: 240..241,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 7,
        span: 241..242,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 8,
        span: 241..243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 9,
        column: 9,
        span: 243..244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 12,
        span: 243..247,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 9,
        column: 0,
        span: 248..250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 10,
        column: 4,
        span: 253..254,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 10,
        column: 5,
        span: 254..255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 10,
        column: 6,
        span: 255..256,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 10,
        column: 7,
        span: 256..257,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 9,
        span: 258..259,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 10,
        column: 0,
        span: 260..264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 11,
        column: 9,
        span: 267..273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 10,
        span: 273..274,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 11,
        column: 11,
        span: 274..275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 11,
        column: 12,
        span: 275..276,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
        column: 15,
        span: 277..279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 11,
        column: 17,
        span: 280..281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 18,
        span: 281..282,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 12,
        column: 0,
        span: 283..286,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 15,
        column: 6,
        span: 306..311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 15,
        column: 8,
        span: 312..313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 15,
        column: 10,
        span: 314..315,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 0,
        span: 315..317,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 16,
        column: 4,
        span: 318..321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 16,
        column: 6,
        span: 322..323,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 7,
        span: 323..324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 16,
        column: 8,
        span: 324..325,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 16,
        column: 11,
        span: 326..328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 16,
        column: 18,
        span: 329..335,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 16,
        column: 19,
        span: 335..336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 21,
        span: 335..338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 22,
        span: 338..339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 24,
        span: 338..341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 25,
        span: 341..342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 27,
        span: 341..344,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 16,
        column: 28,
        span: 344..345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 16,
        column: 29,
        span: 345..346,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 30,
        span: 346..347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 32,
        span: 346..349,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 16,
        column: 33,
        span: 349..350,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 16,
        column: 0,
        span: 351..353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 17,
        column: 4,
        span: 356..357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 17,
        column: 6,
        span: 358..359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 17,
        column: 8,
        span: 360..361,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 17,
        column: 10,
        span: 362..363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 0,
        span: 363..365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 9,
        span: 368..374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 10,
        span: 374..375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 18,
        column: 11,
        span: 375..376,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 14,
        span: 377..379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 18,
        column: 16,
        span: 380..381,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 18,
        column: 20,
        span: 382..385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 18,
        column: 22,
        span: 386..387,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 25,
        span: 388..390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 18,
        column: 27,
        span: 391..392,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 18,
        column: 29,
        span: 393..394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 32,
        span: 394..397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 33,
        span: 397..398,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 19,
        column: 0,
        span: 399..402,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 21,
        column: 4,
        span: 404..407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 21,
        column: 6,
        span: 408..409,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 21,
        column: 9,
        span: 410..412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 21,
        column: 16,
        span: 413..419,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 21,
        column: 17,
        span: 419..420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 21,
        column: 18,
        span: 420..421,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 19,
        span: 421..422,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 21,
        span: 421..424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 22,
        span: 424..425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 21,
        column: 24,
        span: 426..427,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 25,
        span: 427..428,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 27,
        span: 427..430,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 21,
        column: 28,
        span: 430..431,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 21,
        column: 31,
        span: 432..434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 38,
        span: 435..441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 39,
        span: 441..442,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 21,
        column: 42,
        span: 442..445,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 43,
        span: 445..446,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 21,
        column: 0,
        span: 447..450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 24,
        column: 2,
        span: 480..481,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 4,
        span: 482..483,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 24,
        column: 0,
        span: 484..489,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 25,
        column: 6,
        span: 490..495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 25,
        column: 8,
        span: 496..497,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 10,
        span: 498..499,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 0,
        span: 499..501,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 26,
        column: 4,
        span: 502..505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 26,
        column: 6,
        span: 506..507,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 7,
        span: 507..508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 26,
        column: 8,
        span: 508..509,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 26,
        column: 11,
        span: 510..512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 26,
        column: 18,
        span: 513..519,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 26,
        column: 19,
        span: 519..520,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 26,
        column: 23,
        span: 520..524,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 24,
        span: 524..525,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 26,
        column: 29,
        span: 525..530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 30,
        span: 530..531,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 26,
        column: 34,
        span: 531..535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 35,
        span: 535..536,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 26,
        column: 40,
        span: 536..541,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 26,
        column: 41,
        span: 541..542,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 26,
        column: 0,
        span: 543..545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 27,
        column: 4,
        span: 548..549,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 6,
        span: 550..551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 27,
        column: 8,
        span: 552..553,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 27,
        column: 10,
        span: 554..555,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 0,
        span: 555..557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 28,
        column: 4,
        span: 560..561,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 6,
        span: 562..563,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 28,
        column: 10,
        span: 564..567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 28,
        column: 0,
        span: 568..569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 9,
        span: 572..578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 10,
        span: 578..579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 29,
        column: 11,
        span: 579..580,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 14,
        span: 581..583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 29,
        column: 16,
        span: 584..585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 17,
        span: 585..586,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 30,
        column: 0,
        span: 587..590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 7,
        span: 591..597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 597..598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 31,
        column: 9,
        span: 598..599,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 12,
        span: 600..602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 14,
        span: 602..604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 15,
        span: 604..605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 7,
        span: 647..653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 8,
        span: 653..654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 34,
        column: 12,
        span: 654..658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 13,
        span: 658..659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 34,
        column: 19,
        span: 659..665,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 34,
        column: 20,
        span: 665..666,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 34,
        column: 21,
        span: 666..667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 22,
        span: 667..668,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 34,
        column: 25,
        span: 669..671,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        line: 34,
        column: 36,
        span: 672..682,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 34,
        column: 40,
        span: 683..686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 34,
        column: 47,
        span: 687..693,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 34,
        column: 48,
        span: 693..694,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 34,
        column: 49,
        span: 694..695,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 34,
        column: 52,
        span: 696..698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 34,
        column: 59,
        span: 699..705,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 34,
        column: 60,
        span: 705..706,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 34,
        column: 61,
        span: 706..707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 62,
        span: 707..708,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 36,
        column: 3,
        span: 710..712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 36,
        column: 5,
        span: 713..714,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 36,
        column: 10,
        span: 715..719,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 39,
        column: 6,
        span: 749..754,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 39,
        column: 15,
        span: 755..763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log2",
        ),
        line: 39,
        column: 20,
        span: 764..768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 22,
        span: 769..770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 39,
        column: 23,
        span: 770..771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 24,
        span: 771..772,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 39,
        column: 31,
        span: 773..779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 39,
        column: 36,
        span: 780..784,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 37,
        span: 784..785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 39,
        column: 40,
        span: 785..788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 41,
        span: 788..789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 39,
        column: 42,
        span: 789..790,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 43,
        span: 790..791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 45,
        span: 791..793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 46,
        span: 793..794,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 39,
        column: 0,
        span: 795..798,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 41,
        column: 6,
        span: 800..805,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 41,
        column: 15,
        span: 806..814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 41,
        column: 19,
        span: 815..818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 21,
        span: 819..820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 41,
        column: 22,
        span: 820..821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 23,
        span: 821..822,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 42,
        column: 8,
        span: 854..859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 42,
        column: 11,
        span: 860..862,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 42,
        column: 13,
        span: 863..864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 15,
        span: 864..866,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 42,
        column: 16,
        span: 866..867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 42,
        column: 20,
        span: 867..871,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 21,
        span: 871..872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 42,
        column: 25,
        span: 872..876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 26,
        span: 876..877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log2",
        ),
        line: 42,
        column: 30,
        span: 877..881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 31,
        span: 881..882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 42,
        column: 32,
        span: 882..883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 33,
        span: 883..884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 34,
        span: 884..885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
        column: 9,
        span: 888..894,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 10,
        span: 894..895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 43,
        column: 11,
        span: 895..896,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 14,
        span: 897..899,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 16,
        span: 899..901,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 43,
        column: 19,
        span: 902..904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 21,
        span: 905..906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 43,
        column: 23,
        span: 906..908,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 43,
        column: 24,
        span: 908..909,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 25,
        span: 908..910,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 43,
        column: 27,
        span: 911..912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 43,
        column: 29,
        span: 913..914,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 43,
        column: 33,
        span: 915..918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 43,
        column: 35,
        span: 919..920,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 43,
        column: 38,
        span: 921..923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 43,
        column: 41,
        span: 924..926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 42,
        span: 926..927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 43,
        span: 927..928,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 44,
        column: 9,
        span: 931..937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp",
        ),
        line: 44,
        column: 0,
        span: 938..940,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 45,
        column: 0,
        span: 941..944,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 47,
        column: 6,
        span: 946..951,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 47,
        column: 15,
        span: 952..960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fb",
        ),
        line: 47,
        column: 18,
        span: 961..963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 20,
        span: 964..965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 47,
        column: 21,
        span: 965..966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 22,
        span: 966..967,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 48,
        column: 8,
        span: 970..975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 48,
        column: 10,
        span: 976..977,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 11,
        span: 977..978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        line: 48,
        column: 14,
        span: 979..981,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 48,
        column: 16,
        span: 982..983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 48,
        column: 18,
        span: 984..985,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 19,
        span: 985..986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "int2fb",
        ),
        line: 48,
        column: 25,
        span: 986..992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 26,
        span: 992..993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 48,
        column: 27,
        span: 993..994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 28,
        span: 994..995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 9,
        span: 998..1004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 10,
        span: 1004..1005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 49,
        column: 11,
        span: 1005..1006,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 49,
        column: 13,
        span: 1007..1008,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 17,
        span: 1008..1012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 18,
        span: 1012..1013,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 50,
        column: 9,
        span: 1016..1022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        line: 50,
        column: 0,
        span: 1023..1025,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 51,
        column: 0,
        span: 1026..1029,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 54,
        column: 6,
        span: 1051..1056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 54,
        column: 8,
        span: 1057..1058,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 10,
        span: 1059..1060,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 0,
        span: 1060..1062,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 55,
        column: 6,
        span: 1063..1068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 55,
        column: 10,
        span: 1069..1072,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 55,
        column: 12,
        span: 1073..1074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 14,
        span: 1074..1076,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 55,
        column: 15,
        span: 1076..1077,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 0,
        span: 1076..1079,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 56,
        column: 6,
        span: 1080..1085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 56,
        column: 8,
        span: 1086..1087,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 56,
        column: 10,
        span: 1088..1089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 56,
        column: 14,
        span: 1090..1093,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 56,
        column: 0,
        span: 1094..1096,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 57,
        column: 8,
        span: 1099..1104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 57,
        column: 10,
        span: 1105..1106,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 12,
        span: 1107..1108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fb",
        ),
        line: 57,
        column: 15,
        span: 1109..1111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 16,
        span: 1111..1112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 57,
        column: 17,
        span: 1112..1113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 18,
        span: 1113..1114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
        column: 9,
        span: 1117..1123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 10,
        span: 1123..1124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
        column: 11,
        span: 1124..1125,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 58,
        column: 14,
        span: 1126..1128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 58,
        column: 16,
        span: 1129..1130,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 58,
        column: 20,
        span: 1131..1134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 58,
        column: 22,
        span: 1135..1136,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 58,
        column: 25,
        span: 1137..1139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
        column: 27,
        span: 1140..1141,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 58,
        column: 28,
        span: 1141..1142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".125",
                },
            ),
        ),
        line: 58,
        column: 33,
        span: 1141..1147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 34,
        span: 1147..1148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 4,
        span: 1151..1152,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
        column: 6,
        span: 1153..1154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 59,
        column: 11,
        span: 1155..1159,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 12,
        span: 1159..1160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 59,
        column: 16,
        span: 1160..1164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 17,
        span: 1164..1165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 18,
        span: 1165..1166,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 59,
        column: 19,
        span: 1166..1167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 59,
        column: 22,
        span: 1166..1170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 23,
        span: 1170..1171,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 60,
        column: 0,
        span: 1172..1175,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 63,
        column: 6,
        span: 1179..1184,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 63,
        column: 15,
        span: 1185..1193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 63,
        column: 21,
        span: 1194..1199,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 23,
        span: 1200..1201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 63,
        column: 24,
        span: 1201..1202,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 25,
        span: 1202..1203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 63,
        column: 28,
        span: 1204..1206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 29,
        span: 1206..1207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nh",
        ),
        line: 63,
        column: 32,
        span: 1208..1210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 33,
        span: 1210..1211,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 64,
        column: 8,
        span: 1214..1219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 64,
        column: 10,
        span: 1220..1221,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 11,
        span: 1221..1222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 64,
        column: 13,
        span: 1223..1224,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 15,
        span: 1225..1226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 64,
        column: 17,
        span: 1227..1228,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
        column: 18,
        span: 1228..1229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "querytab",
        ),
        line: 64,
        column: 26,
        span: 1229..1237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 27,
        span: 1237..1238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 64,
        column: 28,
        span: 1238..1239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 29,
        span: 1239..1240,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 65,
        column: 5,
        span: 1243..1245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 65,
        column: 7,
        span: 1246..1247,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 65,
        column: 10,
        span: 1248..1250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 65,
        column: 13,
        span: 1251..1253,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 65,
        column: 16,
        span: 1254..1256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 65,
        column: 18,
        span: 1257..1258,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 65,
        column: 21,
        span: 1259..1261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nh",
        ),
        line: 65,
        column: 24,
        span: 1262..1264,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 65,
        column: 0,
        span: 1265..1269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 66,
        column: 10,
        span: 1274..1279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 11,
        span: 1279..1280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        line: 66,
        column: 13,
        span: 1280..1282,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 14,
        span: 1282..1283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nh",
        ),
        line: 66,
        column: 17,
        span: 1284..1286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 18,
        span: 1286..1287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 20,
        span: 1288..1289,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 21,
        span: 1289..1290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 66,
        column: 23,
        span: 1291..1292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 24,
        span: 1292..1293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
        column: 11,
        span: 1298..1304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 12,
        span: 1304..1305,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 67,
        column: 15,
        span: 1305..1308,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 16,
        span: 1308..1309,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 68,
        column: 0,
        span: 1312..1315,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 69,
        column: 0,
        span: 1316..1319,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 73,
        column: 0,
        span: 1349..1351,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 74,
        column: 8,
        span: 1354..1359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 74,
        column: 10,
        span: 1360..1361,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 12,
        span: 1362..1363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 0,
        span: 1363..1365,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 75,
        column: 6,
        span: 1368..1371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 75,
        column: 8,
        span: 1372..1373,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 75,
        column: 11,
        span: 1374..1376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 75,
        column: 17,
        span: 1377..1382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 18,
        span: 1382..1383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 75,
        column: 22,
        span: 1383..1387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 23,
        span: 1387..1388,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 75,
        column: 26,
        span: 1389..1391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 75,
        column: 28,
        span: 1392..1393,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
        column: 30,
        span: 1394..1395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 75,
        column: 32,
        span: 1396..1397,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 75,
        column: 34,
        span: 1398..1399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 36,
        span: 1399..1401,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 75,
        column: 0,
        span: 1402..1405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 76,
        column: 8,
        span: 1408..1413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 9,
        span: 1413..1414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 76,
        column: 13,
        span: 1414..1418,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 14,
        span: 1418..1419,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 16,
        span: 1419..1421,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 17,
        span: 1421..1422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 76,
        column: 21,
        span: 1423..1426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 22,
        span: 1426..1427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 76,
        column: 23,
        span: 1427..1428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 24,
        span: 1428..1429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 25,
        span: 1429..1430,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 77,
        column: 0,
        span: 1431..1434,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 81,
        column: 6,
        span: 1466..1471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 81,
        column: 10,
        span: 1472..1475,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
        column: 12,
        span: 1476..1477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 0,
        span: 1477..1480,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 82,
        column: 6,
        span: 1481..1486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 82,
        column: 8,
        span: 1487..1488,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
        column: 10,
        span: 1489..1490,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return {'",
        ),
        line: 82,
        column: 21,
        span: 1491..1501,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 83,
        column: 4,
        span: 1502..1505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 83,
        column: 6,
        span: 1506..1507,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
        column: 7,
        span: 1507..1508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 8,
        span: 1507..1509,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 9,
        span: 1509..1510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 83,
        column: 12,
        span: 1510..1513,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 83,
        column: 0,
        span: 1514..1516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 84,
        column: 4,
        span: 1519..1520,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 6,
        span: 1521..1522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 84,
        column: 8,
        span: 1523..1524,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 84,
        column: 10,
        span: 1524..1526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 84,
        column: 11,
        span: 1526..1527,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 84,
        column: 13,
        span: 1527..1529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "','",
        ),
        line: 84,
        column: 16,
        span: 1529..1532,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 85,
        column: 8,
        span: 1535..1540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 85,
        column: 10,
        span: 1541..1542,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 12,
        span: 1543..1544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 85,
        column: 0,
        span: 1545..1546,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 86,
        column: 6,
        span: 1549..1552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 86,
        column: 8,
        span: 1553..1554,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 9,
        span: 1554..1555,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 10,
        span: 1554..1556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 11,
        span: 1556..1557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 86,
        column: 14,
        span: 1557..1560,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 86,
        column: 17,
        span: 1561..1563,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 87,
        column: 10,
        span: 1569..1574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 87,
        column: 12,
        span: 1575..1576,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 87,
        column: 14,
        span: 1577..1578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 87,
        column: 19,
        span: 1579..1583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 20,
        span: 1583..1584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 87,
        column: 21,
        span: 1584..1585,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 87,
        column: 23,
        span: 1585..1587,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'}'",
        ),
        line: 87,
        column: 26,
        span: 1587..1590,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 27,
        span: 1590..1591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 28,
        span: 1591..1592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 29,
        span: 1592..1593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 11,
        span: 1598..1604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 12,
        span: 1604..1605,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 88,
        column: 13,
        span: 1605..1606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 88,
        column: 14,
        span: 1606..1607,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 17,
        span: 1608..1610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 88,
        column: 19,
        span: 1611..1612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 20,
        span: 1612..1613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 89,
        column: 10,
        span: 1618..1623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 11,
        span: 1623..1624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 89,
        column: 12,
        span: 1624..1625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 13,
        span: 1625..1626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fb",
        ),
        line: 89,
        column: 16,
        span: 1627..1629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 17,
        span: 1629..1630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 89,
        column: 18,
        span: 1630..1631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 19,
        span: 1631..1632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 20,
        span: 1632..1633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 89,
        column: 24,
        span: 1634..1637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 25,
        span: 1637..1638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 89,
        column: 26,
        span: 1638..1639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 27,
        span: 1639..1640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 28,
        span: 1640..1641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 90,
        column: 6,
        span: 1646..1647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 90,
        column: 8,
        span: 1648..1649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 90,
        column: 15,
        span: 1650..1656,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 90,
        column: 16,
        span: 1656..1657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 90,
        column: 22,
        span: 1657..1663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 23,
        span: 1663..1664,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%sa%d=%d,'",
        ),
        line: 90,
        column: 34,
        span: 1664..1675,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 35,
        span: 1675..1676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 90,
        column: 37,
        span: 1677..1678,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 38,
        span: 1678..1679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 90,
        column: 40,
        span: 1680..1681,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 41,
        span: 1681..1682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 90,
        column: 43,
        span: 1683..1684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 44,
        span: 1684..1685,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
        column: 0,
        span: 1688..1691,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 92,
        column: 0,
        span: 1692..1695,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 96,
        column: 6,
        span: 1739..1744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 96,
        column: 8,
        span: 1745..1746,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 96,
        column: 10,
        span: 1747..1748,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 96,
        column: 12,
        span: 1749..1750,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 96,
        column: 13,
        span: 1750..1751,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 97,
        column: 4,
        span: 1752..1755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 97,
        column: 6,
        span: 1756..1757,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
        column: 7,
        span: 1757..1758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 8,
        span: 1757..1759,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 9,
        span: 1759..1760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 97,
        column: 12,
        span: 1760..1763,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 97,
        column: 15,
        span: 1764..1766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
        column: 17,
        span: 1767..1768,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 97,
        column: 18,
        span: 1768..1769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 97,
        column: 19,
        span: 1769..1770,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 97,
        column: 20,
        span: 1770..1771,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
        column: 22,
        span: 1772..1773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 97,
        column: 24,
        span: 1774..1775,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 97,
        column: 28,
        span: 1776..1779,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 98,
        column: 4,
        span: 1807..1810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 98,
        column: 6,
        span: 1811..1812,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 98,
        column: 7,
        span: 1812..1813,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 8,
        span: 1812..1814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 9,
        span: 1814..1815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 98,
        column: 12,
        span: 1815..1818,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 98,
        column: 0,
        span: 1819..1821,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 99,
        column: 8,
        span: 1824..1829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 99,
        column: 10,
        span: 1830..1831,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 12,
        span: 1832..1833,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 99,
        column: 14,
        span: 1834..1835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 99,
        column: 19,
        span: 1835..1840,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 20,
        span: 1840..1841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 99,
        column: 26,
        span: 1841..1847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 27,
        span: 1847..1848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 99,
        column: 28,
        span: 1848..1849,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 29,
        span: 1849..1850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 30,
        span: 1849..1851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 31,
        span: 1851..1852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 99,
        column: 32,
        span: 1852..1853,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 33,
        span: 1853..1854,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 99,
        column: 34,
        span: 1854..1855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 100,
        column: 9,
        span: 1858..1864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 10,
        span: 1864..1865,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 100,
        column: 11,
        span: 1865..1866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 100,
        column: 12,
        span: 1866..1867,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
        column: 15,
        span: 1868..1870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 100,
        column: 17,
        span: 1871..1872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 18,
        span: 1872..1873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 101,
        column: 8,
        span: 1876..1881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 9,
        span: 1881..1882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 101,
        column: 10,
        span: 1882..1883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 11,
        span: 1883..1884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 101,
        column: 13,
        span: 1885..1886,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 14,
        span: 1886..1887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 101,
        column: 16,
        span: 1887..1889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 17,
        span: 1889..1890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 102,
        column: 4,
        span: 1893..1894,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
        column: 6,
        span: 1895..1896,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 102,
        column: 8,
        span: 1897..1898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 9,
        span: 1897..1899,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 10,
        span: 1899..1900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 11,
        span: 1899..1901,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 12,
        span: 1901..1902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 13,
        span: 1901..1903,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 14,
        span: 1903..1904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 102,
        column: 19,
        span: 1904..1909,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 102,
        column: 20,
        span: 1909..1910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 102,
        column: 26,
        span: 1910..1916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 27,
        span: 1916..1917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 102,
        column: 28,
        span: 1917..1918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 29,
        span: 1918..1919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 30,
        span: 1918..1920,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 31,
        span: 1920..1921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 102,
        column: 32,
        span: 1921..1922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 33,
        span: 1922..1923,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 102,
        column: 34,
        span: 1923..1924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 103,
        column: 8,
        span: 1927..1932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 9,
        span: 1932..1933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 103,
        column: 10,
        span: 1933..1934,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 11,
        span: 1934..1935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 103,
        column: 13,
        span: 1936..1937,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 103,
        column: 14,
        span: 1937..1938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 15,
        span: 1937..1939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 16,
        span: 1939..1940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 103,
        column: 18,
        span: 1940..1942,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 19,
        span: 1942..1943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 104,
        column: 9,
        span: 1946..1952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 10,
        span: 1952..1953,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 104,
        column: 11,
        span: 1953..1954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
        column: 12,
        span: 1954..1955,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 104,
        column: 15,
        span: 1956..1958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 104,
        column: 17,
        span: 1959..1960,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 104,
        column: 19,
        span: 1961..1962,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 104,
        column: 21,
        span: 1962..1964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 22,
        span: 1964..1965,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 105,
        column: 0,
        span: 1966..1969,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 109,
        column: 6,
        span: 2008..2013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 109,
        column: 10,
        span: 2014..2017,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 109,
        column: 12,
        span: 2018..2019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "130",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 0,
        span: 2019..2023,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 110,
        column: 6,
        span: 2024..2029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 110,
        column: 8,
        span: 2030..2031,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 10,
        span: 2032..2033,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 110,
        column: 12,
        span: 2034..2035,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 110,
        column: 13,
        span: 2035..2036,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 110,
        column: 14,
        span: 2036..2037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 110,
        column: 16,
        span: 2038..2039,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 110,
        column: 17,
        span: 2039..2040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 18,
        span: 2039..2041,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 110,
        column: 19,
        span: 2041..2042,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 21,
        span: 2043..2044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 23,
        span: 2044..2046,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 110,
        column: 24,
        span: 2046..2047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 110,
        column: 30,
        span: 2048..2053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 31,
        span: 2053..2054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 110,
        column: 32,
        span: 2054..2055,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 33,
        span: 2055..2056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 35,
        span: 2056..2058,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 36,
        span: 2058..2059,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 38,
        span: 2059..2061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 39,
        span: 2061..2062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 2,
        span: 2063..2064,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 4,
        span: 2065..2066,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 111,
        column: 6,
        span: 2067..2068,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 111,
        column: 7,
        span: 2068..2069,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 111,
        column: 8,
        span: 2069..2070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 10,
        span: 2071..2072,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 111,
        column: 11,
        span: 2072..2073,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 12,
        span: 2072..2074,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 111,
        column: 13,
        span: 2074..2075,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 15,
        span: 2076..2077,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 17,
        span: 2077..2079,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 111,
        column: 18,
        span: 2079..2080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 111,
        column: 24,
        span: 2081..2086,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 25,
        span: 2086..2087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 26,
        span: 2087..2088,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 27,
        span: 2088..2089,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 29,
        span: 2089..2091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 30,
        span: 2091..2092,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 32,
        span: 2092..2094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 33,
        span: 2094..2095,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 111,
        column: 34,
        span: 2095..2096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 36,
        span: 2097..2098,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 111,
        column: 37,
        span: 2098..2099,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 38,
        span: 2098..2100,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 111,
        column: 39,
        span: 2100..2101,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 41,
        span: 2102..2103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 43,
        span: 2103..2105,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 111,
        column: 44,
        span: 2105..2106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 111,
        column: 50,
        span: 2107..2112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 51,
        span: 2112..2113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 52,
        span: 2113..2114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 53,
        span: 2114..2115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 55,
        span: 2115..2117,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 56,
        span: 2117..2118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 58,
        span: 2118..2120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 59,
        span: 2120..2121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 112,
        column: 2,
        span: 2122..2123,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 112,
        column: 4,
        span: 2124..2125,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 112,
        column: 6,
        span: 2126..2127,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 112,
        column: 7,
        span: 2127..2128,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 112,
        column: 8,
        span: 2128..2129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 112,
        column: 10,
        span: 2130..2131,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 112,
        column: 11,
        span: 2131..2132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 12,
        span: 2131..2133,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 112,
        column: 13,
        span: 2133..2134,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 112,
        column: 15,
        span: 2135..2136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 17,
        span: 2136..2138,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 112,
        column: 18,
        span: 2138..2139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 112,
        column: 20,
        span: 2140..2141,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 112,
        column: 21,
        span: 2141..2142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 22,
        span: 2141..2143,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 112,
        column: 23,
        span: 2143..2144,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 112,
        column: 25,
        span: 2145..2146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 27,
        span: 2146..2148,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 112,
        column: 28,
        span: 2148..2149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 112,
        column: 34,
        span: 2150..2155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 35,
        span: 2155..2156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 112,
        column: 36,
        span: 2156..2157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 37,
        span: 2157..2158,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 39,
        span: 2158..2160,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 40,
        span: 2160..2161,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 42,
        span: 2161..2163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 43,
        span: 2163..2164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 113,
        column: 2,
        span: 2165..2166,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 113,
        column: 4,
        span: 2167..2168,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 113,
        column: 6,
        span: 2169..2170,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 113,
        column: 7,
        span: 2170..2171,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 114,
        column: 4,
        span: 2172..2175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 114,
        column: 6,
        span: 2176..2177,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 114,
        column: 8,
        span: 2178..2179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 10,
        span: 2179..2181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 11,
        span: 2181..2182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 114,
        column: 14,
        span: 2182..2185,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 114,
        column: 0,
        span: 2186..2188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 4,
        span: 2191..2192,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 115,
        column: 5,
        span: 2192..2193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 115,
        column: 6,
        span: 2193..2194,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 115,
        column: 7,
        span: 2194..2195,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 115,
        column: 9,
        span: 2196..2197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 0,
        span: 2197..2199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 116,
        column: 9,
        span: 2202..2208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 10,
        span: 2208..2209,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 116,
        column: 11,
        span: 2209..2210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
        column: 12,
        span: 2210..2211,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 116,
        column: 15,
        span: 2212..2214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 116,
        column: 17,
        span: 2215..2216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 18,
        span: 2216..2217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 117,
        column: 8,
        span: 2220..2225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 9,
        span: 2225..2226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 10,
        span: 2226..2227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 11,
        span: 2227..2228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 117,
        column: 15,
        span: 2229..2232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 16,
        span: 2232..2233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 117,
        column: 17,
        span: 2233..2234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 18,
        span: 2234..2235,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 19,
        span: 2235..2236,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 21,
        span: 2236..2238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 22,
        span: 2238..2239,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 118,
        column: 0,
        span: 2240..2243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 2,
        span: 2245..2246,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 4,
        span: 2247..2248,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 120,
        column: 6,
        span: 2249..2250,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 120,
        column: 7,
        span: 2250..2251,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 121,
        column: 4,
        span: 2252..2255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 121,
        column: 6,
        span: 2256..2257,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 121,
        column: 8,
        span: 2258..2259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 10,
        span: 2259..2261,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 11,
        span: 2261..2262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 121,
        column: 14,
        span: 2262..2265,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 121,
        column: 0,
        span: 2266..2268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 122,
        column: 4,
        span: 2271..2272,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
        column: 5,
        span: 2272..2273,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 122,
        column: 8,
        span: 2273..2276,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 122,
        column: 10,
        span: 2276..2278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 122,
        column: 11,
        span: 2278..2279,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
        column: 12,
        span: 2279..2280,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 122,
        column: 14,
        span: 2281..2282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 0,
        span: 2282..2284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 123,
        column: 9,
        span: 2287..2293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 10,
        span: 2293..2294,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 123,
        column: 11,
        span: 2294..2295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 123,
        column: 12,
        span: 2295..2296,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 123,
        column: 15,
        span: 2297..2299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 17,
        span: 2299..2301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 18,
        span: 2301..2302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 124,
        column: 8,
        span: 2305..2310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 9,
        span: 2310..2311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 124,
        column: 10,
        span: 2311..2312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 11,
        span: 2312..2313,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 13,
        span: 2313..2315,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 14,
        span: 2315..2316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 124,
        column: 18,
        span: 2317..2320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 19,
        span: 2320..2321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 124,
        column: 20,
        span: 2321..2322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 21,
        span: 2322..2323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 22,
        span: 2323..2324,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 125,
        column: 0,
        span: 2325..2328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 127,
        column: 2,
        span: 2330..2331,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 127,
        column: 4,
        span: 2332..2333,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 127,
        column: 6,
        span: 2334..2335,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 127,
        column: 7,
        span: 2335..2336,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 128,
        column: 4,
        span: 2337..2340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 128,
        column: 6,
        span: 2341..2342,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 7,
        span: 2342..2343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 8,
        span: 2342..2344,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 9,
        span: 2344..2345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 11,
        span: 2344..2347,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 128,
        column: 14,
        span: 2348..2350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 128,
        column: 16,
        span: 2351..2352,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 128,
        column: 17,
        span: 2352..2353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 128,
        column: 18,
        span: 2353..2354,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 128,
        column: 19,
        span: 2354..2355,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 21,
        span: 2356..2357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 128,
        column: 23,
        span: 2358..2359,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 128,
        column: 0,
        span: 2360..2363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 129,
        column: 6,
        span: 2364..2369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 7,
        span: 2369..2370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 129,
        column: 8,
        span: 2370..2371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 9,
        span: 2371..2372,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 12,
        span: 2372..2375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 13,
        span: 2375..2376,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 15,
        span: 2376..2378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 16,
        span: 2378..2379,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 130,
        column: 3,
        span: 2380..2382,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 130,
        column: 7,
        span: 2383..2386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 130,
        column: 13,
        span: 2387..2392,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 130,
        column: 0,
        span: 2393..2397,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 131,
        column: 6,
        span: 2400..2403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 131,
        column: 8,
        span: 2404..2405,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 131,
        column: 9,
        span: 2405..2406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
        column: 10,
        span: 2405..2407,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 11,
        span: 2407..2408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
        column: 13,
        span: 2407..2410,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 131,
        column: 16,
        span: 2411..2413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
        column: 18,
        span: 2414..2415,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 131,
        column: 19,
        span: 2415..2416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 131,
        column: 20,
        span: 2416..2417,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 131,
        column: 21,
        span: 2417..2418,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 131,
        column: 23,
        span: 2419..2420,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 131,
        column: 27,
        span: 2421..2424,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 131,
        column: 0,
        span: 2425..2428,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 132,
        column: 6,
        span: 2431..2434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 132,
        column: 8,
        span: 2435..2436,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 9,
        span: 2436..2437,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 11,
        span: 2436..2439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 12,
        span: 2439..2440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 14,
        span: 2439..2442,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 132,
        column: 17,
        span: 2443..2445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 132,
        column: 19,
        span: 2446..2447,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 132,
        column: 20,
        span: 2447..2448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 132,
        column: 21,
        span: 2448..2449,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 132,
        column: 22,
        span: 2449..2450,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 24,
        span: 2451..2452,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 132,
        column: 28,
        span: 2453..2456,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
        column: 32,
        span: 2457..2460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 133,
        column: 8,
        span: 2487..2492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 9,
        span: 2492..2493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 133,
        column: 10,
        span: 2493..2494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 11,
        span: 2494..2495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
        column: 13,
        span: 2495..2497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 14,
        span: 2497..2498,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
        column: 16,
        span: 2498..2500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 17,
        span: 2500..2501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
        column: 4,
        span: 2538..2539,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 134,
        column: 5,
        span: 2539..2540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 7,
        span: 2539..2542,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 134,
        column: 8,
        span: 2542..2543,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 134,
        column: 10,
        span: 2544..2545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 0,
        span: 2545..2547,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 135,
        column: 6,
        span: 2550..2553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 135,
        column: 8,
        span: 2554..2555,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 135,
        column: 9,
        span: 2555..2556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
        column: 11,
        span: 2555..2558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 12,
        span: 2558..2559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
        column: 14,
        span: 2558..2561,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 135,
        column: 17,
        span: 2562..2564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 135,
        column: 19,
        span: 2565..2566,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 135,
        column: 20,
        span: 2566..2567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 135,
        column: 21,
        span: 2567..2568,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 135,
        column: 22,
        span: 2568..2569,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 135,
        column: 24,
        span: 2570..2571,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 135,
        column: 28,
        span: 2572..2575,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 135,
        column: 32,
        span: 2576..2579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 136,
        column: 8,
        span: 2606..2611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 9,
        span: 2611..2612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 136,
        column: 10,
        span: 2612..2613,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 11,
        span: 2613..2614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 13,
        span: 2614..2616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 14,
        span: 2616..2617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 16,
        span: 2617..2619,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 17,
        span: 2619..2620,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 137,
        column: 6,
        span: 2657..2660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 137,
        column: 8,
        span: 2661..2662,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 9,
        span: 2662..2663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 10,
        span: 2662..2664,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 11,
        span: 2664..2665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 13,
        span: 2664..2667,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 137,
        column: 16,
        span: 2668..2670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 137,
        column: 18,
        span: 2671..2672,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 137,
        column: 19,
        span: 2672..2673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 137,
        column: 20,
        span: 2673..2674,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 137,
        column: 21,
        span: 2674..2675,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 23,
        span: 2676..2677,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 137,
        column: 27,
        span: 2678..2681,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 137,
        column: 0,
        span: 2682..2685,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 138,
        column: 6,
        span: 2688..2691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 138,
        column: 8,
        span: 2692..2693,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 9,
        span: 2693..2694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "18",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 11,
        span: 2693..2696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 12,
        span: 2696..2697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 14,
        span: 2696..2699,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 138,
        column: 17,
        span: 2700..2702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 138,
        column: 19,
        span: 2703..2704,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 138,
        column: 20,
        span: 2704..2705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 138,
        column: 21,
        span: 2705..2706,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 138,
        column: 22,
        span: 2706..2707,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 24,
        span: 2708..2709,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 138,
        column: 28,
        span: 2710..2713,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 138,
        column: 32,
        span: 2714..2717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 139,
        column: 8,
        span: 2744..2749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 9,
        span: 2749..2750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 139,
        column: 10,
        span: 2750..2751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 11,
        span: 2751..2752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 13,
        span: 2752..2754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 14,
        span: 2754..2755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 16,
        span: 2755..2757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 17,
        span: 2757..2758,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 140,
        column: 0,
        span: 2796..2799,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 143,
        column: 4,
        span: 2820..2823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 143,
        column: 6,
        span: 2824..2825,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 143,
        column: 7,
        span: 2825..2826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 8,
        span: 2825..2827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 9,
        span: 2827..2828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 143,
        column: 12,
        span: 2828..2831,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 143,
        column: 0,
        span: 2832..2834,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 144,
        column: 8,
        span: 2837..2842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 144,
        column: 10,
        span: 2843..2844,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 144,
        column: 12,
        span: 2845..2846,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 144,
        column: 14,
        span: 2847..2848,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 144,
        column: 15,
        span: 2848..2849,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 145,
        column: 6,
        span: 2852..2855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 145,
        column: 8,
        span: 2856..2857,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 9,
        span: 2857..2858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 145,
        column: 10,
        span: 2858..2859,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 11,
        span: 2859..2860,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 12,
        span: 2859..2861,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 13,
        span: 2861..2862,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 145,
        column: 14,
        span: 2862..2863,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 15,
        span: 2862..2864,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 145,
        column: 18,
        span: 2865..2867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 145,
        column: 20,
        span: 2868..2869,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 145,
        column: 21,
        span: 2869..2870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 145,
        column: 22,
        span: 2870..2871,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 145,
        column: 23,
        span: 2871..2872,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 25,
        span: 2873..2874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 145,
        column: 27,
        span: 2875..2876,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 145,
        column: 31,
        span: 2877..2880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 146,
        column: 8,
        span: 2904..2909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 9,
        span: 2909..2910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 146,
        column: 10,
        span: 2910..2911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 11,
        span: 2911..2912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 146,
        column: 15,
        span: 2913..2916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 16,
        span: 2916..2917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 146,
        column: 17,
        span: 2917..2918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 18,
        span: 2918..2919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 19,
        span: 2919..2920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 21,
        span: 2920..2922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 22,
        span: 2922..2923,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 147,
        column: 0,
        span: 2924..2927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 150,
        column: 4,
        span: 2954..2957,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 150,
        column: 6,
        span: 2958..2959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 0,
        span: 2959..2962,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 151,
        column: 9,
        span: 2963..2971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 151,
        column: 13,
        span: 2972..2975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 15,
        span: 2976..2977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 151,
        column: 16,
        span: 2977..2978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 17,
        span: 2978..2979,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 151,
        column: 21,
        span: 2980..2983,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 22,
        span: 2983..2984,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 152,
        column: 8,
        span: 2987..2992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 152,
        column: 12,
        span: 2993..2996,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 152,
        column: 14,
        span: 2997..2998,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 152,
        column: 16,
        span: 2999..3000,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 152,
        column: 19,
        span: 3000..3003,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 152,
        column: 20,
        span: 3003..3004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 153,
        column: 8,
        span: 3007..3012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 9,
        span: 3012..3013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 153,
        column: 12,
        span: 3013..3016,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 13,
        span: 3016..3017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 153,
        column: 15,
        span: 3018..3019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 16,
        span: 3019..3020,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 18,
        span: 3020..3022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 19,
        span: 3022..3023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 9,
        span: 3026..3032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 10,
        span: 3032..3033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 154,
        column: 16,
        span: 3033..3039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 17,
        span: 3039..3040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 154,
        column: 20,
        span: 3040..3043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 21,
        span: 3043..3044,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 154,
        column: 25,
        span: 3045..3048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 26,
        span: 3048..3049,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 29,
        span: 3050..3052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 154,
        column: 31,
        span: 3053..3054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 32,
        span: 3054..3055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 155,
        column: 6,
        span: 3058..3061,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 155,
        column: 7,
        span: 3061..3062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 155,
        column: 8,
        span: 3062..3063,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 155,
        column: 9,
        span: 3063..3064,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 10,
        span: 3063..3065,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 155,
        column: 11,
        span: 3065..3066,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 155,
        column: 13,
        span: 3067..3068,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 155,
        column: 0,
        span: 3069..3073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 156,
        column: 8,
        span: 3076..3081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 9,
        span: 3081..3082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 156,
        column: 12,
        span: 3082..3085,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 13,
        span: 3085..3086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 156,
        column: 17,
        span: 3087..3090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 18,
        span: 3090..3091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 156,
        column: 19,
        span: 3091..3092,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 156,
        column: 20,
        span: 3092..3093,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 21,
        span: 3092..3094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 22,
        span: 3094..3095,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 156,
        column: 23,
        span: 3095..3096,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 25,
        span: 3096..3098,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 26,
        span: 3098..3099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 157,
        column: 6,
        span: 3102..3105,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 157,
        column: 7,
        span: 3105..3106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 157,
        column: 8,
        span: 3106..3107,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 157,
        column: 10,
        span: 3108..3109,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 157,
        column: 0,
        span: 3110..3114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 158,
        column: 8,
        span: 3117..3122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 9,
        span: 3122..3123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 158,
        column: 12,
        span: 3123..3126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 13,
        span: 3126..3127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mp2",
        ),
        line: 158,
        column: 17,
        span: 3128..3131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 18,
        span: 3131..3132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 158,
        column: 19,
        span: 3132..3133,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 158,
        column: 20,
        span: 3133..3134,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 21,
        span: 3133..3135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 22,
        span: 3135..3136,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 23,
        span: 3136..3137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 158,
        column: 25,
        span: 3137..3139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 26,
        span: 3139..3140,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 159,
        column: 0,
        span: 3141..3144,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 160,
        column: 6,
        span: 3145..3150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 160,
        column: 8,
        span: 3151..3152,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 160,
        column: 10,
        span: 3153..3154,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 160,
        column: 12,
        span: 3155..3156,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 160,
        column: 13,
        span: 3156..3157,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 161,
        column: 4,
        span: 3158..3161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 161,
        column: 6,
        span: 3162..3163,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 7,
        span: 3163..3164,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 8,
        span: 3163..3165,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 9,
        span: 3165..3166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        line: 161,
        column: 12,
        span: 3166..3169,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 161,
        column: 15,
        span: 3170..3172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 161,
        column: 17,
        span: 3173..3174,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 161,
        column: 18,
        span: 3174..3175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 161,
        column: 19,
        span: 3175..3176,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 161,
        column: 20,
        span: 3176..3177,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 22,
        span: 3178..3179,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 161,
        column: 27,
        span: 3180..3184,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 161,
        column: 28,
        span: 3184..3185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 161,
        column: 32,
        span: 3186..3189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 33,
        span: 3189..3190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 161,
        column: 34,
        span: 3190..3191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 35,
        span: 3191..3192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 161,
        column: 41,
        span: 3193..3198,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 161,
        column: 42,
        span: 3198..3199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 161,
        column: 48,
        span: 3199..3205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 49,
        span: 3205..3206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 161,
        column: 50,
        span: 3206..3207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 51,
        span: 3207..3208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 52,
        span: 3208..3209,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 161,
        column: 0,
        span: 3210..3213,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 163,
        column: 4,
        span: 3215..3218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
        column: 7,
        span: 3265..3271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 8,
        span: 3271..3272,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 167,
        column: 9,
        span: 3272..3273,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 167,
        column: 10,
        span: 3273..3274,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 167,
        column: 11,
        span: 3274..3275,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 167,
        column: 14,
        span: 3276..3278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 16,
        span: 3278..3280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 17,
        span: 3280..3281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
        column: 7,
        span: 3282..3288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 8,
        span: 3288..3289,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 168,
        column: 9,
        span: 3289..3290,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 168,
        column: 10,
        span: 3290..3291,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 168,
        column: 13,
        span: 3291..3294,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 168,
        column: 14,
        span: 3294..3295,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 168,
        column: 17,
        span: 3296..3298,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 19,
        span: 3298..3300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 20,
        span: 3300..3301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 7,
        span: 3302..3308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 8,
        span: 3308..3309,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 169,
        column: 9,
        span: 3309..3310,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 169,
        column: 10,
        span: 3310..3311,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 169,
        column: 13,
        span: 3311..3314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 14,
        span: 3314..3315,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 169,
        column: 18,
        span: 3316..3319,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 169,
        column: 19,
        span: 3319..3320,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 22,
        span: 3321..3323,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 24,
        span: 3323..3325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 25,
        span: 3325..3326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
        column: 7,
        span: 3327..3333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 8,
        span: 3333..3334,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 170,
        column: 9,
        span: 3334..3335,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 170,
        column: 10,
        span: 3335..3336,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 170,
        column: 13,
        span: 3336..3339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 14,
        span: 3339..3340,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 170,
        column: 18,
        span: 3341..3344,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 19,
        span: 3344..3345,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 170,
        column: 23,
        span: 3346..3349,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 170,
        column: 24,
        span: 3349..3350,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
        column: 27,
        span: 3351..3353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 29,
        span: 3353..3355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 30,
        span: 3355..3356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 7,
        span: 3357..3363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 8,
        span: 3363..3364,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 171,
        column: 9,
        span: 3364..3365,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 171,
        column: 10,
        span: 3365..3366,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 171,
        column: 13,
        span: 3366..3369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 14,
        span: 3369..3370,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 171,
        column: 18,
        span: 3371..3374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 19,
        span: 3374..3375,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 171,
        column: 23,
        span: 3376..3379,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 24,
        span: 3379..3380,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 171,
        column: 28,
        span: 3381..3384,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 171,
        column: 29,
        span: 3384..3385,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
        column: 32,
        span: 3386..3388,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 34,
        span: 3388..3390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 35,
        span: 3390..3391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 172,
        column: 6,
        span: 3392..3397,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 172,
        column: 9,
        span: 3397..3400,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 175,
        column: 6,
        span: 3403..3408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        line: 175,
        column: 13,
        span: 3409..3415,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 175,
        column: 15,
        span: 3416..3417,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 175,
        column: 17,
        span: 3418..3419,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 175,
        column: 18,
        span: 3419..3420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 177,
        column: 2,
        span: 3422..3423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 3,
        span: 3423..3424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 177,
        column: 4,
        span: 3424..3425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 5,
        span: 3425..3426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 177,
        column: 6,
        span: 3426..3427,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 177,
        column: 8,
        span: 3428..3429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 10,
        span: 3429..3431,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 11,
        span: 3431..3432,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 12,
        span: 3431..3433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 13,
        span: 3433..3434,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 0,
        span: 3433..3435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 178,
        column: 2,
        span: 3436..3437,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 3,
        span: 3437..3438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 178,
        column: 4,
        span: 3438..3439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 5,
        span: 3439..3440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 178,
        column: 6,
        span: 3440..3441,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 8,
        span: 3442..3443,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 178,
        column: 0,
        span: 3444..3447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 182,
        column: 7,
        span: 3499..3505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 8,
        span: 3505..3506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 182,
        column: 12,
        span: 3506..3510,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 182,
        column: 13,
        span: 3510..3511,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 182,
        column: 14,
        span: 3511..3512,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 182,
        column: 17,
        span: 3513..3515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 182,
        column: 22,
        span: 3516..3520,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 182,
        column: 23,
        span: 3520..3521,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 182,
        column: 24,
        span: 3521..3522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 25,
        span: 3522..3523,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 184,
        column: 6,
        span: 3525..3530,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 184,
        column: 15,
        span: 3531..3539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 184,
        column: 20,
        span: 3540..3544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 22,
        span: 3545..3546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 184,
        column: 26,
        span: 3546..3550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 27,
        span: 3550..3551,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 185,
        column: 8,
        span: 3554..3559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 185,
        column: 10,
        span: 3560..3561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 11,
        span: 3561..3562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 185,
        column: 0,
        span: 3562..3563,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 186,
        column: 8,
        span: 3566..3571,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 10,
        span: 3571..3573,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 186,
        column: 0,
        span: 3574..3576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 187,
        column: 6,
        span: 3581..3582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 7,
        span: 3582..3583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 187,
        column: 8,
        span: 3583..3584,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 187,
        column: 10,
        span: 3585..3586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 187,
        column: 15,
        span: 3587..3591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 16,
        span: 3591..3592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 187,
        column: 18,
        span: 3592..3594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 19,
        span: 3594..3595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 187,
        column: 21,
        span: 3596..3597,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 22,
        span: 3597..3598,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 188,
        column: 7,
        span: 3603..3605,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 188,
        column: 11,
        span: 3606..3609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 188,
        column: 13,
        span: 3610..3611,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 188,
        column: 18,
        span: 3612..3616,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 188,
        column: 25,
        span: 3617..3623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        line: 188,
        column: 32,
        span: 3624..3630,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 188,
        column: 0,
        span: 3631..3634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 189,
        column: 11,
        span: 3639..3645,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 12,
        span: 3645..3646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 189,
        column: 13,
        span: 3646..3647,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 189,
        column: 16,
        span: 3648..3650,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 189,
        column: 20,
        span: 3651..3654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 21,
        span: 3654..3655,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 190,
        column: 7,
        span: 3660..3662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 190,
        column: 9,
        span: 3663..3664,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
        column: 12,
        span: 3665..3667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 190,
        column: 17,
        span: 3668..3672,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 190,
        column: 22,
        span: 3673..3677,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 190,
        column: 29,
        span: 3678..3684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 190,
        column: 31,
        span: 3685..3686,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 190,
        column: 0,
        span: 3687..3690,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 191,
        column: 0,
        span: 3693..3696,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 192,
        column: 0,
        span: 3697..3700,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 194,
        column: 6,
        span: 3702..3707,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 194,
        column: 15,
        span: 3708..3716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        line: 194,
        column: 21,
        span: 3717..3722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 23,
        span: 3723..3724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 194,
        column: 27,
        span: 3724..3728,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 28,
        span: 3728..3729,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 195,
        column: 6,
        span: 3732..3735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 195,
        column: 8,
        span: 3736..3737,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 9,
        span: 3737..3738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 195,
        column: 10,
        span: 3738..3739,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 195,
        column: 13,
        span: 3740..3742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 195,
        column: 19,
        span: 3743..3748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 20,
        span: 3748..3749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 195,
        column: 22,
        span: 3749..3751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 23,
        span: 3751..3752,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 195,
        column: 0,
        span: 3753..3755,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 196,
        column: 7,
        span: 3760..3762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 196,
        column: 9,
        span: 3763..3764,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 11,
        span: 3764..3766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 196,
        column: 15,
        span: 3766..3770,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 196,
        column: 20,
        span: 3771..3775,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 196,
        column: 27,
        span: 3776..3782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 196,
        column: 29,
        span: 3783..3784,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 196,
        column: 0,
        span: 3785..3788,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 197,
        column: 0,
        span: 3791..3794,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 198,
        column: 9,
        span: 3797..3803,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 198,
        column: 13,
        span: 3804..3807,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 199,
        column: 0,
        span: 3822..3825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
        column: 7,
        span: 3828..3834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 8,
        span: 3834..3835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 202,
        column: 13,
        span: 3835..3840,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 202,
        column: 15,
        span: 3840..3842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 202,
        column: 19,
        span: 3842..3846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 20,
        span: 3846..3847,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        line: 202,
        column: 27,
        span: 3847..3854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 28,
        span: 3854..3855,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 202,
        column: 32,
        span: 3856..3859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 202,
        column: 38,
        span: 3860..3865,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 202,
        column: 41,
        span: 3866..3868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        line: 202,
        column: 47,
        span: 3869..3874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 48,
        span: 3874..3875,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        line: 202,
        column: 55,
        span: 3875..3882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 56,
        span: 3882..3883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 57,
        span: 3883..3884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 7,
        span: 3885..3891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 8,
        span: 3891..3892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 203,
        column: 10,
        span: 3892..3894,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 203,
        column: 11,
        span: 3894..3895,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        line: 203,
        column: 18,
        span: 3895..3902,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 203,
        column: 19,
        span: 3902..3903,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 203,
        column: 21,
        span: 3903..3905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 203,
        column: 25,
        span: 3905..3909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 26,
        span: 3909..3910,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print\"",
        ),
        line: 203,
        column: 33,
        span: 3910..3917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 34,
        span: 3917..3918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 35,
        span: 3918..3919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 7,
        span: 3920..3926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 8,
        span: 3926..3927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 14,
        span: 3927..3933,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 16,
        span: 3933..3935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        line: 204,
        column: 21,
        span: 3935..3940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 22,
        span: 3940..3941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert\"",
        ),
        line: 204,
        column: 30,
        span: 3941..3949,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 31,
        span: 3949..3950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 32,
        span: 3950..3951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 7,
        span: 3952..3958,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 8,
        span: 3958..3959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        line: 205,
        column: 14,
        span: 3959..3965,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 205,
        column: 16,
        span: 3965..3967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 205,
        column: 20,
        span: 3967..3971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 21,
        span: 3971..3972,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 205,
        column: 29,
        span: 3972..3980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 30,
        span: 3980..3981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 31,
        span: 3981..3982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
        column: 7,
        span: 3983..3989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 8,
        span: 3989..3990,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 206,
        column: 11,
        span: 3990..3993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find1",
        ),
        line: 206,
        column: 17,
        span: 3994..3999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 18,
        span: 3999..4000,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 206,
        column: 26,
        span: 4000..4008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 27,
        span: 4008..4009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 28,
        span: 4009..4010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 207,
        column: 3,
        span: 4011..4013,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 207,
        column: 4,
        span: 4013..4014,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ret\"",
        ),
        line: 207,
        column: 9,
        span: 4014..4019,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 207,
        column: 12,
        span: 4020..4022,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"urn\"",
        ),
        line: 207,
        column: 18,
        span: 4023..4028,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 207,
        column: 19,
        span: 4028..4029,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 207,
        column: 21,
        span: 4030..4031,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 207,
        column: 0,
        span: 4032..4035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 7,
        span: 4036..4042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 8,
        span: 4042..4043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nofind",
        ),
        line: 208,
        column: 14,
        span: 4043..4049,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 208,
        column: 16,
        span: 4049..4051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 208,
        column: 20,
        span: 4051..4055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 21,
        span: 4055..4056,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return\"",
        ),
        line: 208,
        column: 29,
        span: 4056..4064,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 30,
        span: 4064..4065,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 31,
        span: 4065..4066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 209,
        column: 3,
        span: 4067..4069,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 209,
        column: 4,
        span: 4069..4070,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        line: 209,
        column: 9,
        span: 4070..4075,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 209,
        column: 10,
        span: 4075..4076,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 209,
        column: 12,
        span: 4077..4078,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 0,
        span: 4078..4080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 210,
        column: 7,
        span: 4081..4087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 8,
        span: 4087..4088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xxx",
        ),
        line: 210,
        column: 11,
        span: 4088..4091,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 210,
        column: 13,
        span: 4091..4093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 210,
        column: 17,
        span: 4093..4097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 18,
        span: 4097..4098,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        line: 210,
        column: 23,
        span: 4098..4103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 24,
        span: 4103..4104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 25,
        span: 4104..4105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 212,
        column: 6,
        span: 4107..4112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 7,
        span: 4112..4113,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 212,
        column: 10,
        span: 4113..4116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 11,
        span: 4116..4117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 214,
        column: 2,
        span: 4119..4120,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 214,
        column: 4,
        span: 4121..4122,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 214,
        column: 6,
        span: 4123..4124,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 214,
        column: 7,
        span: 4124..4125,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 215,
        column: 4,
        span: 4126..4129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 215,
        column: 6,
        span: 4130..4131,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 215,
        column: 7,
        span: 4131..4132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 8,
        span: 4131..4133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 9,
        span: 4133..4134,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
        column: 14,
        span: 4133..4139,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 215,
        column: 0,
        span: 4140..4142,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 216,
        column: 5,
        span: 4145..4147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 216,
        column: 10,
        span: 4148..4152,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 216,
        column: 11,
        span: 4152..4153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 216,
        column: 15,
        span: 4153..4157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 16,
        span: 4157..4158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 216,
        column: 17,
        span: 4158..4159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 18,
        span: 4159..4160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 20,
        span: 4159..4162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 21,
        span: 4162..4163,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 216,
        column: 24,
        span: 4164..4166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 26,
        span: 4166..4168,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 216,
        column: 0,
        span: 4169..4173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 217,
        column: 6,
        span: 4178..4179,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 217,
        column: 7,
        span: 4179..4180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 217,
        column: 10,
        span: 4180..4183,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 217,
        column: 12,
        span: 4183..4185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 217,
        column: 13,
        span: 4185..4186,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 217,
        column: 14,
        span: 4186..4187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 217,
        column: 16,
        span: 4188..4189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 217,
        column: 0,
        span: 4190..4191,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 218,
        column: 0,
        span: 4194..4197,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 219,
        column: 0,
        span: 4198..4201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 221,
        column: 2,
        span: 4203..4204,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 221,
        column: 4,
        span: 4205..4206,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 221,
        column: 6,
        span: 4207..4208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 221,
        column: 7,
        span: 4208..4209,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 221,
        column: 8,
        span: 4209..4210,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 221,
        column: 9,
        span: 4209..4211,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 221,
        column: 10,
        span: 4211..4212,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 222,
        column: 4,
        span: 4213..4216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 222,
        column: 6,
        span: 4217..4218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 7,
        span: 4218..4219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 222,
        column: 8,
        span: 4219..4220,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 222,
        column: 11,
        span: 4221..4223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 222,
        column: 17,
        span: 4224..4229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 18,
        span: 4229..4230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 222,
        column: 19,
        span: 4230..4231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 20,
        span: 4231..4232,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 222,
        column: 0,
        span: 4233..4235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 223,
        column: 4,
        span: 4238..4239,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 223,
        column: 5,
        span: 4239..4240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 223,
        column: 6,
        span: 4240..4241,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 8,
        span: 4242..4243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 223,
        column: 10,
        span: 4244..4245,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 223,
        column: 11,
        span: 4245..4246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 223,
        column: 12,
        span: 4246..4247,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 223,
        column: 13,
        span: 4247..4248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 0,
        span: 4247..4249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 224,
        column: 9,
        span: 4252..4258,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 10,
        span: 4258..4259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 224,
        column: 11,
        span: 4259..4260,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 224,
        column: 15,
        span: 4261..4264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 224,
        column: 17,
        span: 4265..4266,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 224,
        column: 21,
        span: 4267..4270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 224,
        column: 23,
        span: 4271..4272,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 224,
        column: 24,
        span: 4272..4273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 224,
        column: 25,
        span: 4273..4274,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 224,
        column: 26,
        span: 4274..4275,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 224,
        column: 29,
        span: 4276..4278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 224,
        column: 31,
        span: 4279..4280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 32,
        span: 4280..4281,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 225,
        column: 0,
        span: 4282..4285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 226,
        column: 7,
        span: 4286..4292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 8,
        span: 4292..4293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 226,
        column: 9,
        span: 4293..4294,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 226,
        column: 10,
        span: 4294..4295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 226,
        column: 11,
        span: 4295..4296,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 14,
        span: 4297..4299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9000",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 19,
        span: 4299..4304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 20,
        span: 4304..4305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 227,
        column: 2,
        span: 4306..4307,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 227,
        column: 4,
        span: 4308..4309,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 227,
        column: 0,
        span: 4310..4313,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 229,
        column: 3,
        span: 4315..4317,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 230,
        column: 8,
        span: 4344..4349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 230,
        column: 10,
        span: 4350..4351,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
        column: 12,
        span: 4352..4353,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 230,
        column: 14,
        span: 4354..4355,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 230,
        column: 15,
        span: 4355..4356,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 231,
        column: 6,
        span: 4359..4362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 231,
        column: 8,
        span: 4363..4364,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
        column: 9,
        span: 4364..4365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 231,
        column: 10,
        span: 4365..4366,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 231,
        column: 13,
        span: 4367..4369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 231,
        column: 19,
        span: 4370..4375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 20,
        span: 4375..4376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 231,
        column: 22,
        span: 4376..4378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 23,
        span: 4378..4379,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 231,
        column: 26,
        span: 4380..4382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 231,
        column: 28,
        span: 4383..4384,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 231,
        column: 29,
        span: 4384..4385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 231,
        column: 30,
        span: 4385..4386,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 231,
        column: 31,
        span: 4386..4387,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 231,
        column: 32,
        span: 4387..4388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 231,
        column: 33,
        span: 4388..4389,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 231,
        column: 0,
        span: 4390..4393,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 232,
        column: 6,
        span: 4396..4399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 232,
        column: 8,
        span: 4400..4401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 9,
        span: 4401..4402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 232,
        column: 10,
        span: 4402..4403,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 232,
        column: 13,
        span: 4404..4406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 232,
        column: 19,
        span: 4407..4412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 20,
        span: 4412..4413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 232,
        column: 21,
        span: 4413..4414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 22,
        span: 4414..4415,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 232,
        column: 0,
        span: 4416..4418,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 233,
        column: 7,
        span: 4423..4425,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 233,
        column: 11,
        span: 4426..4429,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 233,
        column: 19,
        span: 4430..4437,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 233,
        column: 20,
        span: 4437..4438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 233,
        column: 26,
        span: 4438..4444,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 233,
        column: 27,
        span: 4444..4445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 233,
        column: 28,
        span: 4445..4446,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 233,
        column: 29,
        span: 4446..4447,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 233,
        column: 33,
        span: 4448..4451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 233,
        column: 38,
        span: 4452..4456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 39,
        span: 4456..4457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 233,
        column: 40,
        span: 4457..4458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 41,
        span: 4458..4459,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 233,
        column: 44,
        span: 4460..4462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        line: 233,
        column: 55,
        span: 4463..4473,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 233,
        column: 0,
        span: 4474..4477,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 234,
        column: 11,
        span: 4485..4488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 234,
        column: 18,
        span: 4489..4495,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 234,
        column: 19,
        span: 4495..4496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 234,
        column: 23,
        span: 4496..4500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 24,
        span: 4500..4501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 234,
        column: 25,
        span: 4501..4502,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 26,
        span: 4502..4503,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^[%u_]\"",
        ),
        line: 234,
        column: 35,
        span: 4504..4512,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 36,
        span: 4512..4513,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 234,
        column: 0,
        span: 4514..4518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 235,
        column: 8,
        span: 4524..4526,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 235,
        column: 9,
        span: 4526..4527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 235,
        column: 10,
        span: 4527..4528,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 235,
        column: 11,
        span: 4528..4529,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 235,
        column: 13,
        span: 4530..4531,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 235,
        column: 0,
        span: 4532..4535,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 236,
        column: 0,
        span: 4540..4543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 237,
        column: 19,
        span: 4548..4562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 20,
        span: 4562..4563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 21,
        span: 4563..4564,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 238,
        column: 0,
        span: 4567..4570,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 239,
        column: 0,
        span: 4571..4574,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 244,
        column: 6,
        span: 4582..4587,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 244,
        column: 15,
        span: 4588..4596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 244,
        column: 25,
        span: 4597..4606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 27,
        span: 4607..4608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 244,
        column: 28,
        span: 4608..4609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 29,
        span: 4609..4610,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 245,
        column: 8,
        span: 4613..4618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 245,
        column: 10,
        span: 4619..4620,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
        column: 12,
        span: 4621..4622,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 245,
        column: 14,
        span: 4623..4624,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 245,
        column: 15,
        span: 4624..4625,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 246,
        column: 5,
        span: 4628..4630,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 246,
        column: 11,
        span: 4631..4636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 246,
        column: 13,
        span: 4637..4638,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 14,
        span: 4638..4639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 246,
        column: 15,
        span: 4639..4640,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 17,
        span: 4641..4642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 246,
        column: 22,
        span: 4643..4647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 23,
        span: 4647..4648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 246,
        column: 24,
        span: 4648..4649,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 25,
        span: 4649..4650,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 246,
        column: 26,
        span: 4650..4651,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 246,
        column: 32,
        span: 4652..4657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 246,
        column: 34,
        span: 4658..4659,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 246,
        column: 37,
        span: 4660..4662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 246,
        column: 39,
        span: 4663..4664,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 246,
        column: 40,
        span: 4664..4665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 246,
        column: 41,
        span: 4665..4666,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 246,
        column: 42,
        span: 4666..4667,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 44,
        span: 4668..4669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 246,
        column: 46,
        span: 4670..4671,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 246,
        column: 47,
        span: 4671..4672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 246,
        column: 49,
        span: 4673..4674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 50,
        span: 4674..4675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 246,
        column: 51,
        span: 4675..4676,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 53,
        span: 4677..4678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 246,
        column: 58,
        span: 4679..4683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 59,
        span: 4683..4684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 246,
        column: 60,
        span: 4684..4685,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 61,
        span: 4685..4686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 246,
        column: 62,
        span: 4686..4687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 63,
        span: 4687..4688,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 246,
        column: 67,
        span: 4689..4692,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 246,
        column: 0,
        span: 4693..4696,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 247,
        column: 6,
        span: 4699..4702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 247,
        column: 8,
        span: 4703..4704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 9,
        span: 4704..4705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 247,
        column: 10,
        span: 4705..4706,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 247,
        column: 13,
        span: 4707..4709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 247,
        column: 19,
        span: 4710..4715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 20,
        span: 4715..4716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 247,
        column: 21,
        span: 4716..4717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 22,
        span: 4717..4718,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 247,
        column: 25,
        span: 4719..4721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
        column: 32,
        span: 4722..4728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 33,
        span: 4728..4729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 247,
        column: 34,
        span: 4729..4730,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 247,
        column: 35,
        span: 4730..4731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 247,
        column: 36,
        span: 4731..4732,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 247,
        column: 37,
        span: 4732..4733,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 247,
        column: 40,
        span: 4734..4736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 247,
        column: 42,
        span: 4737..4738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 43,
        span: 4738..4739,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 247,
        column: 0,
        span: 4740..4743,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 248,
        column: 6,
        span: 4746..4749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 248,
        column: 8,
        span: 4750..4751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 9,
        span: 4751..4752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 248,
        column: 10,
        span: 4752..4753,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 248,
        column: 13,
        span: 4754..4756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 248,
        column: 19,
        span: 4757..4762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 20,
        span: 4762..4763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 248,
        column: 21,
        span: 4763..4764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 22,
        span: 4764..4765,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 248,
        column: 25,
        span: 4766..4768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
        column: 32,
        span: 4769..4775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 33,
        span: 4775..4776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 248,
        column: 34,
        span: 4776..4777,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 248,
        column: 35,
        span: 4777..4778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 248,
        column: 36,
        span: 4778..4779,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 248,
        column: 37,
        span: 4779..4780,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
        column: 40,
        span: 4781..4783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 248,
        column: 42,
        span: 4784..4785,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 43,
        span: 4785..4786,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 248,
        column: 0,
        span: 4787..4790,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 249,
        column: 0,
        span: 4791..4794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 251,
        column: 10,
        span: 4796..4805,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 251,
        column: 11,
        span: 4805..4806,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 251,
        column: 12,
        span: 4805..4807,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 13,
        span: 4807..4808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 251,
        column: 14,
        span: 4808..4809,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 251,
        column: 15,
        span: 4809..4810,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 251,
        column: 16,
        span: 4809..4811,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 17,
        span: 4811..4812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 251,
        column: 18,
        span: 4812..4813,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 251,
        column: 19,
        span: 4813..4814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 251,
        column: 20,
        span: 4813..4815,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 21,
        span: 4815..4816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 251,
        column: 22,
        span: 4816..4817,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 251,
        column: 23,
        span: 4817..4818,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 251,
        column: 24,
        span: 4817..4819,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 251,
        column: 25,
        span: 4819..4820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 252,
        column: 10,
        span: 4821..4830,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 252,
        column: 11,
        span: 4830..4831,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 12,
        span: 4830..4832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 13,
        span: 4832..4833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 14,
        span: 4832..4834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 15,
        span: 4834..4835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 252,
        column: 16,
        span: 4835..4836,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 17,
        span: 4836..4837,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 18,
        span: 4836..4838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 19,
        span: 4838..4839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 252,
        column: 20,
        span: 4839..4840,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 21,
        span: 4840..4841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 22,
        span: 4840..4842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 23,
        span: 4842..4843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 252,
        column: 24,
        span: 4843..4844,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 25,
        span: 4844..4845,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 26,
        span: 4844..4846,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 252,
        column: 27,
        span: 4846..4847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 253,
        column: 10,
        span: 4848..4857,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 253,
        column: 11,
        span: 4857..4858,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 12,
        span: 4857..4859,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 13,
        span: 4859..4860,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 14,
        span: 4859..4861,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 15,
        span: 4861..4862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 16,
        span: 4861..4863,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 17,
        span: 4863..4864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 253,
        column: 18,
        span: 4864..4865,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 253,
        column: 19,
        span: 4865..4866,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 20,
        span: 4865..4867,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 21,
        span: 4867..4868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 253,
        column: 22,
        span: 4868..4869,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 253,
        column: 23,
        span: 4869..4870,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 24,
        span: 4869..4871,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 25,
        span: 4871..4872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 253,
        column: 26,
        span: 4872..4873,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 253,
        column: 27,
        span: 4873..4874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 28,
        span: 4873..4875,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 253,
        column: 29,
        span: 4875..4876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 254,
        column: 10,
        span: 4877..4886,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 254,
        column: 11,
        span: 4886..4887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 12,
        span: 4886..4888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 13,
        span: 4888..4889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 14,
        span: 4888..4890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 15,
        span: 4890..4891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 16,
        span: 4890..4892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 17,
        span: 4892..4893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 18,
        span: 4892..4894,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 19,
        span: 4894..4895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 254,
        column: 20,
        span: 4895..4896,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
        column: 21,
        span: 4896..4897,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 22,
        span: 4896..4898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 23,
        span: 4898..4899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 254,
        column: 24,
        span: 4899..4900,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
        column: 25,
        span: 4900..4901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 26,
        span: 4900..4902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 27,
        span: 4902..4903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 254,
        column: 28,
        span: 4903..4904,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
        column: 29,
        span: 4904..4905,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 30,
        span: 4904..4906,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 254,
        column: 31,
        span: 4906..4907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checknext",
        ),
        line: 255,
        column: 10,
        span: 4908..4917,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 255,
        column: 11,
        span: 4917..4918,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 12,
        span: 4917..4919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 13,
        span: 4919..4920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 14,
        span: 4919..4921,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 15,
        span: 4921..4922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 16,
        span: 4921..4923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 17,
        span: 4923..4924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 18,
        span: 4923..4925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 19,
        span: 4925..4926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 20,
        span: 4925..4927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 21,
        span: 4927..4928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 255,
        column: 22,
        span: 4928..4929,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 23,
        span: 4929..4930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 24,
        span: 4929..4931,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 25,
        span: 4931..4932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 255,
        column: 26,
        span: 4932..4933,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 27,
        span: 4933..4934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 28,
        span: 4933..4935,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 29,
        span: 4935..4936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 255,
        column: 30,
        span: 4936..4937,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 31,
        span: 4937..4938,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 32,
        span: 4937..4939,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 255,
        column: 33,
        span: 4939..4940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 7,
        span: 4942..4948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 8,
        span: 4948..4949,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 257,
        column: 9,
        span: 4949..4950,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 257,
        column: 10,
        span: 4950..4951,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 257,
        column: 11,
        span: 4951..4952,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 257,
        column: 14,
        span: 4953..4955,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 16,
        span: 4955..4957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 17,
        span: 4957..4958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 7,
        span: 4959..4965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 8,
        span: 4965..4966,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 258,
        column: 9,
        span: 4966..4967,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 258,
        column: 10,
        span: 4967..4968,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 258,
        column: 11,
        span: 4968..4969,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 258,
        column: 12,
        span: 4969..4970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 13,
        span: 4969..4971,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 258,
        column: 14,
        span: 4971..4972,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 258,
        column: 16,
        span: 4973..4974,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 18,
        span: 4974..4976,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 258,
        column: 19,
        span: 4976..4977,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 258,
        column: 22,
        span: 4978..4980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 24,
        span: 4980..4982,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 25,
        span: 4982..4983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
        column: 7,
        span: 4984..4990,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 8,
        span: 4990..4991,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 259,
        column: 9,
        span: 4991..4992,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 259,
        column: 10,
        span: 4992..4993,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 11,
        span: 4992..4994,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 12,
        span: 4994..4995,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 13,
        span: 4994..4996,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 14,
        span: 4996..4997,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 15,
        span: 4996..4998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 16,
        span: 4998..4999,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 259,
        column: 19,
        span: 4999..5002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 20,
        span: 5002..5003,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 259,
        column: 23,
        span: 5003..5006,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 259,
        column: 24,
        span: 5006..5007,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 259,
        column: 27,
        span: 5008..5010,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 29,
        span: 5010..5012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 30,
        span: 5012..5013,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 260,
        column: 4,
        span: 5014..5017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 260,
        column: 6,
        span: 5018..5019,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 260,
        column: 7,
        span: 5019..5020,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
        column: 8,
        span: 5019..5021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 260,
        column: 9,
        span: 5021..5022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
        column: 11,
        span: 5021..5024,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 260,
        column: 0,
        span: 5025..5027,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 261,
        column: 8,
        span: 5030..5035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 261,
        column: 10,
        span: 5036..5037,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 12,
        span: 5038..5039,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 261,
        column: 14,
        span: 5040..5041,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 261,
        column: 15,
        span: 5041..5042,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 262,
        column: 6,
        span: 5045..5048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 262,
        column: 8,
        span: 5049..5050,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 9,
        span: 5050..5051,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 10,
        span: 5050..5052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 11,
        span: 5052..5053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 262,
        column: 12,
        span: 5053..5054,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 262,
        column: 15,
        span: 5055..5057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 262,
        column: 17,
        span: 5058..5059,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 262,
        column: 18,
        span: 5059..5060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 262,
        column: 19,
        span: 5060..5061,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 262,
        column: 20,
        span: 5061..5062,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 21,
        span: 5062..5063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 262,
        column: 22,
        span: 5063..5064,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 262,
        column: 0,
        span: 5065..5068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
        column: 9,
        span: 5071..5077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 10,
        span: 5077..5078,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 263,
        column: 11,
        span: 5078..5079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 263,
        column: 12,
        span: 5079..5080,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
        column: 15,
        span: 5081..5083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 263,
        column: 17,
        span: 5084..5085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 18,
        span: 5085..5086,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 264,
        column: 0,
        span: 5087..5090,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 267,
        column: 9,
        span: 5153..5161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 267,
        column: 15,
        span: 5162..5167,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 16,
        span: 5167..5168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 267,
        column: 20,
        span: 5168..5172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 22,
        span: 5173..5174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 267,
        column: 23,
        span: 5174..5175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 24,
        span: 5175..5176,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 268,
        column: 8,
        span: 5179..5184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 268,
        column: 12,
        span: 5185..5188,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
        column: 14,
        span: 5189..5190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 268,
        column: 0,
        span: 5190..5192,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 269,
        column: 6,
        span: 5195..5198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 269,
        column: 8,
        span: 5199..5200,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 269,
        column: 11,
        span: 5201..5203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 269,
        column: 17,
        span: 5204..5209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 18,
        span: 5209..5210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 269,
        column: 19,
        span: 5210..5211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 20,
        span: 5211..5212,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 269,
        column: 0,
        span: 5213..5215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 270,
        column: 8,
        span: 5220..5223,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 270,
        column: 10,
        span: 5224..5225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 12,
        span: 5226..5227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 270,
        column: 16,
        span: 5227..5231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 17,
        span: 5231..5232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 270,
        column: 18,
        span: 5232..5233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 19,
        span: 5233..5234,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
        column: 22,
        span: 5235..5237,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'number'",
        ),
        line: 270,
        column: 31,
        span: 5238..5246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 32,
        span: 5246..5247,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 270,
        column: 36,
        span: 5248..5251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 270,
        column: 41,
        span: 5252..5256,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
        column: 42,
        span: 5256..5257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 270,
        column: 45,
        span: 5257..5260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 46,
        span: 5260..5261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 270,
        column: 49,
        span: 5261..5264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 50,
        span: 5264..5265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 270,
        column: 52,
        span: 5266..5267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 53,
        span: 5267..5268,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 270,
        column: 56,
        span: 5269..5271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 270,
        column: 0,
        span: 5272..5275,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 271,
        column: 0,
        span: 5278..5281,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 272,
        column: 9,
        span: 5284..5290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 272,
        column: 0,
        span: 5291..5294,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 273,
        column: 0,
        span: 5295..5298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 275,
        column: 7,
        span: 5300..5306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 8,
        span: 5306..5307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 275,
        column: 13,
        span: 5307..5312,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 275,
        column: 14,
        span: 5312..5313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 275,
        column: 18,
        span: 5313..5317,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 275,
        column: 19,
        span: 5317..5318,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 275,
        column: 20,
        span: 5318..5319,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 275,
        column: 23,
        span: 5320..5322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 25,
        span: 5322..5324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 26,
        span: 5324..5325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 276,
        column: 7,
        span: 5326..5332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 276,
        column: 8,
        span: 5332..5333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 276,
        column: 13,
        span: 5333..5338,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 276,
        column: 14,
        span: 5338..5339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 276,
        column: 18,
        span: 5339..5343,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 276,
        column: 19,
        span: 5343..5344,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 276,
        column: 20,
        span: 5344..5345,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1000\"",
        ),
        line: 276,
        column: 26,
        span: 5345..5351,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 276,
        column: 27,
        span: 5351..5352,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 276,
        column: 29,
        span: 5353..5354,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 276,
        column: 34,
        span: 5355..5359,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 276,
        column: 35,
        span: 5359..5360,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 276,
        column: 38,
        span: 5361..5363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 276,
        column: 40,
        span: 5363..5365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 276,
        column: 41,
        span: 5365..5366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 7,
        span: 5367..5373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 8,
        span: 5373..5374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 277,
        column: 13,
        span: 5374..5379,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 14,
        span: 5379..5380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 277,
        column: 18,
        span: 5380..5384,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 277,
        column: 19,
        span: 5384..5385,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 277,
        column: 20,
        span: 5385..5386,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1000\"",
        ),
        line: 277,
        column: 26,
        span: 5386..5392,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 277,
        column: 27,
        span: 5392..5393,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 29,
        span: 5394..5395,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 277,
        column: 34,
        span: 5396..5400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
        column: 35,
        span: 5400..5401,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 277,
        column: 37,
        span: 5402..5403,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 277,
        column: 41,
        span: 5402..5407,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 277,
        column: 42,
        span: 5407..5408,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 44,
        span: 5409..5410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 277,
        column: 46,
        span: 5410..5412,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 277,
        column: 47,
        span: 5412..5413,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 277,
        column: 50,
        span: 5414..5416,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 277,
        column: 55,
        span: 5416..5421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 56,
        span: 5421..5422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
        column: 7,
        span: 5423..5429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 8,
        span: 5429..5430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 278,
        column: 13,
        span: 5430..5435,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 14,
        span: 5435..5436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 278,
        column: 18,
        span: 5436..5440,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 278,
        column: 19,
        span: 5440..5441,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 278,
        column: 20,
        span: 5441..5442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 24,
        span: 5441..5446,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 278,
        column: 25,
        span: 5446..5447,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 278,
        column: 27,
        span: 5448..5449,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 278,
        column: 32,
        span: 5450..5454,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 278,
        column: 33,
        span: 5454..5455,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
        column: 36,
        span: 5456..5458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 41,
        span: 5458..5463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 42,
        span: 5463..5464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 279,
        column: 7,
        span: 5465..5471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 8,
        span: 5471..5472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 279,
        column: 13,
        span: 5472..5477,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 279,
        column: 14,
        span: 5477..5478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 279,
        column: 18,
        span: 5478..5482,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 279,
        column: 19,
        span: 5482..5483,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 279,
        column: 20,
        span: 5483..5484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 22,
        span: 5483..5486,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 279,
        column: 23,
        span: 5486..5487,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 279,
        column: 25,
        span: 5488..5489,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 279,
        column: 30,
        span: 5490..5494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 279,
        column: 31,
        span: 5494..5495,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 279,
        column: 33,
        span: 5496..5497,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 36,
        span: 5496..5500,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 279,
        column: 37,
        span: 5500..5501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 279,
        column: 41,
        span: 5501..5505,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 279,
        column: 42,
        span: 5505..5506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 279,
        column: 44,
        span: 5506..5508,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 279,
        column: 45,
        span: 5508..5509,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 279,
        column: 47,
        span: 5510..5511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 279,
        column: 53,
        span: 5512..5517,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 279,
        column: 54,
        span: 5517..5518,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 57,
        span: 5519..5521,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 61,
        span: 5521..5525,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 279,
        column: 62,
        span: 5525..5526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 279,
        column: 66,
        span: 5526..5530,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 279,
        column: 67,
        span: 5530..5531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 279,
        column: 69,
        span: 5531..5533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 70,
        span: 5533..5534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 281,
        column: 6,
        span: 5536..5541,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 281,
        column: 7,
        span: 5541..5542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxn",
        ),
        line: 281,
        column: 11,
        span: 5542..5546,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 281,
        column: 13,
        span: 5547..5548,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 281,
        column: 0,
        span: 5549..5552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 284,
        column: 2,
        span: 5570..5571,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 284,
        column: 4,
        span: 5572..5573,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 284,
        column: 6,
        span: 5574..5575,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 284,
        column: 7,
        span: 5575..5576,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 285,
        column: 4,
        span: 5577..5580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 285,
        column: 6,
        span: 5581..5582,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 285,
        column: 7,
        span: 5582..5583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 8,
        span: 5582..5584,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 9,
        span: 5584..5585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 11,
        span: 5584..5587,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 285,
        column: 14,
        span: 5588..5590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 285,
        column: 16,
        span: 5591..5592,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 285,
        column: 17,
        span: 5592..5593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 285,
        column: 21,
        span: 5593..5597,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 285,
        column: 22,
        span: 5597..5598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pow",
        ),
        line: 285,
        column: 25,
        span: 5598..5601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 26,
        span: 5601..5602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 27,
        span: 5601..5603,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 28,
        span: 5603..5604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 285,
        column: 29,
        span: 5604..5605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 30,
        span: 5605..5606,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 285,
        column: 31,
        span: 5606..5607,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 285,
        column: 33,
        span: 5608..5609,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 285,
        column: 38,
        span: 5610..5614,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 285,
        column: 0,
        span: 5615..5618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 286,
        column: 7,
        span: 5619..5625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 8,
        span: 5625..5626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 286,
        column: 9,
        span: 5626..5627,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 286,
        column: 10,
        span: 5627..5628,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 286,
        column: 11,
        span: 5628..5629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 286,
        column: 12,
        span: 5629..5630,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 286,
        column: 13,
        span: 5630..5631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 14,
        span: 5631..5632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 288,
        column: 6,
        span: 5634..5639,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 288,
        column: 7,
        span: 5639..5640,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 288,
        column: 10,
        span: 5640..5643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 288,
        column: 11,
        span: 5643..5644,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 292,
        column: 6,
        span: 5665..5670,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 292,
        column: 8,
        span: 5671..5672,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 292,
        column: 10,
        span: 5673..5674,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 292,
        column: 12,
        span: 5675..5676,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 292,
        column: 13,
        span: 5676..5677,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 292,
        column: 14,
        span: 5677..5678,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 15,
        span: 5677..5679,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 292,
        column: 16,
        span: 5679..5680,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 292,
        column: 17,
        span: 5680..5681,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 292,
        column: 19,
        span: 5682..5683,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 21,
        span: 5683..5685,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 22,
        span: 5685..5686,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 292,
        column: 24,
        span: 5687..5688,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 292,
        column: 25,
        span: 5688..5689,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 26,
        span: 5688..5690,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 292,
        column: 27,
        span: 5690..5691,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 292,
        column: 28,
        span: 5691..5692,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 292,
        column: 30,
        span: 5693..5694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 32,
        span: 5694..5696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 33,
        span: 5696..5697,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 292,
        column: 35,
        span: 5698..5699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 292,
        column: 41,
        span: 5699..5705,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 292,
        column: 42,
        span: 5705..5706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 292,
        column: 45,
        span: 5706..5709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 46,
        span: 5709..5710,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x \"",
        ),
        line: 292,
        column: 50,
        span: 5710..5714,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 51,
        span: 5714..5715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 53,
        span: 5715..5717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 54,
        span: 5717..5718,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 292,
        column: 55,
        span: 5718..5719,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 292,
        column: 57,
        span: 5720..5721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 59,
        span: 5721..5723,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 60,
        span: 5723..5724,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 293,
        column: 13,
        span: 5736..5737,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 293,
        column: 18,
        span: 5736..5742,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 293,
        column: 19,
        span: 5742..5743,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 21,
        span: 5744..5745,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 23,
        span: 5745..5747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 293,
        column: 24,
        span: 5747..5748,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 293,
        column: 26,
        span: 5749..5750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 27,
        span: 5749..5751,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 293,
        column: 28,
        span: 5751..5752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
        column: 30,
        span: 5753..5754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 32,
        span: 5754..5756,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 293,
        column: 33,
        span: 5756..5757,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 295,
        column: 6,
        span: 5759..5764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 295,
        column: 8,
        span: 5765..5766,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 295,
        column: 10,
        span: 5767..5768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 0,
        span: 5768..5770,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 296,
        column: 4,
        span: 5771..5774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 296,
        column: 6,
        span: 5775..5776,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
        column: 7,
        span: 5776..5777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 296,
        column: 9,
        span: 5778..5779,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 296,
        column: 12,
        span: 5780..5782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 296,
        column: 18,
        span: 5783..5788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
        column: 19,
        span: 5788..5789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 296,
        column: 21,
        span: 5790..5791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 23,
        span: 5792..5793,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 296,
        column: 0,
        span: 5794..5796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 297,
        column: 4,
        span: 5799..5800,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 297,
        column: 6,
        span: 5801..5802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 297,
        column: 8,
        span: 5803..5804,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 297,
        column: 9,
        span: 5804..5805,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 297,
        column: 0,
        span: 5804..5806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
        column: 9,
        span: 5809..5815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 10,
        span: 5815..5816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 298,
        column: 11,
        span: 5816..5817,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 298,
        column: 12,
        span: 5817..5818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 298,
        column: 13,
        span: 5818..5819,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 298,
        column: 14,
        span: 5819..5820,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 17,
        span: 5821..5823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 298,
        column: 19,
        span: 5824..5825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 20,
        span: 5825..5826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 299,
        column: 4,
        span: 5829..5830,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 299,
        column: 5,
        span: 5830..5831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 299,
        column: 6,
        span: 5831..5832,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 299,
        column: 7,
        span: 5832..5833,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 299,
        column: 9,
        span: 5834..5835,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 299,
        column: 0,
        span: 5836..5839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 300,
        column: 17,
        span: 5842..5856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 18,
        span: 5856..5857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 19,
        span: 5857..5858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 301,
        column: 9,
        span: 5861..5867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 10,
        span: 5867..5868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 301,
        column: 11,
        span: 5868..5869,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 301,
        column: 12,
        span: 5869..5870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 301,
        column: 13,
        span: 5870..5871,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 301,
        column: 14,
        span: 5871..5872,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 301,
        column: 17,
        span: 5873..5875,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 301,
        column: 21,
        span: 5876..5879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 22,
        span: 5879..5880,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 302,
        column: 0,
        span: 5881..5884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 303,
        column: 7,
        span: 5885..5891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 8,
        span: 5891..5892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 303,
        column: 9,
        span: 5892..5893,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 303,
        column: 12,
        span: 5894..5896,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 303,
        column: 14,
        span: 5896..5898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 15,
        span: 5898..5899,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 306,
        column: 6,
        span: 5902..5907,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 306,
        column: 15,
        span: 5908..5916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 306,
        column: 20,
        span: 5917..5921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 22,
        span: 5922..5923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
        column: 23,
        span: 5923..5924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 24,
        span: 5924..5925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 307,
        column: 9,
        span: 5928..5934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 10,
        span: 5934..5935,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 307,
        column: 13,
        span: 5935..5938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 307,
        column: 19,
        span: 5939..5944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 20,
        span: 5944..5945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 307,
        column: 25,
        span: 5945..5950,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 307,
        column: 26,
        span: 5950..5951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 307,
        column: 32,
        span: 5951..5957,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 33,
        span: 5957..5958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 307,
        column: 35,
        span: 5959..5960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 36,
        span: 5960..5961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 38,
        span: 5961..5963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 39,
        span: 5963..5964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 42,
        span: 5964..5967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 43,
        span: 5967..5968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 44,
        span: 5968..5969,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 307,
        column: 45,
        span: 5969..5970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 308,
        column: 8,
        span: 5973..5978,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 308,
        column: 9,
        span: 5978..5979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 308,
        column: 15,
        span: 5979..5985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 16,
        span: 5985..5986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 308,
        column: 17,
        span: 5986..5987,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 18,
        span: 5987..5988,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 21,
        span: 5988..5991,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 22,
        span: 5991..5992,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 308,
        column: 23,
        span: 5992..5993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 308,
        column: 29,
        span: 5994..5999,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 308,
        column: 30,
        span: 5999..6000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 308,
        column: 36,
        span: 6000..6006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 37,
        span: 6006..6007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 308,
        column: 38,
        span: 6007..6008,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 39,
        span: 6008..6009,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 41,
        span: 6009..6011,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 42,
        span: 6011..6012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 45,
        span: 6012..6015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 46,
        span: 6015..6016,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 308,
        column: 47,
        span: 6016..6017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 309,
        column: 8,
        span: 6020..6025,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 309,
        column: 9,
        span: 6025..6026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 309,
        column: 15,
        span: 6026..6032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 16,
        span: 6032..6033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 309,
        column: 17,
        span: 6033..6034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 18,
        span: 6034..6035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 20,
        span: 6035..6037,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 21,
        span: 6037..6038,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 309,
        column: 23,
        span: 6039..6040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 24,
        span: 6039..6041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 25,
        span: 6041..6042,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 309,
        column: 26,
        span: 6042..6043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 309,
        column: 32,
        span: 6044..6049,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 309,
        column: 33,
        span: 6049..6050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 309,
        column: 39,
        span: 6050..6056,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 40,
        span: 6056..6057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 309,
        column: 41,
        span: 6057..6058,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 309,
        column: 42,
        span: 6058..6059,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 309,
        column: 45,
        span: 6059..6062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 46,
        span: 6062..6063,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 309,
        column: 47,
        span: 6063..6064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 310,
        column: 8,
        span: 6067..6072,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 310,
        column: 9,
        span: 6072..6073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 310,
        column: 15,
        span: 6073..6079,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 310,
        column: 16,
        span: 6079..6080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 310,
        column: 17,
        span: 6080..6081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 310,
        column: 18,
        span: 6081..6082,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 310,
        column: 20,
        span: 6083..6084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 310,
        column: 21,
        span: 6084..6085,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 310,
        column: 22,
        span: 6085..6086,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 23,
        span: 6085..6087,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 310,
        column: 24,
        span: 6087..6088,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 310,
        column: 27,
        span: 6088..6091,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 28,
        span: 6091..6092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 311,
        column: 8,
        span: 6095..6100,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 311,
        column: 9,
        span: 6100..6101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 311,
        column: 15,
        span: 6101..6107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 16,
        span: 6107..6108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 311,
        column: 17,
        span: 6108..6109,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 18,
        span: 6109..6110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 20,
        span: 6110..6112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 21,
        span: 6112..6113,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 311,
        column: 23,
        span: 6114..6115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 24,
        span: 6114..6116,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 25,
        span: 6116..6117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 312,
        column: 9,
        span: 6120..6126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 10,
        span: 6126..6127,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 312,
        column: 13,
        span: 6127..6130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 312,
        column: 19,
        span: 6131..6136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 20,
        span: 6136..6137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 312,
        column: 25,
        span: 6137..6142,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 312,
        column: 26,
        span: 6142..6143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 312,
        column: 32,
        span: 6143..6149,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
        column: 33,
        span: 6149..6150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 312,
        column: 35,
        span: 6151..6152,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
        column: 36,
        span: 6152..6153,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
        column: 38,
        span: 6153..6155,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
        column: 39,
        span: 6155..6156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
        column: 42,
        span: 6156..6159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 43,
        span: 6159..6160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 44,
        span: 6160..6161,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 312,
        column: 45,
        span: 6161..6162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 313,
        column: 9,
        span: 6165..6171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 10,
        span: 6171..6172,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 313,
        column: 13,
        span: 6172..6175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 313,
        column: 19,
        span: 6176..6181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 20,
        span: 6181..6182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 313,
        column: 25,
        span: 6182..6187,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 313,
        column: 26,
        span: 6187..6188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 313,
        column: 32,
        span: 6188..6194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
        column: 33,
        span: 6194..6195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 313,
        column: 35,
        span: 6196..6197,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
        column: 36,
        span: 6197..6198,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 313,
        column: 38,
        span: 6199..6200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 313,
        column: 39,
        span: 6200..6201,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 313,
        column: 41,
        span: 6202..6203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 43,
        span: 6203..6205,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
        column: 44,
        span: 6205..6206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 47,
        span: 6206..6209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 48,
        span: 6209..6210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 49,
        span: 6210..6211,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 313,
        column: 50,
        span: 6211..6212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 314,
        column: 9,
        span: 6215..6221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 10,
        span: 6221..6222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 314,
        column: 15,
        span: 6222..6227,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 314,
        column: 16,
        span: 6227..6228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 314,
        column: 22,
        span: 6228..6234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 23,
        span: 6234..6235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 314,
        column: 24,
        span: 6235..6236,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 314,
        column: 25,
        span: 6236..6237,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 314,
        column: 26,
        span: 6236..6238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 27,
        span: 6238..6239,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 314,
        column: 30,
        span: 6240..6242,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 314,
        column: 32,
        span: 6243..6244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 314,
        column: 33,
        span: 6243..6245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 34,
        span: 6245..6246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 315,
        column: 9,
        span: 6249..6255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 10,
        span: 6255..6256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 315,
        column: 15,
        span: 6256..6261,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 315,
        column: 16,
        span: 6261..6262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 315,
        column: 22,
        span: 6262..6268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 23,
        span: 6268..6269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 315,
        column: 24,
        span: 6269..6270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 25,
        span: 6270..6271,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
        column: 26,
        span: 6270..6272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 27,
        span: 6272..6273,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 315,
        column: 30,
        span: 6274..6276,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 315,
        column: 32,
        span: 6277..6278,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 315,
        column: 33,
        span: 6277..6279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 34,
        span: 6279..6280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 316,
        column: 9,
        span: 6283..6289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 10,
        span: 6289..6290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 316,
        column: 15,
        span: 6290..6295,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 316,
        column: 16,
        span: 6295..6296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 316,
        column: 22,
        span: 6296..6302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 23,
        span: 6302..6303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 316,
        column: 24,
        span: 6303..6304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 25,
        span: 6304..6305,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 26,
        span: 6304..6306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 27,
        span: 6306..6307,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 316,
        column: 30,
        span: 6308..6310,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 33,
        span: 6310..6313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 34,
        span: 6313..6314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 317,
        column: 9,
        span: 6317..6323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 10,
        span: 6323..6324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 317,
        column: 15,
        span: 6324..6329,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 317,
        column: 16,
        span: 6329..6330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 317,
        column: 22,
        span: 6330..6336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 23,
        span: 6336..6337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 317,
        column: 24,
        span: 6337..6338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 25,
        span: 6338..6339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 26,
        span: 6338..6340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 27,
        span: 6340..6341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 317,
        column: 30,
        span: 6342..6344,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 33,
        span: 6344..6347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 34,
        span: 6347..6348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 318,
        column: 9,
        span: 6351..6357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 10,
        span: 6357..6358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 318,
        column: 15,
        span: 6358..6363,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 318,
        column: 16,
        span: 6363..6364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 318,
        column: 22,
        span: 6364..6370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 23,
        span: 6370..6371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 318,
        column: 24,
        span: 6371..6372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 318,
        column: 25,
        span: 6372..6373,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 26,
        span: 6372..6374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 27,
        span: 6374..6375,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
        column: 30,
        span: 6376..6378,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 33,
        span: 6378..6381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 34,
        span: 6381..6382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 319,
        column: 9,
        span: 6385..6391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 10,
        span: 6391..6392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 319,
        column: 15,
        span: 6392..6397,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 319,
        column: 16,
        span: 6397..6398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 319,
        column: 22,
        span: 6398..6404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 23,
        span: 6404..6405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 319,
        column: 24,
        span: 6405..6406,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 25,
        span: 6406..6407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 26,
        span: 6406..6408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 27,
        span: 6408..6409,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 319,
        column: 30,
        span: 6410..6412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 33,
        span: 6412..6415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 34,
        span: 6415..6416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 320,
        column: 9,
        span: 6419..6425,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 10,
        span: 6425..6426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 320,
        column: 15,
        span: 6426..6431,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 320,
        column: 16,
        span: 6431..6432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 320,
        column: 22,
        span: 6432..6438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 23,
        span: 6438..6439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 320,
        column: 24,
        span: 6439..6440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 320,
        column: 25,
        span: 6440..6441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 26,
        span: 6440..6442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 27,
        span: 6442..6443,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 320,
        column: 30,
        span: 6444..6446,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 320,
        column: 34,
        span: 6447..6450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 35,
        span: 6450..6451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
        column: 9,
        span: 6454..6460,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 10,
        span: 6460..6461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 321,
        column: 15,
        span: 6461..6466,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 321,
        column: 16,
        span: 6466..6467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 321,
        column: 22,
        span: 6467..6473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 23,
        span: 6473..6474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 321,
        column: 24,
        span: 6474..6475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 25,
        span: 6475..6476,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 321,
        column: 28,
        span: 6477..6479,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 321,
        column: 32,
        span: 6480..6483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 33,
        span: 6483..6484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 322,
        column: 9,
        span: 6487..6493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 10,
        span: 6493..6494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 322,
        column: 15,
        span: 6494..6499,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 322,
        column: 16,
        span: 6499..6500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 322,
        column: 22,
        span: 6500..6506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 23,
        span: 6506..6507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 322,
        column: 24,
        span: 6507..6508,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 322,
        column: 25,
        span: 6508..6509,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 322,
        column: 27,
        span: 6510..6511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 322,
        column: 28,
        span: 6511..6512,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 29,
        span: 6512..6513,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 322,
        column: 32,
        span: 6514..6516,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 322,
        column: 36,
        span: 6517..6520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 37,
        span: 6520..6521,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 323,
        column: 0,
        span: 6522..6525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 325,
        column: 2,
        span: 6527..6528,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 4,
        span: 6529..6530,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 325,
        column: 6,
        span: 6531..6532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 325,
        column: 7,
        span: 6532..6533,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 8,
        span: 6533..6534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 325,
        column: 9,
        span: 6533..6535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 325,
        column: 10,
        span: 6535..6536,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 325,
        column: 12,
        span: 6537..6538,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 325,
        column: 13,
        span: 6538..6539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 325,
        column: 14,
        span: 6538..6540,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 325,
        column: 15,
        span: 6540..6541,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
        column: 17,
        span: 6542..6543,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 325,
        column: 23,
        span: 6544..6549,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 325,
        column: 24,
        span: 6549..6550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 326,
        column: 5,
        span: 6551..6555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 6,
        span: 6555..6556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 326,
        column: 7,
        span: 6556..6557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 8,
        span: 6557..6558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 327,
        column: 7,
        span: 6559..6565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 8,
        span: 6565..6566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 327,
        column: 9,
        span: 6566..6567,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 327,
        column: 10,
        span: 6567..6568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 327,
        column: 11,
        span: 6568..6569,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 14,
        span: 6570..6572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 16,
        span: 6572..6574,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 327,
        column: 20,
        span: 6575..6578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 327,
        column: 22,
        span: 6579..6580,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 327,
        column: 23,
        span: 6580..6581,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 327,
        column: 24,
        span: 6581..6582,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 25,
        span: 6581..6583,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 327,
        column: 26,
        span: 6583..6584,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 29,
        span: 6585..6587,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 327,
        column: 35,
        span: 6588..6593,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 36,
        span: 6593..6594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 329,
        column: 2,
        span: 6596..6597,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
        column: 4,
        span: 6598..6599,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 329,
        column: 6,
        span: 6600..6601,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 329,
        column: 7,
        span: 6601..6602,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 329,
        column: 8,
        span: 6602..6603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 9,
        span: 6602..6604,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 329,
        column: 10,
        span: 6604..6605,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
        column: 12,
        span: 6606..6607,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 329,
        column: 18,
        span: 6608..6613,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 329,
        column: 19,
        span: 6613..6614,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 329,
        column: 20,
        span: 6614..6615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 330,
        column: 5,
        span: 6616..6620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 6,
        span: 6620..6621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 330,
        column: 7,
        span: 6621..6622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 8,
        span: 6622..6623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
        column: 7,
        span: 6624..6630,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 8,
        span: 6630..6631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 331,
        column: 9,
        span: 6631..6632,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 331,
        column: 10,
        span: 6632..6633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 331,
        column: 11,
        span: 6633..6634,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
        column: 14,
        span: 6635..6637,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 331,
        column: 18,
        span: 6638..6641,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 331,
        column: 22,
        span: 6642..6645,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 331,
        column: 24,
        span: 6646..6647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 331,
        column: 25,
        span: 6647..6648,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
        column: 28,
        span: 6649..6651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
        column: 30,
        span: 6651..6653,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 331,
        column: 34,
        span: 6654..6657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 331,
        column: 36,
        span: 6658..6659,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 331,
        column: 37,
        span: 6659..6660,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 331,
        column: 38,
        span: 6660..6661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
        column: 39,
        span: 6660..6662,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 331,
        column: 40,
        span: 6662..6663,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
        column: 43,
        span: 6664..6666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 331,
        column: 49,
        span: 6667..6672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 50,
        span: 6672..6673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 333,
        column: 2,
        span: 6675..6676,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 333,
        column: 4,
        span: 6677..6678,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 333,
        column: 6,
        span: 6679..6680,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 333,
        column: 7,
        span: 6680..6681,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 333,
        column: 8,
        span: 6681..6682,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 9,
        span: 6681..6683,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 333,
        column: 10,
        span: 6683..6684,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 333,
        column: 12,
        span: 6685..6686,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 333,
        column: 18,
        span: 6687..6692,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 333,
        column: 19,
        span: 6692..6693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 334,
        column: 5,
        span: 6694..6698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
        column: 6,
        span: 6698..6699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 334,
        column: 7,
        span: 6699..6700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
        column: 8,
        span: 6700..6701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 335,
        column: 7,
        span: 6702..6708,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 8,
        span: 6708..6709,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 335,
        column: 9,
        span: 6709..6710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 335,
        column: 10,
        span: 6710..6711,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 335,
        column: 13,
        span: 6712..6714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 335,
        column: 15,
        span: 6714..6716,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 335,
        column: 19,
        span: 6717..6720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 335,
        column: 25,
        span: 6721..6726,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 335,
        column: 26,
        span: 6726..6727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 335,
        column: 32,
        span: 6727..6733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 33,
        span: 6733..6734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 335,
        column: 34,
        span: 6734..6735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 35,
        span: 6735..6736,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 335,
        column: 38,
        span: 6737..6739,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 335,
        column: 42,
        span: 6740..6743,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 335,
        column: 46,
        span: 6744..6747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 335,
        column: 48,
        span: 6748..6749,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 335,
        column: 49,
        span: 6749..6750,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 335,
        column: 50,
        span: 6750..6751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 335,
        column: 51,
        span: 6750..6752,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 335,
        column: 52,
        span: 6752..6753,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 335,
        column: 55,
        span: 6754..6756,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 335,
        column: 61,
        span: 6757..6762,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 62,
        span: 6762..6763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 337,
        column: 2,
        span: 6765..6766,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 337,
        column: 4,
        span: 6767..6768,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 337,
        column: 6,
        span: 6769..6770,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 337,
        column: 7,
        span: 6770..6771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 337,
        column: 8,
        span: 6770..6772,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 337,
        column: 9,
        span: 6772..6773,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 337,
        column: 11,
        span: 6774..6775,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 337,
        column: 17,
        span: 6776..6781,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 337,
        column: 18,
        span: 6781..6782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 338,
        column: 7,
        span: 6783..6789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 8,
        span: 6789..6790,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 338,
        column: 9,
        span: 6790..6791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 338,
        column: 10,
        span: 6791..6792,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 338,
        column: 13,
        span: 6793..6795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
        column: 15,
        span: 6795..6797,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 338,
        column: 19,
        span: 6798..6801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 338,
        column: 25,
        span: 6802..6807,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 338,
        column: 26,
        span: 6807..6808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 338,
        column: 32,
        span: 6808..6814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 33,
        span: 6814..6815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 338,
        column: 34,
        span: 6815..6816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 35,
        span: 6816..6817,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 338,
        column: 38,
        span: 6818..6820,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ban\"",
        ),
        line: 338,
        column: 44,
        span: 6821..6826,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 338,
        column: 48,
        span: 6827..6830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 338,
        column: 50,
        span: 6831..6832,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 338,
        column: 51,
        span: 6832..6833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
        column: 52,
        span: 6832..6834,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 338,
        column: 53,
        span: 6834..6835,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 338,
        column: 56,
        span: 6836..6838,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 338,
        column: 60,
        span: 6839..6842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 61,
        span: 6842..6843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 340,
        column: 6,
        span: 6845..6850,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
        column: 7,
        span: 6850..6851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 340,
        column: 13,
        span: 6851..6857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 14,
        span: 6857..6858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 340,
        column: 15,
        span: 6858..6859,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 16,
        span: 6859..6860,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
        column: 18,
        span: 6860..6862,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 19,
        span: 6862..6863,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
        column: 22,
        span: 6863..6866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 23,
        span: 6866..6867,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 340,
        column: 24,
        span: 6867..6868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 340,
        column: 30,
        span: 6869..6874,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
        column: 31,
        span: 6874..6875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 340,
        column: 37,
        span: 6875..6881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 38,
        span: 6881..6882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 340,
        column: 39,
        span: 6882..6883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 40,
        span: 6883..6884,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
        column: 42,
        span: 6884..6886,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 43,
        span: 6886..6887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
        column: 46,
        span: 6887..6890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 47,
        span: 6890..6891,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 340,
        column: 48,
        span: 6891..6892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 340,
        column: 54,
        span: 6893..6898,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
        column: 55,
        span: 6898..6899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 340,
        column: 61,
        span: 6899..6905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 62,
        span: 6905..6906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 340,
        column: 63,
        span: 6906..6907,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 64,
        span: 6907..6908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
        column: 66,
        span: 6908..6910,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 67,
        span: 6910..6911,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 340,
        column: 69,
        span: 6912..6913,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 340,
        column: 70,
        span: 6912..6914,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 71,
        span: 6914..6915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 341,
        column: 7,
        span: 6916..6922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 8,
        span: 6922..6923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 341,
        column: 13,
        span: 6923..6928,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 341,
        column: 14,
        span: 6928..6929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 341,
        column: 20,
        span: 6929..6935,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 21,
        span: 6935..6936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 341,
        column: 22,
        span: 6936..6937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 23,
        span: 6937..6938,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
        column: 26,
        span: 6939..6941,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 29,
        span: 6941..6944,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 30,
        span: 6944..6945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
        column: 7,
        span: 6946..6952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 8,
        span: 6952..6953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 342,
        column: 13,
        span: 6953..6958,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 342,
        column: 14,
        span: 6958..6959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 342,
        column: 20,
        span: 6959..6965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 21,
        span: 6965..6966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 342,
        column: 22,
        span: 6966..6967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 23,
        span: 6967..6968,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 342,
        column: 26,
        span: 6969..6971,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 29,
        span: 6971..6974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 30,
        span: 6974..6975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 343,
        column: 7,
        span: 6976..6982,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 8,
        span: 6982..6983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 343,
        column: 13,
        span: 6983..6988,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
        column: 14,
        span: 6988..6989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 343,
        column: 20,
        span: 6989..6995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 21,
        span: 6995..6996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 343,
        column: 22,
        span: 6996..6997,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 23,
        span: 6997..6998,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 343,
        column: 26,
        span: 6999..7001,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 343,
        column: 28,
        span: 7002..7003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 343,
        column: 29,
        span: 7002..7004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 30,
        span: 7004..7005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 344,
        column: 7,
        span: 7006..7012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 8,
        span: 7012..7013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 344,
        column: 13,
        span: 7013..7018,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 344,
        column: 14,
        span: 7018..7019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 344,
        column: 20,
        span: 7019..7025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
        column: 21,
        span: 7025..7026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 344,
        column: 22,
        span: 7026..7027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 23,
        span: 7027..7028,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 344,
        column: 26,
        span: 7029..7031,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 344,
        column: 30,
        span: 7032..7035,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
        column: 31,
        span: 7035..7036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 346,
        column: 2,
        span: 7038..7039,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 346,
        column: 4,
        span: 7040..7041,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 346,
        column: 6,
        span: 7042..7043,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c'",
        ),
        line: 346,
        column: 9,
        span: 7043..7046,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
        column: 10,
        span: 7046..7047,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'d'",
        ),
        line: 346,
        column: 14,
        span: 7048..7051,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 346,
        column: 15,
        span: 7051..7052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 347,
        column: 6,
        span: 7053..7058,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 347,
        column: 7,
        span: 7058..7059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 347,
        column: 13,
        span: 7059..7065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 14,
        span: 7065..7066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 347,
        column: 15,
        span: 7066..7067,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 16,
        span: 7067..7068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 18,
        span: 7068..7070,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 347,
        column: 19,
        span: 7070..7071,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 347,
        column: 23,
        span: 7072..7075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 24,
        span: 7075..7076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 348,
        column: 6,
        span: 7077..7082,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 348,
        column: 7,
        span: 7082..7083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        line: 348,
        column: 13,
        span: 7083..7089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 14,
        span: 7089..7090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 348,
        column: 15,
        span: 7090..7091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 348,
        column: 16,
        span: 7091..7092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 348,
        column: 20,
        span: 7093..7096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 21,
        span: 7096..7097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 349,
        column: 7,
        span: 7098..7104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 8,
        span: 7104..7105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 349,
        column: 13,
        span: 7105..7110,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 349,
        column: 14,
        span: 7110..7111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 349,
        column: 20,
        span: 7111..7117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 21,
        span: 7117..7118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 349,
        column: 22,
        span: 7118..7119,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 349,
        column: 23,
        span: 7119..7120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 349,
        column: 25,
        span: 7120..7122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 26,
        span: 7122..7123,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 349,
        column: 29,
        span: 7124..7126,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c'",
        ),
        line: 349,
        column: 33,
        span: 7127..7130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 34,
        span: 7130..7131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 350,
        column: 7,
        span: 7132..7138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 8,
        span: 7138..7139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 350,
        column: 13,
        span: 7139..7144,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 350,
        column: 14,
        span: 7144..7145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 350,
        column: 20,
        span: 7145..7151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 21,
        span: 7151..7152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 350,
        column: 22,
        span: 7152..7153,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 350,
        column: 23,
        span: 7153..7154,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 350,
        column: 25,
        span: 7154..7156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 26,
        span: 7156..7157,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 350,
        column: 29,
        span: 7158..7160,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'d'",
        ),
        line: 350,
        column: 33,
        span: 7161..7164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 34,
        span: 7164..7165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 351,
        column: 7,
        span: 7166..7172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 8,
        span: 7172..7173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 351,
        column: 13,
        span: 7173..7178,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 351,
        column: 14,
        span: 7178..7179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 351,
        column: 20,
        span: 7179..7185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 21,
        span: 7185..7186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 351,
        column: 22,
        span: 7186..7187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
        column: 23,
        span: 7187..7188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 351,
        column: 25,
        span: 7188..7190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 26,
        span: 7190..7191,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 351,
        column: 29,
        span: 7192..7194,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 351,
        column: 33,
        span: 7195..7198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 34,
        span: 7198..7199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 352,
        column: 7,
        span: 7200..7206,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 8,
        span: 7206..7207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 352,
        column: 13,
        span: 7207..7212,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 352,
        column: 14,
        span: 7212..7213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 352,
        column: 20,
        span: 7213..7219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 21,
        span: 7219..7220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 352,
        column: 22,
        span: 7220..7221,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 352,
        column: 23,
        span: 7221..7222,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 352,
        column: 25,
        span: 7222..7224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 26,
        span: 7224..7225,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 352,
        column: 29,
        span: 7226..7228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 352,
        column: 33,
        span: 7229..7232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 34,
        span: 7232..7233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 353,
        column: 7,
        span: 7234..7240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 8,
        span: 7240..7241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 353,
        column: 13,
        span: 7241..7246,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 353,
        column: 14,
        span: 7246..7247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 353,
        column: 20,
        span: 7247..7253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 21,
        span: 7253..7254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 353,
        column: 22,
        span: 7254..7255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 353,
        column: 23,
        span: 7255..7256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
        column: 25,
        span: 7256..7258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 26,
        span: 7258..7259,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 353,
        column: 29,
        span: 7260..7262,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 353,
        column: 33,
        span: 7263..7266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 34,
        span: 7266..7267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 354,
        column: 7,
        span: 7268..7274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 8,
        span: 7274..7275,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 354,
        column: 9,
        span: 7275..7276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 354,
        column: 10,
        span: 7276..7277,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 354,
        column: 13,
        span: 7278..7280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
        column: 15,
        span: 7280..7282,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 354,
        column: 19,
        span: 7283..7286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 354,
        column: 21,
        span: 7287..7288,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 354,
        column: 22,
        span: 7288..7289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 354,
        column: 23,
        span: 7289..7290,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 354,
        column: 26,
        span: 7291..7293,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 354,
        column: 30,
        span: 7294..7297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 31,
        span: 7297..7298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 356,
        column: 2,
        span: 7300..7301,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 356,
        column: 4,
        span: 7302..7303,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 356,
        column: 6,
        span: 7304..7305,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 8,
        span: 7304..7307,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
        column: 9,
        span: 7307..7308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 11,
        span: 7307..7310,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
        column: 12,
        span: 7310..7311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 14,
        span: 7310..7313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
        column: 15,
        span: 7313..7314,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
        column: 17,
        span: 7313..7316,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 356,
        column: 18,
        span: 7316..7317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 357,
        column: 7,
        span: 7318..7324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 8,
        span: 7324..7325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 357,
        column: 13,
        span: 7325..7330,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 357,
        column: 14,
        span: 7330..7331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 357,
        column: 20,
        span: 7331..7337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 21,
        span: 7337..7338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 357,
        column: 22,
        span: 7338..7339,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 357,
        column: 23,
        span: 7339..7340,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 357,
        column: 25,
        span: 7341..7342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 357,
        column: 26,
        span: 7342..7343,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 357,
        column: 28,
        span: 7344..7345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
        column: 30,
        span: 7345..7347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 31,
        span: 7347..7348,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 357,
        column: 34,
        span: 7349..7351,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 357,
        column: 38,
        span: 7352..7355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 39,
        span: 7355..7356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 7,
        span: 7357..7363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 8,
        span: 7363..7364,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 358,
        column: 11,
        span: 7364..7367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 358,
        column: 17,
        span: 7368..7373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 18,
        span: 7373..7374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 358,
        column: 23,
        span: 7374..7379,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 358,
        column: 24,
        span: 7379..7380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 358,
        column: 30,
        span: 7380..7386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 31,
        span: 7386..7387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 358,
        column: 33,
        span: 7388..7389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 358,
        column: 34,
        span: 7389..7390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
        column: 36,
        span: 7390..7392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 37,
        span: 7392..7393,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 38,
        span: 7393..7394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 359,
        column: 7,
        span: 7395..7401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 8,
        span: 7401..7402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 359,
        column: 9,
        span: 7402..7403,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 359,
        column: 10,
        span: 7403..7404,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 359,
        column: 11,
        span: 7404..7405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 359,
        column: 12,
        span: 7405..7406,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 359,
        column: 13,
        span: 7406..7407,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 359,
        column: 16,
        span: 7408..7410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 359,
        column: 19,
        span: 7410..7413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 20,
        span: 7413..7414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 360,
        column: 7,
        span: 7415..7421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 8,
        span: 7421..7422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 360,
        column: 13,
        span: 7422..7427,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 360,
        column: 14,
        span: 7427..7428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 360,
        column: 20,
        span: 7428..7434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 21,
        span: 7434..7435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 360,
        column: 22,
        span: 7435..7436,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
        column: 23,
        span: 7436..7437,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 360,
        column: 25,
        span: 7438..7439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 360,
        column: 26,
        span: 7439..7440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 27,
        span: 7440..7441,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 360,
        column: 30,
        span: 7442..7444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 33,
        span: 7444..7447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 34,
        span: 7447..7448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 361,
        column: 7,
        span: 7449..7455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 8,
        span: 7455..7456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 361,
        column: 9,
        span: 7456..7457,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 361,
        column: 10,
        span: 7457..7458,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 361,
        column: 11,
        span: 7458..7459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 361,
        column: 12,
        span: 7459..7460,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 361,
        column: 13,
        span: 7460..7461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 361,
        column: 16,
        span: 7462..7464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 361,
        column: 19,
        span: 7464..7467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 20,
        span: 7467..7468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 362,
        column: 7,
        span: 7469..7475,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 8,
        span: 7475..7476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 362,
        column: 13,
        span: 7476..7481,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 362,
        column: 14,
        span: 7481..7482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 362,
        column: 20,
        span: 7482..7488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 21,
        span: 7488..7489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 362,
        column: 22,
        span: 7489..7490,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 362,
        column: 23,
        span: 7490..7491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 362,
        column: 25,
        span: 7491..7493,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 26,
        span: 7493..7494,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 362,
        column: 29,
        span: 7495..7497,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 362,
        column: 32,
        span: 7497..7500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 33,
        span: 7500..7501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 363,
        column: 7,
        span: 7502..7508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 8,
        span: 7508..7509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 363,
        column: 9,
        span: 7509..7510,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 363,
        column: 10,
        span: 7510..7511,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 363,
        column: 11,
        span: 7511..7512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 363,
        column: 12,
        span: 7512..7513,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 363,
        column: 13,
        span: 7513..7514,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 363,
        column: 16,
        span: 7515..7517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 19,
        span: 7517..7520,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 363,
        column: 23,
        span: 7521..7524,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 363,
        column: 25,
        span: 7525..7526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 363,
        column: 26,
        span: 7526..7527,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 363,
        column: 29,
        span: 7528..7530,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 363,
        column: 31,
        span: 7530..7532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 32,
        span: 7532..7533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 364,
        column: 6,
        span: 7534..7539,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 7,
        span: 7539..7540,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 364,
        column: 10,
        span: 7540..7543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 11,
        span: 7543..7544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 366,
        column: 2,
        span: 7546..7547,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 366,
        column: 4,
        span: 7548..7549,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 366,
        column: 6,
        span: 7550..7551,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 366,
        column: 7,
        span: 7551..7552,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 367,
        column: 4,
        span: 7553..7556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 367,
        column: 6,
        span: 7557..7558,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
        column: 7,
        span: 7558..7559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 8,
        span: 7558..7560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 367,
        column: 9,
        span: 7560..7561,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 13,
        span: 7560..7565,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 367,
        column: 0,
        span: 7566..7568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 4,
        span: 7571..7572,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 368,
        column: 5,
        span: 7572..7573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 368,
        column: 6,
        span: 7573..7574,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 368,
        column: 7,
        span: 7574..7575,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 9,
        span: 7576..7577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 368,
        column: 11,
        span: 7578..7579,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 368,
        column: 12,
        span: 7579..7580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 14,
        span: 7581..7582,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 368,
        column: 15,
        span: 7582..7583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 368,
        column: 16,
        span: 7583..7584,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 368,
        column: 17,
        span: 7584..7585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 18,
        span: 7584..7586,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 368,
        column: 19,
        span: 7586..7587,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 21,
        span: 7588..7589,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 368,
        column: 0,
        span: 7590..7593,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 369,
        column: 0,
        span: 7594..7597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 370,
        column: 7,
        span: 7598..7604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 8,
        span: 7604..7605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 370,
        column: 12,
        span: 7605..7609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 13,
        span: 7609..7610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 370,
        column: 14,
        span: 7610..7611,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 15,
        span: 7611..7612,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 370,
        column: 18,
        span: 7612..7615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 19,
        span: 7615..7616,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 370,
        column: 22,
        span: 7617..7619,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
        column: 27,
        span: 7619..7624,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 370,
        column: 31,
        span: 7625..7628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 370,
        column: 36,
        span: 7629..7633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 37,
        span: 7633..7634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 370,
        column: 38,
        span: 7634..7635,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 370,
        column: 39,
        span: 7635..7636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 370,
        column: 43,
        span: 7635..7640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 44,
        span: 7640..7641,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 370,
        column: 47,
        span: 7642..7644,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 370,
        column: 51,
        span: 7645..7648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 52,
        span: 7648..7649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 372,
        column: 7,
        span: 7651..7657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 8,
        span: 7657..7658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 372,
        column: 12,
        span: 7658..7662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 13,
        span: 7662..7663,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 372,
        column: 14,
        span: 7663..7664,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 372,
        column: 15,
        span: 7664..7665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 16,
        span: 7665..7666,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 372,
        column: 19,
        span: 7667..7669,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 372,
        column: 23,
        span: 7670..7673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 24,
        span: 7673..7674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 373,
        column: 7,
        span: 7675..7681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 8,
        span: 7681..7682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 373,
        column: 12,
        span: 7682..7686,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 373,
        column: 13,
        span: 7686..7687,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 373,
        column: 14,
        span: 7687..7688,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 373,
        column: 15,
        span: 7688..7689,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 373,
        column: 16,
        span: 7689..7690,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 373,
        column: 20,
        span: 7691..7694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 21,
        span: 7694..7695,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 373,
        column: 24,
        span: 7696..7698,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 373,
        column: 28,
        span: 7699..7702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 373,
        column: 29,
        span: 7702..7703,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 375,
        column: 4,
        span: 7705..7708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 375,
        column: 6,
        span: 7709..7710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 375,
        column: 7,
        span: 7710..7711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 375,
        column: 8,
        span: 7711..7712,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 375,
        column: 11,
        span: 7713..7715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 375,
        column: 17,
        span: 7716..7721,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 375,
        column: 18,
        span: 7721..7722,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 375,
        column: 19,
        span: 7722..7723,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 375,
        column: 22,
        span: 7724..7726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 375,
        column: 28,
        span: 7727..7732,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not here\"",
        ),
        line: 375,
        column: 38,
        span: 7732..7742,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 375,
        column: 0,
        span: 7743..7746,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 376,
        column: 4,
        span: 7747..7750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 376,
        column: 6,
        span: 7751..7752,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 376,
        column: 7,
        span: 7752..7753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 8,
        span: 7752..7754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 376,
        column: 9,
        span: 7754..7755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 10,
        span: 7754..7756,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 376,
        column: 13,
        span: 7757..7759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 376,
        column: 19,
        span: 7760..7765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not here'",
        ),
        line: 376,
        column: 29,
        span: 7765..7775,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 376,
        column: 0,
        span: 7776..7779,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 377,
        column: 4,
        span: 7780..7783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 377,
        column: 6,
        span: 7784..7785,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 377,
        column: 7,
        span: 7785..7786,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
        column: 8,
        span: 7785..7787,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 377,
        column: 9,
        span: 7787..7788,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
        column: 10,
        span: 7787..7789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 377,
        column: 11,
        span: 7789..7790,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 377,
        column: 12,
        span: 7790..7791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 377,
        column: 13,
        span: 7790..7792,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 377,
        column: 16,
        span: 7793..7795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 377,
        column: 22,
        span: 7796..7801,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not here'",
        ),
        line: 377,
        column: 32,
        span: 7801..7811,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 377,
        column: 0,
        span: 7812..7815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 378,
        column: 2,
        span: 7816..7817,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 4,
        span: 7818..7819,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 378,
        column: 8,
        span: 7820..7823,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 378,
        column: 9,
        span: 7823..7824,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 378,
        column: 13,
        span: 7825..7828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 378,
        column: 15,
        span: 7829..7830,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 16,
        span: 7830..7831,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 17,
        span: 7830..7832,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
        column: 18,
        span: 7832..7833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 19,
        span: 7832..7834,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 378,
        column: 22,
        span: 7835..7837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 378,
        column: 29,
        span: 7838..7844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 30,
        span: 7844..7845,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 378,
        column: 33,
        span: 7845..7848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 378,
        column: 35,
        span: 7849..7850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 36,
        span: 7850..7851,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 378,
        column: 37,
        span: 7851..7852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 378,
        column: 39,
        span: 7853..7854,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 40,
        span: 7854..7855,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 378,
        column: 41,
        span: 7854..7856,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 378,
        column: 45,
        span: 7857..7860,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 378,
        column: 46,
        span: 7860..7861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 378,
        column: 53,
        span: 7862..7868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
        column: 54,
        span: 7868..7869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 378,
        column: 55,
        span: 7869..7870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
        column: 56,
        span: 7870..7871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 379,
        column: 2,
        span: 7872..7873,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 379,
        column: 4,
        span: 7874..7875,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 379,
        column: 8,
        span: 7876..7879,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 379,
        column: 9,
        span: 7879..7880,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 379,
        column: 13,
        span: 7881..7884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 379,
        column: 15,
        span: 7885..7886,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 379,
        column: 16,
        span: 7886..7887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 379,
        column: 17,
        span: 7886..7888,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
        column: 18,
        span: 7888..7889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 379,
        column: 19,
        span: 7888..7890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 379,
        column: 20,
        span: 7890..7891,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 379,
        column: 21,
        span: 7891..7892,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 379,
        column: 22,
        span: 7891..7893,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 379,
        column: 25,
        span: 7894..7896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 379,
        column: 32,
        span: 7897..7903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 33,
        span: 7903..7904,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 379,
        column: 36,
        span: 7904..7907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 379,
        column: 38,
        span: 7908..7909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 39,
        span: 7909..7910,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 379,
        column: 40,
        span: 7910..7911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 379,
        column: 42,
        span: 7912..7913,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 379,
        column: 43,
        span: 7913..7914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 379,
        column: 44,
        span: 7913..7915,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 379,
        column: 48,
        span: 7916..7919,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 379,
        column: 49,
        span: 7919..7920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 379,
        column: 56,
        span: 7921..7927,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 379,
        column: 57,
        span: 7927..7928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 379,
        column: 58,
        span: 7928..7929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 379,
        column: 59,
        span: 7929..7930,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 381,
        column: 3,
        span: 7932..7934,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 381,
        column: 7,
        span: 7935..7938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 381,
        column: 13,
        span: 7939..7944,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 381,
        column: 0,
        span: 7945..7949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 382,
        column: 8,
        span: 7952..7957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 9,
        span: 7957..7958,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing precision in numeric for\"",
        ),
        line: 382,
        column: 43,
        span: 7958..7992,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 44,
        span: 7992..7993,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 383,
        column: 8,
        span: 7996..8001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 10,
        span: 8002..8003,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
        column: 12,
        span: 8004..8005,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 14,
        span: 8005..8007,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 383,
        column: 15,
        span: 8007..8008,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 383,
        column: 19,
        span: 8009..8012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 383,
        column: 21,
        span: 8013..8014,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
        column: 22,
        span: 8014..8015,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 23,
        span: 8014..8016,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 24,
        span: 8016..8017,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 26,
        span: 8017..8019,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 27,
        span: 8019..8020,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 383,
        column: 31,
        span: 8020..8024,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 383,
        column: 34,
        span: 8025..8027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 36,
        span: 8028..8029,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
        column: 37,
        span: 8029..8030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 38,
        span: 8030..8031,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 383,
        column: 39,
        span: 8031..8032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 40,
        span: 8031..8033,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 383,
        column: 44,
        span: 8034..8037,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 383,
        column: 45,
        span: 8037..8038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
        column: 52,
        span: 8039..8045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 53,
        span: 8045..8046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 54,
        span: 8046..8047,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 383,
        column: 56,
        span: 8047..8049,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 58,
        span: 8048..8051,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 59,
        span: 8051..8052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
        column: 4,
        span: 8055..8056,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 6,
        span: 8057..8058,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 384,
        column: 8,
        span: 8058..8060,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 384,
        column: 9,
        span: 8060..8061,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 384,
        column: 13,
        span: 8062..8065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 384,
        column: 15,
        span: 8066..8067,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 16,
        span: 8067..8068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 384,
        column: 17,
        span: 8067..8069,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 18,
        span: 8069..8070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".999999999",
                },
            ),
        ),
        line: 384,
        column: 30,
        span: 8070..8082,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 31,
        span: 8082..8083,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 384,
        column: 35,
        span: 8083..8087,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 384,
        column: 38,
        span: 8088..8090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
        column: 40,
        span: 8091..8092,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 41,
        span: 8092..8093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
        column: 42,
        span: 8093..8094,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 384,
        column: 43,
        span: 8094..8095,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 384,
        column: 44,
        span: 8094..8096,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 384,
        column: 48,
        span: 8097..8100,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 384,
        column: 49,
        span: 8100..8101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 384,
        column: 56,
        span: 8102..8108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 384,
        column: 57,
        span: 8108..8109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
        column: 58,
        span: 8109..8110,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 384,
        column: 60,
        span: 8110..8112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 384,
        column: 62,
        span: 8111..8114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 384,
        column: 63,
        span: 8114..8115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
        column: 4,
        span: 8118..8119,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 6,
        span: 8120..8121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 8,
        span: 8121..8123,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 385,
        column: 9,
        span: 8123..8124,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 385,
        column: 13,
        span: 8125..8128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 385,
        column: 15,
        span: 8129..8130,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 16,
        span: 8130..8131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 17,
        span: 8130..8132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 18,
        span: 8132..8133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 20,
        span: 8133..8135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 21,
        span: 8135..8136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 23,
        span: 8136..8138,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 385,
        column: 26,
        span: 8139..8141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
        column: 28,
        span: 8142..8143,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 29,
        span: 8143..8144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
        column: 30,
        span: 8144..8145,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 385,
        column: 31,
        span: 8145..8146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 32,
        span: 8145..8147,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 385,
        column: 36,
        span: 8148..8151,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 385,
        column: 37,
        span: 8151..8152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 385,
        column: 44,
        span: 8153..8159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 45,
        span: 8159..8160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
        column: 46,
        span: 8160..8161,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 385,
        column: 48,
        span: 8161..8163,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 49,
        span: 8162..8164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 50,
        span: 8164..8165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 386,
        column: 4,
        span: 8168..8169,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 386,
        column: 6,
        span: 8170..8171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 8,
        span: 8171..8173,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 386,
        column: 9,
        span: 8173..8174,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 386,
        column: 13,
        span: 8175..8178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 386,
        column: 15,
        span: 8179..8180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 386,
        column: 16,
        span: 8180..8181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "10",
            },
        ),
        line: 386,
        column: 20,
        span: 8180..8185,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 21,
        span: 8185..8186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "10",
            },
        ),
        line: 386,
        column: 26,
        span: 8186..8191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 386,
        column: 27,
        span: 8191..8192,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 386,
        column: 29,
        span: 8193..8194,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 30,
        span: 8193..8195,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 386,
        column: 33,
        span: 8196..8198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 386,
        column: 35,
        span: 8199..8200,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 386,
        column: 36,
        span: 8200..8201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 386,
        column: 37,
        span: 8201..8202,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 386,
        column: 38,
        span: 8202..8203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 39,
        span: 8202..8204,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 386,
        column: 43,
        span: 8205..8208,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 386,
        column: 44,
        span: 8208..8209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 386,
        column: 51,
        span: 8210..8216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 52,
        span: 8216..8217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 386,
        column: 53,
        span: 8217..8218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 55,
        span: 8218..8220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 56,
        span: 8219..8221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 57,
        span: 8221..8222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 387,
        column: 4,
        span: 8225..8226,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 387,
        column: 6,
        span: 8227..8228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 8,
        span: 8228..8230,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 387,
        column: 9,
        span: 8230..8231,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 387,
        column: 13,
        span: 8232..8235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 387,
        column: 15,
        span: 8236..8237,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 387,
        column: 16,
        span: 8237..8238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 17,
        span: 8237..8239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 387,
        column: 18,
        span: 8239..8240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".99999",
                },
            ),
        ),
        line: 387,
        column: 26,
        span: 8240..8248,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 387,
        column: 27,
        span: 8248..8249,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 29,
        span: 8249..8251,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 387,
        column: 32,
        span: 8252..8254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 387,
        column: 34,
        span: 8255..8256,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 387,
        column: 35,
        span: 8256..8257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 387,
        column: 36,
        span: 8257..8258,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 387,
        column: 37,
        span: 8258..8259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 38,
        span: 8258..8260,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 387,
        column: 42,
        span: 8261..8264,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 387,
        column: 43,
        span: 8264..8265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
        column: 50,
        span: 8266..8272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 51,
        span: 8272..8273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 387,
        column: 52,
        span: 8273..8274,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 387,
        column: 54,
        span: 8274..8276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 55,
        span: 8275..8277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 56,
        span: 8277..8278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 388,
        column: 4,
        span: 8281..8282,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 388,
        column: 6,
        span: 8283..8284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
        column: 8,
        span: 8284..8286,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 388,
        column: 9,
        span: 8286..8287,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 388,
        column: 13,
        span: 8288..8291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 388,
        column: 15,
        span: 8292..8293,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 388,
        column: 16,
        span: 8293..8294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "99999",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
        column: 21,
        span: 8293..8299,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 388,
        column: 22,
        span: 8299..8300,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "5",
            },
        ),
        line: 388,
        column: 26,
        span: 8300..8304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 388,
        column: 27,
        span: 8304..8305,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 388,
        column: 29,
        span: 8306..8307,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
        column: 30,
        span: 8306..8308,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 388,
        column: 33,
        span: 8309..8311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 388,
        column: 35,
        span: 8312..8313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 388,
        column: 36,
        span: 8313..8314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 388,
        column: 37,
        span: 8314..8315,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 388,
        column: 38,
        span: 8315..8316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
        column: 39,
        span: 8315..8317,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 388,
        column: 43,
        span: 8318..8321,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 388,
        column: 44,
        span: 8321..8322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 388,
        column: 51,
        span: 8323..8329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
        column: 52,
        span: 8329..8330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 388,
        column: 53,
        span: 8330..8331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 388,
        column: 55,
        span: 8331..8333,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 388,
        column: 56,
        span: 8332..8334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 57,
        span: 8334..8335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 389,
        column: 4,
        span: 8338..8339,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 389,
        column: 6,
        span: 8340..8341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 8,
        span: 8341..8343,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 389,
        column: 9,
        span: 8343..8344,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 389,
        column: 13,
        span: 8345..8348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 389,
        column: 15,
        span: 8349..8350,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 389,
        column: 16,
        span: 8350..8351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 17,
        span: 8350..8352,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 389,
        column: 18,
        span: 8352..8353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".99999",
                },
            ),
        ),
        line: 389,
        column: 26,
        span: 8353..8361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 389,
        column: 27,
        span: 8361..8362,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 389,
        column: 29,
        span: 8363..8364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 30,
        span: 8363..8365,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 389,
        column: 33,
        span: 8366..8368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 389,
        column: 35,
        span: 8369..8370,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 389,
        column: 36,
        span: 8370..8371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 389,
        column: 37,
        span: 8371..8372,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 389,
        column: 38,
        span: 8372..8373,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 39,
        span: 8372..8374,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 389,
        column: 43,
        span: 8375..8378,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 389,
        column: 44,
        span: 8378..8379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 389,
        column: 51,
        span: 8380..8386,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 52,
        span: 8386..8387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 389,
        column: 53,
        span: 8387..8388,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
        column: 55,
        span: 8388..8390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 56,
        span: 8389..8391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 57,
        span: 8391..8392,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 390,
        column: 0,
        span: 8393..8396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 393,
        column: 2,
        span: 8412..8413,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 393,
        column: 4,
        span: 8414..8415,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 6,
        span: 8415..8417,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 393,
        column: 7,
        span: 8417..8418,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 393,
        column: 11,
        span: 8419..8422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 393,
        column: 13,
        span: 8423..8424,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 393,
        column: 14,
        span: 8424..8425,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 393,
        column: 18,
        span: 8425..8429,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 19,
        span: 8429..8430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 393,
        column: 22,
        span: 8430..8433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 23,
        span: 8433..8434,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-2\"",
        ),
        line: 393,
        column: 27,
        span: 8434..8438,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 393,
        column: 30,
        span: 8439..8441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 393,
        column: 32,
        span: 8442..8443,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 393,
        column: 33,
        span: 8443..8444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 393,
        column: 34,
        span: 8444..8445,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 393,
        column: 35,
        span: 8445..8446,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 36,
        span: 8445..8447,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 393,
        column: 40,
        span: 8448..8451,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 393,
        column: 41,
        span: 8451..8452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 393,
        column: 48,
        span: 8453..8459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 393,
        column: 49,
        span: 8459..8460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 393,
        column: 50,
        span: 8460..8461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 393,
        column: 52,
        span: 8461..8463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 53,
        span: 8462..8464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 393,
        column: 54,
        span: 8464..8465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 396,
        column: 15,
        span: 8468..8482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 16,
        span: 8482..8483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 17,
        span: 8483..8484,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 401,
        column: 6,
        span: 8513..8518,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 401,
        column: 15,
        span: 8519..8527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 401,
        column: 17,
        span: 8528..8529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
        column: 19,
        span: 8530..8531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 401,
        column: 20,
        span: 8531..8532,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
        column: 21,
        span: 8532..8533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 401,
        column: 23,
        span: 8534..8535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 24,
        span: 8535..8536,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 402,
        column: 8,
        span: 8539..8544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 402,
        column: 10,
        span: 8545..8546,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
        column: 12,
        span: 8547..8548,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 402,
        column: 14,
        span: 8549..8550,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 402,
        column: 15,
        span: 8550..8551,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 402,
        column: 16,
        span: 8551..8552,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 402,
        column: 20,
        span: 8553..8556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 402,
        column: 22,
        span: 8557..8558,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
        column: 23,
        span: 8558..8559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 24,
        span: 8558..8560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 402,
        column: 25,
        span: 8560..8561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 402,
        column: 26,
        span: 8561..8562,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 402,
        column: 29,
        span: 8563..8565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 402,
        column: 31,
        span: 8566..8567,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 402,
        column: 32,
        span: 8567..8568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 402,
        column: 33,
        span: 8568..8569,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 402,
        column: 34,
        span: 8569..8570,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 402,
        column: 36,
        span: 8571..8572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 402,
        column: 38,
        span: 8573..8574,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 402,
        column: 39,
        span: 8574..8575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 41,
        span: 8574..8577,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 402,
        column: 0,
        span: 8578..8581,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 403,
        column: 9,
        span: 8584..8590,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 403,
        column: 18,
        span: 8591..8599,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 403,
        column: 20,
        span: 8600..8601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 403,
        column: 21,
        span: 8601..8602,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 403,
        column: 22,
        span: 8602..8603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 403,
        column: 23,
        span: 8603..8604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 403,
        column: 24,
        span: 8604..8605,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 404,
        column: 14,
        span: 8617..8619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 404,
        column: 16,
        span: 8620..8621,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 404,
        column: 18,
        span: 8622..8623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 404,
        column: 20,
        span: 8623..8625,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 404,
        column: 0,
        span: 8626..8630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 405,
        column: 15,
        span: 8644..8645,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 405,
        column: 17,
        span: 8646..8647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 405,
        column: 19,
        span: 8648..8649,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 405,
        column: 20,
        span: 8649..8650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 405,
        column: 0,
        span: 8649..8651,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 406,
        column: 20,
        span: 8665..8671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 406,
        column: 22,
        span: 8672..8673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 406,
        column: 23,
        span: 8673..8674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 406,
        column: 29,
        span: 8675..8680,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 406,
        column: 30,
        span: 8680..8681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 406,
        column: 36,
        span: 8681..8687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
        column: 37,
        span: 8687..8688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 406,
        column: 38,
        span: 8688..8689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
        column: 39,
        span: 8689..8690,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 407,
        column: 0,
        span: 8702..8705,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 408,
        column: 13,
        span: 8715..8718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 14,
        span: 8718..8719,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 408,
        column: 18,
        span: 8720..8723,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 408,
        column: 19,
        span: 8723..8724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 408,
        column: 0,
        span: 8725..8726,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 409,
        column: 0,
        span: 8727..8730,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 411,
        column: 6,
        span: 8732..8737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 411,
        column: 8,
        span: 8738..8739,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 411,
        column: 10,
        span: 8740..8741,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 0,
        span: 8741..8743,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 412,
        column: 4,
        span: 8744..8747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 412,
        column: 6,
        span: 8748..8749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 7,
        span: 8749..8750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 412,
        column: 8,
        span: 8750..8751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 9,
        span: 8751..8752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 412,
        column: 10,
        span: 8752..8753,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 11,
        span: 8753..8754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 412,
        column: 12,
        span: 8754..8755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 13,
        span: 8755..8756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 412,
        column: 14,
        span: 8756..8757,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 412,
        column: 17,
        span: 8758..8760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 412,
        column: 19,
        span: 8761..8762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 20,
        span: 8762..8763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 21,
        span: 8762..8764,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 412,
        column: 22,
        span: 8764..8765,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 23,
        span: 8764..8766,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 24,
        span: 8766..8767,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 412,
        column: 0,
        span: 8768..8770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 413,
        column: 4,
        span: 8773..8774,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 413,
        column: 6,
        span: 8775..8776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 413,
        column: 8,
        span: 8777..8778,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 413,
        column: 9,
        span: 8778..8779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 413,
        column: 0,
        span: 8778..8780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 414,
        column: 9,
        span: 8783..8789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 10,
        span: 8789..8790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 414,
        column: 11,
        span: 8790..8791,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 414,
        column: 14,
        span: 8792..8794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
        column: 17,
        span: 8794..8797,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 414,
        column: 21,
        span: 8798..8801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 414,
        column: 23,
        span: 8802..8803,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 414,
        column: 26,
        span: 8804..8806,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
        column: 29,
        span: 8806..8809,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 414,
        column: 33,
        span: 8810..8813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 414,
        column: 35,
        span: 8814..8815,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 414,
        column: 38,
        span: 8816..8818,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 414,
        column: 41,
        span: 8818..8821,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 414,
        column: 45,
        span: 8822..8825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 414,
        column: 47,
        span: 8826..8827,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 414,
        column: 50,
        span: 8828..8830,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 414,
        column: 54,
        span: 8831..8834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 55,
        span: 8834..8835,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 415,
        column: 0,
        span: 8836..8839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 416,
        column: 7,
        span: 8840..8846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 8,
        span: 8846..8847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 416,
        column: 9,
        span: 8847..8848,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 416,
        column: 12,
        span: 8849..8851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 416,
        column: 14,
        span: 8851..8853,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 15,
        span: 8853..8854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 421,
        column: 2,
        span: 8901..8902,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 421,
        column: 4,
        span: 8903..8904,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 421,
        column: 6,
        span: 8905..8906,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 421,
        column: 7,
        span: 8906..8907,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 422,
        column: 0,
        span: 8908..8910,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 423,
        column: 8,
        span: 8913..8918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 423,
        column: 10,
        span: 8919..8920,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
        column: 11,
        span: 8920..8921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 423,
        column: 12,
        span: 8921..8922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 423,
        column: 13,
        span: 8922..8923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 423,
        column: 14,
        span: 8923..8924,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 423,
        column: 16,
        span: 8925..8926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 423,
        column: 22,
        span: 8927..8932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 23,
        span: 8932..8933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 423,
        column: 24,
        span: 8933..8934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 25,
        span: 8934..8935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 424,
        column: 9,
        span: 8938..8944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 10,
        span: 8944..8945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 424,
        column: 14,
        span: 8945..8949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 15,
        span: 8949..8950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 424,
        column: 16,
        span: 8950..8951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 17,
        span: 8951..8952,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
        column: 20,
        span: 8953..8955,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        line: 424,
        column: 31,
        span: 8956..8966,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 424,
        column: 35,
        span: 8967..8970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 424,
        column: 37,
        span: 8971..8972,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
        column: 40,
        span: 8973..8975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 42,
        span: 8976..8977,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 424,
        column: 46,
        span: 8978..8981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 424,
        column: 48,
        span: 8982..8983,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
        column: 51,
        span: 8984..8986,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 424,
        column: 55,
        span: 8987..8990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 56,
        span: 8990..8991,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 425,
        column: 0,
        span: 8992..8995,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 427,
        column: 6,
        span: 8997..9002,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 427,
        column: 15,
        span: 9003..9011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 427,
        column: 19,
        span: 9012..9015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 21,
        span: 9016..9017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 427,
        column: 22,
        span: 9017..9018,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 427,
        column: 23,
        span: 9018..9019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 427,
        column: 24,
        span: 9019..9020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 25,
        span: 9020..9021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 428,
        column: 9,
        span: 9024..9030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 10,
        span: 9030..9031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 428,
        column: 11,
        span: 9031..9032,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 428,
        column: 14,
        span: 9033..9035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 428,
        column: 16,
        span: 9036..9037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 17,
        span: 9037..9038,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 429,
        column: 5,
        span: 9041..9043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 429,
        column: 7,
        span: 9044..9045,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 429,
        column: 10,
        span: 9046..9048,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
        column: 13,
        span: 9048..9051,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 429,
        column: 18,
        span: 9052..9056,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 429,
        column: 25,
        span: 9057..9063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 429,
        column: 27,
        span: 9064..9065,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 429,
        column: 28,
        span: 9065..9066,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
        column: 29,
        span: 9065..9067,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 429,
        column: 30,
        span: 9067..9068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 429,
        column: 32,
        span: 9069..9070,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 429,
        column: 33,
        span: 9070..9071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 429,
        column: 34,
        span: 9070..9072,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 429,
        column: 0,
        span: 9073..9076,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 430,
        column: 0,
        span: 9077..9080,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 432,
        column: 6,
        span: 9082..9087,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 432,
        column: 15,
        span: 9088..9096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 432,
        column: 20,
        span: 9097..9101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 432,
        column: 22,
        span: 9102..9103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 432,
        column: 23,
        span: 9103..9104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 24,
        span: 9104..9105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 432,
        column: 25,
        span: 9105..9106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 432,
        column: 26,
        span: 9106..9107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 433,
        column: 4,
        span: 9110..9111,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 433,
        column: 6,
        span: 9112..9113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 433,
        column: 8,
        span: 9114..9115,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 433,
        column: 10,
        span: 9116..9117,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 433,
        column: 0,
        span: 9117..9119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 434,
        column: 9,
        span: 9122..9128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 434,
        column: 10,
        span: 9128..9129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 434,
        column: 11,
        span: 9129..9130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 434,
        column: 14,
        span: 9131..9133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 434,
        column: 16,
        span: 9134..9135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 434,
        column: 17,
        span: 9135..9136,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 435,
        column: 5,
        span: 9139..9141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 435,
        column: 7,
        span: 9142..9143,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 435,
        column: 10,
        span: 9144..9146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 435,
        column: 12,
        span: 9147..9148,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 435,
        column: 13,
        span: 9148..9149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 435,
        column: 14,
        span: 9149..9150,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 435,
        column: 19,
        span: 9151..9155,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 435,
        column: 26,
        span: 9156..9162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 435,
        column: 28,
        span: 9163..9164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 435,
        column: 29,
        span: 9164..9165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 435,
        column: 30,
        span: 9165..9166,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 435,
        column: 31,
        span: 9166..9167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 435,
        column: 32,
        span: 9167..9168,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 435,
        column: 33,
        span: 9168..9169,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 435,
        column: 0,
        span: 9170..9173,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 436,
        column: 0,
        span: 9174..9177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 438,
        column: 13,
        span: 9179..9191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
        column: 14,
        span: 9191..9192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 438,
        column: 15,
        span: 9192..9193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 438,
        column: 16,
        span: 9193..9194,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 438,
        column: 18,
        span: 9195..9196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__pairs",
        ),
        line: 438,
        column: 25,
        span: 9196..9203,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 438,
        column: 27,
        span: 9204..9205,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 438,
        column: 36,
        span: 9206..9214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 438,
        column: 38,
        span: 9215..9216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 438,
        column: 39,
        span: 9216..9217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
        column: 40,
        span: 9217..9218,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 438,
        column: 47,
        span: 9219..9225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 438,
        column: 51,
        span: 9226..9229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 438,
        column: 52,
        span: 9229..9230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 438,
        column: 54,
        span: 9231..9232,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 438,
        column: 55,
        span: 9232..9233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 438,
        column: 57,
        span: 9233..9235,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 438,
        column: 61,
        span: 9236..9239,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 438,
        column: 62,
        span: 9239..9240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 438,
        column: 63,
        span: 9240..9241,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 440,
        column: 6,
        span: 9243..9248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 440,
        column: 8,
        span: 9249..9250,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 440,
        column: 10,
        span: 9251..9252,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 440,
        column: 0,
        span: 9252..9254,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 441,
        column: 4,
        span: 9255..9258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 441,
        column: 6,
        span: 9259..9260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
        column: 7,
        span: 9260..9261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 441,
        column: 8,
        span: 9261..9262,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 441,
        column: 11,
        span: 9263..9265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 441,
        column: 17,
        span: 9266..9271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 441,
        column: 18,
        span: 9271..9272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 441,
        column: 19,
        span: 9272..9273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 441,
        column: 20,
        span: 9273..9274,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 441,
        column: 0,
        span: 9275..9277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 442,
        column: 4,
        span: 9280..9281,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 6,
        span: 9282..9283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 442,
        column: 8,
        span: 9284..9285,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 442,
        column: 10,
        span: 9286..9287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 442,
        column: 0,
        span: 9287..9289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 443,
        column: 9,
        span: 9292..9298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 10,
        span: 9298..9299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 443,
        column: 11,
        span: 9299..9300,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 443,
        column: 14,
        span: 9301..9303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 443,
        column: 16,
        span: 9304..9305,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 443,
        column: 20,
        span: 9306..9309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 443,
        column: 22,
        span: 9310..9311,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 443,
        column: 25,
        span: 9312..9314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 443,
        column: 27,
        span: 9315..9316,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 443,
        column: 28,
        span: 9316..9317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 443,
        column: 29,
        span: 9316..9318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 30,
        span: 9318..9319,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 444,
        column: 0,
        span: 9320..9323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 446,
        column: 2,
        span: 9325..9326,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 446,
        column: 3,
        span: 9326..9327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 446,
        column: 4,
        span: 9327..9328,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 446,
        column: 6,
        span: 9329..9330,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 446,
        column: 0,
        span: 9330..9332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 447,
        column: 2,
        span: 9333..9334,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 447,
        column: 3,
        span: 9334..9335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 447,
        column: 4,
        span: 9334..9336,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 447,
        column: 5,
        span: 9336..9337,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 447,
        column: 7,
        span: 9338..9339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 447,
        column: 0,
        span: 9339..9342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 449,
        column: 2,
        span: 9344..9345,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 449,
        column: 4,
        span: 9346..9347,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 449,
        column: 6,
        span: 9348..9349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 449,
        column: 7,
        span: 9349..9350,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 449,
        column: 8,
        span: 9350..9351,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 449,
        column: 10,
        span: 9350..9353,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 449,
        column: 11,
        span: 9353..9354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 450,
        column: 13,
        span: 9355..9367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 14,
        span: 9367..9368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 450,
        column: 15,
        span: 9368..9369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
        column: 16,
        span: 9369..9370,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 450,
        column: 18,
        span: 9371..9372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 450,
        column: 23,
        span: 9372..9377,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 450,
        column: 25,
        span: 9378..9379,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 450,
        column: 34,
        span: 9380..9388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 36,
        span: 9389..9390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 450,
        column: 37,
        span: 9390..9391,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 38,
        span: 9391..9392,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 450,
        column: 45,
        span: 9393..9399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 450,
        column: 47,
        span: 9400..9401,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 450,
        column: 48,
        span: 9401..9402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 450,
        column: 49,
        span: 9402..9403,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 450,
        column: 53,
        span: 9404..9407,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
        column: 54,
        span: 9407..9408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__ipairs",
        ),
        line: 451,
        column: 26,
        span: 9426..9434,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 451,
        column: 28,
        span: 9435..9436,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 451,
        column: 37,
        span: 9437..9445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 39,
        span: 9446..9447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 451,
        column: 40,
        span: 9447..9448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 41,
        span: 9448..9449,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 451,
        column: 48,
        span: 9450..9456,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 451,
        column: 57,
        span: 9457..9465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 59,
        span: 9466..9467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 451,
        column: 60,
        span: 9467..9468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 451,
        column: 61,
        span: 9468..9469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 451,
        column: 62,
        span: 9469..9470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 63,
        span: 9470..9471,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 452,
        column: 32,
        span: 9501..9503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 452,
        column: 34,
        span: 9504..9505,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 452,
        column: 36,
        span: 9506..9507,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 452,
        column: 38,
        span: 9508..9509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 452,
        column: 39,
        span: 9509..9510,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 452,
        column: 44,
        span: 9511..9515,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 452,
        column: 51,
        span: 9516..9522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 452,
        column: 53,
        span: 9523..9524,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 452,
        column: 54,
        span: 9524..9525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 452,
        column: 55,
        span: 9524..9526,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 452,
        column: 0,
        span: 9527..9530,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 453,
        column: 31,
        span: 9558..9561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 453,
        column: 32,
        span: 9561..9562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 453,
        column: 34,
        span: 9563..9564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 453,
        column: 35,
        span: 9564..9565,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 453,
        column: 37,
        span: 9565..9567,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 453,
        column: 41,
        span: 9568..9571,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 453,
        column: 42,
        span: 9571..9572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 453,
        column: 43,
        span: 9572..9573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 454,
        column: 2,
        span: 9574..9575,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 454,
        column: 4,
        span: 9576..9577,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 454,
        column: 0,
        span: 9577..9579,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 455,
        column: 4,
        span: 9580..9583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 455,
        column: 6,
        span: 9584..9585,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 455,
        column: 7,
        span: 9585..9586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 455,
        column: 8,
        span: 9586..9587,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 455,
        column: 11,
        span: 9588..9590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ipairs",
        ),
        line: 455,
        column: 18,
        span: 9591..9597,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 19,
        span: 9597..9598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 455,
        column: 20,
        span: 9598..9599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 21,
        span: 9599..9600,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 455,
        column: 0,
        span: 9601..9603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 456,
        column: 4,
        span: 9606..9607,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 456,
        column: 6,
        span: 9608..9609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 456,
        column: 8,
        span: 9610..9611,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 456,
        column: 10,
        span: 9612..9613,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 456,
        column: 0,
        span: 9613..9615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 457,
        column: 9,
        span: 9618..9624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 10,
        span: 9624..9625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 457,
        column: 11,
        span: 9625..9626,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 457,
        column: 14,
        span: 9627..9629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 457,
        column: 16,
        span: 9630..9631,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 457,
        column: 20,
        span: 9632..9635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 457,
        column: 22,
        span: 9636..9637,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 457,
        column: 25,
        span: 9638..9640,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 457,
        column: 29,
        span: 9641..9644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 30,
        span: 9644..9645,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 458,
        column: 0,
        span: 9646..9649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 459,
        column: 7,
        span: 9650..9656,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 459,
        column: 8,
        span: 9656..9657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 459,
        column: 9,
        span: 9657..9658,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 459,
        column: 12,
        span: 9659..9661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 459,
        column: 14,
        span: 9662..9663,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 459,
        column: 15,
        span: 9663..9664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 459,
        column: 16,
        span: 9664..9665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 459,
        column: 17,
        span: 9665..9666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 461,
        column: 6,
        span: 9668..9673,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 461,
        column: 10,
        span: 9673..9677,
    },
]
