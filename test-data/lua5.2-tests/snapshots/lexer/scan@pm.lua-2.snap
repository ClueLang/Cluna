---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/pm.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1,
            column: 5,
            span: 0..5,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1,
            column: 6,
            span: 5..6,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing pattern matching'",
        ),
        position: Position {
            line: 1,
            column: 32,
            span: 6..32,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1,
            column: 33,
            span: 32..33,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 3,
            column: 9,
            span: 35..43,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 3,
            column: 11,
            span: 44..45,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 12,
            span: 45..46,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 3,
            column: 13,
            span: 46..47,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 3,
            column: 14,
            span: 47..48,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 3,
            column: 16,
            span: 49..50,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 17,
            span: 50..51,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 4,
            column: 8,
            span: 54..59,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 4,
            column: 10,
            span: 60..61,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 4,
            column: 11,
            span: 61..62,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 4,
            column: 12,
            span: 62..63,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 4,
            column: 14,
            span: 64..65,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 4,
            column: 21,
            span: 66..72,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 4,
            column: 22,
            span: 72..73,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 4,
            column: 26,
            span: 73..77,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 4,
            column: 27,
            span: 77..78,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 4,
            column: 28,
            span: 78..79,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 4,
            column: 29,
            span: 79..80,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 4,
            column: 31,
            span: 81..82,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 4,
            column: 32,
            span: 82..83,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 5,
            column: 5,
            span: 86..88,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 5,
            column: 7,
            span: 89..90,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 5,
            column: 12,
            span: 91..95,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 5,
            column: 19,
            span: 96..102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 5,
            column: 26,
            span: 103..109,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 5,
            column: 27,
            span: 109..110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 5,
            column: 30,
            span: 110..113,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 31,
            span: 113..114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 5,
            column: 32,
            span: 114..115,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 5,
            column: 33,
            span: 115..116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 5,
            column: 35,
            span: 117..118,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 5,
            column: 36,
            span: 118..119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 5,
            column: 38,
            span: 120..121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 39,
            span: 121..122,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 5,
            column: 0,
            span: 123..126,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 6,
            column: 0,
            span: 127..130,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 8,
            column: 9,
            span: 132..140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 8,
            column: 12,
            span: 141..143,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 13,
            span: 143..144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 8,
            column: 14,
            span: 144..145,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 8,
            column: 15,
            span: 145..146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 8,
            column: 17,
            span: 147..148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 18,
            span: 148..149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 9,
            column: 4,
            span: 152..153,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 9,
            column: 6,
            span: 154..155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 9,
            column: 13,
            span: 156..162,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 9,
            column: 14,
            span: 162..163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 9,
            column: 18,
            span: 163..167,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 19,
            span: 167..168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 9,
            column: 20,
            span: 168..169,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 9,
            column: 21,
            span: 169..170,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%([0-9])\"",
        ),
        position: Position {
            line: 9,
            column: 33,
            span: 171..182,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 9,
            column: 34,
            span: 182..183,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 9,
            column: 43,
            span: 184..192,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 45,
            span: 193..194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 9,
            column: 46,
            span: 194..195,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 47,
            span: 195..196,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 9,
            column: 54,
            span: 197..203,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        position: Position {
            line: 9,
            column: 58,
            span: 204..207,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 9,
            column: 61,
            span: 208..210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 63,
            span: 211..212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 9,
            column: 64,
            span: 212..213,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 9,
            column: 65,
            span: 213..214,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 9,
            column: 66,
            span: 213..215,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 67,
            span: 215..216,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 9,
            column: 71,
            span: 217..220,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 72,
            span: 220..221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 10,
            column: 4,
            span: 224..225,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 10,
            column: 6,
            span: 226..227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 10,
            column: 13,
            span: 228..234,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 10,
            column: 14,
            span: 234..235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 10,
            column: 18,
            span: 235..239,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 19,
            span: 239..240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 10,
            column: 20,
            span: 240..241,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 10,
            column: 21,
            span: 241..242,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(^?)\"",
        ),
        position: Position {
            line: 10,
            column: 29,
            span: 243..250,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 10,
            column: 30,
            span: 250..251,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1()\"",
        ),
        position: Position {
            line: 10,
            column: 37,
            span: 252..258,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 10,
            column: 38,
            span: 258..259,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 10,
            column: 40,
            span: 259..261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 41,
            span: 261..262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 11,
            column: 4,
            span: 265..266,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 11,
            column: 6,
            span: 267..268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 11,
            column: 13,
            span: 269..275,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 11,
            column: 14,
            span: 275..276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 11,
            column: 18,
            span: 276..280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 19,
            span: 280..281,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 11,
            column: 20,
            span: 281..282,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 11,
            column: 21,
            span: 282..283,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"($?)$\"",
        ),
        position: Position {
            line: 11,
            column: 29,
            span: 284..291,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 11,
            column: 30,
            span: 291..292,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()%1\"",
        ),
        position: Position {
            line: 11,
            column: 37,
            span: 293..299,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 11,
            column: 38,
            span: 299..300,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 11,
            column: 40,
            span: 300..302,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 41,
            span: 302..303,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 12,
            column: 8,
            span: 306..311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 12,
            column: 10,
            span: 312..313,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 12,
            column: 12,
            span: 314..315,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 12,
            column: 14,
            span: 316..317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 12,
            column: 20,
            span: 317..323,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 12,
            column: 21,
            span: 323..324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 12,
            column: 26,
            span: 324..329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 27,
            span: 329..330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 12,
            column: 28,
            span: 330..331,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 12,
            column: 29,
            span: 331..332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 12,
            column: 31,
            span: 333..334,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 32,
            span: 334..335,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 12,
            column: 33,
            span: 335..336,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 13,
            column: 9,
            span: 339..345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 13,
            column: 16,
            span: 346..352,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 13,
            column: 17,
            span: 352..353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        position: Position {
            line: 13,
            column: 20,
            span: 353..356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 21,
            span: 356..357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 13,
            column: 22,
            span: 357..358,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 13,
            column: 23,
            span: 358..359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 13,
            column: 25,
            span: 360..361,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 13,
            column: 26,
            span: 361..362,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 13,
            column: 27,
            span: 361..363,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 13,
            column: 28,
            span: 363..364,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 13,
            column: 29,
            span: 364..365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 13,
            column: 31,
            span: 366..367,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 13,
            column: 32,
            span: 367..368,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 13,
            column: 33,
            span: 368..369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 13,
            column: 34,
            span: 369..370,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 13,
            column: 35,
            span: 370..371,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 13,
            column: 37,
            span: 372..373,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 13,
            column: 39,
            span: 373..375,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 40,
            span: 375..376,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 14,
            column: 0,
            span: 377..380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 16,
            column: 2,
            span: 382..383,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 16,
            column: 3,
            span: 383..384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 16,
            column: 4,
            span: 384..385,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 16,
            column: 6,
            span: 386..387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 16,
            column: 13,
            span: 388..394,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 16,
            column: 14,
            span: 394..395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 16,
            column: 18,
            span: 395..399,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 19,
            span: 399..400,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 400..402,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 16,
            column: 22,
            span: 402..403,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 16,
            column: 25,
            span: 404..406,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 26,
            span: 406..407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 17,
            column: 7,
            span: 440..446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 8,
            span: 446..447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 17,
            column: 9,
            span: 447..448,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 17,
            column: 12,
            span: 449..451,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 17,
            column: 14,
            span: 451..453,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 17,
            column: 18,
            span: 454..457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 17,
            column: 20,
            span: 458..459,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 17,
            column: 23,
            span: 460..462,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 17,
            column: 25,
            span: 462..464,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 26,
            span: 464..465,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 17,
            column: 27,
            span: 465..466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 18,
            column: 2,
            span: 467..468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 18,
            column: 3,
            span: 468..469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 18,
            column: 4,
            span: 469..470,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 18,
            column: 6,
            span: 471..472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 18,
            column: 13,
            span: 473..479,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 18,
            column: 14,
            span: 479..480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 18,
            column: 18,
            span: 480..484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 19,
            span: 484..485,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 18,
            column: 24,
            span: 485..490,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 18,
            column: 25,
            span: 490..491,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 18,
            column: 28,
            span: 492..494,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 29,
            span: 494..495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 19,
            column: 7,
            span: 496..502,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 8,
            span: 502..503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 19,
            column: 9,
            span: 503..504,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 19,
            column: 12,
            span: 505..507,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 19,
            column: 14,
            span: 507..509,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 19,
            column: 18,
            span: 510..513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 19,
            column: 20,
            span: 514..515,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 19,
            column: 23,
            span: 516..518,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 19,
            column: 25,
            span: 518..520,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 26,
            span: 520..521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 20,
            column: 2,
            span: 522..523,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 20,
            column: 3,
            span: 523..524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 20,
            column: 4,
            span: 524..525,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 20,
            column: 6,
            span: 526..527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 20,
            column: 13,
            span: 528..534,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 20,
            column: 14,
            span: 534..535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 20,
            column: 18,
            span: 535..539,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 19,
            span: 539..540,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        position: Position {
            line: 20,
            column: 35,
            span: 540..556,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 20,
            column: 36,
            span: 556..557,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 20,
            column: 40,
            span: 558..561,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 20,
            column: 41,
            span: 561..562,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 20,
            column: 43,
            span: 562..564,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 44,
            span: 564..565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 21,
            column: 7,
            span: 586..592,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 8,
            span: 592..593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 21,
            column: 9,
            span: 593..594,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 21,
            column: 12,
            span: 595..597,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 14,
            span: 597..599,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 21,
            column: 18,
            span: 600..603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 21,
            column: 20,
            span: 604..605,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 21,
            column: 23,
            span: 606..608,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 25,
            span: 608..610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 26,
            span: 610..611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 22,
            column: 2,
            span: 612..613,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 22,
            column: 3,
            span: 613..614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 22,
            column: 4,
            span: 614..615,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 22,
            column: 6,
            span: 616..617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 22,
            column: 13,
            span: 618..624,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 22,
            column: 14,
            span: 624..625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 22,
            column: 18,
            span: 625..629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 19,
            span: 629..630,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        position: Position {
            line: 22,
            column: 35,
            span: 630..646,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 22,
            column: 36,
            span: 646..647,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o'",
        ),
        position: Position {
            line: 22,
            column: 43,
            span: 648..654,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 22,
            column: 44,
            span: 654..655,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 22,
            column: 46,
            span: 655..657,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 47,
            span: 657..658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 23,
            column: 7,
            span: 684..690,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 8,
            span: 690..691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 23,
            column: 9,
            span: 691..692,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 23,
            column: 12,
            span: 693..695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 14,
            span: 695..697,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 23,
            column: 18,
            span: 698..701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 23,
            column: 20,
            span: 702..703,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 23,
            column: 23,
            span: 704..706,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 25,
            span: 706..708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 26,
            span: 708..709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 24,
            column: 2,
            span: 710..711,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 24,
            column: 3,
            span: 711..712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 24,
            column: 4,
            span: 712..713,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 24,
            column: 6,
            span: 714..715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 24,
            column: 13,
            span: 716..722,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 24,
            column: 14,
            span: 722..723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 24,
            column: 18,
            span: 723..727,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 19,
            span: 727..728,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o a\\0o a\\0o'",
        ),
        position: Position {
            line: 24,
            column: 35,
            span: 728..744,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 24,
            column: 36,
            span: 744..745,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0o'",
        ),
        position: Position {
            line: 24,
            column: 43,
            span: 746..752,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 24,
            column: 44,
            span: 752..753,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 46,
            span: 753..755,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 24,
            column: 47,
            span: 755..756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 25,
            column: 7,
            span: 782..788,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 8,
            span: 788..789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 25,
            column: 9,
            span: 789..790,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 25,
            column: 12,
            span: 791..793,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 25,
            column: 14,
            span: 793..795,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 25,
            column: 18,
            span: 796..799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 25,
            column: 20,
            span: 800..801,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 25,
            column: 23,
            span: 802..804,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 25,
            column: 26,
            span: 804..807,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 27,
            span: 807..808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 26,
            column: 2,
            span: 809..810,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 26,
            column: 3,
            span: 810..811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 26,
            column: 4,
            span: 811..812,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 26,
            column: 6,
            span: 813..814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 26,
            column: 13,
            span: 815..821,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 26,
            column: 14,
            span: 821..822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 26,
            column: 18,
            span: 822..826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 19,
            span: 826..827,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        position: Position {
            line: 26,
            column: 37,
            span: 827..845,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 26,
            column: 38,
            span: 845..846,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0ab'",
        ),
        position: Position {
            line: 26,
            column: 45,
            span: 847..853,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 26,
            column: 46,
            span: 853..854,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 48,
            span: 854..856,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 49,
            span: 856..857,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 26,
            column: 50,
            span: 857..858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 27,
            column: 7,
            span: 880..886,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 8,
            span: 886..887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 27,
            column: 9,
            span: 887..888,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 27,
            column: 12,
            span: 889..891,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 27,
            column: 14,
            span: 891..893,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 27,
            column: 18,
            span: 894..897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 27,
            column: 20,
            span: 898..899,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 27,
            column: 23,
            span: 900..902,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 27,
            column: 26,
            span: 902..905,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 27,
            span: 905..906,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 27,
            column: 28,
            span: 906..907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 28,
            column: 2,
            span: 908..909,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 28,
            column: 3,
            span: 909..910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 28,
            column: 4,
            span: 910..911,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 28,
            column: 6,
            span: 912..913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 28,
            column: 13,
            span: 914..920,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 920..921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 28,
            column: 18,
            span: 921..925,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 19,
            span: 925..926,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        position: Position {
            line: 28,
            column: 37,
            span: 926..944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 28,
            column: 38,
            span: 944..945,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 28,
            column: 42,
            span: 946..949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 43,
            span: 949..950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 29,
            column: 7,
            span: 971..977,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 8,
            span: 977..978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 29,
            column: 9,
            span: 978..979,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 29,
            column: 12,
            span: 980..982,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 29,
            column: 15,
            span: 982..985,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 29,
            column: 19,
            span: 986..989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 29,
            column: 21,
            span: 990..991,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 29,
            column: 24,
            span: 992..994,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 29,
            column: 27,
            span: 994..997,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 28,
            span: 997..998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 30,
            column: 7,
            span: 999..1005,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 8,
            span: 1005..1006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 30,
            column: 14,
            span: 1006..1012,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 30,
            column: 15,
            span: 1012..1013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 30,
            column: 19,
            span: 1013..1017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 20,
            span: 1017..1018,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a\\0a\\0a\\0\\0ab'",
        ),
        position: Position {
            line: 30,
            column: 38,
            span: 1018..1036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 39,
            span: 1036..1037,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b\\0'",
        ),
        position: Position {
            line: 30,
            column: 45,
            span: 1038..1043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 46,
            span: 1043..1044,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 49,
            span: 1045..1047,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 30,
            column: 53,
            span: 1048..1051,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 54,
            span: 1051..1052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 31,
            column: 7,
            span: 1071..1077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 8,
            span: 1077..1078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 31,
            column: 14,
            span: 1078..1084,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 15,
            span: 1084..1085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 31,
            column: 19,
            span: 1085..1089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 20,
            span: 1089..1090,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 31,
            column: 22,
            span: 1090..1092,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 23,
            span: 1092..1093,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        position: Position {
            line: 31,
            column: 28,
            span: 1094..1098,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 29,
            span: 1098..1099,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 31,
            column: 32,
            span: 1100..1102,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 31,
            column: 36,
            span: 1103..1106,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 37,
            span: 1106..1107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 32,
            column: 7,
            span: 1108..1114,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 8,
            span: 1114..1115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 32,
            column: 14,
            span: 1115..1121,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 15,
            span: 1121..1122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 32,
            column: 19,
            span: 1122..1126,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 20,
            span: 1126..1127,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo123alo'",
        ),
        position: Position {
            line: 32,
            column: 31,
            span: 1127..1138,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 32,
            span: 1138..1139,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12'",
        ),
        position: Position {
            line: 32,
            column: 37,
            span: 1140..1144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 38,
            span: 1144..1145,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 32,
            column: 41,
            span: 1146..1148,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 32,
            column: 43,
            span: 1148..1150,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 44,
            span: 1150..1151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 7,
            span: 1152..1158,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 8,
            span: 1158..1159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 33,
            column: 14,
            span: 1159..1165,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 15,
            span: 1165..1166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 33,
            column: 19,
            span: 1166..1170,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 20,
            span: 1170..1171,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo123alo'",
        ),
        position: Position {
            line: 33,
            column: 31,
            span: 1171..1182,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 32,
            span: 1182..1183,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^12'",
        ),
        position: Position {
            line: 33,
            column: 38,
            span: 1184..1189,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 39,
            span: 1189..1190,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 33,
            column: 42,
            span: 1191..1193,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 33,
            column: 46,
            span: 1194..1197,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 47,
            span: 1197..1198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 35,
            column: 7,
            span: 1200..1206,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 8,
            span: 1206..1207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 35,
            column: 14,
            span: 1207..1213,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 35,
            column: 15,
            span: 1213..1214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 35,
            column: 20,
            span: 1214..1219,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 21,
            span: 1219..1220,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        position: Position {
            line: 35,
            column: 27,
            span: 1220..1226,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 28,
            span: 1226..1227,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*b\"",
        ),
        position: Position {
            line: 35,
            column: 34,
            span: 1228..1233,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 35,
            span: 1233..1234,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 35,
            column: 38,
            span: 1235..1237,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        position: Position {
            line: 35,
            column: 45,
            span: 1238..1244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 46,
            span: 1244..1245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 36,
            column: 7,
            span: 1246..1252,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 8,
            span: 1252..1253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 36,
            column: 14,
            span: 1253..1259,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 15,
            span: 1259..1260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 36,
            column: 20,
            span: 1260..1265,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 21,
            span: 1265..1266,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        position: Position {
            line: 36,
            column: 26,
            span: 1266..1271,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 27,
            span: 1271..1272,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*a\"",
        ),
        position: Position {
            line: 36,
            column: 33,
            span: 1273..1278,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 34,
            span: 1278..1279,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 36,
            column: 37,
            span: 1280..1282,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        position: Position {
            line: 36,
            column: 43,
            span: 1283..1288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 44,
            span: 1288..1289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 37,
            column: 7,
            span: 1290..1296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 8,
            span: 1296..1297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 37,
            column: 14,
            span: 1297..1303,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 37,
            column: 15,
            span: 1303..1304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 37,
            column: 20,
            span: 1304..1309,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 21,
            span: 1309..1310,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 37,
            column: 24,
            span: 1310..1313,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 37,
            column: 25,
            span: 1313..1314,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*b\"",
        ),
        position: Position {
            line: 37,
            column: 31,
            span: 1315..1320,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 32,
            span: 1320..1321,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 37,
            column: 35,
            span: 1322..1324,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 37,
            column: 39,
            span: 1325..1328,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 40,
            span: 1328..1329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 39,
            column: 7,
            span: 1331..1337,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 8,
            span: 1337..1338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 39,
            column: 14,
            span: 1338..1344,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 39,
            column: 15,
            span: 1344..1345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 39,
            column: 20,
            span: 1345..1350,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 21,
            span: 1350..1351,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        position: Position {
            line: 39,
            column: 27,
            span: 1351..1357,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 28,
            span: 1357..1358,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".+b\"",
        ),
        position: Position {
            line: 39,
            column: 34,
            span: 1359..1364,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 35,
            span: 1364..1365,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 39,
            column: 38,
            span: 1366..1368,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        position: Position {
            line: 39,
            column: 45,
            span: 1369..1375,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 46,
            span: 1375..1376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 40,
            column: 7,
            span: 1377..1383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 8,
            span: 1383..1384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 40,
            column: 14,
            span: 1384..1390,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 40,
            column: 15,
            span: 1390..1391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 40,
            column: 20,
            span: 1391..1396,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 21,
            span: 1396..1397,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        position: Position {
            line: 40,
            column: 26,
            span: 1397..1402,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 27,
            span: 1402..1403,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".+a\"",
        ),
        position: Position {
            line: 40,
            column: 33,
            span: 1404..1409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 34,
            span: 1409..1410,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 40,
            column: 37,
            span: 1411..1413,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        position: Position {
            line: 40,
            column: 43,
            span: 1414..1419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 44,
            span: 1419..1420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 7,
            span: 1421..1427,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 8,
            span: 1427..1428,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 41,
            column: 11,
            span: 1428..1431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 41,
            column: 18,
            span: 1432..1438,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 19,
            span: 1438..1439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 41,
            column: 24,
            span: 1439..1444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 25,
            span: 1444..1445,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 41,
            column: 28,
            span: 1445..1448,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 29,
            span: 1448..1449,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".+b\"",
        ),
        position: Position {
            line: 41,
            column: 35,
            span: 1450..1455,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 36,
            span: 1455..1456,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 37,
            span: 1456..1457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 43,
            column: 7,
            span: 1459..1465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 8,
            span: 1465..1466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 43,
            column: 14,
            span: 1466..1472,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 43,
            column: 15,
            span: 1472..1473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 43,
            column: 20,
            span: 1473..1478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 21,
            span: 1478..1479,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaab\"",
        ),
        position: Position {
            line: 43,
            column: 27,
            span: 1479..1485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 28,
            span: 1485..1486,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?b\"",
        ),
        position: Position {
            line: 43,
            column: 34,
            span: 1487..1492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 35,
            span: 1492..1493,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 43,
            column: 38,
            span: 1494..1496,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\"",
        ),
        position: Position {
            line: 43,
            column: 43,
            span: 1497..1501,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 44,
            span: 1501..1502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 44,
            column: 7,
            span: 1503..1509,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 8,
            span: 1509..1510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 44,
            column: 14,
            span: 1510..1516,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 44,
            column: 15,
            span: 1516..1517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 44,
            column: 20,
            span: 1517..1522,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 21,
            span: 1522..1523,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa\"",
        ),
        position: Position {
            line: 44,
            column: 26,
            span: 1523..1528,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 44,
            column: 27,
            span: 1528..1529,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?a\"",
        ),
        position: Position {
            line: 44,
            column: 33,
            span: 1530..1535,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 34,
            span: 1535..1536,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 44,
            column: 37,
            span: 1537..1539,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aa\"",
        ),
        position: Position {
            line: 44,
            column: 42,
            span: 1540..1544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 43,
            span: 1544..1545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 45,
            column: 7,
            span: 1546..1552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 8,
            span: 1552..1553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 45,
            column: 14,
            span: 1553..1559,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 45,
            column: 15,
            span: 1559..1560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 45,
            column: 20,
            span: 1560..1565,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 21,
            span: 1565..1566,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 45,
            column: 24,
            span: 1566..1569,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 25,
            span: 1569..1570,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?b\"",
        ),
        position: Position {
            line: 45,
            column: 31,
            span: 1571..1576,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 32,
            span: 1576..1577,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 45,
            column: 35,
            span: 1578..1580,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 45,
            column: 39,
            span: 1581..1584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 40,
            span: 1584..1585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 47,
            column: 7,
            span: 1587..1593,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 1593..1594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 47,
            column: 9,
            span: 1594..1595,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 10,
            span: 1595..1596,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aloALO'",
        ),
        position: Position {
            line: 47,
            column: 18,
            span: 1596..1604,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 19,
            span: 1604..1605,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%l*'",
        ),
        position: Position {
            line: 47,
            column: 25,
            span: 1606..1611,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 26,
            span: 1611..1612,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 29,
            span: 1613..1615,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 47,
            column: 35,
            span: 1616..1621,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 36,
            span: 1621..1622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 48,
            column: 7,
            span: 1623..1629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 8,
            span: 1629..1630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 48,
            column: 9,
            span: 1630..1631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 10,
            span: 1631..1632,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aLo_ALO'",
        ),
        position: Position {
            line: 48,
            column: 19,
            span: 1632..1641,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 20,
            span: 1641..1642,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%a*'",
        ),
        position: Position {
            line: 48,
            column: 26,
            span: 1643..1648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 27,
            span: 1648..1649,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 48,
            column: 30,
            span: 1650..1652,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aLo'",
        ),
        position: Position {
            line: 48,
            column: 36,
            span: 1653..1658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 37,
            span: 1658..1659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 50,
            column: 7,
            span: 1661..1667,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 1667..1668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 50,
            column: 9,
            span: 1668..1669,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 10,
            span: 1669..1670,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  \\n\\r*&\\n\\r   xuxu  \\n\\n\"",
        ),
        position: Position {
            line: 50,
            column: 37,
            span: 1670..1697,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 38,
            span: 1697..1698,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%g%g%g+\"",
        ),
        position: Position {
            line: 50,
            column: 48,
            span: 1699..1708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 49,
            span: 1708..1709,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 52,
            span: 1710..1712,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 50,
            column: 59,
            span: 1713..1719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 60,
            span: 1719..1720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 52,
            column: 7,
            span: 1722..1728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 8,
            span: 1728..1729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 52,
            column: 9,
            span: 1729..1730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 10,
            span: 1730..1731,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        position: Position {
            line: 52,
            column: 16,
            span: 1731..1737,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 17,
            span: 1737..1738,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a*'",
        ),
        position: Position {
            line: 52,
            column: 22,
            span: 1739..1743,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 23,
            span: 1743..1744,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 52,
            column: 26,
            span: 1745..1747,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 52,
            column: 32,
            span: 1748..1753,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 33,
            span: 1753..1754,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 52,
            column: 34,
            span: 1754..1755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 53,
            column: 7,
            span: 1756..1762,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 8,
            span: 1762..1763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 53,
            column: 9,
            span: 1763..1764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 10,
            span: 1764..1765,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 53,
            column: 15,
            span: 1765..1770,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 16,
            span: 1770..1771,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.*$'",
        ),
        position: Position {
            line: 53,
            column: 23,
            span: 1772..1778,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 24,
            span: 1778..1779,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 53,
            column: 27,
            span: 1780..1782,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 53,
            column: 33,
            span: 1783..1788,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 34,
            span: 1788..1789,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 53,
            column: 35,
            span: 1789..1790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 54,
            column: 7,
            span: 1791..1797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 8,
            span: 1797..1798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 54,
            column: 9,
            span: 1798..1799,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 54,
            column: 10,
            span: 1799..1800,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 54,
            column: 15,
            span: 1800..1805,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 54,
            column: 16,
            span: 1805..1806,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b*'",
        ),
        position: Position {
            line: 54,
            column: 21,
            span: 1807..1811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 22,
            span: 1811..1812,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 54,
            column: 25,
            span: 1813..1815,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 54,
            column: 28,
            span: 1816..1818,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 54,
            column: 29,
            span: 1818..1819,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 54,
            column: 30,
            span: 1819..1820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 55,
            column: 7,
            span: 1821..1827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1827..1828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 55,
            column: 9,
            span: 1828..1829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 10,
            span: 1829..1830,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 55,
            column: 15,
            span: 1830..1835,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 16,
            span: 1835..1836,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab*a'",
        ),
        position: Position {
            line: 55,
            column: 23,
            span: 1837..1843,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 24,
            span: 1843..1844,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 55,
            column: 27,
            span: 1845..1847,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        position: Position {
            line: 55,
            column: 32,
            span: 1848..1852,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 33,
            span: 1852..1853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 56,
            column: 7,
            span: 1854..1860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 8,
            span: 1860..1861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 56,
            column: 9,
            span: 1861..1862,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 56,
            column: 10,
            span: 1862..1863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        position: Position {
            line: 56,
            column: 15,
            span: 1863..1868,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 16,
            span: 1868..1869,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab*a'",
        ),
        position: Position {
            line: 56,
            column: 23,
            span: 1870..1876,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 24,
            span: 1876..1877,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 56,
            column: 27,
            span: 1878..1880,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        position: Position {
            line: 56,
            column: 33,
            span: 1881..1886,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 56,
            column: 34,
            span: 1886..1887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 57,
            column: 7,
            span: 1888..1894,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 8,
            span: 1894..1895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 57,
            column: 9,
            span: 1895..1896,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 10,
            span: 1896..1897,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        position: Position {
            line: 57,
            column: 16,
            span: 1897..1903,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 57,
            column: 17,
            span: 1903..1904,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a+'",
        ),
        position: Position {
            line: 57,
            column: 22,
            span: 1905..1909,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 23,
            span: 1909..1910,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 57,
            column: 26,
            span: 1911..1913,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 57,
            column: 32,
            span: 1914..1919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 33,
            span: 1919..1920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 58,
            column: 7,
            span: 1921..1927,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 1927..1928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 1928..1929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 10,
            span: 1929..1930,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 58,
            column: 15,
            span: 1930..1935,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 16,
            span: 1935..1936,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.+$'",
        ),
        position: Position {
            line: 58,
            column: 23,
            span: 1937..1943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 24,
            span: 1943..1944,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 58,
            column: 27,
            span: 1945..1947,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 58,
            column: 33,
            span: 1948..1953,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 34,
            span: 1953..1954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 59,
            column: 7,
            span: 1955..1961,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 1961..1962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 59,
            column: 9,
            span: 1962..1963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 10,
            span: 1963..1964,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 59,
            column: 15,
            span: 1964..1969,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 59,
            column: 16,
            span: 1969..1970,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b+'",
        ),
        position: Position {
            line: 59,
            column: 21,
            span: 1971..1975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 22,
            span: 1975..1976,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 59,
            column: 25,
            span: 1977..1979,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 59,
            column: 29,
            span: 1980..1983,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 30,
            span: 1983..1984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 60,
            column: 7,
            span: 1985..1991,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 8,
            span: 1991..1992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 60,
            column: 9,
            span: 1992..1993,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 1993..1994,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 60,
            column: 15,
            span: 1994..1999,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 16,
            span: 1999..2000,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab+a'",
        ),
        position: Position {
            line: 60,
            column: 23,
            span: 2001..2007,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 24,
            span: 2007..2008,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 60,
            column: 27,
            span: 2009..2011,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 60,
            column: 31,
            span: 2012..2015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 32,
            span: 2015..2016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 61,
            column: 7,
            span: 2017..2023,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 2023..2024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 2024..2025,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 2025..2026,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        position: Position {
            line: 61,
            column: 15,
            span: 2026..2031,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 16,
            span: 2031..2032,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab+a'",
        ),
        position: Position {
            line: 61,
            column: 23,
            span: 2033..2039,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 24,
            span: 2039..2040,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 61,
            column: 27,
            span: 2041..2043,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aba'",
        ),
        position: Position {
            line: 61,
            column: 33,
            span: 2044..2049,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 34,
            span: 2049..2050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 62,
            column: 7,
            span: 2051..2057,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 2057..2058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 2058..2059,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 2059..2060,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 62,
            column: 15,
            span: 2060..2065,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 16,
            span: 2065..2066,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.$'",
        ),
        position: Position {
            line: 62,
            column: 21,
            span: 2067..2071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 22,
            span: 2071..2072,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 25,
            span: 2073..2075,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 62,
            column: 29,
            span: 2076..2079,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 30,
            span: 2079..2080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 63,
            column: 7,
            span: 2081..2087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 8,
            span: 2087..2088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 2088..2089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 2089..2090,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 63,
            column: 15,
            span: 2090..2095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 16,
            span: 2095..2096,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.%$'",
        ),
        position: Position {
            line: 63,
            column: 22,
            span: 2097..2102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 23,
            span: 2102..2103,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 63,
            column: 26,
            span: 2104..2106,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$'",
        ),
        position: Position {
            line: 63,
            column: 31,
            span: 2107..2111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 32,
            span: 2111..2112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 64,
            column: 7,
            span: 2113..2119,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 8,
            span: 2119..2120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 64,
            column: 9,
            span: 2120..2121,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 10,
            span: 2121..2122,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 64,
            column: 15,
            span: 2122..2127,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 16,
            span: 2127..2128,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.$.'",
        ),
        position: Position {
            line: 64,
            column: 22,
            span: 2129..2134,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 23,
            span: 2134..2135,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 64,
            column: 26,
            span: 2136..2138,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 64,
            column: 32,
            span: 2139..2144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 33,
            span: 2144..2145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 7,
            span: 2146..2152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 8,
            span: 2152..2153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 65,
            column: 9,
            span: 2153..2154,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 10,
            span: 2154..2155,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 65,
            column: 15,
            span: 2155..2160,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 16,
            span: 2160..2161,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$$'",
        ),
        position: Position {
            line: 65,
            column: 21,
            span: 2162..2166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 22,
            span: 2166..2167,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 25,
            span: 2168..2170,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 65,
            column: 29,
            span: 2171..2174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 30,
            span: 2174..2175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 66,
            column: 7,
            span: 2176..2182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 8,
            span: 2182..2183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 66,
            column: 9,
            span: 2183..2184,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 10,
            span: 2184..2185,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$b'",
        ),
        position: Position {
            line: 66,
            column: 15,
            span: 2185..2190,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 16,
            span: 2190..2191,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$'",
        ),
        position: Position {
            line: 66,
            column: 21,
            span: 2192..2196,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 22,
            span: 2196..2197,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 66,
            column: 25,
            span: 2198..2200,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 66,
            column: 29,
            span: 2201..2204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 30,
            span: 2204..2205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 67,
            column: 7,
            span: 2206..2212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 8,
            span: 2212..2213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 67,
            column: 9,
            span: 2213..2214,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 2214..2215,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a$a'",
        ),
        position: Position {
            line: 67,
            column: 15,
            span: 2215..2220,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 16,
            span: 2220..2221,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        position: Position {
            line: 67,
            column: 20,
            span: 2222..2225,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 21,
            span: 2225..2226,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 67,
            column: 24,
            span: 2227..2229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 67,
            column: 27,
            span: 2230..2232,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 28,
            span: 2232..2233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 7,
            span: 2234..2240,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 8,
            span: 2240..2241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 2241..2242,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 2242..2243,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 68,
            column: 12,
            span: 2243..2245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 13,
            span: 2245..2246,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b*'",
        ),
        position: Position {
            line: 68,
            column: 18,
            span: 2247..2251,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 19,
            span: 2251..2252,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 22,
            span: 2253..2255,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 68,
            column: 25,
            span: 2256..2258,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 26,
            span: 2258..2259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 69,
            column: 7,
            span: 2260..2266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 8,
            span: 2266..2267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 69,
            column: 9,
            span: 2267..2268,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 2268..2269,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 69,
            column: 15,
            span: 2269..2274,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 69,
            column: 16,
            span: 2274..2275,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'bb*'",
        ),
        position: Position {
            line: 69,
            column: 22,
            span: 2276..2281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 23,
            span: 2281..2282,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 69,
            column: 26,
            span: 2283..2285,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 69,
            column: 30,
            span: 2286..2289,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 31,
            span: 2289..2290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 70,
            column: 7,
            span: 2291..2297,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 8,
            span: 2297..2298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 2298..2299,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 2299..2300,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaab'",
        ),
        position: Position {
            line: 70,
            column: 16,
            span: 2300..2306,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 17,
            span: 2306..2307,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a-'",
        ),
        position: Position {
            line: 70,
            column: 22,
            span: 2308..2312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 23,
            span: 2312..2313,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 70,
            column: 26,
            span: 2314..2316,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 70,
            column: 29,
            span: 2317..2319,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 30,
            span: 2319..2320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 71,
            column: 7,
            span: 2321..2327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 8,
            span: 2327..2328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 71,
            column: 9,
            span: 2328..2329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 10,
            span: 2329..2330,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 71,
            column: 15,
            span: 2330..2335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 16,
            span: 2335..2336,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^.-$'",
        ),
        position: Position {
            line: 71,
            column: 23,
            span: 2337..2343,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 24,
            span: 2343..2344,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 71,
            column: 27,
            span: 2345..2347,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        position: Position {
            line: 71,
            column: 33,
            span: 2348..2353,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 34,
            span: 2353..2354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 72,
            column: 7,
            span: 2355..2361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 8,
            span: 2361..2362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 72,
            column: 9,
            span: 2362..2363,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 10,
            span: 2363..2364,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aabaaabaaabaaaba'",
        ),
        position: Position {
            line: 72,
            column: 28,
            span: 2364..2382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 72,
            column: 29,
            span: 2382..2383,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b.*b'",
        ),
        position: Position {
            line: 72,
            column: 36,
            span: 2384..2390,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 37,
            span: 2390..2391,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 72,
            column: 40,
            span: 2392..2394,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'baaabaaabaaab'",
        ),
        position: Position {
            line: 72,
            column: 56,
            span: 2395..2410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 57,
            span: 2410..2411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 73,
            column: 7,
            span: 2412..2418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 8,
            span: 2418..2419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 73,
            column: 9,
            span: 2419..2420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 2420..2421,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aabaaabaaabaaaba'",
        ),
        position: Position {
            line: 73,
            column: 28,
            span: 2421..2439,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 29,
            span: 2439..2440,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b.-b'",
        ),
        position: Position {
            line: 73,
            column: 36,
            span: 2441..2447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 37,
            span: 2447..2448,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 73,
            column: 40,
            span: 2449..2451,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'baaab'",
        ),
        position: Position {
            line: 73,
            column: 48,
            span: 2452..2459,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 49,
            span: 2459..2460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 74,
            column: 7,
            span: 2461..2467,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 2467..2468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 2468..2469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 2469..2470,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo xo'",
        ),
        position: Position {
            line: 74,
            column: 18,
            span: 2470..2478,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 19,
            span: 2478..2479,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.o$'",
        ),
        position: Position {
            line: 74,
            column: 25,
            span: 2480..2485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 26,
            span: 2485..2486,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 74,
            column: 29,
            span: 2487..2489,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xo'",
        ),
        position: Position {
            line: 74,
            column: 34,
            span: 2490..2494,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 35,
            span: 2494..2495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 75,
            column: 7,
            span: 2496..2502,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 8,
            span: 2502..2503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 2503..2504,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 2504..2505,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto é assim'",
        ),
        position: Position {
            line: 75,
            column: 28,
            span: 2505..2523,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 29,
            span: 2523..2524,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%S%S*'",
        ),
        position: Position {
            line: 75,
            column: 37,
            span: 2525..2532,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 38,
            span: 2532..2533,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 75,
            column: 41,
            span: 2534..2536,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'isto'",
        ),
        position: Position {
            line: 75,
            column: 48,
            span: 2537..2543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 49,
            span: 2543..2544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 7,
            span: 2545..2551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 8,
            span: 2551..2552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 2552..2553,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 10,
            span: 2553..2554,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto é assim'",
        ),
        position: Position {
            line: 76,
            column: 28,
            span: 2554..2572,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 29,
            span: 2572..2573,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%S*$'",
        ),
        position: Position {
            line: 76,
            column: 36,
            span: 2574..2580,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 37,
            span: 2580..2581,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 76,
            column: 40,
            span: 2582..2584,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'assim'",
        ),
        position: Position {
            line: 76,
            column: 48,
            span: 2585..2592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 49,
            span: 2592..2593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 77,
            column: 7,
            span: 2594..2600,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 8,
            span: 2600..2601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 2601..2602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 10,
            span: 2602..2603,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' \\n isto é assim'",
        ),
        position: Position {
            line: 77,
            column: 28,
            span: 2603..2621,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 29,
            span: 2621..2622,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z]*$'",
        ),
        position: Position {
            line: 77,
            column: 39,
            span: 2623..2632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 40,
            span: 2632..2633,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 77,
            column: 43,
            span: 2634..2636,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'assim'",
        ),
        position: Position {
            line: 77,
            column: 51,
            span: 2637..2644,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 52,
            span: 2644..2645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 78,
            column: 7,
            span: 2646..2652,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 8,
            span: 2652..2653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 78,
            column: 9,
            span: 2653..2654,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 10,
            span: 2654..2655,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'um caracter ? extra'",
        ),
        position: Position {
            line: 78,
            column: 31,
            span: 2655..2676,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 32,
            span: 2676..2677,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^%sa-z]'",
        ),
        position: Position {
            line: 78,
            column: 43,
            span: 2678..2688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 44,
            span: 2688..2689,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 78,
            column: 47,
            span: 2690..2692,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'?'",
        ),
        position: Position {
            line: 78,
            column: 51,
            span: 2693..2696,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 52,
            span: 2696..2697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 79,
            column: 7,
            span: 2698..2704,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 8,
            span: 2704..2705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 79,
            column: 9,
            span: 2705..2706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 10,
            span: 2706..2707,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 79,
            column: 12,
            span: 2707..2709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 13,
            span: 2709..2710,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a?'",
        ),
        position: Position {
            line: 79,
            column: 18,
            span: 2711..2715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 19,
            span: 2715..2716,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 79,
            column: 22,
            span: 2717..2719,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 79,
            column: 25,
            span: 2720..2722,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 26,
            span: 2722..2723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 80,
            column: 7,
            span: 2724..2730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 8,
            span: 2730..2731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 80,
            column: 9,
            span: 2731..2732,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 10,
            span: 2732..2733,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á'",
        ),
        position: Position {
            line: 80,
            column: 13,
            span: 2733..2736,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 14,
            span: 2736..2737,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á?'",
        ),
        position: Position {
            line: 80,
            column: 19,
            span: 2738..2742,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 20,
            span: 2742..2743,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 80,
            column: 23,
            span: 2744..2746,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á'",
        ),
        position: Position {
            line: 80,
            column: 27,
            span: 2747..2750,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 28,
            span: 2750..2751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 81,
            column: 7,
            span: 2752..2758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 8,
            span: 2758..2759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 81,
            column: 9,
            span: 2759..2760,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 10,
            span: 2760..2761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ábl'",
        ),
        position: Position {
            line: 81,
            column: 15,
            span: 2761..2766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 81,
            column: 16,
            span: 2766..2767,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á?b?l?'",
        ),
        position: Position {
            line: 81,
            column: 25,
            span: 2768..2776,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 26,
            span: 2776..2777,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 81,
            column: 29,
            span: 2778..2780,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ábl'",
        ),
        position: Position {
            line: 81,
            column: 35,
            span: 2781..2786,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 36,
            span: 2786..2787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 82,
            column: 7,
            span: 2788..2794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 8,
            span: 2794..2795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 82,
            column: 9,
            span: 2795..2796,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 10,
            span: 2796..2797,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  ábl'",
        ),
        position: Position {
            line: 82,
            column: 17,
            span: 2797..2804,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 18,
            span: 2804..2805,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á?b?l?'",
        ),
        position: Position {
            line: 82,
            column: 27,
            span: 2806..2814,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 28,
            span: 2814..2815,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 82,
            column: 31,
            span: 2816..2818,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 82,
            column: 34,
            span: 2819..2821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 35,
            span: 2821..2822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 83,
            column: 7,
            span: 2823..2829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 8,
            span: 2829..2830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 83,
            column: 9,
            span: 2830..2831,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 10,
            span: 2831..2832,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        position: Position {
            line: 83,
            column: 14,
            span: 2832..2836,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 15,
            span: 2836..2837,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^aa?a?a'",
        ),
        position: Position {
            line: 83,
            column: 25,
            span: 2838..2847,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 26,
            span: 2847..2848,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 83,
            column: 29,
            span: 2849..2851,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aa'",
        ),
        position: Position {
            line: 83,
            column: 34,
            span: 2852..2856,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 35,
            span: 2856..2857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 84,
            column: 7,
            span: 2858..2864,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 8,
            span: 2864..2865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 84,
            column: 9,
            span: 2865..2866,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 10,
            span: 2866..2867,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "']]]áb'",
        ),
        position: Position {
            line: 84,
            column: 17,
            span: 2867..2874,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 84,
            column: 18,
            span: 2874..2875,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^]]'",
        ),
        position: Position {
            line: 84,
            column: 25,
            span: 2876..2882,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 26,
            span: 2882..2883,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 84,
            column: 29,
            span: 2884..2886,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'á'",
        ),
        position: Position {
            line: 84,
            column: 33,
            span: 2887..2890,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 34,
            span: 2890..2891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 85,
            column: 7,
            span: 2892..2898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 8,
            span: 2898..2899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 2899..2900,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 10,
            span: 2900..2901,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0alo alo\"",
        ),
        position: Position {
            line: 85,
            column: 20,
            span: 2901..2911,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 21,
            span: 2911..2912,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x*\"",
        ),
        position: Position {
            line: 85,
            column: 27,
            span: 2913..2918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 28,
            span: 2918..2919,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 85,
            column: 31,
            span: 2920..2922,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0a\"",
        ),
        position: Position {
            line: 85,
            column: 36,
            span: 2923..2927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 37,
            span: 2927..2928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 86,
            column: 7,
            span: 2929..2935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 8,
            span: 2935..2936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 86,
            column: 9,
            span: 2936..2937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 10,
            span: 2937..2938,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 86,
            column: 19,
            span: 2938..2947,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 20,
            span: 2947..2948,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%C+\"",
        ),
        position: Position {
            line: 86,
            column: 26,
            span: 2949..2954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 27,
            span: 2954..2955,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 86,
            column: 30,
            span: 2956..2958,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 86,
            column: 40,
            span: 2959..2968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 41,
            span: 2968..2969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 87,
            column: 6,
            span: 2970..2975,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 7,
            span: 2975..2976,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 2976..2979,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 11,
            span: 2979..2980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 89,
            column: 7,
            span: 2982..2988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 8,
            span: 2988..2989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 89,
            column: 10,
            span: 2989..2991,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 11,
            span: 2991..2992,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alx 123 b\\0o b\\0o'",
        ),
        position: Position {
            line: 89,
            column: 34,
            span: 2992..3015,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 35,
            span: 3015..3016,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(..*) %1'",
        ),
        position: Position {
            line: 89,
            column: 46,
            span: 3017..3027,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 47,
            span: 3027..3028,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 89,
            column: 50,
            span: 3029..3031,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\0o b\\0o\"",
        ),
        position: Position {
            line: 89,
            column: 62,
            span: 3032..3043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 63,
            span: 3043..3044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 90,
            column: 7,
            span: 3045..3051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 8,
            span: 3051..3052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 90,
            column: 10,
            span: 3052..3054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 11,
            span: 3054..3055,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'axz123= 4= 4 34'",
        ),
        position: Position {
            line: 90,
            column: 28,
            span: 3055..3072,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 90,
            column: 29,
            span: 3072..3073,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.+)=(.*)=%2 %1'",
        ),
        position: Position {
            line: 90,
            column: 47,
            span: 3074..3091,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 48,
            span: 3091..3092,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 90,
            column: 51,
            span: 3093..3095,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3= 4= 4 3'",
        ),
        position: Position {
            line: 90,
            column: 63,
            span: 3096..3107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 64,
            span: 3107..3108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 91,
            column: 7,
            span: 3109..3115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 8,
            span: 3115..3116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 91,
            column: 10,
            span: 3116..3118,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 11,
            span: 3118..3119,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'======='",
        ),
        position: Position {
            line: 91,
            column: 20,
            span: 3119..3128,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 91,
            column: 21,
            span: 3128..3129,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^(=*)=%1$'",
        ),
        position: Position {
            line: 91,
            column: 33,
            span: 3130..3141,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 91,
            column: 34,
            span: 3141..3142,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 91,
            column: 37,
            span: 3143..3145,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'======='",
        ),
        position: Position {
            line: 91,
            column: 47,
            span: 3146..3155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 91,
            column: 48,
            span: 3155..3156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 92,
            column: 7,
            span: 3157..3163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 8,
            span: 3163..3164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 92,
            column: 14,
            span: 3164..3170,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 92,
            column: 15,
            span: 3170..3171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 92,
            column: 20,
            span: 3171..3176,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 92,
            column: 21,
            span: 3176..3177,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=========='",
        ),
        position: Position {
            line: 92,
            column: 33,
            span: 3177..3189,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 34,
            span: 3189..3190,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^([=]*)=%1$'",
        ),
        position: Position {
            line: 92,
            column: 48,
            span: 3191..3204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 49,
            span: 3204..3205,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 92,
            column: 52,
            span: 3206..3208,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 92,
            column: 56,
            span: 3209..3212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 92,
            column: 57,
            span: 3212..3213,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 94,
            column: 6,
            span: 3215..3220,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 94,
            column: 15,
            span: 3221..3229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        position: Position {
            line: 94,
            column: 21,
            span: 3230..3235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 23,
            span: 3236..3237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 94,
            column: 24,
            span: 3237..3238,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 94,
            column: 25,
            span: 3238..3239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 94,
            column: 27,
            span: 3240..3241,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 28,
            span: 3241..3242,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 95,
            column: 5,
            span: 3245..3247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 95,
            column: 7,
            span: 3248..3249,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 95,
            column: 10,
            span: 3250..3252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 95,
            column: 12,
            span: 3253..3254,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 95,
            column: 0,
            span: 3255..3259,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 96,
            column: 11,
            span: 3264..3270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 96,
            column: 13,
            span: 3271..3272,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 14,
            span: 3272..3273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        position: Position {
            line: 96,
            column: 20,
            span: 3274..3279,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 21,
            span: 3279..3280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 96,
            column: 22,
            span: 3280..3281,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 96,
            column: 23,
            span: 3281..3282,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 24,
            span: 3281..3283,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 25,
            span: 3283..3284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 96,
            column: 27,
            span: 3285..3286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 28,
            span: 3286..3287,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 97,
            column: 0,
            span: 3290..3293,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 98,
            column: 0,
            span: 3294..3297,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 100,
            column: 6,
            span: 3299..3304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        position: Position {
            line: 100,
            column: 10,
            span: 3305..3308,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 100,
            column: 12,
            span: 3309..3310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 100,
            column: 19,
            span: 3311..3317,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 100,
            column: 20,
            span: 3317..3318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        position: Position {
            line: 100,
            column: 24,
            span: 3318..3322,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 25,
            span: 3322..3323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "range",
        ),
        position: Position {
            line: 100,
            column: 30,
            span: 3323..3328,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 31,
            span: 3328..3329,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 32,
            span: 3328..3330,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 33,
            span: 3330..3331,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 37,
            span: 3331..3335,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 38,
            span: 3335..3336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 39,
            span: 3336..3337,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 100,
            column: 40,
            span: 3337..3338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 102,
            column: 7,
            span: 3340..3346,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 8,
            span: 3346..3347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 102,
            column: 14,
            span: 3347..3353,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 102,
            column: 15,
            span: 3353..3354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 102,
            column: 18,
            span: 3354..3357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 19,
            span: 3357..3358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        position: Position {
            line: 102,
            column: 22,
            span: 3358..3361,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 23,
            span: 3361..3362,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 102,
            column: 26,
            span: 3363..3365,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "256",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 30,
            span: 3365..3369,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 31,
            span: 3369..3370,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 104,
            column: 9,
            span: 3372..3380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 104,
            column: 16,
            span: 3381..3387,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 18,
            span: 3388..3389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 104,
            column: 19,
            span: 3389..3390,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 20,
            span: 3390..3391,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 105,
            column: 8,
            span: 3394..3399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 105,
            column: 12,
            span: 3400..3403,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 105,
            column: 14,
            span: 3404..3405,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 105,
            column: 16,
            span: 3406..3407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 105,
            column: 17,
            span: 3407..3408,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 105,
            column: 18,
            span: 3408..3409,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 105,
            column: 20,
            span: 3409..3411,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 105,
            column: 21,
            span: 3411..3412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 106,
            column: 9,
            span: 3415..3421,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 106,
            column: 10,
            span: 3421..3422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 106,
            column: 14,
            span: 3422..3426,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 15,
            span: 3426..3427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abc",
        ),
        position: Position {
            line: 106,
            column: 18,
            span: 3427..3430,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 19,
            span: 3430..3431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 106,
            column: 21,
            span: 3432..3433,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 22,
            span: 3433..3434,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 106,
            column: 31,
            span: 3435..3443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 33,
            span: 3444..3445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 106,
            column: 34,
            span: 3445..3446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 35,
            span: 3446..3447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 106,
            column: 39,
            span: 3448..3451,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 106,
            column: 40,
            span: 3451..3452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 106,
            column: 41,
            span: 3452..3453,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 106,
            column: 43,
            span: 3454..3455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 106,
            column: 47,
            span: 3456..3459,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 106,
            column: 48,
            span: 3459..3460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 106,
            column: 49,
            span: 3460..3461,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 106,
            column: 52,
            span: 3462..3464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 106,
            column: 54,
            span: 3465..3466,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 106,
            column: 58,
            span: 3467..3470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 59,
            span: 3470..3471,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 107,
            column: 9,
            span: 3474..3480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 107,
            column: 13,
            span: 3481..3484,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 107,
            column: 14,
            span: 3484..3485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 107,
            column: 0,
            span: 3485..3486,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 108,
            column: 4,
            span: 3487..3490,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 108,
            column: 5,
            span: 3490..3491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 110,
            column: 7,
            span: 3493..3499,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 8,
            span: 3499..3500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 110,
            column: 14,
            span: 3500..3506,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 110,
            column: 15,
            span: 3506..3507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 110,
            column: 18,
            span: 3507..3510,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 19,
            span: 3510..3511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 110,
            column: 25,
            span: 3511..3517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 26,
            span: 3517..3518,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\200-\\210]'",
        ),
        position: Position {
            line: 110,
            column: 39,
            span: 3518..3531,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 40,
            span: 3531..3532,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 41,
            span: 3532..3533,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 110,
            column: 44,
            span: 3534..3536,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 47,
            span: 3536..3539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 48,
            span: 3539..3540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 112,
            column: 7,
            span: 3542..3548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 8,
            span: 3548..3549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 112,
            column: 14,
            span: 3549..3555,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 15,
            span: 3555..3556,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z]'",
        ),
        position: Position {
            line: 112,
            column: 22,
            span: 3556..3563,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 23,
            span: 3563..3564,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 112,
            column: 26,
            span: 3565..3567,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdefghijklmnopqrstuvwxyz\"",
        ),
        position: Position {
            line: 112,
            column: 55,
            span: 3568..3596,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 56,
            span: 3596..3597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 113,
            column: 7,
            span: 3598..3604,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 8,
            span: 3604..3605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 113,
            column: 14,
            span: 3605..3611,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 15,
            span: 3611..3612,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-z%d]'",
        ),
        position: Position {
            line: 113,
            column: 24,
            span: 3612..3621,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 25,
            span: 3621..3622,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 113,
            column: 28,
            span: 3623..3625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 113,
            column: 35,
            span: 3626..3632,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 36,
            span: 3632..3633,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%da-uu-z]'",
        ),
        position: Position {
            line: 113,
            column: 48,
            span: 3633..3645,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 49,
            span: 3645..3646,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 50,
            span: 3646..3647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 114,
            column: 7,
            span: 3648..3654,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 8,
            span: 3654..3655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 114,
            column: 14,
            span: 3655..3661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 15,
            span: 3661..3662,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a-]'",
        ),
        position: Position {
            line: 114,
            column: 21,
            span: 3662..3668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 22,
            span: 3668..3669,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 114,
            column: 25,
            span: 3670..3672,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-a\"",
        ),
        position: Position {
            line: 114,
            column: 30,
            span: 3673..3677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 31,
            span: 3677..3678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 115,
            column: 7,
            span: 3679..3685,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 115,
            column: 8,
            span: 3685..3686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 115,
            column: 14,
            span: 3686..3692,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 115,
            column: 15,
            span: 3692..3693,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[^%W]'",
        ),
        position: Position {
            line: 115,
            column: 22,
            span: 3693..3700,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 23,
            span: 3700..3701,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 115,
            column: 26,
            span: 3702..3704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 115,
            column: 33,
            span: 3705..3711,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 115,
            column: 34,
            span: 3711..3712,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%w]'",
        ),
        position: Position {
            line: 115,
            column: 40,
            span: 3712..3718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 41,
            span: 3718..3719,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 42,
            span: 3719..3720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 116,
            column: 7,
            span: 3721..3727,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 8,
            span: 3727..3728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 116,
            column: 14,
            span: 3728..3734,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 116,
            column: 15,
            span: 3734..3735,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[]%%]'",
        ),
        position: Position {
            line: 116,
            column: 22,
            span: 3735..3742,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 23,
            span: 3742..3743,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 116,
            column: 26,
            span: 3744..3746,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%]'",
        ),
        position: Position {
            line: 116,
            column: 31,
            span: 3747..3751,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 32,
            span: 3751..3752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 117,
            column: 7,
            span: 3753..3759,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 8,
            span: 3759..3760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 117,
            column: 14,
            span: 3760..3766,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 117,
            column: 15,
            span: 3766..3767,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[a%-z]'",
        ),
        position: Position {
            line: 117,
            column: 23,
            span: 3767..3775,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 24,
            span: 3775..3776,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 117,
            column: 27,
            span: 3777..3779,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-az'",
        ),
        position: Position {
            line: 117,
            column: 33,
            span: 3780..3785,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 117,
            column: 34,
            span: 3785..3786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 118,
            column: 7,
            span: 3787..3793,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 8,
            span: 3793..3794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 118,
            column: 14,
            span: 3794..3800,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 15,
            span: 3800..3801,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[%^%[%-a%]%-b]'",
        ),
        position: Position {
            line: 118,
            column: 31,
            span: 3801..3817,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 32,
            span: 3817..3818,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 118,
            column: 35,
            span: 3819..3821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-[]^ab'",
        ),
        position: Position {
            line: 118,
            column: 44,
            span: 3822..3830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 45,
            span: 3830..3831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 119,
            column: 7,
            span: 3832..3838,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 8,
            span: 3838..3839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 119,
            column: 14,
            span: 3839..3845,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 15,
            span: 3845..3846,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%Z'",
        ),
        position: Position {
            line: 119,
            column: 19,
            span: 3846..3850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 20,
            span: 3850..3851,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 119,
            column: 23,
            span: 3852..3854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 119,
            column: 30,
            span: 3855..3861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 31,
            span: 3861..3862,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\1-\\255]'",
        ),
        position: Position {
            line: 119,
            column: 42,
            span: 3862..3873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 43,
            span: 3873..3874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 44,
            span: 3874..3875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 120,
            column: 7,
            span: 3876..3882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 8,
            span: 3882..3883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 120,
            column: 14,
            span: 3883..3889,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 15,
            span: 3889..3890,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        position: Position {
            line: 120,
            column: 18,
            span: 3890..3893,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 19,
            span: 3893..3894,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 120,
            column: 22,
            span: 3895..3897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "strset",
        ),
        position: Position {
            line: 120,
            column: 29,
            span: 3898..3904,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 30,
            span: 3904..3905,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'[\\1-\\255%z]'",
        ),
        position: Position {
            line: 120,
            column: 43,
            span: 3905..3918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 44,
            span: 3918..3919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 45,
            span: 3919..3920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 121,
            column: 6,
            span: 3921..3926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 121,
            column: 7,
            span: 3926..3927,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 121,
            column: 10,
            span: 3927..3930,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 121,
            column: 11,
            span: 3930..3931,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 121,
            column: 12,
            span: 3931..3932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 123,
            column: 7,
            span: 3934..3940,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 8,
            span: 3940..3941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 123,
            column: 14,
            span: 3941..3947,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 123,
            column: 15,
            span: 3947..3948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 123,
            column: 20,
            span: 3948..3953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 21,
            span: 3953..3954,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo xyzK\"",
        ),
        position: Position {
            line: 123,
            column: 31,
            span: 3954..3964,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 123,
            column: 32,
            span: 3964..3965,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)K\"",
        ),
        position: Position {
            line: 123,
            column: 41,
            span: 3966..3974,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 42,
            span: 3974..3975,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 123,
            column: 45,
            span: 3976..3978,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyz\"",
        ),
        position: Position {
            line: 123,
            column: 51,
            span: 3979..3984,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 52,
            span: 3984..3985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 124,
            column: 7,
            span: 3986..3992,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 8,
            span: 3992..3993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 124,
            column: 14,
            span: 3993..3999,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 124,
            column: 15,
            span: 3999..4000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 124,
            column: 20,
            span: 4000..4005,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 21,
            span: 4005..4006,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"254 K\"",
        ),
        position: Position {
            line: 124,
            column: 28,
            span: 4006..4013,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 29,
            span: 4013..4014,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%d*)K\"",
        ),
        position: Position {
            line: 124,
            column: 38,
            span: 4015..4023,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 39,
            span: 4023..4024,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 124,
            column: 42,
            span: 4025..4027,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 124,
            column: 45,
            span: 4028..4030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 46,
            span: 4030..4031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 125,
            column: 7,
            span: 4032..4038,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 8,
            span: 4038..4039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 125,
            column: 14,
            span: 4039..4045,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 125,
            column: 15,
            span: 4045..4046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 125,
            column: 20,
            span: 4046..4051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 21,
            span: 4051..4052,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo \"",
        ),
        position: Position {
            line: 125,
            column: 27,
            span: 4052..4058,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 28,
            span: 4058..4059,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w*)$\"",
        ),
        position: Position {
            line: 125,
            column: 37,
            span: 4060..4068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 38,
            span: 4068..4069,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 125,
            column: 41,
            span: 4070..4072,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 125,
            column: 44,
            span: 4073..4075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 45,
            span: 4075..4076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 126,
            column: 7,
            span: 4077..4083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 8,
            span: 4083..4084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 126,
            column: 14,
            span: 4084..4090,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 126,
            column: 15,
            span: 4090..4091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 126,
            column: 20,
            span: 4091..4096,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 21,
            span: 4096..4097,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo \"",
        ),
        position: Position {
            line: 126,
            column: 27,
            span: 4097..4103,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 28,
            span: 4103..4104,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)$\"",
        ),
        position: Position {
            line: 126,
            column: 37,
            span: 4105..4113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 38,
            span: 4113..4114,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 126,
            column: 41,
            span: 4115..4117,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 126,
            column: 45,
            span: 4118..4121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 46,
            span: 4121..4122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 127,
            column: 7,
            span: 4123..4129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 8,
            span: 4129..4130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 127,
            column: 14,
            span: 4130..4136,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 127,
            column: 15,
            span: 4136..4137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 127,
            column: 19,
            span: 4137..4141,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 20,
            span: 4141..4142,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(álo)\"",
        ),
        position: Position {
            line: 127,
            column: 27,
            span: 4142..4149,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 28,
            span: 4149..4150,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%(á\"",
        ),
        position: Position {
            line: 127,
            column: 34,
            span: 4151..4156,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 35,
            span: 4156..4157,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 127,
            column: 38,
            span: 4158..4160,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 40,
            span: 4160..4162,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 41,
            span: 4162..4163,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 128,
            column: 6,
            span: 4164..4169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 8,
            span: 4170..4171,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 9,
            span: 4171..4172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 128,
            column: 11,
            span: 4173..4174,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 12,
            span: 4174..4175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 128,
            column: 14,
            span: 4176..4177,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 15,
            span: 4177..4178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 128,
            column: 17,
            span: 4179..4180,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 18,
            span: 4180..4181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 128,
            column: 20,
            span: 4182..4183,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 128,
            column: 22,
            span: 4184..4185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 128,
            column: 29,
            span: 4186..4192,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 128,
            column: 30,
            span: 4192..4193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 128,
            column: 35,
            span: 4193..4198,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 36,
            span: 4198..4199,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"âlo alo\"",
        ),
        position: Position {
            line: 128,
            column: 45,
            span: 4199..4208,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 46,
            span: 4208..4209,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(((.).).* (%w*))$\"",
        ),
        position: Position {
            line: 128,
            column: 67,
            span: 4210..4230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 68,
            span: 4230..4231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 129,
            column: 7,
            span: 4232..4238,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 8,
            span: 4238..4239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 9,
            span: 4239..4240,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 129,
            column: 12,
            span: 4241..4243,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'âlo alo'",
        ),
        position: Position {
            line: 129,
            column: 22,
            span: 4244..4253,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 129,
            column: 26,
            span: 4254..4257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 129,
            column: 28,
            span: 4258..4259,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 129,
            column: 31,
            span: 4260..4262,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'âl'",
        ),
        position: Position {
            line: 129,
            column: 36,
            span: 4263..4267,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 129,
            column: 40,
            span: 4268..4271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 129,
            column: 42,
            span: 4272..4273,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 129,
            column: 45,
            span: 4274..4276,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'â'",
        ),
        position: Position {
            line: 129,
            column: 49,
            span: 4277..4280,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 129,
            column: 53,
            span: 4281..4284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 129,
            column: 55,
            span: 4285..4286,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 129,
            column: 58,
            span: 4287..4289,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 129,
            column: 64,
            span: 4290..4295,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 129,
            column: 68,
            span: 4296..4299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 129,
            column: 70,
            span: 4300..4301,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 129,
            column: 73,
            span: 4302..4304,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 129,
            column: 77,
            span: 4305..4308,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 78,
            span: 4308..4309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 130,
            column: 2,
            span: 4310..4311,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 3,
            span: 4311..4312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 130,
            column: 5,
            span: 4313..4314,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 6,
            span: 4314..4315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 130,
            column: 8,
            span: 4316..4317,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 9,
            span: 4317..4318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 130,
            column: 11,
            span: 4319..4320,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 130,
            column: 14,
            span: 4322..4323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 130,
            column: 21,
            span: 4324..4330,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 130,
            column: 22,
            span: 4330..4331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 130,
            column: 27,
            span: 4331..4336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 28,
            span: 4336..4337,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789'",
        ),
        position: Position {
            line: 130,
            column: 40,
            span: 4337..4349,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 41,
            span: 4349..4350,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.+(.?)())'",
        ),
        position: Position {
            line: 130,
            column: 54,
            span: 4351..4363,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 55,
            span: 4363..4364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 131,
            column: 7,
            span: 4365..4371,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 8,
            span: 4371..4372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 131,
            column: 9,
            span: 4372..4373,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 131,
            column: 12,
            span: 4374..4376,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0123456789'",
        ),
        position: Position {
            line: 131,
            column: 25,
            span: 4377..4389,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 131,
            column: 29,
            span: 4390..4393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 131,
            column: 31,
            span: 4394..4395,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 131,
            column: 34,
            span: 4396..4398,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 131,
            column: 37,
            span: 4399..4401,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 131,
            column: 41,
            span: 4402..4405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 131,
            column: 43,
            span: 4406..4407,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 131,
            column: 46,
            span: 4408..4410,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 131,
            column: 49,
            span: 4410..4413,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 131,
            column: 53,
            span: 4414..4417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 131,
            column: 55,
            span: 4418..4419,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 131,
            column: 58,
            span: 4420..4422,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 131,
            column: 62,
            span: 4423..4426,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 63,
            span: 4426..4427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 132,
            column: 6,
            span: 4428..4433,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 132,
            column: 7,
            span: 4433..4434,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 132,
            column: 10,
            span: 4434..4437,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 132,
            column: 11,
            span: 4437..4438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 134,
            column: 7,
            span: 4440..4446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 8,
            span: 4446..4447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 134,
            column: 14,
            span: 4447..4453,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 134,
            column: 15,
            span: 4453..4454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 134,
            column: 19,
            span: 4454..4458,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 20,
            span: 4458..4459,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ülo ülo'",
        ),
        position: Position {
            line: 134,
            column: 29,
            span: 4459..4468,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 30,
            span: 4468..4469,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ü'",
        ),
        position: Position {
            line: 134,
            column: 34,
            span: 4470..4473,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 35,
            span: 4473..4474,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 134,
            column: 39,
            span: 4475..4478,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 40,
            span: 4478..4479,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 134,
            column: 43,
            span: 4480..4482,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xlo xlo'",
        ),
        position: Position {
            line: 134,
            column: 53,
            span: 4483..4492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 54,
            span: 4492..4493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 135,
            column: 7,
            span: 4494..4500,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 8,
            span: 4500..4501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 135,
            column: 14,
            span: 4501..4507,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 135,
            column: 15,
            span: 4507..4508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 135,
            column: 19,
            span: 4508..4512,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 20,
            span: 4512..4513,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo úlo  '",
        ),
        position: Position {
            line: 135,
            column: 31,
            span: 4513..4524,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 32,
            span: 4524..4525,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' +$'",
        ),
        position: Position {
            line: 135,
            column: 38,
            span: 4526..4531,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 39,
            span: 4531..4532,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 135,
            column: 42,
            span: 4533..4535,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 43,
            span: 4535..4536,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 135,
            column: 46,
            span: 4537..4539,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo úlo'",
        ),
        position: Position {
            line: 135,
            column: 56,
            span: 4540..4549,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 57,
            span: 4549..4550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 136,
            column: 7,
            span: 4560..4566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 8,
            span: 4566..4567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 136,
            column: 14,
            span: 4567..4573,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 136,
            column: 15,
            span: 4573..4574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 136,
            column: 19,
            span: 4574..4578,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 20,
            span: 4578..4579,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  alo alo  '",
        ),
        position: Position {
            line: 136,
            column: 33,
            span: 4579..4592,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 34,
            span: 4592..4593,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^%s*(.-)%s*$'",
        ),
        position: Position {
            line: 136,
            column: 49,
            span: 4594..4608,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 50,
            span: 4608..4609,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1'",
        ),
        position: Position {
            line: 136,
            column: 55,
            span: 4610..4614,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 56,
            span: 4614..4615,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 136,
            column: 59,
            span: 4616..4618,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo'",
        ),
        position: Position {
            line: 136,
            column: 69,
            span: 4619..4628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 70,
            span: 4628..4629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 137,
            column: 7,
            span: 4646..4652,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 8,
            span: 4652..4653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 137,
            column: 14,
            span: 4653..4659,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 137,
            column: 15,
            span: 4659..4660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 137,
            column: 19,
            span: 4660..4664,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 20,
            span: 4664..4665,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo  alo  \\n 123\\n '",
        ),
        position: Position {
            line: 137,
            column: 41,
            span: 4665..4686,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 42,
            span: 4686..4687,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%s+'",
        ),
        position: Position {
            line: 137,
            column: 48,
            span: 4688..4693,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 49,
            span: 4693..4694,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        position: Position {
            line: 137,
            column: 53,
            span: 4695..4698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 54,
            span: 4698..4699,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 137,
            column: 57,
            span: 4700..4702,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo 123 '",
        ),
        position: Position {
            line: 137,
            column: 72,
            span: 4703..4717,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 73,
            span: 4717..4718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 138,
            column: 2,
            span: 4719..4720,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 138,
            column: 4,
            span: 4721..4722,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abç d\"",
        ),
        position: Position {
            line: 138,
            column: 12,
            span: 4723..4730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 139,
            column: 2,
            span: 4731..4732,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 3,
            span: 4732..4733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 139,
            column: 5,
            span: 4734..4735,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 139,
            column: 7,
            span: 4736..4737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 139,
            column: 14,
            span: 4738..4744,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 139,
            column: 15,
            span: 4744..4745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 139,
            column: 19,
            span: 4745..4749,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 20,
            span: 4749..4750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 139,
            column: 21,
            span: 4750..4751,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 22,
            span: 4751..4752,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.)'",
        ),
        position: Position {
            line: 139,
            column: 28,
            span: 4753..4758,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 29,
            span: 4758..4759,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1@'",
        ),
        position: Position {
            line: 139,
            column: 35,
            span: 4760..4765,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 36,
            span: 4765..4766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 140,
            column: 7,
            span: 4767..4773,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 8,
            span: 4773..4774,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'@'",
        ),
        position: Position {
            line: 140,
            column: 11,
            span: 4774..4777,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 140,
            column: 13,
            span: 4777..4779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 140,
            column: 14,
            span: 4779..4780,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 140,
            column: 17,
            span: 4781..4783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 140,
            column: 24,
            span: 4784..4790,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 140,
            column: 25,
            span: 4790..4791,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 140,
            column: 29,
            span: 4791..4795,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 30,
            span: 4795..4796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 140,
            column: 31,
            span: 4796..4797,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 32,
            span: 4797..4798,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 140,
            column: 35,
            span: 4799..4801,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 36,
            span: 4801..4802,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'@'",
        ),
        position: Position {
            line: 140,
            column: 40,
            span: 4803..4806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 41,
            span: 4806..4807,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 140,
            column: 45,
            span: 4808..4811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 140,
            column: 47,
            span: 4812..4813,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 140,
            column: 50,
            span: 4814..4816,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 52,
            span: 4816..4818,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 53,
            span: 4818..4819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 141,
            column: 2,
            span: 4820..4821,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 3,
            span: 4821..4822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 141,
            column: 5,
            span: 4823..4824,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 141,
            column: 7,
            span: 4825..4826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 141,
            column: 14,
            span: 4827..4833,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 141,
            column: 15,
            span: 4833..4834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 141,
            column: 19,
            span: 4834..4838,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 20,
            span: 4838..4839,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abçd'",
        ),
        position: Position {
            line: 141,
            column: 26,
            span: 4839..4845,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 27,
            span: 4845..4846,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.)'",
        ),
        position: Position {
            line: 141,
            column: 33,
            span: 4847..4852,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 34,
            span: 4852..4853,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%0@'",
        ),
        position: Position {
            line: 141,
            column: 40,
            span: 4854..4859,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 41,
            span: 4859..4860,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 141,
            column: 43,
            span: 4860..4862,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 44,
            span: 4862..4863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 142,
            column: 7,
            span: 4864..4870,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 142,
            column: 8,
            span: 4870..4871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 142,
            column: 9,
            span: 4871..4872,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 142,
            column: 12,
            span: 4873..4875,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a@b@çd'",
        ),
        position: Position {
            line: 142,
            column: 21,
            span: 4876..4884,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 142,
            column: 25,
            span: 4885..4888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 142,
            column: 27,
            span: 4889..4890,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 142,
            column: 30,
            span: 4891..4893,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 32,
            span: 4893..4895,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 142,
            column: 33,
            span: 4895..4896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 143,
            column: 7,
            span: 4897..4903,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 8,
            span: 4903..4904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 143,
            column: 14,
            span: 4904..4910,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 143,
            column: 15,
            span: 4910..4911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 143,
            column: 19,
            span: 4911..4915,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 20,
            span: 4915..4916,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo alo'",
        ),
        position: Position {
            line: 143,
            column: 29,
            span: 4916..4925,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 143,
            column: 30,
            span: 4925..4926,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()[al]'",
        ),
        position: Position {
            line: 143,
            column: 39,
            span: 4927..4935,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 143,
            column: 40,
            span: 4935..4936,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%1'",
        ),
        position: Position {
            line: 143,
            column: 45,
            span: 4937..4941,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 46,
            span: 4941..4942,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 143,
            column: 49,
            span: 4943..4945,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12o 56o'",
        ),
        position: Position {
            line: 143,
            column: 59,
            span: 4946..4955,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 60,
            span: 4955..4956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 144,
            column: 7,
            span: 4957..4963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 8,
            span: 4963..4964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 144,
            column: 14,
            span: 4964..4970,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 144,
            column: 15,
            span: 4970..4971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 144,
            column: 19,
            span: 4971..4975,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 20,
            span: 4975..4976,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc=xyz\"",
        ),
        position: Position {
            line: 144,
            column: 29,
            span: 4976..4985,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 30,
            span: 4985..4986,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w*)(%p)(%w+)\"",
        ),
        position: Position {
            line: 144,
            column: 47,
            span: 4987..5003,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 48,
            span: 5003..5004,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%3%2%1-%0\"",
        ),
        position: Position {
            line: 144,
            column: 60,
            span: 5005..5016,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 61,
            span: 5016..5017,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 144,
            column: 64,
            span: 5018..5020,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xyz=abc-abc=xyz\"",
        ),
        position: Position {
            line: 145,
            column: 32,
            span: 5035..5052,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 33,
            span: 5052..5053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 146,
            column: 7,
            span: 5054..5060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 8,
            span: 5060..5061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 146,
            column: 14,
            span: 5061..5067,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 146,
            column: 15,
            span: 5067..5068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 146,
            column: 19,
            span: 5068..5072,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 20,
            span: 5072..5073,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 146,
            column: 25,
            span: 5073..5078,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 26,
            span: 5078..5079,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w\"",
        ),
        position: Position {
            line: 146,
            column: 31,
            span: 5080..5084,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 32,
            span: 5084..5085,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1%0\"",
        ),
        position: Position {
            line: 146,
            column: 39,
            span: 5086..5092,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 40,
            span: 5092..5093,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 146,
            column: 43,
            span: 5094..5096,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aabbcc\"",
        ),
        position: Position {
            line: 146,
            column: 52,
            span: 5097..5105,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 53,
            span: 5105..5106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 147,
            column: 7,
            span: 5107..5113,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 8,
            span: 5113..5114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 147,
            column: 14,
            span: 5114..5120,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 147,
            column: 15,
            span: 5120..5121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 147,
            column: 19,
            span: 5121..5125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 20,
            span: 5125..5126,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        position: Position {
            line: 147,
            column: 25,
            span: 5126..5131,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 26,
            span: 5131..5132,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        position: Position {
            line: 147,
            column: 32,
            span: 5133..5138,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 33,
            span: 5138..5139,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%0%1\"",
        ),
        position: Position {
            line: 147,
            column: 40,
            span: 5140..5146,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 41,
            span: 5146..5147,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 147,
            column: 44,
            span: 5148..5150,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcabc\"",
        ),
        position: Position {
            line: 147,
            column: 53,
            span: 5151..5159,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 54,
            span: 5159..5160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 148,
            column: 7,
            span: 5161..5167,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 5167..5168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 148,
            column: 14,
            span: 5168..5174,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 148,
            column: 15,
            span: 5174..5175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 148,
            column: 19,
            span: 5175..5179,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 20,
            span: 5179..5180,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'áéí'",
        ),
        position: Position {
            line: 148,
            column: 25,
            span: 5180..5185,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 26,
            span: 5185..5186,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        position: Position {
            line: 148,
            column: 30,
            span: 5187..5190,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 148,
            column: 31,
            span: 5190..5191,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0óú'",
        ),
        position: Position {
            line: 148,
            column: 38,
            span: 5192..5198,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 39,
            span: 5198..5199,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 148,
            column: 42,
            span: 5200..5202,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'áéí\\0óú'",
        ),
        position: Position {
            line: 148,
            column: 52,
            span: 5203..5212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 53,
            span: 5212..5213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 149,
            column: 7,
            span: 5214..5220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 8,
            span: 5220..5221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 149,
            column: 14,
            span: 5221..5227,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 149,
            column: 15,
            span: 5227..5228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 149,
            column: 19,
            span: 5228..5232,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 149,
            column: 20,
            span: 5232..5233,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 149,
            column: 22,
            span: 5233..5235,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 23,
            span: 5235..5236,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^'",
        ),
        position: Position {
            line: 149,
            column: 27,
            span: 5237..5240,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 28,
            span: 5240..5241,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        position: Position {
            line: 149,
            column: 32,
            span: 5242..5245,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 33,
            span: 5245..5246,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 149,
            column: 36,
            span: 5247..5249,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        position: Position {
            line: 149,
            column: 40,
            span: 5250..5253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 149,
            column: 41,
            span: 5253..5254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 150,
            column: 7,
            span: 5255..5261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 8,
            span: 5261..5262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 150,
            column: 14,
            span: 5262..5268,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 150,
            column: 15,
            span: 5268..5269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 150,
            column: 19,
            span: 5269..5273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 20,
            span: 5273..5274,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 5274..5276,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 23,
            span: 5276..5277,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'$'",
        ),
        position: Position {
            line: 150,
            column: 27,
            span: 5278..5281,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 28,
            span: 5281..5282,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        position: Position {
            line: 150,
            column: 32,
            span: 5283..5286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 33,
            span: 5286..5287,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 150,
            column: 36,
            span: 5288..5290,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'r'",
        ),
        position: Position {
            line: 150,
            column: 40,
            span: 5291..5294,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 41,
            span: 5294..5295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 151,
            column: 6,
            span: 5296..5301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 7,
            span: 5301..5302,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 151,
            column: 10,
            span: 5302..5305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 11,
            span: 5305..5306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 153,
            column: 7,
            span: 5308..5314,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 8,
            span: 5314..5315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 153,
            column: 14,
            span: 5315..5321,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 15,
            span: 5321..5322,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 153,
            column: 19,
            span: 5322..5326,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 20,
            span: 5326..5327,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"um (dois) tres (quatro)\"",
        ),
        position: Position {
            line: 153,
            column: 45,
            span: 5327..5352,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 46,
            span: 5352..5353,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%(%w+%))\"",
        ),
        position: Position {
            line: 153,
            column: 58,
            span: 5354..5365,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 59,
            span: 5365..5366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 153,
            column: 66,
            span: 5367..5373,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 67,
            span: 5373..5374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        position: Position {
            line: 153,
            column: 72,
            span: 5374..5379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 73,
            span: 5379..5380,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 153,
            column: 76,
            span: 5381..5383,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"um (DOIS) tres (QUATRO)\"",
        ),
        position: Position {
            line: 154,
            column: 38,
            span: 5396..5421,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 39,
            span: 5421..5422,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 156,
            column: 0,
            span: 5424..5426,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 157,
            column: 8,
            span: 5429..5434,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 157,
            column: 17,
            span: 5435..5443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setglobal",
        ),
        position: Position {
            line: 157,
            column: 27,
            span: 5444..5453,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 29,
            span: 5454..5455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 157,
            column: 30,
            span: 5455..5456,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 31,
            span: 5456..5457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 157,
            column: 32,
            span: 5457..5458,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 33,
            span: 5458..5459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        position: Position {
            line: 157,
            column: 40,
            span: 5460..5466,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 157,
            column: 41,
            span: 5466..5467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 157,
            column: 43,
            span: 5467..5469,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 44,
            span: 5469..5470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 157,
            column: 46,
            span: 5471..5472,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 157,
            column: 47,
            span: 5472..5473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 157,
            column: 49,
            span: 5474..5475,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 50,
            span: 5475..5476,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 157,
            column: 0,
            span: 5477..5480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 158,
            column: 9,
            span: 5483..5489,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 158,
            column: 10,
            span: 5489..5490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 158,
            column: 14,
            span: 5490..5494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 158,
            column: 15,
            span: 5494..5495,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a=roberto,roberto=a\"",
        ),
        position: Position {
            line: 158,
            column: 36,
            span: 5495..5516,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 37,
            span: 5516..5517,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%w+)=(%w%w*)\"",
        ),
        position: Position {
            line: 158,
            column: 53,
            span: 5518..5533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 158,
            column: 54,
            span: 5533..5534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setglobal",
        ),
        position: Position {
            line: 158,
            column: 64,
            span: 5535..5544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 158,
            column: 65,
            span: 5544..5545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 159,
            column: 9,
            span: 5548..5554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 10,
            span: 5554..5555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 159,
            column: 12,
            span: 5555..5557,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 159,
            column: 13,
            span: 5557..5558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 159,
            column: 14,
            span: 5558..5559,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 159,
            column: 16,
            span: 5559..5561,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"roberto\"",
        ),
        position: Position {
            line: 159,
            column: 25,
            span: 5561..5570,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 159,
            column: 29,
            span: 5571..5574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 159,
            column: 32,
            span: 5575..5577,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 159,
            column: 33,
            span: 5577..5578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "roberto",
        ),
        position: Position {
            line: 159,
            column: 40,
            span: 5578..5585,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 159,
            column: 42,
            span: 5585..5587,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 159,
            column: 45,
            span: 5587..5590,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 46,
            span: 5590..5591,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 160,
            column: 0,
            span: 5592..5595,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 162,
            column: 9,
            span: 5597..5605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 162,
            column: 11,
            span: 5606..5607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 12,
            span: 5607..5608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 162,
            column: 13,
            span: 5608..5609,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 14,
            span: 5609..5610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 162,
            column: 15,
            span: 5610..5611,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 16,
            span: 5611..5612,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 162,
            column: 23,
            span: 5613..5619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 162,
            column: 30,
            span: 5620..5626,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 162,
            column: 31,
            span: 5626..5627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 162,
            column: 35,
            span: 5627..5631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 36,
            span: 5631..5632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 162,
            column: 37,
            span: 5632..5633,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 38,
            span: 5633..5634,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        position: Position {
            line: 162,
            column: 41,
            span: 5634..5637,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 42,
            span: 5637..5638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 162,
            column: 43,
            span: 5638..5639,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 44,
            span: 5639..5640,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 162,
            column: 0,
            span: 5641..5644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 163,
            column: 7,
            span: 5645..5651,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 8,
            span: 5651..5652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 163,
            column: 14,
            span: 5652..5658,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 163,
            column: 15,
            span: 5658..5659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 163,
            column: 19,
            span: 5659..5663,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 20,
            span: 5663..5664,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"trocar tudo em |teste|b| é |beleza|al|\"",
        ),
        position: Position {
            line: 163,
            column: 60,
            span: 5664..5704,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 61,
            span: 5704..5705,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"|([^|]*)|([^|]*)|\"",
        ),
        position: Position {
            line: 163,
            column: 81,
            span: 5706..5725,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 163,
            column: 82,
            span: 5725..5726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 163,
            column: 84,
            span: 5727..5728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 85,
            span: 5728..5729,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 163,
            column: 88,
            span: 5730..5732,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"trocar tudo em bbbbb é alalalalalal\"",
        ),
        position: Position {
            line: 164,
            column: 50,
            span: 5745..5782,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 51,
            span: 5782..5783,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 166,
            column: 6,
            span: 5785..5790,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 166,
            column: 15,
            span: 5791..5799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 166,
            column: 24,
            span: 5800..5808,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 26,
            span: 5809..5810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 166,
            column: 27,
            span: 5810..5811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 28,
            span: 5811..5812,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 166,
            column: 35,
            span: 5813..5819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 166,
            column: 40,
            span: 5820..5824,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 41,
            span: 5824..5825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 166,
            column: 42,
            span: 5825..5826,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 43,
            span: 5826..5827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 44,
            span: 5827..5828,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 45,
            span: 5828..5829,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 166,
            column: 48,
            span: 5830..5832,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 166,
            column: 51,
            span: 5833..5835,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 166,
            column: 0,
            span: 5836..5839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 167,
            column: 7,
            span: 5840..5846,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 8,
            span: 5846..5847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 167,
            column: 14,
            span: 5847..5853,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 167,
            column: 15,
            span: 5853..5854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 167,
            column: 19,
            span: 5854..5858,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 20,
            span: 5858..5859,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo $a=1$ novamente $return a$\"",
        ),
        position: Position {
            line: 167,
            column: 52,
            span: 5859..5891,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 53,
            span: 5891..5892,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$([^$]*)%$\"",
        ),
        position: Position {
            line: 167,
            column: 66,
            span: 5893..5905,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 167,
            column: 67,
            span: 5905..5906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 167,
            column: 76,
            span: 5907..5915,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 77,
            span: 5915..5916,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 167,
            column: 80,
            span: 5917..5919,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo  novamente 1\"",
        ),
        position: Position {
            line: 168,
            column: 31,
            span: 5932..5950,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 32,
            span: 5950..5951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 170,
            column: 2,
            span: 5953..5954,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 170,
            column: 4,
            span: 5955..5956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 170,
            column: 11,
            span: 5957..5963,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 170,
            column: 12,
            span: 5963..5964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 170,
            column: 16,
            span: 5964..5968,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 17,
            span: 5968..5969,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$x=string.gsub('alo', '.', string.upper)$ assim vai para $return x$\"",
        ),
        position: Position {
            line: 170,
            column: 86,
            span: 5969..6038,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 170,
            column: 87,
            span: 6038..6039,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$([^$]*)%$\"",
        ),
        position: Position {
            line: 171,
            column: 22,
            span: 6049..6061,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 23,
            span: 6061..6062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        position: Position {
            line: 171,
            column: 32,
            span: 6063..6071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 33,
            span: 6071..6072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 172,
            column: 7,
            span: 6073..6079,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 8,
            span: 6079..6080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 172,
            column: 9,
            span: 6080..6081,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 172,
            column: 12,
            span: 6082..6084,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' assim vai para ALO'",
        ),
        position: Position {
            line: 172,
            column: 34,
            span: 6085..6106,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 35,
            span: 6106..6107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 174,
            column: 2,
            span: 6109..6110,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 174,
            column: 4,
            span: 6111..6112,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 174,
            column: 6,
            span: 6113..6114,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 174,
            column: 7,
            span: 6114..6115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 175,
            column: 2,
            span: 6116..6117,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 175,
            column: 4,
            span: 6118..6119,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a alo jose  joao'",
        ),
        position: Position {
            line: 175,
            column: 23,
            span: 6120..6138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 176,
            column: 2,
            span: 6139..6140,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 176,
            column: 4,
            span: 6141..6142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 176,
            column: 11,
            span: 6143..6149,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 176,
            column: 12,
            span: 6149..6150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 176,
            column: 16,
            span: 6150..6154,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 17,
            span: 6154..6155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 176,
            column: 18,
            span: 6155..6156,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 176,
            column: 19,
            span: 6156..6157,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()(%w+)()'",
        ),
        position: Position {
            line: 176,
            column: 31,
            span: 6158..6169,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 176,
            column: 32,
            span: 6169..6170,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 176,
            column: 41,
            span: 6171..6179,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 43,
            span: 6180..6181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 176,
            column: 44,
            span: 6181..6182,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 176,
            column: 45,
            span: 6182..6183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 176,
            column: 46,
            span: 6183..6184,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 176,
            column: 47,
            span: 6184..6185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 176,
            column: 48,
            span: 6185..6186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 49,
            span: 6186..6187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 177,
            column: 13,
            span: 6194..6200,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 14,
            span: 6200..6201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 177,
            column: 20,
            span: 6201..6207,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 177,
            column: 21,
            span: 6207..6208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 177,
            column: 24,
            span: 6208..6211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 25,
            span: 6211..6212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 177,
            column: 26,
            span: 6212..6213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 27,
            span: 6213..6214,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 177,
            column: 30,
            span: 6215..6217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 177,
            column: 32,
            span: 6218..6219,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 177,
            column: 33,
            span: 6219..6220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 177,
            column: 34,
            span: 6220..6221,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 35,
            span: 6221..6222,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 177,
            column: 36,
            span: 6222..6223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 178,
            column: 8,
            span: 6230..6231,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 178,
            column: 9,
            span: 6231..6232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 178,
            column: 10,
            span: 6232..6233,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 178,
            column: 11,
            span: 6233..6234,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 178,
            column: 13,
            span: 6235..6236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 178,
            column: 15,
            span: 6237..6238,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 178,
            column: 16,
            span: 6238..6239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 178,
            column: 17,
            span: 6239..6240,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 178,
            column: 18,
            span: 6240..6241,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 179,
            column: 8,
            span: 6246..6249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 9,
            span: 6249..6250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 180,
            column: 7,
            span: 6251..6257,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 8,
            span: 6257..6258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 180,
            column: 9,
            span: 6258..6259,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 12,
            span: 6260..6262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 180,
            column: 14,
            span: 6263..6264,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 180,
            column: 18,
            span: 6265..6268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 180,
            column: 20,
            span: 6269..6270,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 180,
            column: 21,
            span: 6270..6271,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 22,
            span: 6270..6272,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 180,
            column: 23,
            span: 6272..6273,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 26,
            span: 6274..6276,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 28,
            span: 6276..6278,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 180,
            column: 32,
            span: 6279..6282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 180,
            column: 34,
            span: 6283..6284,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 180,
            column: 35,
            span: 6284..6285,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 36,
            span: 6284..6286,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 180,
            column: 37,
            span: 6286..6287,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 40,
            span: 6288..6290,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 42,
            span: 6290..6292,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 180,
            column: 46,
            span: 6293..6296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 180,
            column: 48,
            span: 6297..6298,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 180,
            column: 49,
            span: 6298..6299,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 50,
            span: 6298..6300,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 180,
            column: 51,
            span: 6300..6301,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 54,
            span: 6302..6304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 56,
            span: 6304..6306,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 180,
            column: 60,
            span: 6307..6310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 180,
            column: 62,
            span: 6311..6312,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 180,
            column: 63,
            span: 6312..6313,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 65,
            span: 6312..6315,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 180,
            column: 66,
            span: 6315..6316,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 69,
            span: 6317..6319,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 71,
            span: 6319..6321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 72,
            span: 6321..6322,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 183,
            column: 9,
            span: 6325..6333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        position: Position {
            line: 183,
            column: 20,
            span: 6334..6344,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 22,
            span: 6345..6346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 183,
            column: 23,
            span: 6346..6347,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 24,
            span: 6347..6348,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 184,
            column: 9,
            span: 6351..6357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 184,
            column: 16,
            span: 6358..6364,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 184,
            column: 17,
            span: 6364..6365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 184,
            column: 21,
            span: 6365..6369,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 22,
            span: 6369..6370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 184,
            column: 28,
            span: 6370..6376,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 184,
            column: 29,
            span: 6376..6377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 184,
            column: 33,
            span: 6377..6381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 34,
            span: 6381..6382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 184,
            column: 35,
            span: 6382..6383,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 184,
            column: 36,
            span: 6383..6384,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b()\"",
        ),
        position: Position {
            line: 184,
            column: 43,
            span: 6385..6391,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 184,
            column: 44,
            span: 6391..6392,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 184,
            column: 47,
            span: 6393..6395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 48,
            span: 6395..6396,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 184,
            column: 49,
            span: 6396..6397,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[()]\"",
        ),
        position: Position {
            line: 184,
            column: 56,
            span: 6398..6404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 57,
            span: 6404..6405,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 184,
            column: 60,
            span: 6406..6408,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 184,
            column: 0,
            span: 6409..6412,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 185,
            column: 0,
            span: 6413..6416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 187,
            column: 7,
            span: 6418..6424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 8,
            span: 6424..6425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        position: Position {
            line: 187,
            column: 18,
            span: 6425..6435,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 19,
            span: 6435..6436,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(9 ((8))(\\0) 7) \\0\\0 a b ()(c)() a\"",
        ),
        position: Position {
            line: 187,
            column: 55,
            span: 6436..6472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 56,
            span: 6472..6473,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 187,
            column: 57,
            span: 6473..6474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 188,
            column: 7,
            span: 6475..6481,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 8,
            span: 6481..6482,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 188,
            column: 11,
            span: 6482..6485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "isbalanced",
        ),
        position: Position {
            line: 188,
            column: 22,
            span: 6486..6496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 188,
            column: 23,
            span: 6496..6497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(9 ((8) 7) a b (\\0 c) a\"",
        ),
        position: Position {
            line: 188,
            column: 48,
            span: 6497..6522,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 49,
            span: 6522..6523,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 188,
            column: 50,
            span: 6523..6524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 189,
            column: 7,
            span: 6525..6531,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 8,
            span: 6531..6532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 189,
            column: 14,
            span: 6532..6538,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 189,
            column: 15,
            span: 6538..6539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 189,
            column: 19,
            span: 6539..6543,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 20,
            span: 6543..6544,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo 'oi' alo\"",
        ),
        position: Position {
            line: 189,
            column: 34,
            span: 6544..6558,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 35,
            span: 6558..6559,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b''\"",
        ),
        position: Position {
            line: 189,
            column: 42,
            span: 6560..6566,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 189,
            column: 43,
            span: 6566..6567,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        position: Position {
            line: 189,
            column: 47,
            span: 6568..6571,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 48,
            span: 6571..6572,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 189,
            column: 51,
            span: 6573..6575,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo \" alo'",
        ),
        position: Position {
            line: 189,
            column: 63,
            span: 6576..6587,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 64,
            span: 6587..6588,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 192,
            column: 6,
            span: 6591..6596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 192,
            column: 8,
            span: 6597..6598,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 192,
            column: 10,
            span: 6599..6600,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 192,
            column: 12,
            span: 6601..6602,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"apple\"",
        ),
        position: Position {
            line: 192,
            column: 19,
            span: 6602..6609,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 192,
            column: 20,
            span: 6609..6610,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"orange\"",
        ),
        position: Position {
            line: 192,
            column: 29,
            span: 6611..6619,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 192,
            column: 30,
            span: 6619..6620,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lime\"",
        ),
        position: Position {
            line: 192,
            column: 37,
            span: 6621..6627,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 192,
            column: 38,
            span: 6627..6628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 192,
            column: 40,
            span: 6629..6630,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 192,
            column: 41,
            span: 6630..6631,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 192,
            column: 42,
            span: 6630..6632,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 192,
            column: 43,
            span: 6632..6633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 193,
            column: 7,
            span: 6634..6640,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 8,
            span: 6640..6641,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 193,
            column: 14,
            span: 6641..6647,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 193,
            column: 15,
            span: 6647..6648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 193,
            column: 19,
            span: 6648..6652,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 20,
            span: 6652..6653,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x and x and x\"",
        ),
        position: Position {
            line: 193,
            column: 35,
            span: 6653..6668,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 36,
            span: 6668..6669,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 193,
            column: 40,
            span: 6670..6673,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 41,
            span: 6673..6674,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 193,
            column: 50,
            span: 6675..6683,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 52,
            span: 6684..6685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 53,
            span: 6685..6686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 193,
            column: 55,
            span: 6687..6688,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 193,
            column: 56,
            span: 6688..6689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 193,
            column: 57,
            span: 6689..6690,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 193,
            column: 58,
            span: 6690..6691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 193,
            column: 59,
            span: 6691..6692,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 193,
            column: 60,
            span: 6692..6693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 193,
            column: 61,
            span: 6693..6694,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 193,
            column: 62,
            span: 6694..6695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 193,
            column: 63,
            span: 6694..6696,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 193,
            column: 64,
            span: 6696..6697,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 193,
            column: 71,
            span: 6698..6704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 193,
            column: 73,
            span: 6705..6706,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 193,
            column: 74,
            span: 6706..6707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 193,
            column: 75,
            span: 6707..6708,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 193,
            column: 76,
            span: 6708..6709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 193,
            column: 77,
            span: 6709..6710,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 193,
            column: 78,
            span: 6710..6711,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 193,
            column: 82,
            span: 6712..6715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 83,
            span: 6715..6716,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 194,
            column: 11,
            span: 6725..6727,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"apple and orange and lime\"",
        ),
        position: Position {
            line: 194,
            column: 39,
            span: 6728..6755,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 40,
            span: 6755..6756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 196,
            column: 2,
            span: 6758..6759,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 196,
            column: 4,
            span: 6760..6761,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 196,
            column: 6,
            span: 6762..6763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 196,
            column: 7,
            span: 6763..6764,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 196,
            column: 8,
            span: 6764..6765,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 196,
            column: 9,
            span: 6764..6766,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 196,
            column: 10,
            span: 6766..6767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 197,
            column: 7,
            span: 6768..6774,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 8,
            span: 6774..6775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 197,
            column: 12,
            span: 6775..6779,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 13,
            span: 6779..6780,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        position: Position {
            line: 197,
            column: 32,
            span: 6780..6799,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 33,
            span: 6799..6800,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w%w*\"",
        ),
        position: Position {
            line: 197,
            column: 41,
            span: 6801..6808,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 42,
            span: 6808..6809,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 197,
            column: 51,
            span: 6810..6818,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 53,
            span: 6819..6820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 197,
            column: 54,
            span: 6820..6821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 55,
            span: 6821..6822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 197,
            column: 57,
            span: 6823..6824,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 58,
            span: 6824..6825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 197,
            column: 59,
            span: 6825..6826,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 197,
            column: 60,
            span: 6826..6827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 197,
            column: 61,
            span: 6827..6828,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 62,
            span: 6828..6829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 197,
            column: 63,
            span: 6829..6830,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 197,
            column: 64,
            span: 6830..6831,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 197,
            column: 65,
            span: 6830..6832,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 197,
            column: 66,
            span: 6832..6833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 197,
            column: 68,
            span: 6834..6835,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 197,
            column: 69,
            span: 6835..6836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 197,
            column: 70,
            span: 6836..6837,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 71,
            span: 6837..6838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 197,
            column: 72,
            span: 6838..6839,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 197,
            column: 73,
            span: 6839..6840,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 197,
            column: 75,
            span: 6841..6842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 197,
            column: 77,
            span: 6843..6844,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 197,
            column: 81,
            span: 6845..6848,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 82,
            span: 6848..6849,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 198,
            column: 7,
            span: 6850..6856,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 198,
            column: 8,
            span: 6856..6857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 198,
            column: 9,
            span: 6857..6858,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 198,
            column: 10,
            span: 6858..6859,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 11,
            span: 6858..6860,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 198,
            column: 12,
            span: 6860..6861,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 15,
            span: 6862..6864,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        position: Position {
            line: 198,
            column: 23,
            span: 6865..6872,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 198,
            column: 27,
            span: 6873..6876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 198,
            column: 29,
            span: 6877..6878,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 198,
            column: 30,
            span: 6878..6879,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 31,
            span: 6878..6880,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 198,
            column: 32,
            span: 6880..6881,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 35,
            span: 6882..6884,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        position: Position {
            line: 198,
            column: 44,
            span: 6885..6893,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 198,
            column: 48,
            span: 6894..6897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 198,
            column: 50,
            span: 6898..6899,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 198,
            column: 51,
            span: 6899..6900,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 52,
            span: 6899..6901,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 198,
            column: 53,
            span: 6901..6902,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 56,
            span: 6903..6905,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"word\"",
        ),
        position: Position {
            line: 198,
            column: 63,
            span: 6906..6912,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 198,
            column: 67,
            span: 6913..6916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 198,
            column: 69,
            span: 6917..6918,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 198,
            column: 70,
            span: 6918..6919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 198,
            column: 71,
            span: 6919..6920,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 74,
            span: 6921..6923,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 76,
            span: 6923..6925,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 198,
            column: 77,
            span: 6925..6926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 200,
            column: 2,
            span: 6928..6929,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 200,
            column: 4,
            span: 6930..6931,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 200,
            column: 6,
            span: 6932..6933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 200,
            column: 7,
            span: 6933..6934,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 200,
            column: 8,
            span: 6934..6935,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 200,
            column: 9,
            span: 6934..6936,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 200,
            column: 10,
            span: 6936..6937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 201,
            column: 7,
            span: 6938..6944,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 8,
            span: 6944..6945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 201,
            column: 14,
            span: 6945..6951,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 201,
            column: 15,
            span: 6951..6952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 201,
            column: 19,
            span: 6952..6956,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 20,
            span: 6956..6957,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        position: Position {
            line: 201,
            column: 39,
            span: 6957..6976,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 201,
            column: 40,
            span: 6976..6977,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        position: Position {
            line: 201,
            column: 46,
            span: 6978..6983,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 201,
            column: 47,
            span: 6983..6984,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 202,
            column: 18,
            span: 6994..7002,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 202,
            column: 20,
            span: 7003..7004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 202,
            column: 21,
            span: 7004..7005,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 22,
            span: 7005..7006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 202,
            column: 24,
            span: 7007..7008,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 202,
            column: 25,
            span: 7008..7009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 202,
            column: 26,
            span: 7009..7010,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 202,
            column: 27,
            span: 7010..7011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 202,
            column: 28,
            span: 7011..7012,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 202,
            column: 29,
            span: 7012..7013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 202,
            column: 30,
            span: 7013..7014,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 202,
            column: 31,
            span: 7014..7015,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 202,
            column: 32,
            span: 7014..7016,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 202,
            column: 33,
            span: 7016..7017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 202,
            column: 35,
            span: 7018..7019,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 202,
            column: 36,
            span: 7019..7020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 202,
            column: 37,
            span: 7020..7021,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 202,
            column: 38,
            span: 7021..7022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 202,
            column: 39,
            span: 7022..7023,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 202,
            column: 40,
            span: 7023..7024,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 202,
            column: 42,
            span: 7025..7026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 202,
            column: 44,
            span: 7027..7028,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 202,
            column: 48,
            span: 7029..7032,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 202,
            column: 49,
            span: 7032..7033,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 202,
            column: 51,
            span: 7033..7035,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 52,
            span: 7035..7036,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 202,
            column: 55,
            span: 7037..7039,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        position: Position {
            line: 202,
            column: 75,
            span: 7040..7059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 202,
            column: 76,
            span: 7059..7060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 203,
            column: 7,
            span: 7061..7067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 203,
            column: 8,
            span: 7067..7068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 203,
            column: 9,
            span: 7068..7069,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 203,
            column: 10,
            span: 7069..7070,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 203,
            column: 11,
            span: 7069..7071,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 203,
            column: 12,
            span: 7071..7072,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 203,
            column: 15,
            span: 7073..7075,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        position: Position {
            line: 203,
            column: 23,
            span: 7076..7083,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 203,
            column: 27,
            span: 7084..7087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 203,
            column: 29,
            span: 7088..7089,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 203,
            column: 30,
            span: 7089..7090,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 203,
            column: 31,
            span: 7089..7091,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 203,
            column: 32,
            span: 7091..7092,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 203,
            column: 35,
            span: 7093..7095,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        position: Position {
            line: 203,
            column: 44,
            span: 7096..7104,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 203,
            column: 48,
            span: 7105..7108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 203,
            column: 50,
            span: 7109..7110,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 203,
            column: 51,
            span: 7110..7111,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 203,
            column: 52,
            span: 7110..7112,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 203,
            column: 53,
            span: 7112..7113,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 203,
            column: 56,
            span: 7114..7116,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 203,
            column: 60,
            span: 7117..7120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 203,
            column: 61,
            span: 7120..7121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 205,
            column: 7,
            span: 7123..7129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 8,
            span: 7129..7130,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 205,
            column: 11,
            span: 7130..7133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 205,
            column: 17,
            span: 7134..7139,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 18,
            span: 7139..7140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 205,
            column: 24,
            span: 7140..7146,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 205,
            column: 25,
            span: 7146..7147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 205,
            column: 29,
            span: 7147..7151,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 30,
            span: 7151..7152,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 205,
            column: 36,
            span: 7153..7158,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 37,
            span: 7158..7159,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.\"",
        ),
        position: Position {
            line: 205,
            column: 42,
            span: 7160..7164,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 43,
            span: 7164..7165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 205,
            column: 49,
            span: 7166..7171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 50,
            span: 7171..7172,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 51,
            span: 7172..7173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 206,
            column: 7,
            span: 7174..7180,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 8,
            span: 7180..7181,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 206,
            column: 11,
            span: 7181..7184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 206,
            column: 17,
            span: 7185..7190,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 18,
            span: 7190..7191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 206,
            column: 24,
            span: 7191..7197,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 206,
            column: 25,
            span: 7197..7198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 206,
            column: 29,
            span: 7198..7202,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 30,
            span: 7202..7203,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 206,
            column: 36,
            span: 7204..7209,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 37,
            span: 7209..7210,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".)\"",
        ),
        position: Position {
            line: 206,
            column: 42,
            span: 7211..7215,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 206,
            column: 43,
            span: 7215..7216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 206,
            column: 49,
            span: 7217..7222,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 50,
            span: 7222..7223,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 51,
            span: 7223..7224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 207,
            column: 7,
            span: 7225..7231,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 8,
            span: 7231..7232,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 207,
            column: 11,
            span: 7232..7235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 207,
            column: 17,
            span: 7236..7241,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 207,
            column: 18,
            span: 7241..7242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 207,
            column: 24,
            span: 7242..7248,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 207,
            column: 25,
            span: 7248..7249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 207,
            column: 29,
            span: 7249..7253,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 30,
            span: 7253..7254,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 207,
            column: 36,
            span: 7255..7260,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 37,
            span: 7260..7261,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.\"",
        ),
        position: Position {
            line: 207,
            column: 42,
            span: 7262..7266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 207,
            column: 43,
            span: 7266..7267,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 207,
            column: 45,
            span: 7268..7269,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 207,
            column: 46,
            span: 7269..7270,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 47,
            span: 7270..7271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 207,
            column: 48,
            span: 7271..7272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 208,
            column: 7,
            span: 7273..7279,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 8,
            span: 7279..7280,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 208,
            column: 11,
            span: 7280..7283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 208,
            column: 17,
            span: 7284..7289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 18,
            span: 7289..7290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 208,
            column: 24,
            span: 7290..7296,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 208,
            column: 25,
            span: 7296..7297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 208,
            column: 29,
            span: 7297..7301,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 30,
            span: 7301..7302,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 208,
            column: 36,
            span: 7303..7308,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 37,
            span: 7308..7309,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.)\"",
        ),
        position: Position {
            line: 208,
            column: 43,
            span: 7310..7315,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 208,
            column: 44,
            span: 7315..7316,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%2\"",
        ),
        position: Position {
            line: 208,
            column: 49,
            span: 7317..7321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 50,
            span: 7321..7322,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 51,
            span: 7322..7323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 209,
            column: 7,
            span: 7324..7330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 8,
            span: 7330..7331,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 209,
            column: 11,
            span: 7331..7334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 209,
            column: 17,
            span: 7335..7340,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 18,
            span: 7340..7341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 209,
            column: 24,
            span: 7341..7347,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 209,
            column: 25,
            span: 7347..7348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 209,
            column: 29,
            span: 7348..7352,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 30,
            span: 7352..7353,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 209,
            column: 36,
            span: 7354..7359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 37,
            span: 7359..7360,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%1)\"",
        ),
        position: Position {
            line: 209,
            column: 44,
            span: 7361..7367,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 45,
            span: 7367..7368,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 209,
            column: 49,
            span: 7369..7372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 50,
            span: 7372..7373,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 51,
            span: 7373..7374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 210,
            column: 7,
            span: 7375..7381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 8,
            span: 7381..7382,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 210,
            column: 11,
            span: 7382..7385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 210,
            column: 17,
            span: 7386..7391,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 18,
            span: 7391..7392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 210,
            column: 24,
            span: 7392..7398,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 210,
            column: 25,
            span: 7398..7399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 210,
            column: 29,
            span: 7399..7403,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 30,
            span: 7403..7404,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 210,
            column: 36,
            span: 7405..7410,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 37,
            span: 7410..7411,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%0)\"",
        ),
        position: Position {
            line: 210,
            column: 44,
            span: 7412..7418,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 45,
            span: 7418..7419,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 210,
            column: 49,
            span: 7420..7423,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 50,
            span: 7423..7424,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 51,
            span: 7424..7425,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 213,
            column: 0,
            span: 7463..7465,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 214,
            column: 8,
            span: 7468..7473,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 214,
            column: 17,
            span: 7474..7482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 214,
            column: 19,
            span: 7483..7484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 214,
            column: 21,
            span: 7485..7486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        position: Position {
            line: 214,
            column: 25,
            span: 7486..7490,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 214,
            column: 26,
            span: 7490..7491,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 215,
            column: 10,
            span: 7496..7501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 215,
            column: 12,
            span: 7502..7503,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 215,
            column: 14,
            span: 7504..7505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 215,
            column: 21,
            span: 7506..7512,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 215,
            column: 22,
            span: 7512..7513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 215,
            column: 25,
            span: 7513..7516,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 26,
            span: 7516..7517,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 215,
            column: 29,
            span: 7517..7520,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 30,
            span: 7520..7521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        position: Position {
            line: 215,
            column: 35,
            span: 7522..7526,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 36,
            span: 7526..7527,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 216,
            column: 10,
            span: 7532..7537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 216,
            column: 12,
            span: 7538..7539,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 216,
            column: 14,
            span: 7540..7541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 216,
            column: 21,
            span: 7542..7548,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 216,
            column: 22,
            span: 7548..7549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 216,
            column: 25,
            span: 7549..7552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 26,
            span: 7552..7553,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".?\"",
        ),
        position: Position {
            line: 216,
            column: 30,
            span: 7553..7557,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 216,
            column: 31,
            span: 7557..7558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "size",
        ),
        position: Position {
            line: 216,
            column: 36,
            span: 7559..7563,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 37,
            span: 7563..7564,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 217,
            column: 11,
            span: 7569..7575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 217,
            column: 17,
            span: 7576..7581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 18,
            span: 7581..7582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 217,
            column: 24,
            span: 7582..7588,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 217,
            column: 25,
            span: 7588..7589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 217,
            column: 30,
            span: 7589..7594,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 31,
            span: 7594..7595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 217,
            column: 33,
            span: 7596..7597,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 217,
            column: 34,
            span: 7597..7598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 217,
            column: 36,
            span: 7599..7600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 37,
            span: 7600..7601,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 218,
            column: 0,
            span: 7604..7607,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 219,
            column: 8,
            span: 7610..7615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 219,
            column: 10,
            span: 7616..7617,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 219,
            column: 11,
            span: 7617..7618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 219,
            column: 13,
            span: 7619..7620,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 219,
            column: 15,
            span: 7621..7622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 219,
            column: 17,
            span: 7623..7624,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 18,
            span: 7624..7625,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 219,
            column: 20,
            span: 7624..7627,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 21,
            span: 7627..7628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 220,
            column: 9,
            span: 7631..7637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 10,
            span: 7637..7638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 220,
            column: 11,
            span: 7638..7639,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 220,
            column: 15,
            span: 7640..7643,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 220,
            column: 17,
            span: 7644..7645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 220,
            column: 18,
            span: 7645..7646,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 220,
            column: 21,
            span: 7647..7649,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "80",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 220,
            column: 24,
            span: 7649..7652,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 25,
            span: 7652..7653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 221,
            column: 4,
            span: 7656..7657,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 221,
            column: 5,
            span: 7657..7658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 221,
            column: 7,
            span: 7659..7660,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 221,
            column: 9,
            span: 7661..7662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 221,
            column: 11,
            span: 7663..7664,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 221,
            column: 12,
            span: 7664..7665,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 221,
            column: 18,
            span: 7664..7671,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 221,
            column: 19,
            span: 7671..7672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 222,
            column: 9,
            span: 7675..7681,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 10,
            span: 7681..7682,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 222,
            column: 13,
            span: 7682..7685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 222,
            column: 15,
            span: 7686..7687,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 222,
            column: 19,
            span: 7688..7691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 222,
            column: 26,
            span: 7692..7698,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 222,
            column: 27,
            span: 7698..7699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 222,
            column: 31,
            span: 7699..7703,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 32,
            span: 7703..7704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 222,
            column: 33,
            span: 7704..7705,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 222,
            column: 34,
            span: 7705..7706,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too complex\"",
        ),
        position: Position {
            line: 222,
            column: 48,
            span: 7707..7720,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 49,
            span: 7720..7721,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 50,
            span: 7721..7722,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 223,
            column: 0,
            span: 7723..7726,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 225,
            column: 3,
            span: 7728..7730,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 225,
            column: 7,
            span: 7731..7734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 225,
            column: 13,
            span: 7735..7740,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 225,
            column: 0,
            span: 7741..7745,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 227,
            column: 8,
            span: 7765..7770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 227,
            column: 10,
            span: 7771..7772,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 227,
            column: 12,
            span: 7773..7774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 227,
            column: 19,
            span: 7775..7781,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 227,
            column: 20,
            span: 7781..7782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 227,
            column: 23,
            span: 7782..7785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 24,
            span: 7785..7786,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 227,
            column: 27,
            span: 7786..7789,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 227,
            column: 28,
            span: 7789..7790,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "300000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 227,
            column: 35,
            span: 7790..7797,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 36,
            span: 7797..7798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 228,
            column: 9,
            span: 7801..7807,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 10,
            span: 7807..7808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 228,
            column: 16,
            span: 7808..7814,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 228,
            column: 17,
            span: 7814..7815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 228,
            column: 21,
            span: 7815..7819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 22,
            span: 7819..7820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 228,
            column: 23,
            span: 7820..7821,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 24,
            span: 7821..7822,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a*.?$'",
        ),
        position: Position {
            line: 228,
            column: 33,
            span: 7823..7831,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 34,
            span: 7831..7832,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 35,
            span: 7832..7833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 229,
            column: 9,
            span: 7836..7842,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 10,
            span: 7842..7843,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 229,
            column: 13,
            span: 7843..7846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 229,
            column: 20,
            span: 7847..7853,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 229,
            column: 21,
            span: 7853..7854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 229,
            column: 25,
            span: 7854..7858,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 26,
            span: 7858..7859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 229,
            column: 27,
            span: 7859..7860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 28,
            span: 7860..7861,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a*.?b$'",
        ),
        position: Position {
            line: 229,
            column: 38,
            span: 7862..7871,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 39,
            span: 7871..7872,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 40,
            span: 7872..7873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 230,
            column: 9,
            span: 7876..7882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 10,
            span: 7882..7883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 230,
            column: 16,
            span: 7883..7889,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 230,
            column: 17,
            span: 7889..7890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 230,
            column: 21,
            span: 7890..7894,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 22,
            span: 7894..7895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 230,
            column: 23,
            span: 7895..7896,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 230,
            column: 24,
            span: 7896..7897,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'^a-.?$'",
        ),
        position: Position {
            line: 230,
            column: 33,
            span: 7898..7906,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 34,
            span: 7906..7907,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 35,
            span: 7907..7908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 233,
            column: 4,
            span: 7930..7931,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 233,
            column: 6,
            span: 7932..7933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 233,
            column: 13,
            span: 7934..7940,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 233,
            column: 14,
            span: 7940..7941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 233,
            column: 17,
            span: 7941..7944,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 18,
            span: 7944..7945,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 233,
            column: 21,
            span: 7945..7948,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 22,
            span: 7948..7949,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 28,
            span: 7949..7955,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 29,
            span: 7955..7956,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 233,
            column: 32,
            span: 7957..7959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 233,
            column: 39,
            span: 7960..7966,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 233,
            column: 40,
            span: 7966..7967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 233,
            column: 43,
            span: 7967..7970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 44,
            span: 7970..7971,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 233,
            column: 47,
            span: 7971..7974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 48,
            span: 7974..7975,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 54,
            span: 7975..7981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 55,
            span: 7981..7982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 234,
            column: 9,
            span: 7985..7991,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 10,
            span: 7991..7992,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 234,
            column: 13,
            span: 7992..7995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 234,
            column: 19,
            span: 7996..8001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 20,
            span: 8001..8002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 234,
            column: 26,
            span: 8002..8008,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 234,
            column: 27,
            span: 8008..8009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 234,
            column: 31,
            span: 8009..8013,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 32,
            span: 8013..8014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 234,
            column: 34,
            span: 8015..8016,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 234,
            column: 35,
            span: 8016..8017,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 234,
            column: 39,
            span: 8018..8021,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 40,
            span: 8021..8022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 41,
            span: 8022..8023,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 235,
            column: 0,
            span: 8024..8027,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 238,
            column: 9,
            span: 8056..8064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        position: Position {
            line: 238,
            column: 13,
            span: 8065..8068,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 15,
            span: 8069..8070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 238,
            column: 16,
            span: 8070..8071,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 17,
            span: 8071..8072,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 239,
            column: 9,
            span: 8075..8081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 239,
            column: 16,
            span: 8082..8088,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 239,
            column: 17,
            span: 8088..8089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 239,
            column: 21,
            span: 8089..8093,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 22,
            span: 8093..8094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 239,
            column: 23,
            span: 8094..8095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 24,
            span: 8095..8096,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.)(.+)\"",
        ),
        position: Position {
            line: 239,
            column: 34,
            span: 8097..8106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 35,
            span: 8106..8107,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 239,
            column: 44,
            span: 8108..8116,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 46,
            span: 8117..8118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 239,
            column: 47,
            span: 8118..8119,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 239,
            column: 48,
            span: 8119..8120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 239,
            column: 50,
            span: 8120..8122,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 51,
            span: 8122..8123,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 239,
            column: 58,
            span: 8124..8130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        position: Position {
            line: 239,
            column: 62,
            span: 8131..8134,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 63,
            span: 8134..8135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s1",
        ),
        position: Position {
            line: 239,
            column: 65,
            span: 8135..8137,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 66,
            span: 8137..8138,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 239,
            column: 68,
            span: 8138..8140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 239,
            column: 69,
            span: 8140..8141,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 239,
            column: 73,
            span: 8142..8145,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 74,
            span: 8145..8146,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 240,
            column: 0,
            span: 8147..8150,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 242,
            column: 6,
            span: 8152..8157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 242,
            column: 8,
            span: 8158..8159,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 242,
            column: 10,
            span: 8160..8161,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdef\"",
        ),
        position: Position {
            line: 242,
            column: 19,
            span: 8162..8170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 243,
            column: 7,
            span: 8171..8177,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 8,
            span: 8177..8178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        position: Position {
            line: 243,
            column: 11,
            span: 8178..8181,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 12,
            span: 8181..8182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rev",
        ),
        position: Position {
            line: 243,
            column: 15,
            span: 8182..8185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 16,
            span: 8185..8186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 243,
            column: 17,
            span: 8186..8187,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 18,
            span: 8187..8188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 19,
            span: 8188..8189,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 243,
            column: 22,
            span: 8190..8192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 243,
            column: 24,
            span: 8193..8194,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 25,
            span: 8194..8195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 247,
            column: 7,
            span: 8218..8224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 8,
            span: 8224..8225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 247,
            column: 14,
            span: 8225..8231,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 247,
            column: 15,
            span: 8231..8232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 247,
            column: 19,
            span: 8232..8236,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 20,
            span: 8236..8237,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 247,
            column: 29,
            span: 8237..8246,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 30,
            span: 8246..8247,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 247,
            column: 34,
            span: 8248..8251,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 35,
            span: 8251..8252,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 247,
            column: 37,
            span: 8253..8254,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 247,
            column: 38,
            span: 8254..8255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 39,
            span: 8255..8256,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 247,
            column: 42,
            span: 8257..8259,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 247,
            column: 52,
            span: 8260..8269,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 53,
            span: 8269..8270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 248,
            column: 7,
            span: 8271..8277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 248,
            column: 8,
            span: 8277..8278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 248,
            column: 14,
            span: 8278..8284,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 248,
            column: 15,
            span: 8284..8285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 248,
            column: 19,
            span: 8285..8289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 248,
            column: 20,
            span: 8289..8290,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 248,
            column: 29,
            span: 8290..8299,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 248,
            column: 30,
            span: 8299..8300,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.)\"",
        ),
        position: Position {
            line: 248,
            column: 36,
            span: 8301..8306,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 248,
            column: 37,
            span: 8306..8307,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 248,
            column: 39,
            span: 8308..8309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 248,
            column: 40,
            span: 8309..8310,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 248,
            column: 41,
            span: 8310..8311,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        position: Position {
            line: 248,
            column: 45,
            span: 8311..8315,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 248,
            column: 46,
            span: 8315..8316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 248,
            column: 48,
            span: 8317..8318,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 248,
            column: 49,
            span: 8318..8319,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 248,
            column: 51,
            span: 8319..8321,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 248,
            column: 52,
            span: 8321..8322,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 248,
            column: 53,
            span: 8322..8323,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 248,
            column: 56,
            span: 8324..8326,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        position: Position {
            line: 248,
            column: 66,
            span: 8327..8336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 248,
            column: 67,
            span: 8336..8337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 249,
            column: 7,
            span: 8338..8344,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 8,
            span: 8344..8345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 249,
            column: 14,
            span: 8345..8351,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 249,
            column: 15,
            span: 8351..8352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 249,
            column: 19,
            span: 8352..8356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 20,
            span: 8356..8357,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 249,
            column: 29,
            span: 8357..8366,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 30,
            span: 8366..8367,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(.).\"",
        ),
        position: Position {
            line: 249,
            column: 37,
            span: 8368..8374,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 38,
            span: 8374..8375,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 249,
            column: 40,
            span: 8376..8377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 249,
            column: 41,
            span: 8377..8378,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 249,
            column: 42,
            span: 8378..8379,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        position: Position {
            line: 249,
            column: 46,
            span: 8379..8383,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 249,
            column: 47,
            span: 8383..8384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        position: Position {
            line: 249,
            column: 49,
            span: 8385..8386,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 249,
            column: 50,
            span: 8386..8387,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"K\"",
        ),
        position: Position {
            line: 249,
            column: 53,
            span: 8387..8390,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 249,
            column: 54,
            span: 8390..8391,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 55,
            span: 8391..8392,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 249,
            column: 58,
            span: 8393..8395,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        position: Position {
            line: 249,
            column: 68,
            span: 8396..8405,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 69,
            span: 8405..8406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 250,
            column: 7,
            span: 8407..8413,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 8,
            span: 8413..8414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 250,
            column: 14,
            span: 8414..8420,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 250,
            column: 15,
            span: 8420..8421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 250,
            column: 19,
            span: 8421..8425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 20,
            span: 8425..8426,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 250,
            column: 29,
            span: 8426..8435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 30,
            span: 8435..8436,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"((.)(.?))\"",
        ),
        position: Position {
            line: 250,
            column: 42,
            span: 8437..8448,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 43,
            span: 8448..8449,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 250,
            column: 45,
            span: 8450..8451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "al",
        ),
        position: Position {
            line: 250,
            column: 47,
            span: 8451..8453,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 250,
            column: 48,
            span: 8453..8454,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA\"",
        ),
        position: Position {
            line: 250,
            column: 52,
            span: 8454..8458,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 250,
            column: 53,
            span: 8458..8459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "o",
        ),
        position: Position {
            line: 250,
            column: 55,
            span: 8460..8461,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 250,
            column: 56,
            span: 8461..8462,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 250,
            column: 61,
            span: 8462..8467,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 250,
            column: 62,
            span: 8467..8468,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 63,
            span: 8468..8469,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 250,
            column: 66,
            span: 8470..8472,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AAo AAo\"",
        ),
        position: Position {
            line: 250,
            column: 76,
            span: 8473..8482,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 77,
            span: 8482..8483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 252,
            column: 7,
            span: 8485..8491,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 8,
            span: 8491..8492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 252,
            column: 14,
            span: 8492..8498,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 252,
            column: 15,
            span: 8498..8499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 252,
            column: 19,
            span: 8499..8503,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 252,
            column: 20,
            span: 8503..8504,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 252,
            column: 29,
            span: 8504..8513,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 30,
            span: 8513..8514,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"().\"",
        ),
        position: Position {
            line: 252,
            column: 36,
            span: 8515..8520,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 37,
            span: 8520..8521,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 252,
            column: 39,
            span: 8522..8523,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 40,
            span: 8522..8524,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 41,
            span: 8524..8525,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 42,
            span: 8524..8526,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 43,
            span: 8526..8527,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 252,
            column: 44,
            span: 8526..8528,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 252,
            column: 45,
            span: 8528..8529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 46,
            span: 8529..8530,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 252,
            column: 49,
            span: 8531..8533,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"256 alo\"",
        ),
        position: Position {
            line: 252,
            column: 59,
            span: 8534..8543,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 60,
            span: 8543..8544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 254,
            column: 2,
            span: 8546..8547,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 254,
            column: 4,
            span: 8548..8549,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 254,
            column: 6,
            span: 8550..8551,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 254,
            column: 7,
            span: 8551..8552,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 254,
            column: 8,
            span: 8552..8553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 254,
            column: 21,
            span: 8554..8566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 22,
            span: 8566..8567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 254,
            column: 23,
            span: 8567..8568,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 254,
            column: 24,
            span: 8568..8569,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 254,
            column: 26,
            span: 8570..8571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 254,
            column: 33,
            span: 8571..8578,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 254,
            column: 35,
            span: 8579..8580,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 254,
            column: 44,
            span: 8581..8589,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 46,
            span: 8590..8591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 254,
            column: 47,
            span: 8591..8592,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 254,
            column: 48,
            span: 8592..8593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 254,
            column: 49,
            span: 8593..8594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 50,
            span: 8594..8595,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 254,
            column: 57,
            span: 8596..8602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 254,
            column: 64,
            span: 8603..8609,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 254,
            column: 65,
            span: 8609..8610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        position: Position {
            line: 254,
            column: 70,
            span: 8610..8615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 254,
            column: 71,
            span: 8615..8616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 254,
            column: 72,
            span: 8616..8617,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 73,
            span: 8617..8618,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 254,
            column: 77,
            span: 8619..8622,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 254,
            column: 78,
            span: 8622..8623,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 254,
            column: 79,
            span: 8623..8624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 255,
            column: 7,
            span: 8625..8631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 8,
            span: 8631..8632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 255,
            column: 14,
            span: 8632..8638,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 255,
            column: 15,
            span: 8638..8639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 255,
            column: 19,
            span: 8639..8643,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 20,
            span: 8643..8644,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a alo b hi\"",
        ),
        position: Position {
            line: 255,
            column: 32,
            span: 8644..8656,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 33,
            span: 8656..8657,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w%w+\"",
        ),
        position: Position {
            line: 255,
            column: 41,
            span: 8658..8665,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 42,
            span: 8665..8666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 255,
            column: 44,
            span: 8667..8668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 45,
            span: 8668..8669,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 255,
            column: 48,
            span: 8670..8672,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a ALO b HI\"",
        ),
        position: Position {
            line: 255,
            column: 61,
            span: 8673..8685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 62,
            span: 8685..8686,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 259,
            column: 6,
            span: 8709..8714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 259,
            column: 8,
            span: 8715..8716,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 259,
            column: 10,
            span: 8717..8718,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 259,
            column: 0,
            span: 8718..8720,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 260,
            column: 4,
            span: 8721..8724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 260,
            column: 6,
            span: 8725..8726,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 260,
            column: 9,
            span: 8727..8729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 260,
            column: 16,
            span: 8730..8736,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 260,
            column: 17,
            span: 8736..8737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 260,
            column: 23,
            span: 8737..8743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 24,
            span: 8743..8744,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abcde'",
        ),
        position: Position {
            line: 260,
            column: 31,
            span: 8744..8751,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 32,
            span: 8751..8752,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'()'",
        ),
        position: Position {
            line: 260,
            column: 37,
            span: 8753..8757,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 38,
            span: 8757..8758,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 260,
            column: 41,
            span: 8759..8761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 260,
            column: 48,
            span: 8762..8768,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 260,
            column: 49,
            span: 8768..8769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 260,
            column: 50,
            span: 8769..8770,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 260,
            column: 53,
            span: 8771..8773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 260,
            column: 55,
            span: 8774..8775,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 260,
            column: 56,
            span: 8775..8776,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 260,
            column: 57,
            span: 8775..8777,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 58,
            span: 8777..8778,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 260,
            column: 59,
            span: 8778..8779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 260,
            column: 61,
            span: 8780..8781,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 260,
            column: 62,
            span: 8781..8782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 260,
            column: 63,
            span: 8782..8783,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 260,
            column: 0,
            span: 8784..8787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 261,
            column: 7,
            span: 8788..8794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 8,
            span: 8794..8795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 261,
            column: 9,
            span: 8795..8796,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 261,
            column: 11,
            span: 8796..8798,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 261,
            column: 12,
            span: 8797..8799,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 13,
            span: 8799..8800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 263,
            column: 2,
            span: 8802..8803,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 263,
            column: 4,
            span: 8804..8805,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 263,
            column: 6,
            span: 8806..8807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 263,
            column: 7,
            span: 8807..8808,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 263,
            column: 8,
            span: 8808..8809,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 263,
            column: 9,
            span: 8808..8810,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 263,
            column: 10,
            span: 8810..8811,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 264,
            column: 4,
            span: 8812..8815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 264,
            column: 6,
            span: 8816..8817,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 264,
            column: 9,
            span: 8818..8820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 264,
            column: 16,
            span: 8821..8827,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 264,
            column: 17,
            span: 8827..8828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 264,
            column: 23,
            span: 8828..8834,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 264,
            column: 24,
            span: 8834..8835,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first second word\"",
        ),
        position: Position {
            line: 264,
            column: 43,
            span: 8835..8854,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 264,
            column: 44,
            span: 8854..8855,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%w+\"",
        ),
        position: Position {
            line: 264,
            column: 50,
            span: 8856..8861,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 264,
            column: 51,
            span: 8861..8862,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 264,
            column: 0,
            span: 8863..8865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 265,
            column: 8,
            span: 8872..8873,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 265,
            column: 9,
            span: 8873..8874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 265,
            column: 10,
            span: 8874..8875,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 265,
            column: 11,
            span: 8875..8876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 265,
            column: 12,
            span: 8876..8877,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 265,
            column: 13,
            span: 8877..8878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 265,
            column: 14,
            span: 8878..8879,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 265,
            column: 15,
            span: 8879..8880,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 265,
            column: 16,
            span: 8879..8881,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 265,
            column: 17,
            span: 8881..8882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 265,
            column: 19,
            span: 8883..8884,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 265,
            column: 20,
            span: 8884..8885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 265,
            column: 21,
            span: 8885..8886,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 265,
            column: 22,
            span: 8886..8887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 265,
            column: 23,
            span: 8887..8888,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 265,
            column: 24,
            span: 8888..8889,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 265,
            column: 26,
            span: 8890..8891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        position: Position {
            line: 265,
            column: 0,
            span: 8892..8893,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 266,
            column: 0,
            span: 8894..8897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 267,
            column: 7,
            span: 8898..8904,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 8,
            span: 8904..8905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 267,
            column: 9,
            span: 8905..8906,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 267,
            column: 10,
            span: 8906..8907,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 267,
            column: 11,
            span: 8906..8908,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 267,
            column: 12,
            span: 8908..8909,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 267,
            column: 15,
            span: 8910..8912,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"first\"",
        ),
        position: Position {
            line: 267,
            column: 23,
            span: 8913..8920,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 267,
            column: 27,
            span: 8921..8924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 267,
            column: 29,
            span: 8925..8926,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 267,
            column: 30,
            span: 8926..8927,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 267,
            column: 31,
            span: 8926..8928,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 267,
            column: 32,
            span: 8928..8929,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 267,
            column: 35,
            span: 8930..8932,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"second\"",
        ),
        position: Position {
            line: 267,
            column: 44,
            span: 8933..8941,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 267,
            column: 48,
            span: 8942..8945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 267,
            column: 50,
            span: 8946..8947,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 267,
            column: 51,
            span: 8947..8948,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 267,
            column: 52,
            span: 8947..8949,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 267,
            column: 53,
            span: 8949..8950,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 267,
            column: 56,
            span: 8951..8953,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"word\"",
        ),
        position: Position {
            line: 267,
            column: 63,
            span: 8954..8960,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 64,
            span: 8960..8961,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 269,
            column: 2,
            span: 8963..8964,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 269,
            column: 4,
            span: 8965..8966,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 269,
            column: 6,
            span: 8967..8968,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 269,
            column: 7,
            span: 8967..8969,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 269,
            column: 8,
            span: 8969..8970,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 269,
            column: 10,
            span: 8970..8972,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 269,
            column: 11,
            span: 8972..8973,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 269,
            column: 13,
            span: 8973..8975,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 269,
            column: 14,
            span: 8975..8976,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 270,
            column: 4,
            span: 8977..8980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 270,
            column: 6,
            span: 8981..8982,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 270,
            column: 9,
            span: 8983..8985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 270,
            column: 16,
            span: 8986..8992,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 270,
            column: 17,
            span: 8992..8993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 270,
            column: 23,
            span: 8993..8999,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 25,
            span: 9000..9001,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxx uu ppar r\"",
        ),
        position: Position {
            line: 270,
            column: 41,
            span: 9001..9017,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 42,
            span: 9017..9018,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()(.)%2\"",
        ),
        position: Position {
            line: 270,
            column: 52,
            span: 9019..9028,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 53,
            span: 9028..9029,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 270,
            column: 0,
            span: 9030..9032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 271,
            column: 9,
            span: 9035..9041,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 10,
            span: 9041..9042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 271,
            column: 11,
            span: 9042..9043,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 271,
            column: 14,
            span: 9044..9046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 271,
            column: 20,
            span: 9047..9052,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 271,
            column: 21,
            span: 9052..9053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 271,
            column: 27,
            span: 9053..9059,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 271,
            column: 28,
            span: 9059..9060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 271,
            column: 29,
            span: 9060..9061,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 271,
            column: 30,
            span: 9061..9062,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 271,
            column: 32,
            span: 9062..9064,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 33,
            span: 9064..9065,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 271,
            column: 34,
            span: 9065..9066,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 272,
            column: 0,
            span: 9067..9070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 273,
            column: 7,
            span: 9071..9077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 273,
            column: 8,
            span: 9077..9078,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 273,
            column: 9,
            span: 9078..9079,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 273,
            column: 10,
            span: 9079..9080,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 273,
            column: 13,
            span: 9081..9083,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 273,
            column: 15,
            span: 9083..9085,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 273,
            column: 16,
            span: 9085..9086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 275,
            column: 2,
            span: 9088..9089,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 275,
            column: 4,
            span: 9090..9091,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 275,
            column: 6,
            span: 9092..9093,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 275,
            column: 7,
            span: 9093..9094,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 276,
            column: 4,
            span: 9095..9098,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 276,
            column: 6,
            span: 9099..9100,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 276,
            column: 7,
            span: 9100..9101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 276,
            column: 8,
            span: 9101..9102,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 276,
            column: 11,
            span: 9103..9105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 276,
            column: 18,
            span: 9106..9112,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 276,
            column: 19,
            span: 9112..9113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 276,
            column: 25,
            span: 9113..9119,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 26,
            span: 9119..9120,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"13 14 10 = 11, 15= 16, 22=23\"",
        ),
        position: Position {
            line: 276,
            column: 56,
            span: 9120..9150,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 276,
            column: 57,
            span: 9150..9151,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(%d+)%s*=%s*(%d+)\"",
        ),
        position: Position {
            line: 276,
            column: 77,
            span: 9152..9171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 78,
            span: 9171..9172,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 276,
            column: 0,
            span: 9173..9175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 277,
            column: 4,
            span: 9178..9179,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 277,
            column: 5,
            span: 9179..9180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 277,
            column: 6,
            span: 9180..9181,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 277,
            column: 7,
            span: 9181..9182,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 277,
            column: 9,
            span: 9183..9184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 277,
            column: 0,
            span: 9185..9186,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 278,
            column: 0,
            span: 9187..9190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 279,
            column: 2,
            span: 9191..9192,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 279,
            column: 4,
            span: 9193..9194,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 279,
            column: 0,
            span: 9194..9196,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 280,
            column: 4,
            span: 9197..9200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 280,
            column: 6,
            span: 9201..9202,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 280,
            column: 7,
            span: 9202..9203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 280,
            column: 8,
            span: 9203..9204,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 280,
            column: 11,
            span: 9205..9207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 280,
            column: 17,
            span: 9208..9213,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 18,
            span: 9213..9214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 280,
            column: 19,
            span: 9214..9215,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 20,
            span: 9215..9216,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 280,
            column: 23,
            span: 9217..9219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 280,
            column: 30,
            span: 9220..9226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 280,
            column: 31,
            span: 9226..9227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 280,
            column: 32,
            span: 9227..9228,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 280,
            column: 33,
            span: 9228..9229,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 280,
            column: 34,
            span: 9228..9230,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 280,
            column: 37,
            span: 9231..9233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 280,
            column: 39,
            span: 9234..9235,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 280,
            column: 40,
            span: 9235..9236,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 280,
            column: 41,
            span: 9235..9237,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 280,
            column: 42,
            span: 9237..9238,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 280,
            column: 43,
            span: 9238..9239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 280,
            column: 45,
            span: 9240..9241,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 280,
            column: 46,
            span: 9241..9242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 280,
            column: 47,
            span: 9242..9243,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 280,
            column: 48,
            span: 9243..9244,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 280,
            column: 49,
            span: 9243..9245,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 280,
            column: 0,
            span: 9246..9249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 281,
            column: 7,
            span: 9250..9256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 8,
            span: 9256..9257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 281,
            column: 9,
            span: 9257..9258,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 12,
            span: 9259..9261,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 281,
            column: 14,
            span: 9261..9263,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 15,
            span: 9263..9264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 286,
            column: 7,
            span: 9300..9306,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 8,
            span: 9306..9307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 286,
            column: 14,
            span: 9307..9313,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 286,
            column: 15,
            span: 9313..9314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 286,
            column: 19,
            span: 9314..9318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 286,
            column: 20,
            span: 9318..9319,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaa aa a aaa a\"",
        ),
        position: Position {
            line: 286,
            column: 36,
            span: 9319..9335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 37,
            span: 9335..9336,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%w]a\"",
        ),
        position: Position {
            line: 286,
            column: 47,
            span: 9337..9346,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 286,
            column: 48,
            span: 9346..9347,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 286,
            column: 52,
            span: 9348..9351,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 286,
            column: 53,
            span: 9351..9352,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 286,
            column: 56,
            span: 9353..9355,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xaa xa x xaa x\"",
        ),
        position: Position {
            line: 286,
            column: 73,
            span: 9356..9372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 286,
            column: 74,
            span: 9372..9373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 287,
            column: 7,
            span: 9374..9380,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 8,
            span: 9380..9381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 287,
            column: 14,
            span: 9381..9387,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 287,
            column: 15,
            span: 9387..9388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 287,
            column: 19,
            span: 9388..9392,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 20,
            span: 9392..9393,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[]] [][] [[[[\"",
        ),
        position: Position {
            line: 287,
            column: 36,
            span: 9393..9409,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 287,
            column: 37,
            span: 9409..9410,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[[].\"",
        ),
        position: Position {
            line: 287,
            column: 46,
            span: 9411..9419,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 287,
            column: 47,
            span: 9419..9420,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 287,
            column: 51,
            span: 9421..9424,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 52,
            span: 9424..9425,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 287,
            column: 55,
            span: 9426..9428,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x[]] x]x] x[[[\"",
        ),
        position: Position {
            line: 287,
            column: 72,
            span: 9429..9445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 73,
            span: 9445..9446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 288,
            column: 7,
            span: 9447..9453,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 8,
            span: 9453..9454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 288,
            column: 14,
            span: 9454..9460,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 288,
            column: 15,
            span: 9460..9461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 288,
            column: 19,
            span: 9461..9465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 20,
            span: 9465..9466,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01abc45de3\"",
        ),
        position: Position {
            line: 288,
            column: 32,
            span: 9466..9478,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 288,
            column: 33,
            span: 9478..9479,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%d]\"",
        ),
        position: Position {
            line: 288,
            column: 42,
            span: 9480..9488,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 288,
            column: 43,
            span: 9488..9489,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 288,
            column: 47,
            span: 9490..9493,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 48,
            span: 9493..9494,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 288,
            column: 51,
            span: 9495..9497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".01abc.45de.3\"",
        ),
        position: Position {
            line: 288,
            column: 67,
            span: 9498..9513,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 68,
            span: 9513..9514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 289,
            column: 7,
            span: 9515..9521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 8,
            span: 9521..9522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 289,
            column: 14,
            span: 9522..9528,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 289,
            column: 15,
            span: 9528..9529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 289,
            column: 19,
            span: 9529..9533,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 20,
            span: 9533..9534,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01abc45 de3x\"",
        ),
        position: Position {
            line: 289,
            column: 34,
            span: 9534..9548,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 35,
            span: 9548..9549,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%D]%w\"",
        ),
        position: Position {
            line: 289,
            column: 46,
            span: 9550..9560,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 47,
            span: 9560..9561,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 289,
            column: 51,
            span: 9562..9565,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 52,
            span: 9565..9566,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 289,
            column: 55,
            span: 9567..9569,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01.bc45 de3.\"",
        ),
        position: Position {
            line: 289,
            column: 70,
            span: 9570..9584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 71,
            span: 9584..9585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 290,
            column: 7,
            span: 9586..9592,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 290,
            column: 8,
            span: 9592..9593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 290,
            column: 14,
            span: 9593..9599,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 290,
            column: 15,
            span: 9599..9600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 290,
            column: 19,
            span: 9600..9604,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 290,
            column: 20,
            span: 9604..9605,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 290,
            column: 30,
            span: 9605..9615,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 290,
            column: 31,
            span: 9615..9616,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[\\1-\\255]%w\"",
        ),
        position: Position {
            line: 290,
            column: 47,
            span: 9617..9632,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 290,
            column: 48,
            span: 9632..9633,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 290,
            column: 52,
            span: 9634..9637,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 290,
            column: 53,
            span: 9637..9638,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 290,
            column: 56,
            span: 9639..9641,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".unction\"",
        ),
        position: Position {
            line: 290,
            column: 67,
            span: 9642..9652,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 290,
            column: 68,
            span: 9652..9653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 291,
            column: 7,
            span: 9654..9660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 8,
            span: 9660..9661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 291,
            column: 14,
            span: 9661..9667,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 291,
            column: 15,
            span: 9667..9668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 291,
            column: 19,
            span: 9668..9672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 20,
            span: 9672..9673,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function\"",
        ),
        position: Position {
            line: 291,
            column: 30,
            span: 9673..9683,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 291,
            column: 31,
            span: 9683..9684,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^\\1-\\255]\"",
        ),
        position: Position {
            line: 291,
            column: 46,
            span: 9685..9699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 291,
            column: 47,
            span: 9699..9700,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 291,
            column: 51,
            span: 9701..9704,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 52,
            span: 9704..9705,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 291,
            column: 55,
            span: 9706..9708,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function.\"",
        ),
        position: Position {
            line: 291,
            column: 67,
            span: 9709..9720,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 68,
            span: 9720..9721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 293,
            column: 7,
            span: 9723..9729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 293,
            column: 8,
            span: 9729..9730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 293,
            column: 14,
            span: 9730..9736,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 293,
            column: 15,
            span: 9736..9737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 293,
            column: 19,
            span: 9737..9741,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 293,
            column: 20,
            span: 9741..9742,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 293,
            column: 23,
            span: 9742..9745,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 24,
            span: 9745..9746,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[a]\"",
        ),
        position: Position {
            line: 293,
            column: 32,
            span: 9747..9754,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 33,
            span: 9754..9755,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 293,
            column: 36,
            span: 9756..9758,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 293,
            column: 38,
            span: 9758..9760,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 39,
            span: 9760..9761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 294,
            column: 7,
            span: 9762..9768,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 8,
            span: 9768..9769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 294,
            column: 14,
            span: 9769..9775,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 294,
            column: 15,
            span: 9775..9776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 294,
            column: 19,
            span: 9776..9780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 20,
            span: 9780..9781,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 294,
            column: 23,
            span: 9781..9784,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 294,
            column: 24,
            span: 9784..9785,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^%z]\"",
        ),
        position: Position {
            line: 294,
            column: 34,
            span: 9786..9795,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 35,
            span: 9795..9796,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 294,
            column: 38,
            span: 9797..9799,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 294,
            column: 40,
            span: 9799..9801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 41,
            span: 9801..9802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 295,
            column: 7,
            span: 9803..9809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 8,
            span: 9809..9810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 295,
            column: 14,
            span: 9810..9816,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 295,
            column: 15,
            span: 9816..9817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 295,
            column: 19,
            span: 9817..9821,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 295,
            column: 20,
            span: 9821..9822,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 295,
            column: 23,
            span: 9822..9825,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 295,
            column: 24,
            span: 9825..9826,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^%l]\"",
        ),
        position: Position {
            line: 295,
            column: 34,
            span: 9827..9836,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 35,
            span: 9836..9837,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 295,
            column: 38,
            span: 9838..9840,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 40,
            span: 9840..9842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 295,
            column: 41,
            span: 9842..9843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 296,
            column: 7,
            span: 9844..9850,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 8,
            span: 9850..9851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 296,
            column: 14,
            span: 9851..9857,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 296,
            column: 15,
            span: 9857..9858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 296,
            column: 19,
            span: 9858..9862,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 296,
            column: 20,
            span: 9862..9863,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        position: Position {
            line: 296,
            column: 25,
            span: 9863..9868,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 296,
            column: 26,
            span: 9868..9869,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[a%z]\"",
        ),
        position: Position {
            line: 296,
            column: 36,
            span: 9870..9879,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 37,
            span: 9879..9880,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 296,
            column: 40,
            span: 9881..9883,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 42,
            span: 9883..9885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 296,
            column: 43,
            span: 9885..9886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 297,
            column: 7,
            span: 9887..9893,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 297,
            column: 8,
            span: 9893..9894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 297,
            column: 14,
            span: 9894..9900,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 297,
            column: 15,
            span: 9900..9901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 297,
            column: 19,
            span: 9901..9905,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 297,
            column: 20,
            span: 9905..9906,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        position: Position {
            line: 297,
            column: 25,
            span: 9906..9911,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 297,
            column: 26,
            span: 9911..9912,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%z]\"",
        ),
        position: Position {
            line: 297,
            column: 35,
            span: 9913..9921,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 297,
            column: 36,
            span: 9921..9922,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 297,
            column: 39,
            span: 9923..9925,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 297,
            column: 41,
            span: 9925..9927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 297,
            column: 42,
            span: 9927..9928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 298,
            column: 7,
            span: 9929..9935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 8,
            span: 9935..9936,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 298,
            column: 11,
            span: 9936..9939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 298,
            column: 18,
            span: 9940..9946,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 298,
            column: 19,
            span: 9946..9947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 298,
            column: 23,
            span: 9947..9951,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 298,
            column: 24,
            span: 9951..9952,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        position: Position {
            line: 298,
            column: 29,
            span: 9952..9957,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 298,
            column: 30,
            span: 9957..9958,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%l%z]\"",
        ),
        position: Position {
            line: 298,
            column: 41,
            span: 9959..9969,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 42,
            span: 9969..9970,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 298,
            column: 43,
            span: 9970..9971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 299,
            column: 7,
            span: 9972..9978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 8,
            span: 9978..9979,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 299,
            column: 11,
            span: 9979..9982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 299,
            column: 18,
            span: 9983..9989,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 299,
            column: 19,
            span: 9989..9990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 299,
            column: 23,
            span: 9990..9994,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 299,
            column: 24,
            span: 9994..9995,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aba\"",
        ),
        position: Position {
            line: 299,
            column: 29,
            span: 9995..10000,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 299,
            column: 30,
            span: 10000..10001,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[^%l%z]\"",
        ),
        position: Position {
            line: 299,
            column: 42,
            span: 10002..10013,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 43,
            span: 10013..10014,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 299,
            column: 44,
            span: 10014..10015,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 301,
            column: 6,
            span: 10017..10022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 301,
            column: 8,
            span: 10023..10024,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 301,
            column: 9,
            span: 10024..10025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 301,
            column: 11,
            span: 10026..10027,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 301,
            column: 13,
            span: 10028..10029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 301,
            column: 20,
            span: 10030..10036,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 301,
            column: 21,
            span: 10036..10037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 301,
            column: 25,
            span: 10037..10041,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 26,
            span: 10041..10042,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" alo aalo allo\"",
        ),
        position: Position {
            line: 301,
            column: 42,
            span: 10042..10058,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 301,
            column: 43,
            span: 10058..10059,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%S].-%f[%s].-%f[%S]\"",
        ),
        position: Position {
            line: 301,
            column: 68,
            span: 10060..10084,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 69,
            span: 10084..10085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 302,
            column: 7,
            span: 10086..10092,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 8,
            span: 10092..10093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 302,
            column: 9,
            span: 10093..10094,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 302,
            column: 12,
            span: 10095..10097,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 14,
            span: 10097..10099,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 302,
            column: 18,
            span: 10100..10103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 302,
            column: 20,
            span: 10104..10105,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 302,
            column: 23,
            span: 10106..10108,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 25,
            span: 10108..10110,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 26,
            span: 10110..10111,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 303,
            column: 6,
            span: 10112..10117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 303,
            column: 8,
            span: 10118..10119,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 303,
            column: 10,
            span: 10120..10121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 303,
            column: 17,
            span: 10122..10128,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 303,
            column: 18,
            span: 10128..10129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 303,
            column: 23,
            span: 10129..10134,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 24,
            span: 10134..10135,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" alo aalo allo\"",
        ),
        position: Position {
            line: 303,
            column: 40,
            span: 10135..10151,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 41,
            span: 10151..10152,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f[%S](.-%f[%s].-%f[%S])\"",
        ),
        position: Position {
            line: 303,
            column: 68,
            span: 10153..10179,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 69,
            span: 10179..10180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 304,
            column: 7,
            span: 10181..10187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 8,
            span: 10187..10188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 304,
            column: 9,
            span: 10188..10189,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 304,
            column: 12,
            span: 10190..10192,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo '",
        ),
        position: Position {
            line: 304,
            column: 19,
            span: 10193..10199,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 20,
            span: 10199..10200,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 306,
            column: 6,
            span: 10202..10207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 306,
            column: 8,
            span: 10208..10209,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 306,
            column: 10,
            span: 10210..10211,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 306,
            column: 12,
            span: 10212..10213,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 13,
            span: 10212..10214,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 306,
            column: 14,
            span: 10214..10215,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 16,
            span: 10215..10217,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 306,
            column: 17,
            span: 10217..10218,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 19,
            span: 10218..10220,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 306,
            column: 20,
            span: 10220..10221,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 23,
            span: 10221..10224,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 306,
            column: 24,
            span: 10224..10225,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "17",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 27,
            span: 10225..10228,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 306,
            column: 28,
            span: 10228..10229,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 306,
            column: 29,
            span: 10229..10230,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 307,
            column: 4,
            span: 10231..10234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 307,
            column: 6,
            span: 10235..10236,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 307,
            column: 9,
            span: 10237..10239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 307,
            column: 16,
            span: 10240..10246,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 307,
            column: 17,
            span: 10246..10247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 307,
            column: 23,
            span: 10247..10253,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 24,
            span: 10253..10254,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo th02 is 1hat\"",
        ),
        position: Position {
            line: 307,
            column: 46,
            span: 10254..10276,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 307,
            column: 47,
            span: 10276..10277,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"()%f[%w%d]\"",
        ),
        position: Position {
            line: 307,
            column: 60,
            span: 10278..10290,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 61,
            span: 10290..10291,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 307,
            column: 0,
            span: 10292..10294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 308,
            column: 9,
            span: 10297..10303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 10,
            span: 10303..10304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 308,
            column: 15,
            span: 10304..10309,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 308,
            column: 16,
            span: 10309..10310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 308,
            column: 22,
            span: 10310..10316,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 23,
            span: 10316..10317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 308,
            column: 24,
            span: 10317..10318,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 308,
            column: 25,
            span: 10318..10319,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 308,
            column: 27,
            span: 10319..10321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 28,
            span: 10321..10322,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 308,
            column: 31,
            span: 10323..10325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 308,
            column: 33,
            span: 10326..10327,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 34,
            span: 10327..10328,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 309,
            column: 0,
            span: 10329..10332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 310,
            column: 7,
            span: 10333..10339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 310,
            column: 8,
            span: 10339..10340,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 310,
            column: 9,
            span: 10340..10341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 310,
            column: 10,
            span: 10341..10342,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 310,
            column: 13,
            span: 10343..10345,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 310,
            column: 15,
            span: 10345..10347,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 310,
            column: 16,
            span: 10347..10348,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 314,
            column: 6,
            span: 10373..10378,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 314,
            column: 15,
            span: 10379..10387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 314,
            column: 23,
            span: 10388..10395,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 314,
            column: 25,
            span: 10396..10397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 314,
            column: 26,
            span: 10397..10398,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 314,
            column: 27,
            span: 10398..10399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 314,
            column: 29,
            span: 10400..10401,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 314,
            column: 30,
            span: 10401..10402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 315,
            column: 4,
            span: 10405..10406,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 315,
            column: 6,
            span: 10407..10408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 315,
            column: 8,
            span: 10409..10410,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 315,
            column: 11,
            span: 10411..10413,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"malformed\"",
        ),
        position: Position {
            line: 315,
            column: 23,
            span: 10414..10425,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 316,
            column: 8,
            span: 10428..10433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 316,
            column: 10,
            span: 10434..10435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 11,
            span: 10435..10436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 316,
            column: 15,
            span: 10437..10440,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 316,
            column: 17,
            span: 10441..10442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 316,
            column: 23,
            span: 10443..10448,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 316,
            column: 24,
            span: 10448..10449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 316,
            column: 30,
            span: 10449..10455,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 316,
            column: 31,
            span: 10455..10456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 316,
            column: 35,
            span: 10456..10460,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 36,
            span: 10460..10461,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 316,
            column: 40,
            span: 10462..10465,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 316,
            column: 41,
            span: 10465..10466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 316,
            column: 43,
            span: 10467..10468,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 316,
            column: 44,
            span: 10468..10469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 317,
            column: 9,
            span: 10472..10478,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 10,
            span: 10478..10479,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 317,
            column: 13,
            span: 10479..10482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 317,
            column: 15,
            span: 10483..10484,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 317,
            column: 19,
            span: 10485..10488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 317,
            column: 26,
            span: 10489..10495,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 317,
            column: 27,
            span: 10495..10496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 317,
            column: 31,
            span: 10496..10500,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 32,
            span: 10500..10501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 317,
            column: 35,
            span: 10501..10504,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 317,
            column: 36,
            span: 10504..10505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        position: Position {
            line: 317,
            column: 38,
            span: 10506..10507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 39,
            span: 10507..10508,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 40,
            span: 10508..10509,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 318,
            column: 0,
            span: 10510..10513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 320,
            column: 8,
            span: 10515..10522,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 320,
            column: 9,
            span: 10522..10523,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a\"",
        ),
        position: Position {
            line: 320,
            column: 13,
            span: 10523..10527,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 320,
            column: 14,
            span: 10527..10528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 321,
            column: 8,
            span: 10529..10536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 9,
            span: 10536..10537,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[]\"",
        ),
        position: Position {
            line: 321,
            column: 13,
            span: 10537..10541,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 14,
            span: 10541..10542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 322,
            column: 8,
            span: 10543..10550,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 9,
            span: 10550..10551,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^]\"",
        ),
        position: Position {
            line: 322,
            column: 14,
            span: 10551..10556,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 15,
            span: 10556..10557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 323,
            column: 8,
            span: 10558..10565,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 323,
            column: 9,
            span: 10565..10566,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a%]\"",
        ),
        position: Position {
            line: 323,
            column: 15,
            span: 10566..10572,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 323,
            column: 16,
            span: 10572..10573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 324,
            column: 8,
            span: 10574..10581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 324,
            column: 9,
            span: 10581..10582,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a%\"",
        ),
        position: Position {
            line: 324,
            column: 14,
            span: 10582..10587,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 324,
            column: 15,
            span: 10587..10588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 325,
            column: 8,
            span: 10589..10596,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 325,
            column: 9,
            span: 10596..10597,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b\"",
        ),
        position: Position {
            line: 325,
            column: 13,
            span: 10597..10601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 325,
            column: 14,
            span: 10601..10602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 326,
            column: 8,
            span: 10603..10610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 326,
            column: 9,
            span: 10610..10611,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%ba\"",
        ),
        position: Position {
            line: 326,
            column: 14,
            span: 10611..10616,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 326,
            column: 15,
            span: 10616..10617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 327,
            column: 8,
            span: 10618..10625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 327,
            column: 9,
            span: 10625..10626,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        position: Position {
            line: 327,
            column: 12,
            span: 10626..10629,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 327,
            column: 13,
            span: 10629..10630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "malform",
        ),
        position: Position {
            line: 328,
            column: 8,
            span: 10631..10638,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 328,
            column: 9,
            span: 10638..10639,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f\"",
        ),
        position: Position {
            line: 328,
            column: 13,
            span: 10639..10643,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 328,
            column: 14,
            span: 10643..10644,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"missing\"",
        ),
        position: Position {
            line: 328,
            column: 24,
            span: 10645..10654,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 328,
            column: 25,
            span: 10654..10655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 331,
            column: 7,
            span: 10675..10681,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 8,
            span: 10681..10682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 331,
            column: 14,
            span: 10682..10688,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 331,
            column: 15,
            span: 10688..10689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 331,
            column: 20,
            span: 10689..10694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 21,
            span: 10694..10695,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\\0\\1\\2c\"",
        ),
        position: Position {
            line: 331,
            column: 32,
            span: 10695..10706,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 33,
            span: 10706..10707,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\\0-\\2]+\"",
        ),
        position: Position {
            line: 331,
            column: 44,
            span: 10708..10718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 45,
            span: 10718..10719,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 331,
            column: 48,
            span: 10720..10722,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\1\\2\"",
        ),
        position: Position {
            line: 331,
            column: 57,
            span: 10723..10731,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 58,
            span: 10731..10732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 332,
            column: 7,
            span: 10733..10739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 8,
            span: 10739..10740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 332,
            column: 14,
            span: 10740..10746,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 332,
            column: 15,
            span: 10746..10747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 332,
            column: 20,
            span: 10747..10752,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 21,
            span: 10752..10753,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\\0\\1\\2c\"",
        ),
        position: Position {
            line: 332,
            column: 32,
            span: 10753..10764,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 33,
            span: 10764..10765,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\\0-\\0]+\"",
        ),
        position: Position {
            line: 332,
            column: 44,
            span: 10766..10776,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 45,
            span: 10776..10777,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 332,
            column: 48,
            span: 10778..10780,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        position: Position {
            line: 332,
            column: 53,
            span: 10781..10785,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 54,
            span: 10785..10786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 333,
            column: 7,
            span: 10787..10793,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 8,
            span: 10793..10794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 333,
            column: 14,
            span: 10794..10800,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 333,
            column: 15,
            span: 10800..10801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 333,
            column: 19,
            span: 10801..10805,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 20,
            span: 10805..10806,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b$a\"",
        ),
        position: Position {
            line: 333,
            column: 25,
            span: 10806..10811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 333,
            column: 26,
            span: 10811..10812,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"$\\0?\"",
        ),
        position: Position {
            line: 333,
            column: 33,
            span: 10813..10819,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 333,
            column: 34,
            span: 10819..10820,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 333,
            column: 37,
            span: 10821..10823,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 39,
            span: 10823..10825,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 333,
            column: 40,
            span: 10825..10826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 334,
            column: 7,
            span: 10827..10833,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 8,
            span: 10833..10834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 334,
            column: 14,
            span: 10834..10840,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 334,
            column: 15,
            span: 10840..10841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 334,
            column: 19,
            span: 10841..10845,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 20,
            span: 10845..10846,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0efg\"",
        ),
        position: Position {
            line: 334,
            column: 30,
            span: 10846..10856,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 31,
            span: 10856..10857,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\\0\"",
        ),
        position: Position {
            line: 334,
            column: 37,
            span: 10858..10863,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 38,
            span: 10863..10864,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 334,
            column: 41,
            span: 10865..10867,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 43,
            span: 10867..10869,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 44,
            span: 10869..10870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 335,
            column: 7,
            span: 10871..10877,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 8,
            span: 10877..10878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 335,
            column: 14,
            span: 10878..10884,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 335,
            column: 15,
            span: 10884..10885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 335,
            column: 20,
            span: 10885..10890,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 21,
            span: 10890..10891,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0efg\\0\\1e\\1g\"",
        ),
        position: Position {
            line: 335,
            column: 39,
            span: 10891..10909,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 335,
            column: 40,
            span: 10909..10910,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%b\\0\\1\"",
        ),
        position: Position {
            line: 335,
            column: 49,
            span: 10911..10919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 50,
            span: 10919..10920,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 335,
            column: 53,
            span: 10921..10923,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0efg\\0\\1e\\1\"",
        ),
        position: Position {
            line: 335,
            column: 68,
            span: 10924..10938,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 69,
            span: 10938..10939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 336,
            column: 7,
            span: 10940..10946,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 8,
            span: 10946..10947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 336,
            column: 14,
            span: 10947..10953,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 336,
            column: 15,
            span: 10953..10954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 336,
            column: 20,
            span: 10954..10959,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 21,
            span: 10959..10960,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0\\0\\0\"",
        ),
        position: Position {
            line: 336,
            column: 32,
            span: 10960..10971,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 33,
            span: 10971..10972,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\\0+\"",
        ),
        position: Position {
            line: 336,
            column: 40,
            span: 10973..10979,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 41,
            span: 10979..10980,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 336,
            column: 44,
            span: 10981..10983,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        position: Position {
            line: 336,
            column: 53,
            span: 10984..10992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 54,
            span: 10992..10993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 337,
            column: 7,
            span: 10994..11000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 8,
            span: 11000..11001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 337,
            column: 14,
            span: 11001..11007,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 337,
            column: 15,
            span: 11007..11008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        position: Position {
            line: 337,
            column: 20,
            span: 11008..11013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 21,
            span: 11013..11014,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0\\0\\0\"",
        ),
        position: Position {
            line: 337,
            column: 32,
            span: 11014..11025,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 33,
            span: 11025..11026,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\\0%\\0?\"",
        ),
        position: Position {
            line: 337,
            column: 43,
            span: 11027..11036,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 44,
            span: 11036..11037,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 337,
            column: 47,
            span: 11038..11040,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\"",
        ),
        position: Position {
            line: 337,
            column: 54,
            span: 11041..11047,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 55,
            span: 11047..11048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 340,
            column: 7,
            span: 11073..11079,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 8,
            span: 11079..11080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 340,
            column: 14,
            span: 11080..11086,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 340,
            column: 15,
            span: 11086..11087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 340,
            column: 19,
            span: 11087..11091,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 20,
            span: 11091..11092,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\0\\0\"",
        ),
        position: Position {
            line: 340,
            column: 29,
            span: 11092..11101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 340,
            column: 30,
            span: 11101..11102,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0.\"",
        ),
        position: Position {
            line: 340,
            column: 35,
            span: 11102..11107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 36,
            span: 11107..11108,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 340,
            column: 39,
            span: 11109..11111,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 41,
            span: 11111..11113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 42,
            span: 11113..11114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 341,
            column: 7,
            span: 11115..11121,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 8,
            span: 11121..11122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 341,
            column: 14,
            span: 11122..11128,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 341,
            column: 15,
            span: 11128..11129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 341,
            column: 19,
            span: 11129..11133,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 20,
            span: 11133..11134,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcx\\0\\0abc\\0abc\"",
        ),
        position: Position {
            line: 341,
            column: 38,
            span: 11134..11152,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 39,
            span: 11152..11153,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\\0\\0abc\\0a.\"",
        ),
        position: Position {
            line: 341,
            column: 53,
            span: 11153..11167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 54,
            span: 11167..11168,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 341,
            column: 57,
            span: 11169..11171,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 59,
            span: 11171..11173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 60,
            span: 11173..11174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 343,
            column: 6,
            span: 11176..11181,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 7,
            span: 11181..11182,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 343,
            column: 11,
            span: 11182..11186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 12,
            span: 11186..11187,
        },
    },
]
