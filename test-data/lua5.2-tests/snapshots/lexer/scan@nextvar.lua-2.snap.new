---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/nextvar.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "'testing tables, next, and for'",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 3,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 3,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 3,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 3,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 6,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 6,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 6,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 6,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 6,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 6,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 6,
    },
    Token {
        kind: String,
        lexeme: "\"+\"",
        line: 6,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 6,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 6,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 6,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 6,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 7,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 7,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 7,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 7,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 7,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 7,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 7,
    },
    Token {
        kind: String,
        lexeme: "\"+\"",
        line: 7,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 7,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 7,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 7,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 9,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 9,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 10,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 10,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 10,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 10,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 11,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 12,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 15,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 15,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 15,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 16,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 16,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "ipairs",
        line: 16,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 16,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 16,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 16,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 16,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 16,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 16,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 16,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 17,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 17,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 17,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 18,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 18,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 18,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 18,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 18,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 19,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 21,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "ipairs",
        line: 21,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "24",
        line: 21,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 21,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 24,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 24,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 24,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 25,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 26,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "ipairs",
        line: 26,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 26,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 26,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 26,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 26,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 26,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 26,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 27,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 31,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 31,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "ipairs",
        line: 34,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 34,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 34,
    },
    Token {
        kind: String,
        lexeme: "'function'",
        line: 34,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "ipairs",
        line: 34,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 34,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 34,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "ipairs",
        line: 34,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 34,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 36,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 36,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 39,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "log2",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "log",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 39,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 41,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "mp2",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 42,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 42,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 42,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "ceil",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "log2",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 43,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 43,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 43,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 43,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 43,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 43,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 44,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 45,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 47,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "fb",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 48,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "nn",
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 48,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "int2fb",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 49,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 49,
    },
    Token {
        kind: Number,
        lexeme: "256",
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 49,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "nn",
        line: 50,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 51,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 54,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 54,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 55,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 55,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 55,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 55,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 56,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 56,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 56,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 57,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "fb",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 58,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 58,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 58,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 58,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 58,
    },
    Token {
        kind: Number,
        lexeme: "1.125",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 59,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 59,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "ceil",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 59,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "1.3",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 60,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 63,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "nh",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "h",
        line: 64,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 64,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "querytab",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 65,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 65,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "h",
        line: 65,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "nh",
        line: 65,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "na",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "nh",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "h",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 68,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 69,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 73,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 74,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 74,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 75,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 75,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 75,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 75,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 75,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "mp2",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 77,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 81,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 81,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 82,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 82,
    },
    Token {
        kind: String,
        lexeme: "'return {'",
        line: 82,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 83,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 83,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 83,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 83,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 84,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 84,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 84,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 84,
    },
    Token {
        kind: String,
        lexeme: "','",
        line: 84,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 85,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 85,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 86,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 86,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 87,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 87,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "'}'",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 88,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "fb",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "mp2",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 90,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 90,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'%sa%d=%d,'",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 91,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 92,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 96,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 96,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 96,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 96,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 97,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 97,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 97,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 97,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 97,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 97,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 97,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 97,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 98,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 98,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 98,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 98,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 99,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 99,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 99,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 99,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 99,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 99,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 99,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 99,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 99,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 101,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 101,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 101,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 101,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 101,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 101,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 102,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 102,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 102,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 102,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 103,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 103,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 104,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 104,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 104,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 104,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 105,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 109,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 109,
    },
    Token {
        kind: Number,
        lexeme: "130",
        line: 109,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 110,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 110,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 110,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 110,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 110,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 110,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 110,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 110,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 110,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 111,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 111,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 111,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 111,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 111,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 111,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 111,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 111,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 111,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 111,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 111,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 111,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 111,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 111,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 112,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 112,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 112,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 112,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 112,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 112,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 112,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 112,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 112,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 112,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 112,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 112,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 112,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 112,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 113,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 113,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 113,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 113,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 114,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 114,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 114,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 114,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 115,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 115,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 115,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 115,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 116,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "mp2",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 117,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 120,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 120,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 120,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 120,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 121,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 121,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 121,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 122,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 122,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 122,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 122,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 122,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 123,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 123,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 124,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 124,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "mp2",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 127,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 127,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 127,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 127,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 128,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 128,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 128,
    },
    Token {
        kind: Number,
        lexeme: "16",
        line: 128,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 128,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 128,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 128,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "16",
        line: 129,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 130,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "_port",
        line: 130,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 130,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 131,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 131,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 131,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 131,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 131,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 131,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 131,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 131,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 131,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 132,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 132,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 132,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 132,
    },
    Token {
        kind: Number,
        lexeme: "50",
        line: 132,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 132,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 132,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 132,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 132,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 132,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 133,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 134,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 134,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 134,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 134,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 135,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "50",
        line: 135,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 135,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 135,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 135,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 135,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 135,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: Number,
        lexeme: "8",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 137,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "14",
        line: 137,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 137,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 137,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 137,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 137,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 137,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 137,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 138,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: "18",
        line: 138,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: "50",
        line: 138,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 138,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 138,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 138,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 138,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 138,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 140,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 143,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 143,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 143,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 144,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 144,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 144,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 144,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 145,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 145,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 145,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 145,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 145,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 145,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 145,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 145,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "mp2",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 146,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 150,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 150,
    },
    Token {
        kind: Number,
        lexeme: "35",
        line: 150,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 151,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 152,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 152,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 152,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 152,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "select",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: String,
        lexeme: "'#'",
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 154,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 155,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 155,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 155,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 155,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 155,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "mp2",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 156,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 156,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 157,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 157,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 157,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "check",
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "arg",
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "mp2",
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 158,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 158,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 158,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 158,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 159,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 160,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 160,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 160,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 160,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 161,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 161,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 161,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 161,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 161,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 161,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 161,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 161,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 161,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 161,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 161,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 161,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 161,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 167,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 167,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 167,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 167,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 168,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 168,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 168,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 168,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 168,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 168,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 168,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 169,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 169,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 169,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 169,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 169,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 169,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 169,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 170,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 170,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 170,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 170,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 170,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 170,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 171,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 171,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 171,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 171,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 172,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "nofind",
        line: 175,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 175,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 175,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 177,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 177,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 177,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 177,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 177,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 177,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 177,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 177,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 178,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 178,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 178,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 178,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 182,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 182,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 182,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 182,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 182,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 182,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 182,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 182,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 184,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "name",
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 184,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 185,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 185,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 186,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 186,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 187,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 187,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 187,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 187,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 188,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 188,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 188,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "nofind",
        line: 188,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 189,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 189,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 189,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 190,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "name",
        line: 190,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 190,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 190,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 190,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 191,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 192,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 194,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "find1",
        line: 194,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "name",
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 194,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 195,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 195,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 195,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 195,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 195,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 195,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "name",
        line: 196,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 196,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 196,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 196,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 197,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 198,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 198,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 202,
    },
    Token {
        kind: String,
        lexeme: "\"print\"",
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 202,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "find1",
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 202,
    },
    Token {
        kind: String,
        lexeme: "\"print\"",
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 203,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 203,
    },
    Token {
        kind: String,
        lexeme: "\"print\"",
        line: 203,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 203,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 203,
    },
    Token {
        kind: String,
        lexeme: "\"print\"",
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "find1",
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 204,
    },
    Token {
        kind: String,
        lexeme: "\"assert\"",
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "nofind",
        line: 205,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 205,
    },
    Token {
        kind: String,
        lexeme: "\"return\"",
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 206,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "find1",
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 206,
    },
    Token {
        kind: String,
        lexeme: "\"return\"",
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 207,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 207,
    },
    Token {
        kind: String,
        lexeme: "\"ret\"",
        line: 207,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 207,
    },
    Token {
        kind: String,
        lexeme: "\"urn\"",
        line: 207,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 207,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 207,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "nofind",
        line: 208,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: String,
        lexeme: "\"return\"",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 209,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 209,
    },
    Token {
        kind: String,
        lexeme: "\"xxx\"",
        line: 209,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 209,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 209,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "xxx",
        line: 210,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: String,
        lexeme: "\"xxx\"",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 212,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 212,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 212,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 214,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 214,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 214,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 214,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 215,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "10000",
        line: 215,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 215,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 216,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "fmod",
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 216,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 216,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 217,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 217,
    },
    Token {
        kind: String,
        lexeme: "'x'",
        line: 217,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 217,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 217,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 217,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 218,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 221,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 221,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 221,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 221,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 221,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 222,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 222,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 222,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 223,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 223,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 223,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 223,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 223,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 223,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 224,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 224,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 224,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 224,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 224,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 224,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 226,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 226,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 226,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 226,
    },
    Token {
        kind: Number,
        lexeme: "9000",
        line: 226,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 226,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 227,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 227,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 227,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 229,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 230,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 230,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 230,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 230,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 231,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 231,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 231,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 231,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 231,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 231,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 231,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 231,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 232,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 232,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 232,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 232,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 232,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 232,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 233,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "package",
        line: 233,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "loaded",
        line: 233,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 233,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 233,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 233,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 233,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 233,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 233,
    },
    Token {
        kind: String,
        lexeme: "\"function\"",
        line: 233,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 233,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 234,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 234,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 234,
    },
    Token {
        kind: String,
        lexeme: "\"^[%u_]\"",
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 234,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 235,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 235,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 235,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 235,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 235,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 237,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 237,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 237,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 238,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 239,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 244,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "checknext",
        line: 244,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 244,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 244,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 245,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 245,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 245,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 245,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 246,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 246,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 246,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 246,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 246,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 246,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 246,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 246,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 246,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 246,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 246,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 246,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 246,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 246,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 246,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 247,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 247,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 247,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 247,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 247,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 248,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 248,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 248,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 248,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 248,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 248,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 248,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "checknext",
        line: 251,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 251,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 251,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 251,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 251,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 251,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 251,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 251,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 251,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 251,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 251,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 251,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "checknext",
        line: 252,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 252,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 252,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 252,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 252,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 252,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 252,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 252,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 252,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 252,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 252,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 252,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 252,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 252,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "checknext",
        line: 253,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 253,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 253,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 253,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 253,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 253,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 253,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "checknext",
        line: 254,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 254,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 254,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 254,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 254,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 254,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "checknext",
        line: 255,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 255,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 255,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 255,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 255,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 255,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 257,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 257,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 257,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 257,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 257,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 257,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 257,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 258,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 258,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 258,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 258,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 258,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 258,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 258,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 258,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 258,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 258,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 259,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 259,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 259,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 259,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 259,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 259,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 259,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 260,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 260,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 260,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 260,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 260,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 260,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 261,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 261,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 261,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 261,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 262,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 262,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 262,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 262,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 262,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 262,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 262,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 262,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 263,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 263,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 264,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 267,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "maxn",
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 267,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: "max",
        line: 268,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 268,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 268,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 269,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 269,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "max",
        line: 270,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 270,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 270,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 270,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 270,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "'number'",
        line: 270,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 270,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 270,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "max",
        line: 270,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "max",
        line: 270,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 270,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 270,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "max",
        line: 270,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 271,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "max",
        line: 272,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 275,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 275,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "maxn",
        line: 275,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 275,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 275,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 275,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 275,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 275,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 276,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "maxn",
        line: 276,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 276,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 276,
    },
    Token {
        kind: String,
        lexeme: "\"1000\"",
        line: 276,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 276,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 276,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 276,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 276,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 276,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 277,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "maxn",
        line: 277,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 277,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 277,
    },
    Token {
        kind: String,
        lexeme: "\"1000\"",
        line: 277,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 277,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 277,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 277,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: "24.5",
        line: 277,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 277,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 277,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 277,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 277,
    },
    Token {
        kind: Number,
        lexeme: "24.5",
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 278,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "maxn",
        line: 278,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 278,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 278,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 278,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 278,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 278,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 278,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 278,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 279,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 279,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "maxn",
        line: 279,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 279,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 279,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 279,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 279,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 279,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 279,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 279,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 279,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 279,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 279,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "pi",
        line: 279,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 279,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 279,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 279,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 279,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 279,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 279,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "pi",
        line: 279,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 281,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "maxn",
        line: 281,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 281,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 284,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 284,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 284,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 284,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 285,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 285,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 285,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 285,
    },
    Token {
        kind: Number,
        lexeme: "50",
        line: 285,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 285,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 285,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "pow",
        line: 285,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 285,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 285,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 285,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 285,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 285,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 285,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 285,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 285,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 286,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 286,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 286,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 286,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 286,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 288,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 288,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 292,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 292,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 292,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 292,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 292,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 292,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 292,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 292,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 292,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 292,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 292,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 292,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 292,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 292,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 292,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 292,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 292,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 292,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 292,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 292,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 292,
    },
    Token {
        kind: String,
        lexeme: "\"x \"",
        line: 292,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 292,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 292,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 292,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 292,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 292,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 292,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 293,
    },
    Token {
        kind: Number,
        lexeme: "100.3",
        line: 293,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 293,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 293,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 293,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 293,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 293,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 293,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 293,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 293,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 293,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 293,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 295,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 295,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 295,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 296,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 296,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 296,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 296,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 296,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 297,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 297,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 297,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 298,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 298,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 298,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 298,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 298,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 299,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 299,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 299,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 299,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 300,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 300,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 300,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 301,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 301,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 301,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 301,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 301,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 301,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 301,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 303,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 303,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 303,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 303,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 303,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 306,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "test",
        line: 306,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 306,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 307,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 307,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 307,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 307,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 307,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 307,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 307,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 307,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 307,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 307,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 307,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 307,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 308,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 308,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 308,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 308,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 308,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 308,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 308,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 308,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 308,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 308,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 309,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 309,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 309,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 309,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 309,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 309,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 309,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 309,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 309,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 309,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 309,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 309,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 309,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 309,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 310,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 310,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 310,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 310,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 310,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 310,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 310,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 310,
    },
    Token {
        kind: Number,
        lexeme: "50",
        line: 310,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 311,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 311,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 311,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 311,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 311,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 311,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 311,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 311,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 311,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 312,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 312,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 312,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 312,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 312,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 312,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 312,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 312,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 312,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 312,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 312,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 312,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 313,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 313,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 313,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 313,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 313,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 313,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 313,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 313,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 313,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 313,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 314,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 314,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 314,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 314,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 314,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 314,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 314,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 314,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 314,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 314,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 315,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 315,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 315,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 315,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 315,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 315,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 315,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 315,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 315,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 315,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 316,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 316,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 316,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 316,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 316,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 316,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 316,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 316,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 316,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 317,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 317,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 317,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 317,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 317,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 318,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 318,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 318,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 318,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 318,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 318,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 319,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 319,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 319,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 319,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 319,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 319,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 319,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 319,
    },
    Token {
        kind: Number,
        lexeme: "50",
        line: 319,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 319,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 320,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 320,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 320,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 320,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 320,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 320,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 320,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 320,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 320,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 321,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 321,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 321,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 322,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 322,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 322,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 322,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 322,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 322,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 322,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 322,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 322,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 322,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 323,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 325,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 325,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 325,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 325,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 325,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 325,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 325,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 325,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 325,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 325,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 325,
    },
    Token {
        kind: String,
        lexeme: "\"ban\"",
        line: 325,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "test",
        line: 326,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 326,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 327,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 327,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 327,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 327,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 327,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 327,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 327,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 327,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 327,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 327,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 327,
    },
    Token {
        kind: String,
        lexeme: "\"ban\"",
        line: 327,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 329,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 329,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 329,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 329,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 329,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 329,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 329,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 329,
    },
    Token {
        kind: String,
        lexeme: "\"ban\"",
        line: 329,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 329,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: "test",
        line: 330,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 330,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 331,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 331,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 331,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 331,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 331,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 331,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 331,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 331,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 331,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 331,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 331,
    },
    Token {
        kind: String,
        lexeme: "\"ban\"",
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 333,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 333,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 333,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 333,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 333,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 333,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 333,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 333,
    },
    Token {
        kind: String,
        lexeme: "\"ban\"",
        line: 333,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: "test",
        line: 334,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 334,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 335,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 335,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 335,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 335,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 335,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 335,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 335,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 335,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 335,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 335,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 335,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 335,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 335,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 335,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 335,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 335,
    },
    Token {
        kind: String,
        lexeme: "\"ban\"",
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 337,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 337,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 337,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 337,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 337,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 337,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 337,
    },
    Token {
        kind: String,
        lexeme: "\"ban\"",
        line: 337,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 338,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 338,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 338,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 338,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 338,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 338,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 338,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 338,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 338,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 338,
    },
    Token {
        kind: String,
        lexeme: "\"ban\"",
        line: 338,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 338,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 338,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 338,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 338,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 338,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 338,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 340,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 340,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 340,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 340,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 340,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 341,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 342,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 342,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 343,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 343,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 343,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 343,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 344,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 344,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 344,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 346,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 346,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 346,
    },
    Token {
        kind: String,
        lexeme: "'c'",
        line: 346,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 346,
    },
    Token {
        kind: String,
        lexeme: "'d'",
        line: 346,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 347,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 347,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 347,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 347,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 347,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 348,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 348,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 348,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 349,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 349,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 349,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 349,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 349,
    },
    Token {
        kind: String,
        lexeme: "'c'",
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 350,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 350,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 350,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 350,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 350,
    },
    Token {
        kind: String,
        lexeme: "'d'",
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 351,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 351,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 351,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 351,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 351,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 352,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 352,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 352,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 352,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 352,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 353,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 353,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 353,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 353,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 353,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 353,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 353,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 353,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 353,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 353,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 354,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 354,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 354,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 354,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 354,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 354,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 354,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 354,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 354,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 356,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 356,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 356,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 356,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 356,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 356,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 356,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 356,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 356,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 356,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 357,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 357,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 357,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 357,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 357,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 357,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 357,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 357,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 357,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 357,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 357,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 358,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 358,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 358,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 358,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 358,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 359,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 359,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 359,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 359,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 359,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 359,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 359,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 360,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 360,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 360,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 360,
    },
    Token {
        kind: Number,
        lexeme: "40",
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 361,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 361,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 361,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 361,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 361,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 362,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 362,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 362,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 362,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 362,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 362,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 362,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 362,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 362,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 362,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 363,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 363,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 363,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 363,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 363,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 363,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 363,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 363,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 363,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 364,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 364,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 364,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 364,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 366,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 366,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 366,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 366,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 367,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 367,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 367,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 367,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 367,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 368,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 368,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 368,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 368,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 368,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 368,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 368,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 368,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 368,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 368,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 368,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 370,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 370,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 370,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 370,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 370,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 370,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 370,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 370,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 370,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 370,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 370,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 370,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 370,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 370,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 370,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 370,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 372,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 372,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 372,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 372,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 372,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 372,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 373,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 373,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 373,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 373,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 373,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 373,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 373,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 373,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 373,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 373,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 373,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 373,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 375,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 375,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 375,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 375,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 375,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 375,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 375,
    },
    Token {
        kind: String,
        lexeme: "\"not here\"",
        line: 375,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 375,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 376,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 376,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 376,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 376,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 376,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 376,
    },
    Token {
        kind: String,
        lexeme: "'not here'",
        line: 376,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 376,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 377,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 377,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 377,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 377,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 377,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 377,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 377,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 377,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 377,
    },
    Token {
        kind: String,
        lexeme: "'not here'",
        line: 377,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 378,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 378,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 378,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 378,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 378,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 378,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 378,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 378,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 378,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 378,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 378,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 378,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 378,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 378,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 378,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 378,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 378,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 378,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 378,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 379,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 379,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 379,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 379,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 379,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 379,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 379,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 379,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 379,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 379,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 379,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 379,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 379,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 379,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 379,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 379,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 379,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 379,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 379,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 379,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 379,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 379,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 381,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "_port",
        line: 381,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 382,
    },
    Token {
        kind: String,
        lexeme: "\"testing precision in numeric for\"",
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 382,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 383,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 383,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 383,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 383,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 383,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 383,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: "0.1",
        line: 383,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 383,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 383,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 383,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 383,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 383,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 383,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 383,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 383,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 384,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 384,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 384,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 384,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 384,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 384,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 384,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 384,
    },
    Token {
        kind: Number,
        lexeme: "0.999999999",
        line: 384,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 384,
    },
    Token {
        kind: Number,
        lexeme: "0.1",
        line: 384,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 384,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 384,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 384,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 384,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 384,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 384,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 384,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 384,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 384,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 384,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 385,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 385,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 385,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 385,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 385,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 385,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 385,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 385,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 385,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 385,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 385,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 385,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 385,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 385,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 385,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 385,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 385,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 385,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 385,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 385,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 385,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 386,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 386,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 386,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 386,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 386,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 386,
    },
    Token {
        kind: Number,
        lexeme: "1e10",
        line: 386,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 386,
    },
    Token {
        kind: Number,
        lexeme: "1e10",
        line: 386,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 386,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 386,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 386,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 386,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 386,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 386,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 386,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 386,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 386,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 386,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 386,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 386,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 386,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 387,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 387,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 387,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 387,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 387,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 387,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 387,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 387,
    },
    Token {
        kind: Number,
        lexeme: "0.99999",
        line: 387,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 387,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 387,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 387,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 387,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 387,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 387,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 387,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 387,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 387,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 387,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 387,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 387,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 388,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 388,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 388,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 388,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 388,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 388,
    },
    Token {
        kind: Number,
        lexeme: "99999",
        line: 388,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 388,
    },
    Token {
        kind: Number,
        lexeme: "1e5",
        line: 388,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 388,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 388,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 388,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 388,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 388,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 388,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 388,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 388,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 388,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 388,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 388,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 388,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 388,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 389,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 389,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 389,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 389,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 389,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: "0.99999",
        line: 389,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 389,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 389,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 389,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 389,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 389,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 389,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 389,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 389,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 389,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 389,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 389,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 389,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 390,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 393,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 393,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 393,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 393,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 393,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 393,
    },
    Token {
        kind: String,
        lexeme: "\"10\"",
        line: 393,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 393,
    },
    Token {
        kind: String,
        lexeme: "\"1\"",
        line: 393,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 393,
    },
    Token {
        kind: String,
        lexeme: "\"-2\"",
        line: 393,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 393,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 393,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 393,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 393,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 393,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 393,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 393,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 393,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 393,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 393,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 396,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 396,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 396,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 401,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 401,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 401,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 401,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 401,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 401,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 402,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 402,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 402,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 402,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 402,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 402,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 402,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 402,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 402,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 402,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 402,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 402,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 402,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 402,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 402,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 402,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 402,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 403,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 403,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 403,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 403,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 403,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 403,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 404,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 404,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 404,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 404,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 405,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 405,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 405,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 405,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 405,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 406,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 406,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 406,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 406,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 406,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 406,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 407,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 408,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 408,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 408,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 408,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 408,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 409,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 411,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 411,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 411,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 411,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 412,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 412,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 412,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 412,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 412,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 412,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 412,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 412,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 412,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 412,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 412,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 412,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 413,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 413,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 413,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 413,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 414,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 414,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 414,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 414,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 414,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 414,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 414,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 414,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 414,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 414,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 414,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 415,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 416,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 416,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 416,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 416,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 416,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 421,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 421,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 421,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 421,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 422,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 423,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 423,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 423,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 423,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 423,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 423,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 424,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 424,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 424,
    },
    Token {
        kind: String,
        lexeme: "'function'",
        line: 424,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 424,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 424,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 424,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 424,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 424,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 424,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 424,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 425,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 427,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 427,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 427,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 427,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 427,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 428,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 428,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 428,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 428,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 428,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 429,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 429,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 429,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 429,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 429,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 429,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 429,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 429,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 429,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 429,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 429,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 429,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 430,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 432,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: "foo1",
        line: 432,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 432,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 432,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 432,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 433,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 433,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 433,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 433,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 433,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 434,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 434,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 434,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 434,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 434,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 435,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 435,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 435,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 435,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 435,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 435,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 435,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 435,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 435,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 435,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 436,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 438,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 438,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 438,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "__pairs",
        line: 438,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 438,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 438,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 438,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 438,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 438,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 438,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 438,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 438,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 438,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 438,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 438,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 438,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 440,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 440,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 440,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 440,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 441,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 441,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 441,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 441,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 441,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 441,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 441,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 441,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 441,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 441,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 442,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 442,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 442,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 442,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 442,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 443,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 443,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 443,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 443,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 443,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 443,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 443,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 443,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 443,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 444,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 446,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 446,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 446,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 446,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 447,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 447,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 447,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 447,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 447,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 447,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 449,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 449,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 449,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 449,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 449,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 449,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 450,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 450,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 450,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: "__len",
        line: 450,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 450,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 450,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 450,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 450,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 450,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 450,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 450,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 450,
    },
    Token {
        kind: Identifier,
        lexeme: "__ipairs",
        line: 451,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 451,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 451,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 451,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 451,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 451,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 451,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 451,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 451,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 452,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 452,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 452,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 452,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 452,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 452,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 452,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 452,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 452,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 453,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 453,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 453,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 453,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 453,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 453,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 453,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 454,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 454,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 454,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 455,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 455,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "ipairs",
        line: 455,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 455,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 455,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 455,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 456,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 456,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 456,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 456,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 457,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 457,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 457,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 457,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 457,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 457,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 457,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 457,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 458,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 459,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 459,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 459,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 459,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 461,
    },
    Token {
        kind: String,
        lexeme: "\"OK\"",
        line: 461,
    },
]
