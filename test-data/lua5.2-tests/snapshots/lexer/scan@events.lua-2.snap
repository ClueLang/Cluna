---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/events.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing metatables'",
        ),
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 3,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 3,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 3,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 5,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 5,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 5,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 5,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 9,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 10,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 10,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 10,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 12,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 16,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 16,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 17,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 19,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 19,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__metatable",
        ),
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__tostring",
        ),
        line: 20,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 20,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 20,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 20,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 24,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 24,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 25,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gororoba\"",
        ),
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gororoba\"",
        ),
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"20\"",
        ),
        line: 28,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 28,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"parent\"",
        ),
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 39,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 39,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 39,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 39,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dummy return\"",
        ),
        line: 39,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 42,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 44,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "28",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 49,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 49,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 49,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 50,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 52,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 53,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 53,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"101\"",
        ),
        line: 53,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 53,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 53,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 54,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 54,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "98",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 54,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "197",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 57,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 57,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 58,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 59,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 59,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 60,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 60,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 60,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 61,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 61,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 61,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 64,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 65,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 66,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 66,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 66,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 67,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 67,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 68,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 68,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 68,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 68,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 68,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lixo\"",
        ),
        line: 68,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 68,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 69,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 69,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 70,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 71,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 71,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 71,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 71,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 72,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 73,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 76,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 77,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 78,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 78,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 79,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 79,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 79,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 79,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 79,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 79,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 79,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 79,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 80,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 80,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 80,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 80,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 81,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 81,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 81,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 81,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 82,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 82,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 82,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 82,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a1'",
        ),
        line: 82,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 82,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 83,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 83,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 83,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a11'",
        ),
        line: 83,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 83,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 84,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 84,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 84,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 85,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 85,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 85,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 85,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 85,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 85,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 86,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 86,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 86,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 91,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 91,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 91,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 92,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__call",
        ),
        line: 92,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 92,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 94,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 95,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 95,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 95,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 96,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 96,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 96,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 96,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 96,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 96,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 96,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 96,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 96,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 97,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 98,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 98,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 98,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 98,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 99,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 102,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 102,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 106,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 106,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 106,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 106,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 106,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 106,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 106,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 106,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 106,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        line: 108,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 109,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__sub",
        ),
        line: 109,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 110,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mul",
        ),
        line: 110,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mul\"",
        ),
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 111,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__div",
        ),
        line: 111,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"div\"",
        ),
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 112,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mod",
        ),
        line: 112,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mod\"",
        ),
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 113,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__unm",
        ),
        line: 113,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unm\"",
        ),
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 114,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__pow",
        ),
        line: 114,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 115,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 115,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"len\"",
        ),
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 117,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 117,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 118,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 118,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 118,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 118,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 118,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 118,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 119,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 119,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 120,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 120,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 120,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 121,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 122,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 122,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 122,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 122,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 122,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 122,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 123,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 123,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 124,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 124,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 124,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 124,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 124,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 124,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 124,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 125,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 127,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        line: 127,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 127,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 127,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 127,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 127,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 127,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 127,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 128,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 128,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 129,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        line: 129,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 129,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 129,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 129,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 129,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 129,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 130,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 131,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mul\"",
        ),
        line: 131,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 131,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 131,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 131,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 131,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 132,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 133,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 133,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"div\"",
        ),
        line: 133,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 133,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 133,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 133,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 133,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 133,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 135,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mod\"",
        ),
        line: 135,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 135,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 135,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 135,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 135,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 136,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 137,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 137,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unm\"",
        ),
        line: 137,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 137,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 137,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 138,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 139,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 139,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 139,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 139,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 139,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 139,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 140,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'4'",
        ),
        line: 140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 141,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 141,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 141,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 141,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 141,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'4'",
        ),
        line: 141,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 141,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 143,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 143,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 143,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 143,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 143,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 143,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'4'",
        ),
        line: 144,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'4'",
        ),
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 145,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 145,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 145,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'4'",
        ),
        line: 145,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 145,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 145,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 145,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 146,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 147,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"len\"",
        ),
        line: 147,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 147,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 151,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 151,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 151,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 151,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 152,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawlen",
        ),
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 152,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawlen",
        ),
        line: 153,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 153,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawlen",
        ),
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 154,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawlen",
        ),
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawlen",
        ),
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 158,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 158,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 158,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 159,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 159,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 159,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 161,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 162,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 162,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 162,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 162,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 162,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 163,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 163,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 163,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 163,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 163,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 164,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dummy\"",
        ),
        line: 164,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 165,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 167,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 167,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 167,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 169,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 170,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 171,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 172,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 173,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 173,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 174,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 175,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 176,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 177,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 178,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 179,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 180,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 181,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 181,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 186,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        line: 186,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 187,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 188,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 188,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 188,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 188,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 188,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 189,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 189,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 189,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 189,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 189,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 189,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 190,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 190,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dummy\"",
        ),
        line: 190,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 198,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 199,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 199,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 199,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 199,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 200,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 200,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 200,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 200,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 200,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 200,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 201,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 204,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 204,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 204,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 204,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 205,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 205,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 206,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 206,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 206,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 206,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 206,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 206,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 206,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 207,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 207,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 207,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 207,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 207,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 208,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 209,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 209,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 212,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        line: 212,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 212,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 214,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 214,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 214,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 215,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 215,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 215,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 215,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 215,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 215,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 216,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 216,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 216,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 217,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 217,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 217,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 218,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 218,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 218,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 218,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 220,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        line: 220,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 220,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 220,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 221,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 221,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 222,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 222,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 222,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 222,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 222,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 222,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 222,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 222,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 223,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 224,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 224,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 227,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 227,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 227,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 228,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 228,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 228,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 229,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 229,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 229,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 229,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 229,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 231,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 231,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 231,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 232,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 232,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 233,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 233,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 233,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 233,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 233,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 233,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 233,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 234,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 234,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 234,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 234,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 234,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 235,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 236,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 236,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 237,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 239,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 239,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 240,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 240,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawequal",
        ),
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 241,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 241,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawequal",
        ),
        line: 242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 242,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 243,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 243,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 243,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 244,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 244,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 244,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 245,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 245,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 245,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 245,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 246,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 246,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 246,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 246,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 249,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        line: 249,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 250,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 251,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 251,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 251,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 251,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 251,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 251,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 252,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 252,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 252,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 252,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 253,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 253,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 253,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 253,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 254,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 255,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 255,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 255,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 256,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 259,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 259,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 259,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 259,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 259,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 260,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 260,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 260,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 260,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"d\"",
        ),
        line: 260,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 260,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 260,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 262,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 263,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cd'",
        ),
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 264,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 264,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 264,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"e\"",
        ),
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 264,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 264,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 264,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"g\"",
        ),
        line: 264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 264,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0abcdef8g\"",
        ),
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 266,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 266,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 267,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 267,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 267,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cdcd'",
        ),
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 268,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 268,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 269,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 269,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 269,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 269,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cd'",
        ),
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 270,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"e\"",
        ),
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"g\"",
        ),
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 271,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 271,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0abcdefg\"",
        ),
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 275,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 275,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 275,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 275,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        line: 277,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 278,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 278,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 278,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 279,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 280,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 281,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 281,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 281,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 281,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 282,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 282,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 287,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 287,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 287,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 287,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 287,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 287,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 287,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 287,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 287,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 288,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 288,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 289,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 289,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 289,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 289,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 290,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 290,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 290,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 290,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 290,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 291,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 292,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 292,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 292,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 292,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 292,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 292,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 293,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 293,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 293,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 294,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 294,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 294,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 295,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 295,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 295,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 296,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 297,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 297,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 297,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 297,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 297,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 297,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 302,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 303,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 303,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__call",
        ),
        line: 304,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 304,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 304,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 305,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 305,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 305,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 305,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 306,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 306,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 306,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 306,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 307,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 307,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 307,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 307,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 307,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 308,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 309,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 310,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 312,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 312,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 312,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 313,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 313,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 314,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 314,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 314,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 316,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 317,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 318,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 318,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 321,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 321,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 323,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 323,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_g",
        ),
        line: 325,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 326,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 326,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 326,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 326,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 326,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 326,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_g",
        ),
        line: 326,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 326,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 326,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 326,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 329,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 329,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 329,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 331,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 331,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 331,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 333,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 336,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 336,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'debug'",
        ),
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 337,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 337,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 337,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 338,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 338,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 339,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 340,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 340,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 340,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 340,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 340,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 342,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 342,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 342,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 343,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 343,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 344,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 344,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 344,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 346,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 348,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 348,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 348,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 348,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 348,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 348,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 349,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 349,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 349,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 349,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 350,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 350,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 350,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 350,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 351,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 352,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 354,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 356,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        line: 356,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 356,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 356,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 356,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 356,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 356,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 357,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 357,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 358,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 358,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 358,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 359,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 359,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 359,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 360,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 360,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 361,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 363,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 363,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 363,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 363,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 367,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 367,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 367,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 367,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 368,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 368,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 369,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 369,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 369,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 369,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 369,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "V",
        ),
        line: 372,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 372,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "grandparent",
        ),
        line: 373,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 373,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 373,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "grandparent",
        ),
        line: 374,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 374,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 374,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 374,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 374,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 374,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 374,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "V",
        ),
        line: 374,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 374,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 376,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 376,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 376,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 377,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 377,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 378,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "grandparent",
        ),
        line: 378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "child",
        ),
        line: 380,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 380,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "child",
        ),
        line: 381,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 381,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 382,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 382,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 382,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 382,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        line: 382,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "V",
        ),
        line: 382,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 384,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 384,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 386,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
    },
]
