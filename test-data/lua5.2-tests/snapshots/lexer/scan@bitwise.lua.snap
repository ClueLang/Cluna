---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/bitwise.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1,
            column: 5,
            span: 0..5,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1,
            column: 6,
            span: 5..6,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing bitwise operations\"",
        ),
        position: Position {
            line: 1,
            column: 34,
            span: 6..34,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1,
            column: 35,
            span: 34..35,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 3,
            column: 7,
            span: 37..43,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 8,
            span: 43..44,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 3,
            column: 13,
            span: 44..49,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 3,
            column: 14,
            span: 49..50,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 3,
            column: 18,
            span: 50..54,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 19,
            span: 54..55,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 20,
            span: 55..56,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 3,
            column: 23,
            span: 57..59,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 3,
            column: 29,
            span: 60..65,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 3,
            column: 30,
            span: 65..66,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        position: Position {
            line: 3,
            column: 34,
            span: 66..70,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 3,
            column: 35,
            span: 70..71,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 3,
            column: 36,
            span: 70..72,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 37,
            span: 72..73,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 3,
            column: 38,
            span: 73..74,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 4,
            column: 7,
            span: 75..81,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 4,
            column: 8,
            span: 81..82,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 4,
            column: 13,
            span: 82..87,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 4,
            column: 14,
            span: 87..88,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "btest",
        ),
        position: Position {
            line: 4,
            column: 19,
            span: 88..93,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 4,
            column: 20,
            span: 93..94,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 4,
            column: 21,
            span: 94..95,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 4,
            column: 24,
            span: 96..98,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 4,
            column: 29,
            span: 99..103,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 4,
            column: 30,
            span: 103..104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 5,
            column: 7,
            span: 105..111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 8,
            span: 111..112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 5,
            column: 13,
            span: 112..117,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 5,
            column: 14,
            span: 117..118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        position: Position {
            line: 5,
            column: 17,
            span: 118..121,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 18,
            span: 121..122,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 19,
            span: 122..123,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 5,
            column: 22,
            span: 124..126,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 5,
            column: 24,
            span: 126..128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 25,
            span: 128..129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 6,
            column: 7,
            span: 130..136,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 6,
            column: 8,
            span: 136..137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 6,
            column: 13,
            span: 137..142,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 6,
            column: 14,
            span: 142..143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bxor",
        ),
        position: Position {
            line: 6,
            column: 18,
            span: 143..147,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 6,
            column: 19,
            span: 147..148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 6,
            column: 20,
            span: 148..149,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 6,
            column: 23,
            span: 150..152,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 6,
            column: 25,
            span: 152..154,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 6,
            column: 26,
            span: 154..155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 8,
            column: 7,
            span: 157..163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 8,
            span: 163..164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 8,
            column: 13,
            span: 164..169,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 8,
            column: 14,
            span: 169..170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 8,
            column: 18,
            span: 170..174,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 19,
            span: 174..175,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 20,
            span: 175..176,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 8,
            column: 23,
            span: 177..179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 8,
            column: 29,
            span: 180..185,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 8,
            column: 30,
            span: 185..186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 8,
            column: 34,
            span: 186..190,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 35,
            span: 190..191,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 8,
            column: 45,
            span: 190..201,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 46,
            span: 201..202,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 47,
            span: 202..203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 9,
            column: 7,
            span: 204..210,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 8,
            span: 210..211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 9,
            column: 13,
            span: 211..216,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 9,
            column: 14,
            span: 216..217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 9,
            column: 18,
            span: 217..221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 19,
            span: 221..222,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 9,
            column: 20,
            span: 221..223,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 9,
            column: 21,
            span: 223..224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 9,
            column: 22,
            span: 223..225,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 23,
            span: 225..226,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 9,
            column: 26,
            span: 227..229,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 9,
            column: 28,
            span: 229..231,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 29,
            span: 231..232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 13,
            column: 7,
            span: 259..265,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 8,
            span: 265..266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 13,
            column: 13,
            span: 266..271,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 13,
            column: 14,
            span: 271..272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 13,
            column: 18,
            span: 272..276,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 19,
            span: 276..277,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 13,
            column: 20,
            span: 277..278,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 13,
            column: 21,
            span: 277..279,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 22,
            span: 279..280,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 13,
            column: 25,
            span: 281..283,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 13,
            column: 36,
            span: 283..294,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 37,
            span: 294..295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 14,
            column: 7,
            span: 296..302,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 8,
            span: 302..303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 14,
            column: 13,
            span: 303..308,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 14,
            column: 14,
            span: 308..309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 14,
            column: 18,
            span: 309..313,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 19,
            span: 313..314,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 14,
            column: 20,
            span: 313..315,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 14,
            column: 21,
            span: 315..316,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 14,
            column: 23,
            span: 315..318,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 14,
            column: 25,
            span: 319..320,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 14,
            column: 27,
            span: 320..322,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 28,
            span: 322..323,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 14,
            column: 31,
            span: 324..326,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 14,
            column: 42,
            span: 326..337,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 43,
            span: 337..338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 15,
            column: 7,
            span: 339..345,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 8,
            span: 345..346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 15,
            column: 13,
            span: 346..351,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 15,
            column: 14,
            span: 351..352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 15,
            column: 18,
            span: 352..356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 19,
            span: 356..357,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 15,
            column: 20,
            span: 357..358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 15,
            column: 21,
            span: 357..359,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 15,
            column: 22,
            span: 359..360,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 15,
            column: 24,
            span: 359..362,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 15,
            column: 26,
            span: 363..364,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 15,
            column: 28,
            span: 364..366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 29,
            span: 366..367,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 15,
            column: 32,
            span: 368..370,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 15,
            column: 43,
            span: 370..381,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 44,
            span: 381..382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 16,
            column: 7,
            span: 383..389,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 8,
            span: 389..390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 16,
            column: 13,
            span: 390..395,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 16,
            column: 14,
            span: 395..396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 16,
            column: 18,
            span: 396..400,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 19,
            span: 400..401,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 20,
            span: 400..402,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 402..403,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 23,
            span: 402..405,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 16,
            column: 25,
            span: 406..407,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 27,
            span: 407..409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 28,
            span: 409..410,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 31,
            span: 411..413,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 33,
            span: 413..415,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 34,
            span: 415..416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 17,
            column: 7,
            span: 417..423,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 8,
            span: 423..424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 17,
            column: 13,
            span: 424..429,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 17,
            column: 14,
            span: 429..430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 17,
            column: 18,
            span: 430..434,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 19,
            span: 434..435,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 17,
            column: 20,
            span: 435..436,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 17,
            column: 21,
            span: 435..437,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 17,
            column: 22,
            span: 437..438,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 17,
            column: 24,
            span: 437..440,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 17,
            column: 26,
            span: 441..442,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 17,
            column: 28,
            span: 442..444,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 29,
            span: 444..445,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 17,
            column: 32,
            span: 446..448,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 17,
            column: 34,
            span: 448..450,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 35,
            span: 450..451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 18,
            column: 7,
            span: 452..458,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 8,
            span: 458..459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 18,
            column: 13,
            span: 459..464,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 18,
            column: 14,
            span: 464..465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 18,
            column: 18,
            span: 465..469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 19,
            span: 469..470,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 18,
            column: 20,
            span: 470..471,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 21,
            span: 470..472,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 18,
            column: 22,
            span: 472..473,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 24,
            span: 472..475,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 25,
            span: 475..476,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 18,
            column: 28,
            span: 477..479,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 30,
            span: 479..481,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 31,
            span: 481..482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 19,
            column: 7,
            span: 483..489,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 8,
            span: 489..490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 19,
            column: 13,
            span: 490..495,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 19,
            column: 14,
            span: 495..496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 19,
            column: 18,
            span: 496..500,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 19,
            span: 500..501,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 19,
            column: 20,
            span: 500..502,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 19,
            column: 21,
            span: 502..503,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 19,
            column: 23,
            span: 502..505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 24,
            span: 505..506,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 19,
            column: 27,
            span: 507..509,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 19,
            column: 29,
            span: 509..511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 30,
            span: 511..512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 20,
            column: 7,
            span: 513..519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 8,
            span: 519..520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 20,
            column: 13,
            span: 520..525,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 20,
            column: 14,
            span: 525..526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 20,
            column: 18,
            span: 526..530,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 19,
            span: 530..531,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 20,
            column: 20,
            span: 531..532,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 20,
            column: 21,
            span: 531..533,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 20,
            column: 22,
            span: 533..534,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 20,
            column: 24,
            span: 533..536,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 20,
            column: 26,
            span: 537..538,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 20,
            column: 28,
            span: 538..540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 29,
            span: 540..541,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 20,
            column: 32,
            span: 542..544,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfffffffe",
            ),
        ),
        position: Position {
            line: 20,
            column: 43,
            span: 544..555,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 44,
            span: 555..556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 21,
            column: 7,
            span: 557..563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 8,
            span: 563..564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 21,
            column: 13,
            span: 564..569,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 21,
            column: 14,
            span: 569..570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 21,
            column: 18,
            span: 570..574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 19,
            span: 574..575,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 20,
            span: 574..576,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 21,
            column: 21,
            span: 576..577,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 23,
            span: 576..579,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 21,
            column: 25,
            span: 580..581,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 27,
            span: 581..583,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 28,
            span: 583..584,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 21,
            column: 31,
            span: 585..587,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfffffffc",
            ),
        ),
        position: Position {
            line: 21,
            column: 42,
            span: 587..598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 43,
            span: 598..599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 23,
            column: 7,
            span: 601..607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 8,
            span: 607..608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 23,
            column: 13,
            span: 608..613,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 23,
            column: 14,
            span: 613..614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        position: Position {
            line: 23,
            column: 21,
            span: 614..621,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 22,
            span: 621..622,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 23,
            span: 621..623,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 24,
            span: 623..624,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 23,
            column: 26,
            span: 625..626,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 27,
            span: 625..627,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 28,
            span: 627..628,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 23,
            column: 31,
            span: 629..631,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 33,
            span: 631..633,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 34,
            span: 633..634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 24,
            column: 7,
            span: 635..641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 8,
            span: 641..642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 24,
            column: 13,
            span: 642..647,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 24,
            column: 14,
            span: 647..648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        position: Position {
            line: 24,
            column: 21,
            span: 648..655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 22,
            span: 655..656,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 23,
            span: 655..657,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 24,
            column: 24,
            span: 657..658,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 26,
            span: 658..660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 24,
            column: 27,
            span: 660..661,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 24,
            column: 30,
            span: 662..664,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 32,
            span: 664..666,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 24,
            column: 33,
            span: 666..667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 25,
            column: 7,
            span: 668..674,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 8,
            span: 674..675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 25,
            column: 13,
            span: 675..680,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 25,
            column: 14,
            span: 680..681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        position: Position {
            line: 25,
            column: 21,
            span: 681..688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 22,
            span: 688..689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 25,
            column: 32,
            span: 688..699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 33,
            span: 699..700,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 25,
            column: 35,
            span: 700..702,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 36,
            span: 702..703,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 25,
            column: 39,
            span: 704..706,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x23456781",
            ),
        ),
        position: Position {
            line: 25,
            column: 50,
            span: 706..717,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 51,
            span: 717..718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 26,
            column: 7,
            span: 719..725,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 8,
            span: 725..726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 26,
            column: 13,
            span: 726..731,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 26,
            column: 14,
            span: 731..732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rrotate",
        ),
        position: Position {
            line: 26,
            column: 21,
            span: 732..739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 22,
            span: 739..740,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 26,
            column: 32,
            span: 739..750,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 26,
            column: 33,
            span: 750..751,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 26,
            column: 35,
            span: 752..753,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 36,
            span: 752..754,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 37,
            span: 754..755,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 26,
            column: 40,
            span: 756..758,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x23456781",
            ),
        ),
        position: Position {
            line: 26,
            column: 51,
            span: 758..769,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 52,
            span: 769..770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 27,
            column: 7,
            span: 771..777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 8,
            span: 777..778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 27,
            column: 13,
            span: 778..783,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 27,
            column: 14,
            span: 783..784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        position: Position {
            line: 27,
            column: 21,
            span: 784..791,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 22,
            span: 791..792,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 27,
            column: 32,
            span: 791..802,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 33,
            span: 802..803,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 27,
            column: 35,
            span: 804..805,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 27,
            column: 36,
            span: 804..806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 37,
            span: 806..807,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 27,
            column: 40,
            span: 808..810,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x78123456",
            ),
        ),
        position: Position {
            line: 27,
            column: 51,
            span: 810..821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 52,
            span: 821..822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 28,
            column: 7,
            span: 823..829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 8,
            span: 829..830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 28,
            column: 13,
            span: 830..835,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 14,
            span: 835..836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rrotate",
        ),
        position: Position {
            line: 28,
            column: 21,
            span: 836..843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 22,
            span: 843..844,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 28,
            column: 32,
            span: 843..854,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 28,
            column: 33,
            span: 854..855,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 28,
            column: 35,
            span: 855..857,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 36,
            span: 857..858,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 28,
            column: 39,
            span: 859..861,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x78123456",
            ),
        ),
        position: Position {
            line: 28,
            column: 50,
            span: 861..872,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 51,
            span: 872..873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 29,
            column: 7,
            span: 874..880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 8,
            span: 880..881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 29,
            column: 13,
            span: 881..886,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 29,
            column: 14,
            span: 886..887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        position: Position {
            line: 29,
            column: 21,
            span: 887..894,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 22,
            span: 894..895,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xaaaaaaaa",
            ),
        ),
        position: Position {
            line: 29,
            column: 32,
            span: 894..905,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 29,
            column: 33,
            span: 905..906,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 29,
            column: 35,
            span: 906..908,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 36,
            span: 908..909,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 29,
            column: 39,
            span: 910..912,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xaaaaaaaa",
            ),
        ),
        position: Position {
            line: 29,
            column: 50,
            span: 912..923,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 51,
            span: 923..924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 30,
            column: 7,
            span: 925..931,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 8,
            span: 931..932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 30,
            column: 13,
            span: 932..937,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 30,
            column: 14,
            span: 937..938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        position: Position {
            line: 30,
            column: 21,
            span: 938..945,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 30,
            column: 22,
            span: 945..946,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xaaaaaaaa",
            ),
        ),
        position: Position {
            line: 30,
            column: 32,
            span: 945..956,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 33,
            span: 956..957,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 30,
            column: 35,
            span: 958..959,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 30,
            column: 36,
            span: 958..960,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 37,
            span: 960..961,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 30,
            column: 40,
            span: 962..964,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xaaaaaaaa",
            ),
        ),
        position: Position {
            line: 30,
            column: 51,
            span: 964..975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 30,
            column: 52,
            span: 975..976,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 31,
            column: 4,
            span: 977..980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 31,
            column: 6,
            span: 981..982,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 31,
            column: 8,
            span: 983..984,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 31,
            column: 10,
            span: 985..986,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 31,
            column: 12,
            span: 985..988,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 13,
            span: 988..989,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 31,
            column: 16,
            span: 989..992,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 31,
            column: 0,
            span: 993..995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 32,
            column: 9,
            span: 998..1004,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 10,
            span: 1004..1005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 32,
            column: 15,
            span: 1005..1010,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 16,
            span: 1010..1011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        position: Position {
            line: 32,
            column: 23,
            span: 1011..1018,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 24,
            span: 1018..1019,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x89abcdef",
            ),
        ),
        position: Position {
            line: 32,
            column: 34,
            span: 1018..1029,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 35,
            span: 1029..1030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 32,
            column: 37,
            span: 1031..1032,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 38,
            span: 1032..1033,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 32,
            column: 41,
            span: 1034..1036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 32,
            column: 47,
            span: 1037..1042,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 32,
            column: 48,
            span: 1042..1043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        position: Position {
            line: 32,
            column: 55,
            span: 1043..1050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 56,
            span: 1050..1051,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x89abcdef",
            ),
        ),
        position: Position {
            line: 32,
            column: 66,
            span: 1050..1061,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 67,
            span: 1061..1062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 32,
            column: 69,
            span: 1063..1064,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 32,
            column: 70,
            span: 1064..1065,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 32,
            column: 72,
            span: 1064..1067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 73,
            span: 1067..1068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 74,
            span: 1068..1069,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 33,
            column: 0,
            span: 1070..1073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 35,
            column: 7,
            span: 1075..1081,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 8,
            span: 1081..1082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 35,
            column: 13,
            span: 1082..1087,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 35,
            column: 14,
            span: 1087..1088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        position: Position {
            line: 35,
            column: 20,
            span: 1088..1094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 21,
            span: 1094..1095,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 35,
            column: 31,
            span: 1094..1105,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 32,
            span: 1105..1106,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 35,
            column: 34,
            span: 1106..1108,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 35,
            span: 1108..1109,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 35,
            column: 38,
            span: 1110..1112,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x23456780",
            ),
        ),
        position: Position {
            line: 35,
            column: 49,
            span: 1112..1123,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 50,
            span: 1123..1124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 36,
            column: 7,
            span: 1125..1131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 8,
            span: 1131..1132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 36,
            column: 13,
            span: 1132..1137,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 14,
            span: 1137..1138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        position: Position {
            line: 36,
            column: 20,
            span: 1138..1144,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 21,
            span: 1144..1145,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 36,
            column: 31,
            span: 1144..1155,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 32,
            span: 1155..1156,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 34,
            span: 1156..1158,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 35,
            span: 1158..1159,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 36,
            column: 38,
            span: 1160..1162,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x34567800",
            ),
        ),
        position: Position {
            line: 36,
            column: 49,
            span: 1162..1173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 50,
            span: 1173..1174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 37,
            column: 7,
            span: 1175..1181,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 8,
            span: 1181..1182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 37,
            column: 13,
            span: 1182..1187,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 37,
            column: 14,
            span: 1187..1188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        position: Position {
            line: 37,
            column: 20,
            span: 1188..1194,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 21,
            span: 1194..1195,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 37,
            column: 31,
            span: 1194..1205,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 37,
            column: 32,
            span: 1205..1206,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 37,
            column: 34,
            span: 1207..1208,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 37,
            column: 35,
            span: 1207..1209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 36,
            span: 1209..1210,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 37,
            column: 39,
            span: 1211..1213,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x01234567",
            ),
        ),
        position: Position {
            line: 37,
            column: 50,
            span: 1213..1224,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 51,
            span: 1224..1225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 38,
            column: 7,
            span: 1226..1232,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 8,
            span: 1232..1233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 38,
            column: 13,
            span: 1233..1238,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 14,
            span: 1238..1239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        position: Position {
            line: 38,
            column: 20,
            span: 1239..1245,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 21,
            span: 1245..1246,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 38,
            column: 31,
            span: 1245..1256,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 32,
            span: 1256..1257,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 38,
            column: 34,
            span: 1258..1259,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 35,
            span: 1258..1260,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 36,
            span: 1260..1261,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 38,
            column: 39,
            span: 1262..1264,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x00123456",
            ),
        ),
        position: Position {
            line: 38,
            column: 50,
            span: 1264..1275,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 51,
            span: 1275..1276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 39,
            column: 7,
            span: 1277..1283,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 8,
            span: 1283..1284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 39,
            column: 13,
            span: 1284..1289,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 39,
            column: 14,
            span: 1289..1290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        position: Position {
            line: 39,
            column: 20,
            span: 1290..1296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 21,
            span: 1296..1297,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 39,
            column: 31,
            span: 1296..1307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 32,
            span: 1307..1308,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 39,
            column: 35,
            span: 1308..1311,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 36,
            span: 1311..1312,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 39,
            column: 39,
            span: 1313..1315,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 39,
            column: 41,
            span: 1315..1317,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 42,
            span: 1317..1318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 40,
            column: 7,
            span: 1319..1325,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 8,
            span: 1325..1326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 40,
            column: 13,
            span: 1326..1331,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 40,
            column: 14,
            span: 1331..1332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        position: Position {
            line: 40,
            column: 20,
            span: 1332..1338,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 21,
            span: 1338..1339,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 40,
            column: 31,
            span: 1338..1349,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 32,
            span: 1349..1350,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 40,
            column: 34,
            span: 1351..1352,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 36,
            span: 1351..1354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 37,
            span: 1354..1355,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 40,
            column: 40,
            span: 1356..1358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 42,
            span: 1358..1360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 43,
            span: 1360..1361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 7,
            span: 1362..1368,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 8,
            span: 1368..1369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 1369..1374,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 14,
            span: 1374..1375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        position: Position {
            line: 41,
            column: 20,
            span: 1375..1381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 21,
            span: 1381..1382,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 41,
            column: 31,
            span: 1381..1392,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 41,
            column: 32,
            span: 1392..1393,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 41,
            column: 34,
            span: 1393..1395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 35,
            span: 1395..1396,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 38,
            span: 1397..1399,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x01234567",
            ),
        ),
        position: Position {
            line: 41,
            column: 49,
            span: 1399..1410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 50,
            span: 1410..1411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 42,
            column: 7,
            span: 1412..1418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 8,
            span: 1418..1419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 42,
            column: 13,
            span: 1419..1424,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 42,
            column: 14,
            span: 1424..1425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        position: Position {
            line: 42,
            column: 20,
            span: 1425..1431,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 21,
            span: 1431..1432,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 42,
            column: 31,
            span: 1431..1442,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 32,
            span: 1442..1443,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 42,
            column: 34,
            span: 1443..1445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 35,
            span: 1445..1446,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 42,
            column: 38,
            span: 1447..1449,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x00123456",
            ),
        ),
        position: Position {
            line: 42,
            column: 49,
            span: 1449..1460,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 50,
            span: 1460..1461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 43,
            column: 7,
            span: 1462..1468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 8,
            span: 1468..1469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 43,
            column: 13,
            span: 1469..1474,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 43,
            column: 14,
            span: 1474..1475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        position: Position {
            line: 43,
            column: 20,
            span: 1475..1481,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 21,
            span: 1481..1482,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 43,
            column: 31,
            span: 1481..1492,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 32,
            span: 1492..1493,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 43,
            column: 35,
            span: 1493..1496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 36,
            span: 1496..1497,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 43,
            column: 39,
            span: 1498..1500,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 43,
            column: 41,
            span: 1500..1502,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 42,
            span: 1502..1503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 44,
            column: 7,
            span: 1504..1510,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 8,
            span: 1510..1511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 44,
            column: 13,
            span: 1511..1516,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 44,
            column: 14,
            span: 1516..1517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        position: Position {
            line: 44,
            column: 20,
            span: 1517..1523,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 21,
            span: 1523..1524,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 44,
            column: 31,
            span: 1523..1534,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 44,
            column: 32,
            span: 1534..1535,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 44,
            column: 34,
            span: 1536..1537,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 44,
            column: 36,
            span: 1536..1539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 37,
            span: 1539..1540,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 44,
            column: 40,
            span: 1541..1543,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 44,
            column: 42,
            span: 1543..1545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 43,
            span: 1545..1546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 45,
            column: 7,
            span: 1547..1553,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 8,
            span: 1553..1554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 45,
            column: 13,
            span: 1554..1559,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 45,
            column: 14,
            span: 1559..1560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        position: Position {
            line: 45,
            column: 21,
            span: 1560..1567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 22,
            span: 1567..1568,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 45,
            column: 32,
            span: 1567..1578,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 33,
            span: 1578..1579,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 45,
            column: 35,
            span: 1579..1581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 36,
            span: 1581..1582,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 45,
            column: 39,
            span: 1583..1585,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 45,
            column: 50,
            span: 1585..1596,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 51,
            span: 1596..1597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 46,
            column: 7,
            span: 1598..1604,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 8,
            span: 1604..1605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 46,
            column: 13,
            span: 1605..1610,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 46,
            column: 14,
            span: 1610..1611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        position: Position {
            line: 46,
            column: 21,
            span: 1611..1618,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 22,
            span: 1618..1619,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 46,
            column: 32,
            span: 1618..1629,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 33,
            span: 1629..1630,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 35,
            span: 1630..1632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 36,
            span: 1632..1633,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 46,
            column: 39,
            span: 1634..1636,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 46,
            column: 50,
            span: 1636..1647,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 46,
            column: 52,
            span: 1648..1649,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 54,
            span: 1649..1651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 55,
            span: 1651..1652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 47,
            column: 7,
            span: 1653..1659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 1659..1660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 47,
            column: 13,
            span: 1660..1665,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 47,
            column: 14,
            span: 1665..1666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        position: Position {
            line: 47,
            column: 21,
            span: 1666..1673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 22,
            span: 1673..1674,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 47,
            column: 32,
            span: 1673..1684,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 33,
            span: 1684..1685,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 47,
            column: 35,
            span: 1686..1687,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 47,
            column: 36,
            span: 1686..1688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 37,
            span: 1688..1689,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 40,
            span: 1690..1692,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 47,
            column: 51,
            span: 1692..1703,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 47,
            column: 53,
            span: 1704..1705,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 47,
            column: 55,
            span: 1705..1707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 56,
            span: 1707..1708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 48,
            column: 7,
            span: 1709..1715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 8,
            span: 1715..1716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 48,
            column: 13,
            span: 1716..1721,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 48,
            column: 14,
            span: 1721..1722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        position: Position {
            line: 48,
            column: 21,
            span: 1722..1729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 22,
            span: 1729..1730,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 48,
            column: 23,
            span: 1730..1731,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 24,
            span: 1730..1732,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 25,
            span: 1732..1733,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 27,
            span: 1733..1735,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 28,
            span: 1735..1736,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 48,
            column: 31,
            span: 1737..1739,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 48,
            column: 42,
            span: 1739..1750,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 43,
            span: 1750..1751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 49,
            column: 7,
            span: 1752..1758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 8,
            span: 1758..1759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 49,
            column: 13,
            span: 1759..1764,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 1764..1765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        position: Position {
            line: 49,
            column: 21,
            span: 1765..1772,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 22,
            span: 1772..1773,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 49,
            column: 23,
            span: 1773..1774,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 49,
            column: 24,
            span: 1773..1775,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 25,
            span: 1775..1776,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 49,
            column: 28,
            span: 1776..1779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 29,
            span: 1779..1780,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 49,
            column: 32,
            span: 1781..1783,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 49,
            column: 43,
            span: 1783..1794,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 44,
            span: 1794..1795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 50,
            column: 7,
            span: 1796..1802,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 1802..1803,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 50,
            column: 13,
            span: 1803..1808,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 50,
            column: 14,
            span: 1808..1809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        position: Position {
            line: 50,
            column: 21,
            span: 1809..1816,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 22,
            span: 1816..1817,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 50,
            column: 23,
            span: 1817..1818,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 24,
            span: 1817..1819,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 50,
            column: 25,
            span: 1819..1820,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 28,
            span: 1820..1823,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 29,
            span: 1823..1824,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 32,
            span: 1825..1827,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 50,
            column: 43,
            span: 1827..1838,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 44,
            span: 1838..1839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 51,
            column: 7,
            span: 1840..1846,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1846..1847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 51,
            column: 13,
            span: 1847..1852,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 51,
            column: 14,
            span: 1852..1853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arshift",
        ),
        position: Position {
            line: 51,
            column: 21,
            span: 1853..1860,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 22,
            span: 1860..1861,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 51,
            column: 23,
            span: 1861..1862,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 24,
            span: 1861..1863,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 25,
            span: 1863..1864,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 51,
            column: 27,
            span: 1865..1866,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 28,
            span: 1865..1867,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 29,
            span: 1867..1868,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 51,
            column: 32,
            span: 1869..1871,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 34,
            span: 1872..1873,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 51,
            column: 35,
            span: 1873..1874,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 36,
            span: 1873..1875,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 51,
            column: 38,
            span: 1876..1877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 40,
            span: 1877..1879,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 41,
            span: 1879..1880,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 51,
            column: 43,
            span: 1881..1882,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 45,
            span: 1882..1884,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 51,
            column: 46,
            span: 1884..1885,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 51,
            column: 48,
            span: 1884..1887,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 49,
            span: 1887..1888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 53,
            column: 6,
            span: 1890..1895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 7,
            span: 1895..1896,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 53,
            column: 10,
            span: 1896..1899,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 11,
            span: 1899..1900,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 55,
            column: 6,
            span: 1923..1928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1929..1930,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 55,
            column: 10,
            span: 1931..1932,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 55,
            column: 12,
            span: 1933..1934,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 13,
            span: 1933..1935,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 14,
            span: 1935..1936,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 16,
            span: 1936..1938,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 17,
            span: 1938..1939,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 19,
            span: 1939..1941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 20,
            span: 1941..1942,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 22,
            span: 1942..1944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 23,
            span: 1944..1945,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 55,
            column: 26,
            span: 1945..1948,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 27,
            span: 1948..1949,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x80000000",
            ),
        ),
        position: Position {
            line: 55,
            column: 38,
            span: 1949..1960,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 39,
            span: 1960..1961,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xaaaaaaaa",
            ),
        ),
        position: Position {
            line: 55,
            column: 50,
            span: 1961..1972,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 51,
            span: 1972..1973,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x55555555",
            ),
        ),
        position: Position {
            line: 55,
            column: 62,
            span: 1973..1984,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 55,
            column: 63,
            span: 1984..1985,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        position: Position {
            line: 56,
            column: 22,
            span: 1996..2007,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 56,
            column: 23,
            span: 2007..2008,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffff",
            ),
        ),
        position: Position {
            line: 56,
            column: 34,
            span: 2008..2019,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 56,
            column: 35,
            span: 2019..2020,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 58,
            column: 4,
            span: 2022..2025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 58,
            column: 6,
            span: 2026..2027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 7,
            span: 2027..2028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 58,
            column: 9,
            span: 2029..2030,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 58,
            column: 12,
            span: 2031..2033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 58,
            column: 18,
            span: 2034..2039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 19,
            span: 2039..2040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 58,
            column: 20,
            span: 2040..2041,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 21,
            span: 2041..2042,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 58,
            column: 0,
            span: 2043..2045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 59,
            column: 9,
            span: 2048..2054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 10,
            span: 2054..2055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 59,
            column: 15,
            span: 2055..2060,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 59,
            column: 16,
            span: 2060..2061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 59,
            column: 20,
            span: 2061..2065,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 21,
            span: 2065..2066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 59,
            column: 22,
            span: 2066..2067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 23,
            span: 2067..2068,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 59,
            column: 26,
            span: 2069..2071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 59,
            column: 28,
            span: 2072..2073,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 29,
            span: 2073..2074,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 60,
            column: 9,
            span: 2077..2083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 10,
            span: 2083..2084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 60,
            column: 15,
            span: 2084..2089,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 60,
            column: 16,
            span: 2089..2090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 60,
            column: 20,
            span: 2090..2094,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 21,
            span: 2094..2095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 60,
            column: 22,
            span: 2095..2096,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 60,
            column: 23,
            span: 2096..2097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 60,
            column: 25,
            span: 2098..2099,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 26,
            span: 2099..2100,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 60,
            column: 29,
            span: 2101..2103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 60,
            column: 31,
            span: 2104..2105,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 32,
            span: 2105..2106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 2109..2115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 2115..2116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 61,
            column: 15,
            span: 2116..2121,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 16,
            span: 2121..2122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "btest",
        ),
        position: Position {
            line: 61,
            column: 21,
            span: 2122..2127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 22,
            span: 2127..2128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 61,
            column: 23,
            span: 2128..2129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 24,
            span: 2129..2130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 61,
            column: 26,
            span: 2131..2132,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 27,
            span: 2132..2133,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 61,
            column: 30,
            span: 2134..2136,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 32,
            span: 2137..2138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 61,
            column: 33,
            span: 2138..2139,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 61,
            column: 36,
            span: 2140..2142,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 38,
            span: 2142..2144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 39,
            span: 2144..2145,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 40,
            span: 2145..2146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 2149..2155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 2155..2156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 62,
            column: 15,
            span: 2156..2161,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 62,
            column: 16,
            span: 2161..2162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 62,
            column: 20,
            span: 2162..2166,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 21,
            span: 2166..2167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 62,
            column: 22,
            span: 2167..2168,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 23,
            span: 2168..2169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 62,
            column: 25,
            span: 2170..2171,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 26,
            span: 2171..2172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 62,
            column: 28,
            span: 2173..2174,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 29,
            span: 2174..2175,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 62,
            column: 32,
            span: 2176..2178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 62,
            column: 34,
            span: 2179..2180,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 35,
            span: 2180..2181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 2184..2190,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 2190..2191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 63,
            column: 15,
            span: 2191..2196,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 63,
            column: 16,
            span: 2196..2197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "btest",
        ),
        position: Position {
            line: 63,
            column: 21,
            span: 2197..2202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 22,
            span: 2202..2203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 63,
            column: 23,
            span: 2203..2204,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 24,
            span: 2204..2205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 63,
            column: 26,
            span: 2206..2207,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 63,
            column: 27,
            span: 2207..2208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 63,
            column: 29,
            span: 2209..2210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 30,
            span: 2210..2211,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 63,
            column: 33,
            span: 2212..2214,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 35,
            span: 2215..2216,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 63,
            column: 36,
            span: 2216..2217,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 63,
            column: 39,
            span: 2218..2220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 63,
            column: 41,
            span: 2220..2222,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 42,
            span: 2222..2223,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 43,
            span: 2223..2224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 64,
            column: 9,
            span: 2227..2233,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 10,
            span: 2233..2234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 64,
            column: 15,
            span: 2234..2239,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 64,
            column: 16,
            span: 2239..2240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 64,
            column: 20,
            span: 2240..2244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 21,
            span: 2244..2245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 64,
            column: 22,
            span: 2245..2246,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 23,
            span: 2246..2247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 64,
            column: 29,
            span: 2248..2253,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 64,
            column: 30,
            span: 2253..2254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        position: Position {
            line: 64,
            column: 34,
            span: 2254..2258,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 35,
            span: 2258..2259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 64,
            column: 36,
            span: 2259..2260,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 37,
            span: 2260..2261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 38,
            span: 2261..2262,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 64,
            column: 41,
            span: 2263..2265,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 64,
            column: 43,
            span: 2265..2267,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 44,
            span: 2267..2268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 9,
            span: 2271..2277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 10,
            span: 2277..2278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 65,
            column: 15,
            span: 2278..2283,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 65,
            column: 16,
            span: 2283..2284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        position: Position {
            line: 65,
            column: 19,
            span: 2284..2287,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 20,
            span: 2287..2288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 65,
            column: 21,
            span: 2288..2289,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 65,
            column: 22,
            span: 2289..2290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 65,
            column: 28,
            span: 2291..2296,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 65,
            column: 29,
            span: 2296..2297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        position: Position {
            line: 65,
            column: 33,
            span: 2297..2301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 34,
            span: 2301..2302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 65,
            column: 35,
            span: 2302..2303,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 36,
            span: 2303..2304,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 37,
            span: 2304..2305,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 40,
            span: 2306..2308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 65,
            column: 46,
            span: 2309..2314,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 65,
            column: 47,
            span: 2314..2315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        position: Position {
            line: 65,
            column: 51,
            span: 2315..2319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 52,
            span: 2319..2320,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 65,
            column: 53,
            span: 2319..2321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 54,
            span: 2321..2322,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 55,
            span: 2322..2323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 66,
            column: 9,
            span: 2326..2332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 10,
            span: 2332..2333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 66,
            column: 15,
            span: 2333..2338,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 66,
            column: 16,
            span: 2338..2339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        position: Position {
            line: 66,
            column: 19,
            span: 2339..2342,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 66,
            column: 20,
            span: 2342..2343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 66,
            column: 21,
            span: 2343..2344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 22,
            span: 2344..2345,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 66,
            column: 25,
            span: 2346..2348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 66,
            column: 27,
            span: 2349..2350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 66,
            column: 28,
            span: 2350..2351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 67,
            column: 9,
            span: 2354..2360,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 2360..2361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 67,
            column: 15,
            span: 2361..2366,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 67,
            column: 16,
            span: 2366..2367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        position: Position {
            line: 67,
            column: 19,
            span: 2367..2370,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 20,
            span: 2370..2371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 67,
            column: 21,
            span: 2371..2372,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 22,
            span: 2372..2373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 67,
            column: 24,
            span: 2374..2375,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 25,
            span: 2375..2376,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 67,
            column: 28,
            span: 2377..2379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 67,
            column: 30,
            span: 2380..2381,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 31,
            span: 2381..2382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 2385..2391,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 2391..2392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 68,
            column: 15,
            span: 2392..2397,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 2397..2398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bor",
        ),
        position: Position {
            line: 68,
            column: 19,
            span: 2398..2401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 20,
            span: 2401..2402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 68,
            column: 21,
            span: 2402..2403,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 22,
            span: 2403..2404,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 68,
            column: 24,
            span: 2405..2406,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 25,
            span: 2406..2407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 68,
            column: 27,
            span: 2408..2409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 28,
            span: 2409..2410,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 68,
            column: 31,
            span: 2411..2413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 68,
            column: 33,
            span: 2414..2415,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 34,
            span: 2415..2416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 69,
            column: 9,
            span: 2419..2425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 10,
            span: 2425..2426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 69,
            column: 15,
            span: 2426..2431,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 69,
            column: 16,
            span: 2431..2432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bxor",
        ),
        position: Position {
            line: 69,
            column: 20,
            span: 2432..2436,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 21,
            span: 2436..2437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 69,
            column: 22,
            span: 2437..2438,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 23,
            span: 2438..2439,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 69,
            column: 26,
            span: 2440..2442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 69,
            column: 28,
            span: 2443..2444,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 29,
            span: 2444..2445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 2448..2454,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 2454..2455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 70,
            column: 15,
            span: 2455..2460,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 16,
            span: 2460..2461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bxor",
        ),
        position: Position {
            line: 70,
            column: 20,
            span: 2461..2465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 21,
            span: 2465..2466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 70,
            column: 22,
            span: 2466..2467,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 23,
            span: 2467..2468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 70,
            column: 25,
            span: 2469..2470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 26,
            span: 2470..2471,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 70,
            column: 29,
            span: 2472..2474,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 31,
            span: 2474..2476,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 32,
            span: 2476..2477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 71,
            column: 9,
            span: 2480..2486,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 10,
            span: 2486..2487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 71,
            column: 15,
            span: 2487..2492,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 71,
            column: 16,
            span: 2492..2493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bxor",
        ),
        position: Position {
            line: 71,
            column: 20,
            span: 2493..2497,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 21,
            span: 2497..2498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 71,
            column: 22,
            span: 2498..2499,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 23,
            span: 2499..2500,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 71,
            column: 25,
            span: 2500..2502,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 26,
            span: 2502..2503,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 71,
            column: 29,
            span: 2504..2506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 71,
            column: 31,
            span: 2507..2508,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 32,
            span: 2508..2509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 72,
            column: 9,
            span: 2512..2518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 10,
            span: 2518..2519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 72,
            column: 15,
            span: 2519..2524,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 72,
            column: 16,
            span: 2524..2525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        position: Position {
            line: 72,
            column: 20,
            span: 2525..2529,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 21,
            span: 2529..2530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 72,
            column: 22,
            span: 2530..2531,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 23,
            span: 2531..2532,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 72,
            column: 26,
            span: 2533..2535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 72,
            column: 28,
            span: 2536..2537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 29,
            span: 2537..2538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 73,
            column: 9,
            span: 2541..2547,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 2547..2548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 73,
            column: 15,
            span: 2548..2553,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 16,
            span: 2553..2554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        position: Position {
            line: 73,
            column: 20,
            span: 2554..2558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 21,
            span: 2558..2559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 73,
            column: 26,
            span: 2559..2564,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 27,
            span: 2564..2565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        position: Position {
            line: 73,
            column: 31,
            span: 2565..2569,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 32,
            span: 2569..2570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 73,
            column: 33,
            span: 2570..2571,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 34,
            span: 2571..2572,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 35,
            span: 2572..2573,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 73,
            column: 38,
            span: 2574..2576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 73,
            column: 40,
            span: 2577..2578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 41,
            span: 2578..2579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 2582..2588,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 2588..2589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 74,
            column: 15,
            span: 2589..2594,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 74,
            column: 16,
            span: 2594..2595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        position: Position {
            line: 74,
            column: 20,
            span: 2595..2599,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 21,
            span: 2599..2600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 74,
            column: 22,
            span: 2600..2601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 23,
            span: 2601..2602,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 74,
            column: 26,
            span: 2603..2605,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 28,
            span: 2605..2607,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 74,
            column: 29,
            span: 2607..2608,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 31,
            span: 2607..2610,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 74,
            column: 33,
            span: 2611..2612,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 35,
            span: 2612..2614,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 74,
            column: 37,
            span: 2615..2616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 74,
            column: 39,
            span: 2617..2618,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 40,
            span: 2618..2619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 2622..2628,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 10,
            span: 2628..2629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 75,
            column: 15,
            span: 2629..2634,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 75,
            column: 16,
            span: 2634..2635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lrotate",
        ),
        position: Position {
            line: 75,
            column: 23,
            span: 2635..2642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 75,
            column: 24,
            span: 2642..2643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 75,
            column: 25,
            span: 2643..2644,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 26,
            span: 2644..2645,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 29,
            span: 2645..2648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 30,
            span: 2648..2649,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 75,
            column: 33,
            span: 2650..2652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 75,
            column: 35,
            span: 2653..2654,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 75,
            column: 36,
            span: 2654..2655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 2658..2664,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 10,
            span: 2664..2665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 76,
            column: 15,
            span: 2665..2670,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 16,
            span: 2670..2671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rrotate",
        ),
        position: Position {
            line: 76,
            column: 23,
            span: 2671..2678,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 24,
            span: 2678..2679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 76,
            column: 25,
            span: 2679..2680,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 26,
            span: 2680..2681,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 29,
            span: 2681..2684,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 30,
            span: 2684..2685,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 76,
            column: 33,
            span: 2686..2688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 76,
            column: 35,
            span: 2689..2690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 36,
            span: 2690..2691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 2694..2700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 10,
            span: 2700..2701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 77,
            column: 15,
            span: 2701..2706,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 16,
            span: 2706..2707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        position: Position {
            line: 77,
            column: 22,
            span: 2707..2713,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 23,
            span: 2713..2714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 77,
            column: 28,
            span: 2714..2719,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 29,
            span: 2719..2720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        position: Position {
            line: 77,
            column: 35,
            span: 2720..2726,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 36,
            span: 2726..2727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 77,
            column: 37,
            span: 2727..2728,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 38,
            span: 2728..2729,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 77,
            column: 40,
            span: 2730..2731,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 41,
            span: 2730..2732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 42,
            span: 2732..2733,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 43,
            span: 2733..2734,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 45,
            span: 2734..2736,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 46,
            span: 2736..2737,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 77,
            column: 49,
            span: 2738..2740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 77,
            column: 55,
            span: 2741..2746,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 56,
            span: 2746..2747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 77,
            column: 60,
            span: 2747..2751,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 61,
            span: 2751..2752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 77,
            column: 62,
            span: 2752..2753,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 63,
            span: 2753..2754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 77,
            column: 69,
            span: 2755..2760,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 77,
            column: 70,
            span: 2760..2761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        position: Position {
            line: 77,
            column: 74,
            span: 2761..2765,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 75,
            span: 2765..2766,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xf",
            ),
        ),
        position: Position {
            line: 77,
            column: 78,
            span: 2765..2769,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 79,
            span: 2769..2770,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 80,
            span: 2770..2771,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 81,
            span: 2771..2772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 78,
            column: 9,
            span: 2775..2781,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 10,
            span: 2781..2782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 78,
            column: 15,
            span: 2782..2787,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 78,
            column: 16,
            span: 2787..2788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        position: Position {
            line: 78,
            column: 22,
            span: 2788..2794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 23,
            span: 2794..2795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 78,
            column: 28,
            span: 2795..2800,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 78,
            column: 29,
            span: 2800..2801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        position: Position {
            line: 78,
            column: 35,
            span: 2801..2807,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 36,
            span: 2807..2808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 78,
            column: 37,
            span: 2808..2809,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 38,
            span: 2809..2810,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 78,
            column: 40,
            span: 2810..2812,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 41,
            span: 2812..2813,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 42,
            span: 2813..2814,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 78,
            column: 44,
            span: 2815..2816,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 78,
            column: 45,
            span: 2815..2817,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 46,
            span: 2817..2818,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 78,
            column: 49,
            span: 2819..2821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 78,
            column: 55,
            span: 2822..2827,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 78,
            column: 56,
            span: 2827..2828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 78,
            column: 60,
            span: 2828..2832,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 61,
            span: 2832..2833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 78,
            column: 62,
            span: 2833..2834,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 63,
            span: 2834..2835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 78,
            column: 69,
            span: 2836..2841,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 78,
            column: 70,
            span: 2841..2842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        position: Position {
            line: 78,
            column: 74,
            span: 2842..2846,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 78,
            column: 75,
            span: 2846..2847,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xf",
            ),
        ),
        position: Position {
            line: 78,
            column: 78,
            span: 2846..2850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 79,
            span: 2850..2851,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 80,
            span: 2851..2852,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 78,
            column: 81,
            span: 2852..2853,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 79,
            column: 6,
            span: 2856..2859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 79,
            column: 8,
            span: 2860..2861,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 79,
            column: 10,
            span: 2862..2863,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 79,
            column: 12,
            span: 2864..2865,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 14,
            span: 2864..2867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 15,
            span: 2867..2868,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 18,
            span: 2868..2871,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 79,
            column: 0,
            span: 2872..2874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 80,
            column: 11,
            span: 2879..2885,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 12,
            span: 2885..2886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 80,
            column: 17,
            span: 2886..2891,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 80,
            column: 18,
            span: 2891..2892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        position: Position {
            line: 80,
            column: 24,
            span: 2892..2898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 25,
            span: 2898..2899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 80,
            column: 26,
            span: 2899..2900,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 27,
            span: 2900..2901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 80,
            column: 29,
            span: 2902..2903,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 30,
            span: 2903..2904,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 80,
            column: 33,
            span: 2905..2907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 80,
            column: 38,
            span: 2908..2912,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 80,
            column: 39,
            span: 2912..2913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        position: Position {
            line: 80,
            column: 44,
            span: 2913..2918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 45,
            span: 2918..2919,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 46,
            span: 2919..2920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 80,
            column: 47,
            span: 2920..2921,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 80,
            column: 49,
            span: 2922..2923,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 51,
            span: 2923..2925,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 80,
            column: 52,
            span: 2925..2926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 80,
            column: 53,
            span: 2926..2927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 54,
            span: 2927..2928,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 80,
            column: 56,
            span: 2929..2930,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 58,
            span: 2930..2932,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 80,
            column: 59,
            span: 2932..2933,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 61,
            span: 2932..2935,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 62,
            span: 2935..2936,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 63,
            span: 2936..2937,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 81,
            column: 0,
            span: 2940..2943,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 82,
            column: 0,
            span: 2944..2947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 84,
            column: 7,
            span: 2949..2955,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 8,
            span: 2955..2956,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 84,
            column: 11,
            span: 2956..2959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 84,
            column: 17,
            span: 2960..2965,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 18,
            span: 2965..2966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 84,
            column: 23,
            span: 2966..2971,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 84,
            column: 24,
            span: 2971..2972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "band",
        ),
        position: Position {
            line: 84,
            column: 28,
            span: 2972..2976,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 84,
            column: 29,
            span: 2976..2977,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 84,
            column: 31,
            span: 2978..2979,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 84,
            column: 32,
            span: 2979..2980,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 33,
            span: 2980..2981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 34,
            span: 2981..2982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 85,
            column: 7,
            span: 2983..2989,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 8,
            span: 2989..2990,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 85,
            column: 11,
            span: 2990..2993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 85,
            column: 17,
            span: 2994..2999,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 18,
            span: 2999..3000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 85,
            column: 23,
            span: 3000..3005,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 85,
            column: 24,
            span: 3005..3006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bnot",
        ),
        position: Position {
            line: 85,
            column: 28,
            span: 3006..3010,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 29,
            span: 3010..3011,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 85,
            column: 33,
            span: 3012..3015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 34,
            span: 3015..3016,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 35,
            span: 3016..3017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 86,
            column: 7,
            span: 3018..3024,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 8,
            span: 3024..3025,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 86,
            column: 11,
            span: 3025..3028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 86,
            column: 17,
            span: 3029..3034,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 18,
            span: 3034..3035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 86,
            column: 23,
            span: 3035..3040,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 86,
            column: 24,
            span: 3040..3041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        position: Position {
            line: 86,
            column: 30,
            span: 3041..3047,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 31,
            span: 3047..3048,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 34,
            span: 3048..3051,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 35,
            span: 3051..3052,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 36,
            span: 3052..3053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 87,
            column: 7,
            span: 3054..3060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 8,
            span: 3060..3061,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 87,
            column: 11,
            span: 3061..3064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 87,
            column: 17,
            span: 3065..3070,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 18,
            span: 3070..3071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 87,
            column: 23,
            span: 3071..3076,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 87,
            column: 24,
            span: 3076..3077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lshift",
        ),
        position: Position {
            line: 87,
            column: 30,
            span: 3077..3083,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 31,
            span: 3083..3084,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 87,
            column: 34,
            span: 3084..3087,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 87,
            column: 35,
            span: 3087..3088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 87,
            column: 41,
            span: 3089..3094,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 42,
            span: 3094..3095,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 43,
            span: 3095..3096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 88,
            column: 7,
            span: 3097..3103,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 8,
            span: 3103..3104,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 3104..3107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 88,
            column: 17,
            span: 3108..3113,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 18,
            span: 3113..3114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 88,
            column: 23,
            span: 3114..3119,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 88,
            column: 24,
            span: 3119..3120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rshift",
        ),
        position: Position {
            line: 88,
            column: 30,
            span: 3120..3126,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 31,
            span: 3126..3127,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 34,
            span: 3127..3130,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 35,
            span: 3130..3131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 88,
            column: 41,
            span: 3132..3137,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 42,
            span: 3137..3138,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 43,
            span: 3138..3139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 90,
            column: 6,
            span: 3141..3146,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 90,
            column: 7,
            span: 3146..3147,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 90,
            column: 10,
            span: 3147..3150,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 90,
            column: 11,
            span: 3150..3151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 95,
            column: 7,
            span: 3182..3188,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 8,
            span: 3188..3189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 95,
            column: 13,
            span: 3189..3194,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 95,
            column: 14,
            span: 3194..3195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        position: Position {
            line: 95,
            column: 21,
            span: 3195..3202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 22,
            span: 3202..3203,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 95,
            column: 32,
            span: 3202..3213,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 33,
            span: 3213..3214,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 35,
            span: 3214..3216,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 36,
            span: 3216..3217,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 38,
            span: 3217..3219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 39,
            span: 3219..3220,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 95,
            column: 42,
            span: 3221..3223,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 44,
            span: 3223..3225,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 45,
            span: 3225..3226,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 96,
            column: 7,
            span: 3227..3233,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 8,
            span: 3233..3234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 96,
            column: 13,
            span: 3234..3239,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 96,
            column: 14,
            span: 3239..3240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        position: Position {
            line: 96,
            column: 21,
            span: 3240..3247,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 22,
            span: 3247..3248,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 96,
            column: 32,
            span: 3247..3258,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 33,
            span: 3258..3259,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 35,
            span: 3259..3261,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 36,
            span: 3261..3262,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 38,
            span: 3262..3264,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 39,
            span: 3264..3265,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 96,
            column: 42,
            span: 3266..3268,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 96,
            column: 44,
            span: 3268..3270,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 45,
            span: 3270..3271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 97,
            column: 7,
            span: 3272..3278,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 8,
            span: 3278..3279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 97,
            column: 13,
            span: 3279..3284,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 97,
            column: 14,
            span: 3284..3285,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        position: Position {
            line: 97,
            column: 21,
            span: 3285..3292,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 22,
            span: 3292..3293,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xa0001111",
            ),
        ),
        position: Position {
            line: 97,
            column: 32,
            span: 3292..3303,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 33,
            span: 3303..3304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "28",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 36,
            span: 3304..3307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 37,
            span: 3307..3308,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 39,
            span: 3308..3310,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 40,
            span: 3310..3311,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 97,
            column: 43,
            span: 3312..3314,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xa",
            ),
        ),
        position: Position {
            line: 97,
            column: 47,
            span: 3314..3318,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 48,
            span: 3318..3319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 98,
            column: 7,
            span: 3320..3326,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 8,
            span: 3326..3327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 98,
            column: 13,
            span: 3327..3332,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 98,
            column: 14,
            span: 3332..3333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        position: Position {
            line: 98,
            column: 21,
            span: 3333..3340,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 22,
            span: 3340..3341,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xa0001111",
            ),
        ),
        position: Position {
            line: 98,
            column: 32,
            span: 3340..3351,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 33,
            span: 3351..3352,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 36,
            span: 3352..3355,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 98,
            column: 37,
            span: 3355..3356,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 39,
            span: 3356..3358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 40,
            span: 3358..3359,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 98,
            column: 43,
            span: 3360..3362,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 45,
            span: 3362..3364,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 46,
            span: 3364..3365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 99,
            column: 7,
            span: 3366..3372,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 8,
            span: 3372..3373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 99,
            column: 13,
            span: 3373..3378,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 99,
            column: 14,
            span: 3378..3379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        position: Position {
            line: 99,
            column: 21,
            span: 3379..3386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 99,
            column: 22,
            span: 3386..3387,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x50000111",
            ),
        ),
        position: Position {
            line: 99,
            column: 32,
            span: 3386..3397,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 33,
            span: 3397..3398,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 36,
            span: 3398..3401,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 99,
            column: 37,
            span: 3401..3402,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 39,
            span: 3402..3404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 40,
            span: 3404..3405,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 99,
            column: 43,
            span: 3406..3408,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 99,
            column: 45,
            span: 3408..3410,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 99,
            column: 46,
            span: 3410..3411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 100,
            column: 7,
            span: 3412..3418,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 8,
            span: 3418..3419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 100,
            column: 13,
            span: 3419..3424,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 100,
            column: 14,
            span: 3424..3425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        position: Position {
            line: 100,
            column: 21,
            span: 3425..3432,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 22,
            span: 3432..3433,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xf2345679",
            ),
        ),
        position: Position {
            line: 100,
            column: 32,
            span: 3432..3443,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 33,
            span: 3443..3444,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 35,
            span: 3444..3446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 36,
            span: 3446..3447,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 39,
            span: 3447..3450,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 40,
            span: 3450..3451,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 100,
            column: 43,
            span: 3452..3454,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xf2345679",
            ),
        ),
        position: Position {
            line: 100,
            column: 54,
            span: 3454..3465,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 55,
            span: 3465..3466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 102,
            column: 7,
            span: 3468..3474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 8,
            span: 3474..3475,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 102,
            column: 11,
            span: 3475..3478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 102,
            column: 17,
            span: 3479..3484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 18,
            span: 3484..3485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 102,
            column: 23,
            span: 3485..3490,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 102,
            column: 24,
            span: 3490..3491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        position: Position {
            line: 102,
            column: 31,
            span: 3491..3498,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 32,
            span: 3498..3499,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 34,
            span: 3499..3501,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 35,
            span: 3501..3502,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 102,
            column: 37,
            span: 3503..3504,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 38,
            span: 3503..3505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 39,
            span: 3505..3506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 40,
            span: 3506..3507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 103,
            column: 7,
            span: 3508..3514,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 8,
            span: 3514..3515,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 103,
            column: 11,
            span: 3515..3518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 103,
            column: 17,
            span: 3519..3524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 18,
            span: 3524..3525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 103,
            column: 23,
            span: 3525..3530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 103,
            column: 24,
            span: 3530..3531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        position: Position {
            line: 103,
            column: 31,
            span: 3531..3538,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 32,
            span: 3538..3539,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 34,
            span: 3539..3541,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 35,
            span: 3541..3542,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 38,
            span: 3542..3545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 39,
            span: 3545..3546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 40,
            span: 3546..3547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 104,
            column: 7,
            span: 3548..3554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 8,
            span: 3554..3555,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 104,
            column: 11,
            span: 3555..3558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 104,
            column: 17,
            span: 3559..3564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 18,
            span: 3564..3565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 104,
            column: 23,
            span: 3565..3570,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 104,
            column: 24,
            span: 3570..3571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        position: Position {
            line: 104,
            column: 31,
            span: 3571..3578,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 32,
            span: 3578..3579,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 34,
            span: 3579..3581,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 35,
            span: 3581..3582,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 37,
            span: 3582..3584,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 38,
            span: 3584..3585,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 41,
            span: 3585..3588,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 42,
            span: 3588..3589,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 43,
            span: 3589..3590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 105,
            column: 7,
            span: 3591..3597,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 8,
            span: 3597..3598,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 105,
            column: 11,
            span: 3598..3601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 105,
            column: 17,
            span: 3602..3607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 105,
            column: 18,
            span: 3607..3608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 105,
            column: 23,
            span: 3608..3613,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 105,
            column: 24,
            span: 3613..3614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extract",
        ),
        position: Position {
            line: 105,
            column: 31,
            span: 3614..3621,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 32,
            span: 3621..3622,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 34,
            span: 3622..3624,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 35,
            span: 3624..3625,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 38,
            span: 3625..3628,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 39,
            span: 3628..3629,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 41,
            span: 3629..3631,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 105,
            column: 42,
            span: 3631..3632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 105,
            column: 43,
            span: 3632..3633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 107,
            column: 7,
            span: 3635..3641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 8,
            span: 3641..3642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 107,
            column: 13,
            span: 3642..3647,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 107,
            column: 14,
            span: 3647..3648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        position: Position {
            line: 107,
            column: 21,
            span: 3648..3655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 22,
            span: 3655..3656,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 107,
            column: 32,
            span: 3655..3666,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 33,
            span: 3666..3667,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 35,
            span: 3667..3669,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 36,
            span: 3669..3670,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "28",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 39,
            span: 3670..3673,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 40,
            span: 3673..3674,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 42,
            span: 3674..3676,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 43,
            span: 3676..3677,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 107,
            column: 46,
            span: 3678..3680,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x52345678",
            ),
        ),
        position: Position {
            line: 107,
            column: 57,
            span: 3680..3691,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 58,
            span: 3691..3692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 108,
            column: 7,
            span: 3693..3699,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 8,
            span: 3699..3700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 108,
            column: 13,
            span: 3700..3705,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 108,
            column: 14,
            span: 3705..3706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        position: Position {
            line: 108,
            column: 21,
            span: 3706..3713,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 22,
            span: 3713..3714,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x12345678",
            ),
        ),
        position: Position {
            line: 108,
            column: 32,
            span: 3713..3724,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 33,
            span: 3724..3725,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x87654321",
            ),
        ),
        position: Position {
            line: 108,
            column: 44,
            span: 3725..3736,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 45,
            span: 3736..3737,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 47,
            span: 3737..3739,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 48,
            span: 3739..3740,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 51,
            span: 3740..3743,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 52,
            span: 3743..3744,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 108,
            column: 55,
            span: 3745..3747,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x87654321",
            ),
        ),
        position: Position {
            line: 108,
            column: 66,
            span: 3747..3758,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 67,
            span: 3758..3759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 109,
            column: 7,
            span: 3760..3766,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 8,
            span: 3766..3767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 109,
            column: 13,
            span: 3767..3772,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 109,
            column: 14,
            span: 3772..3773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        position: Position {
            line: 109,
            column: 21,
            span: 3773..3780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 22,
            span: 3780..3781,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 23,
            span: 3780..3782,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 24,
            span: 3782..3783,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 26,
            span: 3783..3785,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 27,
            span: 3785..3786,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 29,
            span: 3786..3788,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 30,
            span: 3788..3789,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 109,
            column: 33,
            span: 3790..3792,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 35,
            span: 3792..3794,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 109,
            column: 36,
            span: 3794..3795,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 37,
            span: 3794..3796,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 38,
            span: 3796..3797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 110,
            column: 7,
            span: 3798..3804,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 8,
            span: 3804..3805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 110,
            column: 13,
            span: 3805..3810,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 110,
            column: 14,
            span: 3810..3811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        position: Position {
            line: 110,
            column: 21,
            span: 3811..3818,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 22,
            span: 3818..3819,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 23,
            span: 3818..3820,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 24,
            span: 3820..3821,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 110,
            column: 26,
            span: 3822..3823,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 27,
            span: 3822..3824,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 28,
            span: 3824..3825,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 30,
            span: 3825..3827,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 31,
            span: 3827..3828,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 110,
            column: 34,
            span: 3829..3831,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 36,
            span: 3831..3833,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 110,
            column: 37,
            span: 3833..3834,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 38,
            span: 3833..3835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 39,
            span: 3835..3836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 111,
            column: 7,
            span: 3837..3843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 8,
            span: 3843..3844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 111,
            column: 13,
            span: 3844..3849,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 111,
            column: 14,
            span: 3849..3850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        position: Position {
            line: 111,
            column: 21,
            span: 3850..3857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 22,
            span: 3857..3858,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 111,
            column: 23,
            span: 3858..3859,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 24,
            span: 3858..3860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 25,
            span: 3860..3861,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 27,
            span: 3861..3863,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 28,
            span: 3863..3864,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 31,
            span: 3864..3867,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 32,
            span: 3867..3868,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 111,
            column: 35,
            span: 3869..3871,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 37,
            span: 3871..3873,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 111,
            column: 38,
            span: 3873..3874,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 40,
            span: 3873..3876,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 111,
            column: 42,
            span: 3877..3878,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 44,
            span: 3878..3880,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 45,
            span: 3880..3881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 112,
            column: 7,
            span: 3882..3888,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 8,
            span: 3888..3889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bit32",
        ),
        position: Position {
            line: 112,
            column: 13,
            span: 3889..3894,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 112,
            column: 14,
            span: 3894..3895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "replace",
        ),
        position: Position {
            line: 112,
            column: 21,
            span: 3895..3902,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 22,
            span: 3902..3903,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 112,
            column: 23,
            span: 3903..3904,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 24,
            span: 3903..3905,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 112,
            column: 25,
            span: 3905..3906,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 27,
            span: 3906..3908,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 112,
            column: 28,
            span: 3908..3909,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 30,
            span: 3909..3911,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 112,
            column: 31,
            span: 3911..3912,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 33,
            span: 3912..3914,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 34,
            span: 3914..3915,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 112,
            column: 37,
            span: 3916..3918,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 39,
            span: 3918..3920,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 112,
            column: 40,
            span: 3920..3921,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 42,
            span: 3920..3923,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 112,
            column: 44,
            span: 3924..3925,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 112,
            column: 46,
            span: 3925..3927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 47,
            span: 3927..3928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 115,
            column: 6,
            span: 3931..3936,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 115,
            column: 10,
            span: 3936..3940,
        },
    },
]
