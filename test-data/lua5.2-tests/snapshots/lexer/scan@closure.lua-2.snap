---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/closure.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing closures\"",
        ),
        line: 1,
        column: 24,
        span: 6..24,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 3,
        column: 6,
        span: 26..31,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 3,
        column: 8,
        span: 32..33,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 3,
        column: 9,
        span: 33..34,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 3,
        column: 11,
        span: 35..36,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
        column: 13,
        span: 37..38,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 3,
        column: 15,
        span: 38..40,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 3,
        column: 16,
        span: 40..41,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 3,
        column: 18,
        span: 42..43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 3,
        column: 20,
        span: 44..45,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
        column: 22,
        span: 46..47,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 3,
        column: 25,
        span: 47..50,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 3,
        column: 27,
        span: 51..52,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 4,
        column: 9,
        span: 53..61,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 4,
        column: 11,
        span: 62..63,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 12,
        span: 63..64,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 4,
        column: 13,
        span: 64..65,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 14,
        span: 65..66,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 5,
        column: 8,
        span: 69..74,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 5,
        column: 10,
        span: 75..76,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 5,
        column: 12,
        span: 77..78,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 5,
        column: 14,
        span: 79..80,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 5,
        column: 15,
        span: 80..81,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 6,
        column: 6,
        span: 84..87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 6,
        column: 8,
        span: 88..89,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 10,
        span: 90..91,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 12,
        span: 91..93,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 6,
        column: 13,
        span: 93..94,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 6,
        column: 18,
        span: 94..99,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 6,
        column: 0,
        span: 100..102,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 7,
        column: 10,
        span: 107..112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 7,
        column: 12,
        span: 113..114,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 7,
        column: 14,
        span: 115..116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 7,
        column: 0,
        span: 116..118,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 8,
        column: 0,
        span: 123..125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 9,
        column: 8,
        span: 132..133,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 9,
        column: 9,
        span: 133..134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 9,
        column: 10,
        span: 134..135,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 9,
        column: 11,
        span: 135..136,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 9,
        column: 13,
        span: 137..138,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 9,
        column: 22,
        span: 139..147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 23,
        span: 147..148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 24,
        span: 148..149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 10,
        column: 10,
        span: 158..159,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 11,
        span: 159..160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 10,
        column: 12,
        span: 160..161,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 14,
        span: 162..163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 10,
        column: 16,
        span: 164..165,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 17,
        span: 165..166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 10,
        column: 18,
        span: 166..167,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 10,
        column: 20,
        span: 168..169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 10,
        column: 22,
        span: 169..171,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 10,
        column: 23,
        span: 171..172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 10,
        column: 25,
        span: 173..174,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 27,
        span: 175..176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 10,
        column: 29,
        span: 177..178,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 10,
        column: 31,
        span: 179..180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 10,
        column: 33,
        span: 181..182,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 10,
        column: 34,
        span: 182..183,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 10,
        column: 41,
        span: 184..190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 10,
        column: 43,
        span: 191..192,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 10,
        column: 45,
        span: 193..194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 10,
        column: 0,
        span: 195..196,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 11,
        column: 0,
        span: 203..206,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 12,
        column: 0,
        span: 211..214,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 13,
        column: 0,
        span: 217..220,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 14,
        column: 8,
        span: 223..228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 14,
        column: 14,
        span: 229..234,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 16,
        span: 235..236,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 14,
        column: 25,
        span: 237..245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 26,
        span: 245..246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 27,
        span: 246..247,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 14,
        column: 34,
        span: 248..254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 14,
        column: 36,
        span: 255..256,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 14,
        column: 37,
        span: 256..257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 14,
        column: 38,
        span: 257..258,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 14,
        column: 39,
        span: 258..259,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 14,
        column: 0,
        span: 260..263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 15,
        column: 17,
        span: 266..280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 18,
        span: 280..281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 19,
        span: 281..282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 16,
        column: 4,
        span: 285..286,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 6,
        span: 287..288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 8,
        span: 288..290,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 16,
        column: 9,
        span: 290..291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 16,
        span: 292..298,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 17,
        span: 298..299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        line: 16,
        column: 22,
        span: 299..304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 23,
        span: 304..305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 24,
        span: 305..306,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 27,
        span: 307..309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 16,
        column: 29,
        span: 310..311,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 16,
        column: 30,
        span: 311..312,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 31,
        span: 311..313,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 16,
        column: 32,
        span: 313..314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 33,
        span: 314..315,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 16,
        column: 34,
        span: 315..316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 16,
        column: 36,
        span: 317..318,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 38,
        span: 319..320,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 40,
        span: 320..322,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 16,
        column: 41,
        span: 322..323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 17,
        column: 9,
        span: 326..332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 10,
        span: 332..333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 17,
        column: 11,
        span: 333..334,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 17,
        column: 12,
        span: 334..335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 13,
        span: 334..336,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 17,
        column: 14,
        span: 336..337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 15,
        span: 337..338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 16,
        span: 338..339,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 17,
        column: 19,
        span: 340..342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 17,
        column: 21,
        span: 343..344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 22,
        span: 344..345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 9,
        span: 348..354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 10,
        span: 354..355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 18,
        column: 11,
        span: 355..356,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 18,
        column: 12,
        span: 356..357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 13,
        span: 356..358,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 18,
        column: 14,
        span: 358..359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 15,
        span: 359..360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 16,
        span: 360..361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 19,
        span: 362..364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 18,
        column: 21,
        span: 365..366,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 22,
        span: 366..367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 19,
        column: 17,
        span: 370..384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 18,
        span: 384..385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 19,
        span: 385..386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
        column: 9,
        span: 389..395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 10,
        span: 395..396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 20,
        column: 11,
        span: 396..397,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 20,
        column: 12,
        span: 397..398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 20,
        column: 13,
        span: 398..399,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 20,
        column: 16,
        span: 400..402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 19,
        span: 402..405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 20,
        span: 405..406,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 21,
        column: 9,
        span: 409..415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 21,
        column: 0,
        span: 416..417,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 22,
        column: 0,
        span: 418..421,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 24,
        column: 6,
        span: 423..428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 24,
        column: 8,
        span: 429..430,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 10,
        span: 431..432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 24,
        column: 12,
        span: 433..434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 13,
        span: 434..435,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 15,
        span: 434..437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 16,
        span: 437..438,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 26,
        column: 6,
        span: 467..472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 26,
        column: 8,
        span: 473..474,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 10,
        span: 475..476,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 26,
        column: 12,
        span: 477..478,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 26,
        column: 14,
        span: 479..480,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 15,
        span: 479..481,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 26,
        column: 16,
        span: 481..482,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 18,
        span: 483..484,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 26,
        column: 20,
        span: 485..486,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 26,
        column: 21,
        span: 486..487,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 26,
        column: 23,
        span: 488..489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 27,
        column: 13,
        span: 514..526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 14,
        span: 526..527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 27,
        column: 15,
        span: 527..528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 16,
        span: 528..529,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 27,
        column: 18,
        span: 530..531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 27,
        column: 25,
        span: 532..538,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 27,
        span: 539..540,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'kv'",
        ),
        line: 27,
        column: 32,
        span: 541..545,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 27,
        column: 34,
        span: 546..547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 35,
        span: 547..548,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 28,
        column: 6,
        span: 549..554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 28,
        column: 8,
        span: 555..556,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 28,
        column: 9,
        span: 556..557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 10,
        span: 556..558,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 28,
        column: 11,
        span: 558..559,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 28,
        column: 14,
        span: 560..562,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 29,
        column: 8,
        span: 599..604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 29,
        column: 10,
        span: 605..606,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 29,
        column: 12,
        span: 607..608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 29,
        column: 14,
        span: 609..610,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 29,
        column: 17,
        span: 611..613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 29,
        column: 19,
        span: 614..615,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 29,
        column: 22,
        span: 616..618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 29,
        column: 24,
        span: 619..620,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 29,
        column: 27,
        span: 621..623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 29,
        column: 29,
        span: 624..625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 30,
        column: 4,
        span: 646..647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 6,
        span: 648..649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 30,
        column: 8,
        span: 650..651,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 30,
        column: 10,
        span: 652..653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 0,
        span: 653..655,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 31,
        column: 0,
        span: 656..659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 7,
        span: 660..666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 8,
        span: 666..667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 9,
        span: 667..668,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 32,
        column: 10,
        span: 668..669,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 11,
        span: 668..670,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 32,
        column: 12,
        span: 670..671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 13,
        span: 671..672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 14,
        span: 672..673,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 17,
        span: 674..676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 20,
        span: 676..679,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 32,
        column: 22,
        span: 680..681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 32,
        column: 24,
        span: 682..683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 25,
        span: 683..684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 7,
        span: 685..691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 8,
        span: 691..692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
        column: 9,
        span: 692..693,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 33,
        column: 10,
        span: 693..694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 11,
        span: 693..695,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 33,
        column: 12,
        span: 695..696,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 13,
        span: 696..697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 14,
        span: 697..698,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
        column: 17,
        span: 699..701,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 20,
        span: 701..704,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 33,
        column: 22,
        span: 705..706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 33,
        column: 24,
        span: 707..708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 25,
        span: 708..709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 7,
        span: 710..716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 8,
        span: 716..717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 9,
        span: 717..718,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 34,
        column: 10,
        span: 718..719,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 11,
        span: 718..720,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 34,
        column: 12,
        span: 720..721,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 13,
        span: 721..722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 14,
        span: 722..723,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 34,
        column: 17,
        span: 724..726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 20,
        span: 726..729,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 34,
        column: 22,
        span: 730..731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 34,
        column: 24,
        span: 732..733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 25,
        span: 733..734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 35,
        column: 15,
        span: 735..749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 16,
        span: 749..750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 17,
        span: 750..751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 752..758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 758..759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 9,
        span: 759..760,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 36,
        column: 10,
        span: 760..761,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 11,
        span: 760..762,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 36,
        column: 12,
        span: 762..763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 13,
        span: 763..764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 14,
        span: 764..765,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 17,
        span: 766..768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 20,
        span: 768..771,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 36,
        column: 22,
        span: 772..773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 36,
        column: 24,
        span: 774..775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 25,
        span: 775..776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 777..783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 783..784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 9,
        span: 784..785,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 37,
        column: 10,
        span: 785..786,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 11,
        span: 785..787,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 37,
        column: 12,
        span: 787..788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 13,
        span: 788..789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 14,
        span: 789..790,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 17,
        span: 791..793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 20,
        span: 793..796,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 37,
        column: 22,
        span: 797..798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 37,
        column: 24,
        span: 799..800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 25,
        span: 800..801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 7,
        span: 802..808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 8,
        span: 808..809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 9,
        span: 809..810,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 38,
        column: 10,
        span: 810..811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 11,
        span: 810..812,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 38,
        column: 12,
        span: 812..813,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 13,
        span: 813..814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 14,
        span: 814..815,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 17,
        span: 816..818,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 20,
        span: 818..821,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 38,
        column: 22,
        span: 822..823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 38,
        column: 24,
        span: 824..825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 25,
        span: 825..826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 827..833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 833..834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 39,
        column: 9,
        span: 834..835,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 39,
        column: 10,
        span: 835..836,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 11,
        span: 835..837,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 39,
        column: 12,
        span: 837..838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 13,
        span: 838..839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 14,
        span: 839..840,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 17,
        span: 841..843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 20,
        span: 843..846,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 39,
        column: 22,
        span: 847..848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 39,
        column: 24,
        span: 849..850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 25,
        span: 850..851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 40,
        column: 7,
        span: 852..858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 8,
        span: 858..859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 40,
        column: 20,
        span: 859..871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 21,
        span: 871..872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 40,
        column: 22,
        span: 872..873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 23,
        span: 873..874,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 24,
        span: 874..875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        line: 40,
        column: 30,
        span: 875..881,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 40,
        column: 33,
        span: 882..884,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'kv'",
        ),
        line: 40,
        column: 38,
        span: 885..889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 39,
        span: 889..890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 891..897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 897..898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 41,
        column: 9,
        span: 898..899,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 10,
        span: 899..900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 41,
        column: 11,
        span: 900..901,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 14,
        span: 902..904,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 17,
        span: 904..907,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 18,
        span: 907..908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 45,
        column: 2,
        span: 931..932,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 4,
        span: 933..934,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 45,
        column: 6,
        span: 935..936,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 45,
        column: 7,
        span: 936..937,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 46,
        column: 4,
        span: 938..941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 46,
        column: 6,
        span: 942..943,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 8,
        span: 944..945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 10,
        span: 945..947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 11,
        span: 947..948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 13,
        span: 948..950,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 46,
        column: 16,
        span: 951..953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 46,
        column: 18,
        span: 954..955,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 46,
        column: 19,
        span: 955..956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 46,
        column: 20,
        span: 956..957,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 46,
        column: 21,
        span: 957..958,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 23,
        span: 959..960,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 46,
        column: 32,
        span: 961..969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 33,
        span: 969..970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 46,
        column: 34,
        span: 970..971,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 35,
        span: 971..972,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 46,
        column: 42,
        span: 973..979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 46,
        column: 44,
        span: 980..981,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 46,
        column: 46,
        span: 982..983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 46,
        column: 48,
        span: 984..985,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 46,
        column: 50,
        span: 986..987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 46,
        column: 55,
        span: 988..992,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 46,
        column: 59,
        span: 993..996,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 46,
        column: 0,
        span: 997..1000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 7,
        span: 1001..1007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 8,
        span: 1007..1008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 47,
        column: 9,
        span: 1008..1009,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 47,
        column: 10,
        span: 1009..1010,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 11,
        span: 1009..1011,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 47,
        column: 12,
        span: 1011..1012,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 15,
        span: 1013..1015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 47,
        column: 17,
        span: 1016..1017,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 47,
        column: 18,
        span: 1017..1018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 19,
        span: 1017..1019,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 47,
        column: 20,
        span: 1019..1020,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 47,
        column: 24,
        span: 1021..1024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 47,
        column: 26,
        span: 1025..1026,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 47,
        column: 27,
        span: 1026..1027,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 28,
        span: 1026..1028,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 47,
        column: 29,
        span: 1028..1029,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 32,
        span: 1030..1032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 47,
        column: 34,
        span: 1033..1034,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 47,
        column: 35,
        span: 1034..1035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 36,
        span: 1034..1036,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 47,
        column: 37,
        span: 1036..1037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 38,
        span: 1037..1038,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 49,
        column: 4,
        span: 1040..1043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 49,
        column: 6,
        span: 1044..1045,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 8,
        span: 1046..1047,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 10,
        span: 1047..1049,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 11,
        span: 1049..1050,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 13,
        span: 1050..1052,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 49,
        column: 16,
        span: 1053..1055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 49,
        column: 18,
        span: 1056..1057,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 49,
        column: 19,
        span: 1057..1058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 49,
        column: 20,
        span: 1058..1059,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 49,
        column: 21,
        span: 1059..1060,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 23,
        span: 1061..1062,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 49,
        column: 32,
        span: 1063..1071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 33,
        span: 1071..1072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 49,
        column: 34,
        span: 1072..1073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 35,
        span: 1073..1074,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 49,
        column: 42,
        span: 1075..1081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 49,
        column: 44,
        span: 1082..1083,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 49,
        column: 46,
        span: 1084..1085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 49,
        column: 48,
        span: 1086..1087,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 49,
        column: 50,
        span: 1088..1089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 49,
        column: 55,
        span: 1090..1094,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 49,
        column: 59,
        span: 1095..1098,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 49,
        column: 0,
        span: 1099..1102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 50,
        column: 7,
        span: 1103..1109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 8,
        span: 1109..1110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 9,
        span: 1110..1111,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 10,
        span: 1111..1112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 11,
        span: 1111..1113,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 12,
        span: 1113..1114,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 50,
        column: 15,
        span: 1115..1117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 17,
        span: 1118..1119,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 18,
        span: 1119..1120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 19,
        span: 1119..1121,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 20,
        span: 1121..1122,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 50,
        column: 24,
        span: 1123..1126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 26,
        span: 1127..1128,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 27,
        span: 1128..1129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 28,
        span: 1128..1130,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 29,
        span: 1130..1131,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 50,
        column: 32,
        span: 1132..1134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 34,
        span: 1135..1136,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 35,
        span: 1136..1137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 36,
        span: 1136..1138,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 37,
        span: 1138..1139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 38,
        span: 1139..1140,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 52,
        column: 6,
        span: 1142..1147,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 52,
        column: 15,
        span: 1148..1156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 52,
        column: 17,
        span: 1157..1158,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 18,
        span: 1158..1159,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 19,
        span: 1159..1160,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 53,
        column: 9,
        span: 1163..1169,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 53,
        column: 18,
        span: 1170..1178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 19,
        span: 1178..1179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 53,
        column: 20,
        span: 1179..1180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 21,
        span: 1180..1181,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 53,
        column: 28,
        span: 1182..1188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 53,
        column: 33,
        span: 1189..1193,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 34,
        span: 1193..1194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 53,
        column: 37,
        span: 1194..1197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 38,
        span: 1197..1198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 53,
        column: 42,
        span: 1198..1202,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 53,
        column: 43,
        span: 1202..1203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 53,
        column: 44,
        span: 1203..1204,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 53,
        column: 45,
        span: 1204..1205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 46,
        span: 1205..1206,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 53,
        column: 0,
        span: 1207..1210,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 54,
        column: 0,
        span: 1211..1214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 7,
        span: 1215..1221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 8,
        span: 1221..1222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 55,
        column: 9,
        span: 1222..1223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 10,
        span: 1223..1224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 11,
        span: 1224..1225,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 14,
        span: 1226..1228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 55,
        column: 16,
        span: 1229..1230,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 17,
        span: 1230..1231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 18,
        span: 1231..1232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 19,
        span: 1232..1233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 2,
        span: 1284..1285,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 59,
        column: 4,
        span: 1286..1287,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 59,
        column: 6,
        span: 1288..1289,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 59,
        column: 7,
        span: 1289..1290,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 60,
        column: 4,
        span: 1291..1294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 60,
        column: 6,
        span: 1295..1296,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 60,
        column: 8,
        span: 1297..1298,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 10,
        span: 1298..1300,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 11,
        span: 1300..1301,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 14,
        span: 1301..1304,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 60,
        column: 0,
        span: 1305..1307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 61,
        column: 4,
        span: 1310..1311,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 61,
        column: 5,
        span: 1311..1312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 61,
        column: 6,
        span: 1312..1313,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 61,
        column: 7,
        span: 1313..1314,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 9,
        span: 1315..1316,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 61,
        column: 11,
        span: 1317..1318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 61,
        column: 15,
        span: 1319..1322,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 17,
        span: 1323..1324,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 61,
        column: 26,
        span: 1325..1333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 27,
        span: 1333..1334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 61,
        column: 28,
        span: 1334..1335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 29,
        span: 1335..1336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 61,
        column: 31,
        span: 1337..1338,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 33,
        span: 1339..1340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 61,
        column: 35,
        span: 1341..1342,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 61,
        column: 39,
        span: 1343..1346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 40,
        span: 1346..1347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 61,
        column: 44,
        span: 1348..1351,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 46,
        span: 1352..1353,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 61,
        column: 55,
        span: 1354..1362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 56,
        span: 1362..1363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 57,
        span: 1363..1364,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 61,
        column: 64,
        span: 1365..1371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 61,
        column: 66,
        span: 1372..1373,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 61,
        column: 70,
        span: 1374..1377,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 61,
        column: 72,
        span: 1378..1379,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 62,
        column: 5,
        span: 1382..1384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 62,
        column: 7,
        span: 1385..1386,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 10,
        span: 1387..1389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 12,
        span: 1389..1391,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 62,
        column: 17,
        span: 1392..1396,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 62,
        column: 23,
        span: 1397..1402,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 62,
        column: 0,
        span: 1403..1406,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 63,
        column: 0,
        span: 1407..1410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
        column: 7,
        span: 1411..1417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 8,
        span: 1417..1418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 64,
        column: 9,
        span: 1418..1419,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 64,
        column: 10,
        span: 1419..1420,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 11,
        span: 1419..1421,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 64,
        column: 12,
        span: 1421..1422,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
        column: 15,
        span: 1423..1425,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 64,
        column: 19,
        span: 1426..1429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 20,
        span: 1429..1430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 65,
        column: 2,
        span: 1431..1432,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 65,
        column: 3,
        span: 1432..1433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 4,
        span: 1432..1434,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 65,
        column: 5,
        span: 1434..1435,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 6,
        span: 1435..1436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 65,
        column: 9,
        span: 1436..1439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 10,
        span: 1439..1440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 12,
        span: 1439..1442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 13,
        span: 1442..1443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
        column: 7,
        span: 1444..1450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 8,
        span: 1450..1451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 66,
        column: 9,
        span: 1451..1452,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 66,
        column: 10,
        span: 1452..1453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 11,
        span: 1452..1454,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 66,
        column: 12,
        span: 1454..1455,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
        column: 13,
        span: 1455..1456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 66,
        column: 16,
        span: 1456..1459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 17,
        span: 1459..1460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 18,
        span: 1460..1461,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 66,
        column: 21,
        span: 1462..1464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 23,
        span: 1464..1466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 24,
        span: 1466..1467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
        column: 2,
        span: 1468..1469,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 67,
        column: 3,
        span: 1469..1470,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 4,
        span: 1469..1471,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 67,
        column: 5,
        span: 1471..1472,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 6,
        span: 1472..1473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 67,
        column: 9,
        span: 1473..1476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 10,
        span: 1476..1477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 67,
        column: 13,
        span: 1477..1480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 14,
        span: 1480..1481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 7,
        span: 1482..1488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 8,
        span: 1488..1489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 68,
        column: 9,
        span: 1489..1490,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 68,
        column: 10,
        span: 1490..1491,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 11,
        span: 1490..1492,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 68,
        column: 12,
        span: 1492..1493,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 13,
        span: 1493..1494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 68,
        column: 16,
        span: 1494..1497,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 17,
        span: 1497..1498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 18,
        span: 1498..1499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 68,
        column: 21,
        span: 1500..1502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 23,
        span: 1502..1504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 24,
        span: 1504..1505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 1506..1512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 1512..1513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 69,
        column: 9,
        span: 1513..1514,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 69,
        column: 10,
        span: 1514..1515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 11,
        span: 1514..1516,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 69,
        column: 12,
        span: 1516..1517,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 13,
        span: 1517..1518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 69,
        column: 16,
        span: 1518..1521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 17,
        span: 1521..1522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 18,
        span: 1522..1523,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 21,
        span: 1524..1526,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 69,
        column: 25,
        span: 1527..1530,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 26,
        span: 1530..1531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 71,
        column: 2,
        span: 1533..1534,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 4,
        span: 1535..1536,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 71,
        column: 6,
        span: 1537..1538,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 71,
        column: 7,
        span: 1538..1539,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 72,
        column: 6,
        span: 1540..1545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 72,
        column: 8,
        span: 1546..1547,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 10,
        span: 1548..1549,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 72,
        column: 12,
        span: 1550..1551,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 72,
        column: 16,
        span: 1552..1555,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 17,
        span: 1555..1556,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 72,
        column: 21,
        span: 1557..1560,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 72,
        column: 23,
        span: 1561..1562,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 73,
        column: 4,
        span: 1563..1566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 73,
        column: 6,
        span: 1567..1568,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 8,
        span: 1569..1570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 10,
        span: 1570..1572,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 11,
        span: 1572..1573,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 73,
        column: 13,
        span: 1574..1575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 73,
        column: 14,
        span: 1575..1576,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 73,
        column: 0,
        span: 1577..1579,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 74,
        column: 8,
        span: 1582..1587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 74,
        column: 10,
        span: 1588..1589,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 74,
        column: 12,
        span: 1590..1591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 74,
        column: 14,
        span: 1592..1593,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 74,
        column: 15,
        span: 1593..1594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 74,
        column: 16,
        span: 1594..1595,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 74,
        column: 17,
        span: 1595..1596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 75,
        column: 4,
        span: 1599..1600,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 75,
        column: 5,
        span: 1600..1601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 75,
        column: 6,
        span: 1601..1602,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 75,
        column: 7,
        span: 1602..1603,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 75,
        column: 9,
        span: 1604..1605,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 75,
        column: 11,
        span: 1606..1607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 76,
        column: 8,
        span: 1612..1615,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 76,
        column: 10,
        span: 1616..1617,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 76,
        column: 19,
        span: 1618..1626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 20,
        span: 1626..1627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 76,
        column: 21,
        span: 1627..1628,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 22,
        span: 1628..1629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 76,
        column: 24,
        span: 1630..1631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 25,
        span: 1631..1632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 77,
        column: 8,
        span: 1639..1640,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 77,
        column: 10,
        span: 1641..1642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 77,
        column: 12,
        span: 1643..1644,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 77,
        column: 13,
        span: 1644..1645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 77,
        column: 15,
        span: 1646..1647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 77,
        column: 17,
        span: 1648..1649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 77,
        column: 0,
        span: 1650..1651,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 78,
        column: 8,
        span: 1656..1659,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 9,
        span: 1659..1660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 79,
        column: 8,
        span: 1665..1668,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 10,
        span: 1669..1670,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 79,
        column: 19,
        span: 1671..1679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 20,
        span: 1679..1680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 21,
        span: 1680..1681,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 79,
        column: 28,
        span: 1682..1688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 79,
        column: 30,
        span: 1689..1690,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 31,
        span: 1690..1691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 79,
        column: 33,
        span: 1692..1693,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 79,
        column: 0,
        span: 1694..1697,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 80,
        column: 4,
        span: 1700..1701,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 81,
        column: 5,
        span: 1704..1706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 81,
        column: 7,
        span: 1707..1708,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
        column: 10,
        span: 1709..1711,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 12,
        span: 1711..1713,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 81,
        column: 17,
        span: 1714..1718,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 81,
        column: 23,
        span: 1719..1724,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 81,
        column: 0,
        span: 1725..1728,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 82,
        column: 0,
        span: 1729..1732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 83,
        column: 2,
        span: 1733..1734,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 83,
        column: 3,
        span: 1734..1735,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 4,
        span: 1734..1736,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 83,
        column: 5,
        span: 1736..1737,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 83,
        column: 6,
        span: 1737..1738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 83,
        column: 9,
        span: 1738..1741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 10,
        span: 1741..1742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 12,
        span: 1741..1744,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 13,
        span: 1744..1745,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 16,
        span: 1745..1748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 17,
        span: 1748..1749,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 84,
        column: 6,
        span: 1750..1755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 84,
        column: 8,
        span: 1756..1757,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 9,
        span: 1757..1758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 84,
        column: 11,
        span: 1759..1760,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 13,
        span: 1761..1762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
        column: 15,
        span: 1763..1764,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 84,
        column: 16,
        span: 1764..1765,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 17,
        span: 1764..1766,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 84,
        column: 18,
        span: 1766..1767,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 84,
        column: 19,
        span: 1767..1768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 84,
        column: 22,
        span: 1768..1771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 23,
        span: 1771..1772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 24,
        span: 1772..1773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
        column: 7,
        span: 1774..1780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 8,
        span: 1780..1781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 85,
        column: 9,
        span: 1781..1782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 12,
        span: 1783..1785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 14,
        span: 1785..1787,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 85,
        column: 18,
        span: 1788..1791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 85,
        column: 20,
        span: 1792..1793,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 23,
        span: 1794..1796,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 85,
        column: 27,
        span: 1797..1800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 28,
        span: 1800..1801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 86,
        column: 2,
        span: 1802..1803,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 3,
        span: 1803..1804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 86,
        column: 5,
        span: 1805..1806,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 7,
        span: 1807..1808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 86,
        column: 9,
        span: 1809..1810,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 86,
        column: 10,
        span: 1810..1811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 11,
        span: 1810..1812,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 86,
        column: 12,
        span: 1812..1813,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
        column: 13,
        span: 1813..1814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 86,
        column: 16,
        span: 1814..1817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 17,
        span: 1817..1818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 18,
        span: 1818..1819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
        column: 7,
        span: 1820..1826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 8,
        span: 1826..1827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 87,
        column: 9,
        span: 1827..1828,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 12,
        span: 1829..1831,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 15,
        span: 1831..1834,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 87,
        column: 19,
        span: 1835..1838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 87,
        column: 21,
        span: 1839..1840,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 24,
        span: 1841..1843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 27,
        span: 1843..1846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 28,
        span: 1846..1847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 88,
        column: 2,
        span: 1848..1849,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 88,
        column: 3,
        span: 1849..1850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 4,
        span: 1849..1851,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 88,
        column: 5,
        span: 1851..1852,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 6,
        span: 1852..1853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "set",
        ),
        line: 88,
        column: 9,
        span: 1853..1856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 10,
        span: 1856..1857,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 88,
        column: 13,
        span: 1857..1860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 14,
        span: 1860..1861,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 88,
        column: 18,
        span: 1862..1865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 19,
        span: 1865..1866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 89,
        column: 2,
        span: 1867..1868,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 3,
        span: 1868..1869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 89,
        column: 5,
        span: 1870..1871,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 89,
        column: 7,
        span: 1872..1873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 89,
        column: 9,
        span: 1874..1875,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 89,
        column: 10,
        span: 1875..1876,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 11,
        span: 1875..1877,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 89,
        column: 12,
        span: 1877..1878,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
        column: 13,
        span: 1878..1879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "get",
        ),
        line: 89,
        column: 16,
        span: 1879..1882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 17,
        span: 1882..1883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 18,
        span: 1883..1884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 90,
        column: 7,
        span: 1885..1891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 8,
        span: 1891..1892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 90,
        column: 9,
        span: 1892..1893,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 90,
        column: 12,
        span: 1894..1896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 90,
        column: 16,
        span: 1897..1900,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 90,
        column: 20,
        span: 1901..1904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 90,
        column: 22,
        span: 1905..1906,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 90,
        column: 25,
        span: 1907..1909,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 90,
        column: 29,
        span: 1910..1913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 30,
        span: 1913..1914,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 94,
        column: 4,
        span: 1973..1976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 94,
        column: 6,
        span: 1977..1978,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 94,
        column: 8,
        span: 1979..1980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 10,
        span: 1980..1982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 11,
        span: 1982..1983,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 13,
        span: 1983..1985,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 94,
        column: 0,
        span: 1986..1988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 95,
        column: 4,
        span: 1991..1992,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 6,
        span: 1993..1994,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 95,
        column: 15,
        span: 1995..2003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 16,
        span: 2003..2004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 17,
        span: 2004..2005,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 95,
        column: 24,
        span: 2006..2012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 95,
        column: 26,
        span: 2013..2014,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 95,
        column: 0,
        span: 2015..2018,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 96,
        column: 0,
        span: 2021..2026,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 97,
        column: 0,
        span: 2027..2030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
        column: 7,
        span: 2031..2037,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 8,
        span: 2037..2038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 98,
        column: 9,
        span: 2038..2039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 10,
        span: 2039..2040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 11,
        span: 2040..2041,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 14,
        span: 2042..2044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 16,
        span: 2044..2046,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 17,
        span: 2046..2047,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 100,
        column: 4,
        span: 2049..2052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 100,
        column: 6,
        span: 2053..2054,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 8,
        span: 2055..2056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 10,
        span: 2056..2058,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 11,
        span: 2058..2059,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 100,
        column: 13,
        span: 2060..2061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 100,
        column: 14,
        span: 2061..2062,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 100,
        column: 0,
        span: 2063..2065,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 101,
        column: 8,
        span: 2068..2073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 101,
        column: 10,
        span: 2074..2075,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 12,
        span: 2076..2077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 101,
        column: 14,
        span: 2078..2079,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 101,
        column: 15,
        span: 2079..2080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 101,
        column: 16,
        span: 2080..2081,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 101,
        column: 17,
        span: 2081..2082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 102,
        column: 4,
        span: 2085..2086,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
        column: 6,
        span: 2087..2088,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 102,
        column: 15,
        span: 2089..2097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 16,
        span: 2097..2098,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 17,
        span: 2098..2099,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 102,
        column: 24,
        span: 2100..2106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 102,
        column: 26,
        span: 2107..2108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 27,
        span: 2108..2109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 102,
        column: 29,
        span: 2110..2111,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 102,
        column: 0,
        span: 2112..2115,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 103,
        column: 0,
        span: 2118..2123,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 104,
        column: 0,
        span: 2124..2127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 105,
        column: 7,
        span: 2128..2134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 8,
        span: 2134..2135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 9,
        span: 2135..2136,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 105,
        column: 10,
        span: 2136..2137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 105,
        column: 12,
        span: 2138..2139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 13,
        span: 2139..2140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 14,
        span: 2140..2141,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 105,
        column: 16,
        span: 2142..2143,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 17,
        span: 2143..2144,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 105,
        column: 18,
        span: 2144..2145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 19,
        span: 2144..2146,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 105,
        column: 20,
        span: 2146..2147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 105,
        column: 23,
        span: 2148..2150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 25,
        span: 2150..2152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 26,
        span: 2152..2153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 106,
        column: 7,
        span: 2154..2160,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 8,
        span: 2160..2161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 9,
        span: 2161..2162,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 106,
        column: 10,
        span: 2162..2163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 106,
        column: 12,
        span: 2164..2165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 13,
        span: 2165..2166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 14,
        span: 2166..2167,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 106,
        column: 16,
        span: 2168..2169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 17,
        span: 2169..2170,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 106,
        column: 18,
        span: 2170..2171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 19,
        span: 2170..2172,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 106,
        column: 20,
        span: 2172..2173,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 106,
        column: 23,
        span: 2174..2176,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 106,
        column: 27,
        span: 2177..2180,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 28,
        span: 2180..2181,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 111,
        column: 6,
        span: 2230..2235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 111,
        column: 0,
        span: 2236..2237,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 112,
        column: 9,
        span: 2238..2246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 112,
        column: 11,
        span: 2247..2248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 12,
        span: 2248..2249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 112,
        column: 13,
        span: 2249..2250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 14,
        span: 2250..2251,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 113,
        column: 8,
        span: 2254..2259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 113,
        column: 14,
        span: 2260..2265,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 113,
        column: 16,
        span: 2266..2267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 0,
        span: 2267..2269,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 114,
        column: 8,
        span: 2272..2277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 10,
        span: 2277..2279,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 114,
        column: 0,
        span: 2280..2282,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 115,
        column: 7,
        span: 2287..2289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 115,
        column: 9,
        span: 2290..2291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 12,
        span: 2292..2294,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 14,
        span: 2294..2296,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 115,
        column: 18,
        span: 2297..2300,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 115,
        column: 22,
        span: 2301..2304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 115,
        column: 28,
        span: 2305..2310,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 115,
        column: 33,
        span: 2311..2315,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 115,
        column: 40,
        span: 2316..2322,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 115,
        column: 0,
        span: 2323..2326,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 116,
        column: 10,
        span: 2331..2336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 116,
        column: 12,
        span: 2337..2338,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 116,
        column: 14,
        span: 2339..2340,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 116,
        column: 21,
        span: 2341..2347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 117,
        column: 6,
        span: 2352..2353,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 117,
        column: 8,
        span: 2354..2355,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 117,
        column: 17,
        span: 2356..2364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 18,
        span: 2364..2365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 117,
        column: 20,
        span: 2365..2367,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 21,
        span: 2367..2368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 117,
        column: 23,
        span: 2369..2370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 24,
        span: 2370..2371,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 118,
        column: 9,
        span: 2378..2380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 118,
        column: 12,
        span: 2381..2383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 15,
        span: 2384..2386,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 118,
        column: 21,
        span: 2387..2392,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 118,
        column: 0,
        span: 2393..2397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 10,
        span: 2406..2407,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
        column: 12,
        span: 2408..2409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 119,
        column: 14,
        span: 2410..2411,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 119,
        column: 16,
        span: 2412..2413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 119,
        column: 0,
        span: 2414..2415,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 120,
        column: 0,
        span: 2422..2426,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 121,
        column: 15,
        span: 2435..2441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 0,
        span: 2442..2443,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 122,
        column: 0,
        span: 2450..2453,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 123,
        column: 0,
        span: 2458..2461,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 124,
        column: 7,
        span: 2466..2468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 124,
        column: 9,
        span: 2469..2470,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 12,
        span: 2471..2473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 14,
        span: 2473..2475,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 124,
        column: 0,
        span: 2476..2480,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 125,
        column: 9,
        span: 2487..2489,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 125,
        column: 15,
        span: 2490..2495,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 125,
        column: 0,
        span: 2496..2499,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 126,
        column: 11,
        span: 2504..2510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 126,
        column: 13,
        span: 2511..2512,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 16,
        span: 2513..2515,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 18,
        span: 2515..2517,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 126,
        column: 0,
        span: 2518..2522,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 127,
        column: 0,
        span: 2529..2535,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 128,
        column: 0,
        span: 2540..2544,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 129,
        column: 9,
        span: 2551..2553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 129,
        column: 11,
        span: 2554..2555,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 129,
        column: 14,
        span: 2556..2558,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 16,
        span: 2558..2560,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 129,
        column: 21,
        span: 2561..2565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 129,
        column: 27,
        span: 2566..2571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 28,
        span: 2571..2572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 29,
        span: 2572..2573,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 129,
        column: 0,
        span: 2574..2577,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 130,
        column: 0,
        span: 2582..2585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "first",
        ),
        line: 131,
        column: 10,
        span: 2590..2595,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 131,
        column: 12,
        span: 2596..2597,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 131,
        column: 0,
        span: 2598..2601,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
        column: 0,
        span: 2604..2607,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 133,
        column: 0,
        span: 2608..2611,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 135,
        column: 4,
        span: 2613..2616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 135,
        column: 6,
        span: 2617..2618,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 135,
        column: 8,
        span: 2619..2620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
        column: 10,
        span: 2620..2622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 11,
        span: 2622..2623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
        column: 13,
        span: 2623..2625,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 135,
        column: 0,
        span: 2626..2628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 136,
        column: 4,
        span: 2631..2632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 5,
        span: 2632..2633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 136,
        column: 6,
        span: 2633..2634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 7,
        span: 2634..2635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
        column: 9,
        span: 2638..2644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 10,
        span: 2644..2645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 137,
        column: 11,
        span: 2645..2646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 12,
        span: 2646..2647,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 137,
        column: 17,
        span: 2647..2652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 18,
        span: 2652..2653,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 21,
        span: 2654..2656,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 137,
        column: 28,
        span: 2657..2663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 29,
        span: 2663..2664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 138,
        column: 4,
        span: 2667..2668,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 5,
        span: 2668..2669,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 138,
        column: 10,
        span: 2669..2674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 11,
        span: 2674..2675,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 14,
        span: 2675..2678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 15,
        span: 2678..2679,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 138,
        column: 16,
        span: 2679..2680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 23,
        span: 2681..2687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 24,
        span: 2687..2688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 138,
        column: 25,
        span: 2688..2689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 26,
        span: 2689..2690,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 138,
        column: 31,
        span: 2690..2695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 32,
        span: 2695..2696,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 35,
        span: 2697..2699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 38,
        span: 2699..2702,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 138,
        column: 40,
        span: 2703..2704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 138,
        column: 42,
        span: 2705..2706,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 43,
        span: 2706..2707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 139,
        column: 4,
        span: 2710..2711,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 139,
        column: 6,
        span: 2712..2713,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 139,
        column: 0,
        span: 2714..2717,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 140,
        column: 0,
        span: 2718..2721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 142,
        column: 6,
        span: 2723..2728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 7,
        span: 2728..2729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 142,
        column: 8,
        span: 2729..2730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 9,
        span: 2730..2731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 11,
        span: 2731..2733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 12,
        span: 2733..2734,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 142,
        column: 13,
        span: 2734..2735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 143,
        column: 7,
        span: 2736..2742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 8,
        span: 2742..2743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 143,
        column: 9,
        span: 2743..2744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 10,
        span: 2744..2745,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 143,
        column: 15,
        span: 2745..2750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 16,
        span: 2750..2751,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 19,
        span: 2752..2754,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 143,
        column: 26,
        span: 2755..2761,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 27,
        span: 2761..2762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 144,
        column: 2,
        span: 2763..2764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 3,
        span: 2764..2765,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'set'",
        ),
        line: 144,
        column: 8,
        span: 2765..2770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 9,
        span: 2770..2771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 12,
        span: 2771..2774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 13,
        span: 2774..2775,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 144,
        column: 14,
        span: 2775..2776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
        column: 21,
        span: 2777..2783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 22,
        span: 2783..2784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 144,
        column: 23,
        span: 2784..2785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 24,
        span: 2785..2786,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'get'",
        ),
        line: 144,
        column: 29,
        span: 2786..2791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 30,
        span: 2791..2792,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 33,
        span: 2793..2795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 36,
        span: 2795..2798,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 37,
        span: 2798..2799,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 147,
        column: 6,
        span: 2802..2807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 147,
        column: 0,
        span: 2808..2809,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 149,
        column: 9,
        span: 2841..2849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 149,
        column: 11,
        span: 2850..2851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 12,
        span: 2851..2852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 149,
        column: 13,
        span: 2852..2853,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 14,
        span: 2853..2854,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 150,
        column: 9,
        span: 2857..2863,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 150,
        column: 18,
        span: 2864..2872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 19,
        span: 2872..2873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 150,
        column: 20,
        span: 2873..2874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 21,
        span: 2874..2875,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 151,
        column: 11,
        span: 2880..2886,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 151,
        column: 20,
        span: 2887..2895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 21,
        span: 2895..2896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 151,
        column: 22,
        span: 2896..2897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 23,
        span: 2897..2898,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 151,
        column: 30,
        span: 2899..2905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 151,
        column: 32,
        span: 2906..2907,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 151,
        column: 34,
        span: 2908..2909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 151,
        column: 36,
        span: 2910..2911,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 151,
        column: 38,
        span: 2912..2913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 151,
        column: 40,
        span: 2914..2915,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 151,
        column: 42,
        span: 2916..2917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 151,
        column: 44,
        span: 2918..2919,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 151,
        column: 0,
        span: 2920..2923,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 152,
        column: 0,
        span: 2926..2929,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 153,
        column: 0,
        span: 2930..2933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 155,
        column: 2,
        span: 2935..2936,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 155,
        column: 4,
        span: 2937..2938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 155,
        column: 6,
        span: 2939..2940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 7,
        span: 2940..2941,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 9,
        span: 2940..2943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 10,
        span: 2943..2944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 156,
        column: 2,
        span: 2945..2946,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 156,
        column: 4,
        span: 2947..2948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".345",
                },
            ),
        ),
        line: 156,
        column: 0,
        span: 2948..2954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 157,
        column: 7,
        span: 2955..2961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 8,
        span: 2961..2962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 157,
        column: 9,
        span: 2962..2963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 10,
        span: 2963..2964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 12,
        span: 2963..2966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 13,
        span: 2966..2967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 14,
        span: 2967..2968,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 16,
        span: 2967..2970,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 17,
        span: 2970..2971,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 157,
        column: 20,
        span: 2972..2974,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 23,
        span: 2974..2977,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 157,
        column: 25,
        span: 2978..2979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 157,
        column: 27,
        span: 2980..2981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 28,
        span: 2981..2982,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 161,
        column: 6,
        span: 3020..3025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 161,
        column: 8,
        span: 3026..3027,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 10,
        span: 3028..3029,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 161,
        column: 12,
        span: 3030..3031,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 161,
        column: 13,
        span: 3031..3032,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 162,
        column: 6,
        span: 3033..3038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 162,
        column: 8,
        span: 3039..3040,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 162,
        column: 10,
        span: 3041..3042,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 0,
        span: 3042..3044,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 163,
        column: 0,
        span: 3045..3051,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 164,
        column: 8,
        span: 3054..3059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 164,
        column: 10,
        span: 3060..3061,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 164,
        column: 12,
        span: 3062..3063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 164,
        column: 0,
        span: 3064..3065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 165,
        column: 4,
        span: 3068..3069,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 165,
        column: 5,
        span: 3069..3070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 165,
        column: 6,
        span: 3070..3071,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 165,
        column: 7,
        span: 3071..3072,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 9,
        span: 3073..3074,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 165,
        column: 18,
        span: 3075..3083,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 19,
        span: 3083..3084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 20,
        span: 3084..3085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 166,
        column: 6,
        span: 3090..3091,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 166,
        column: 8,
        span: 3092..3093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 166,
        column: 10,
        span: 3094..3095,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 166,
        column: 12,
        span: 3096..3097,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 14,
        span: 3097..3099,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 166,
        column: 15,
        span: 3099..3100,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 166,
        column: 22,
        span: 3101..3107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 166,
        column: 0,
        span: 3108..3109,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 167,
        column: 0,
        span: 3112..3115,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 168,
        column: 6,
        span: 3116..3121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 168,
        column: 8,
        span: 3122..3123,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 168,
        column: 10,
        span: 3124..3125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 13,
        span: 3125..3128,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 168,
        column: 16,
        span: 3129..3131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 168,
        column: 18,
        span: 3132..3133,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 168,
        column: 19,
        span: 3133..3134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 168,
        column: 20,
        span: 3134..3135,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 168,
        column: 21,
        span: 3135..3136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 22,
        span: 3136..3137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 23,
        span: 3137..3138,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 168,
        column: 26,
        span: 3139..3141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 168,
        column: 0,
        span: 3142..3143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 7,
        span: 3144..3150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 8,
        span: 3150..3151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 169,
        column: 9,
        span: 3151..3152,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 12,
        span: 3153..3155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 15,
        span: 3155..3158,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 19,
        span: 3159..3162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 169,
        column: 21,
        span: 3163..3164,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 169,
        column: 22,
        span: 3164..3165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 23,
        span: 3164..3166,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 169,
        column: 24,
        span: 3166..3167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 25,
        span: 3167..3168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 26,
        span: 3168..3169,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 29,
        span: 3170..3172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 31,
        span: 3172..3174,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 35,
        span: 3175..3178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 169,
        column: 37,
        span: 3179..3180,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 169,
        column: 38,
        span: 3180..3181,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 39,
        span: 3180..3182,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 169,
        column: 40,
        span: 3182..3183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 41,
        span: 3183..3184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 42,
        span: 3184..3185,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 45,
        span: 3186..3188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 47,
        span: 3188..3190,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 51,
        span: 3191..3194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 169,
        column: 53,
        span: 3195..3196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 56,
        span: 3197..3199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 58,
        span: 3199..3201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 59,
        span: 3201..3202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 173,
        column: 2,
        span: 3269..3270,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 173,
        column: 4,
        span: 3271..3272,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 173,
        column: 6,
        span: 3273..3274,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 173,
        column: 7,
        span: 3274..3275,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 174,
        column: 4,
        span: 3276..3279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 174,
        column: 6,
        span: 3280..3281,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 8,
        span: 3282..3283,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 10,
        span: 3283..3285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 174,
        column: 11,
        span: 3285..3286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 14,
        span: 3286..3289,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 174,
        column: 0,
        span: 3290..3292,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 175,
        column: 5,
        span: 3295..3297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 175,
        column: 7,
        span: 3298..3299,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 175,
        column: 9,
        span: 3300..3301,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 11,
        span: 3301..3303,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 14,
        span: 3304..3306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 16,
        span: 3306..3308,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 175,
        column: 0,
        span: 3309..3313,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 176,
        column: 10,
        span: 3318..3323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 176,
        column: 12,
        span: 3324..3325,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 176,
        column: 14,
        span: 3326..3327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 0,
        span: 3327..3329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 177,
        column: 6,
        span: 3334..3335,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 177,
        column: 7,
        span: 3335..3336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 177,
        column: 8,
        span: 3336..3337,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 177,
        column: 9,
        span: 3337..3338,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 177,
        column: 11,
        span: 3339..3340,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 177,
        column: 20,
        span: 3341..3349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 21,
        span: 3349..3350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 177,
        column: 22,
        span: 3350..3351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 23,
        span: 3351..3352,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 178,
        column: 12,
        span: 3359..3364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 178,
        column: 14,
        span: 3365..3366,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 16,
        span: 3367..3368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 178,
        column: 18,
        span: 3369..3370,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 178,
        column: 19,
        span: 3370..3371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 178,
        column: 21,
        span: 3372..3373,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 23,
        span: 3374..3375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 178,
        column: 25,
        span: 3376..3377,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 178,
        column: 26,
        span: 3377..3378,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 178,
        column: 33,
        span: 3379..3385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 178,
        column: 0,
        span: 3386..3387,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 179,
        column: 0,
        span: 3392..3395,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 180,
        column: 9,
        span: 3398..3404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 180,
        column: 11,
        span: 3405..3406,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 180,
        column: 13,
        span: 3407..3408,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 15,
        span: 3408..3410,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 180,
        column: 18,
        span: 3411..3413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 20,
        span: 3413..3415,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 180,
        column: 0,
        span: 3416..3420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 181,
        column: 10,
        span: 3425..3430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not here'",
        ),
        line: 181,
        column: 21,
        span: 3431..3441,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 183,
        column: 10,
        span: 3447..3452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 183,
        column: 12,
        span: 3453..3454,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 183,
        column: 14,
        span: 3455..3456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 0,
        span: 3456..3458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 184,
        column: 6,
        span: 3463..3464,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 184,
        column: 7,
        span: 3464..3465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 184,
        column: 8,
        span: 3465..3466,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 184,
        column: 9,
        span: 3466..3467,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
        column: 11,
        span: 3468..3469,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 184,
        column: 20,
        span: 3470..3478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 21,
        span: 3478..3479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 184,
        column: 22,
        span: 3479..3480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 23,
        span: 3480..3481,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 185,
        column: 12,
        span: 3488..3493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 185,
        column: 14,
        span: 3494..3495,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 16,
        span: 3496..3497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 185,
        column: 18,
        span: 3498..3499,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 185,
        column: 19,
        span: 3499..3500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 185,
        column: 21,
        span: 3501..3502,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 23,
        span: 3503..3504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 185,
        column: 25,
        span: 3505..3506,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 185,
        column: 26,
        span: 3506..3507,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 185,
        column: 33,
        span: 3508..3514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 185,
        column: 0,
        span: 3515..3516,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 186,
        column: 0,
        span: 3521..3524,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 187,
        column: 9,
        span: 3527..3533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 187,
        column: 11,
        span: 3534..3535,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 187,
        column: 13,
        span: 3536..3537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 15,
        span: 3537..3539,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 18,
        span: 3540..3542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 20,
        span: 3542..3544,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 187,
        column: 0,
        span: 3545..3549,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 188,
        column: 10,
        span: 3554..3559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 188,
        column: 0,
        span: 3560..3561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 191,
        column: 6,
        span: 3568..3569,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 191,
        column: 7,
        span: 3569..3570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 191,
        column: 8,
        span: 3570..3571,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 191,
        column: 9,
        span: 3571..3572,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 191,
        column: 11,
        span: 3573..3574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 191,
        column: 13,
        span: 3575..3576,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 191,
        column: 14,
        span: 3576..3577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 192,
        column: 10,
        span: 3582..3587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 11,
        span: 3587..3588,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 192,
        column: 34,
        span: 3588..3611,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 35,
        span: 3611..3612,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 194,
        column: 10,
        span: 3618..3623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 194,
        column: 12,
        span: 3624..3625,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 194,
        column: 14,
        span: 3626..3627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 0,
        span: 3627..3629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 195,
        column: 6,
        span: 3634..3635,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
        column: 8,
        span: 3636..3637,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 195,
        column: 17,
        span: 3638..3646,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 18,
        span: 3646..3647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 195,
        column: 19,
        span: 3647..3648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 20,
        span: 3648..3649,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 196,
        column: 12,
        span: 3656..3661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 196,
        column: 14,
        span: 3662..3663,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 196,
        column: 16,
        span: 3664..3665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 196,
        column: 18,
        span: 3666..3667,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 196,
        column: 19,
        span: 3667..3668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 196,
        column: 21,
        span: 3669..3670,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 196,
        column: 23,
        span: 3671..3672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 196,
        column: 25,
        span: 3673..3674,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 196,
        column: 26,
        span: 3674..3675,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 196,
        column: 33,
        span: 3676..3682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 196,
        column: 0,
        span: 3683..3684,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 197,
        column: 0,
        span: 3689..3692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 199,
        column: 10,
        span: 3698..3703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 11,
        span: 3703..3704,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 199,
        column: 34,
        span: 3704..3727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 35,
        span: 3727..3728,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 200,
        column: 0,
        span: 3731..3734,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 201,
        column: 0,
        span: 3735..3738,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 203,
        column: 4,
        span: 3740..3743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 203,
        column: 6,
        span: 3744..3745,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
        column: 8,
        span: 3746..3747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 10,
        span: 3747..3749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 11,
        span: 3749..3750,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 14,
        span: 3750..3753,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 203,
        column: 0,
        span: 3754..3756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 204,
        column: 9,
        span: 3759..3765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 10,
        span: 3765..3766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 204,
        column: 11,
        span: 3766..3767,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 204,
        column: 12,
        span: 3767..3768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 204,
        column: 13,
        span: 3768..3769,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 204,
        column: 14,
        span: 3769..3770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 15,
        span: 3770..3771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 204,
        column: 16,
        span: 3771..3772,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 204,
        column: 18,
        span: 3773..3774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 21,
        span: 3774..3777,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 22,
        span: 3777..3778,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 25,
        span: 3779..3781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 204,
        column: 27,
        span: 3782..3783,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 204,
        column: 29,
        span: 3784..3785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 31,
        span: 3785..3787,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 204,
        column: 35,
        span: 3788..3791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 204,
        column: 37,
        span: 3792..3793,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 204,
        column: 38,
        span: 3793..3794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 204,
        column: 39,
        span: 3794..3795,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 204,
        column: 40,
        span: 3795..3796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 41,
        span: 3796..3797,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 42,
        span: 3797..3798,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 204,
        column: 45,
        span: 3799..3801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 204,
        column: 47,
        span: 3802..3803,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 204,
        column: 49,
        span: 3804..3805,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 204,
        column: 52,
        span: 3805..3808,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 53,
        span: 3808..3809,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 205,
        column: 0,
        span: 3810..3813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 207,
        column: 6,
        span: 3815..3820,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 207,
        column: 10,
        span: 3821..3824,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 211,
        column: 6,
        span: 3900..3905,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 211,
        column: 15,
        span: 3906..3914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 211,
        column: 17,
        span: 3915..3916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 18,
        span: 3916..3917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 19,
        span: 3917..3918,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 212,
        column: 8,
        span: 3921..3926,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 212,
        column: 17,
        span: 3927..3935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 212,
        column: 19,
        span: 3936..3937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 20,
        span: 3937..3938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 212,
        column: 21,
        span: 3938..3939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 22,
        span: 3939..3940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 212,
        column: 24,
        span: 3941..3942,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 25,
        span: 3942..3943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 212,
        column: 32,
        span: 3944..3950,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 33,
        span: 3950..3951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 212,
        column: 34,
        span: 3951..3952,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 212,
        column: 37,
        span: 3953..3955,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"test\"",
        ),
        line: 212,
        column: 44,
        span: 3956..3962,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 212,
        column: 48,
        span: 3963..3966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 212,
        column: 50,
        span: 3967..3968,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 212,
        column: 53,
        span: 3969..3971,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 212,
        column: 58,
        span: 3972..3976,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 59,
        span: 3976..3977,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 212,
        column: 0,
        span: 3978..3981,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 213,
        column: 8,
        span: 3984..3989,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 213,
        column: 17,
        span: 3990..3998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 213,
        column: 19,
        span: 3999..4000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 20,
        span: 4000..4001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 213,
        column: 21,
        span: 4001..4002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 22,
        span: 4002..4003,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 213,
        column: 26,
        span: 4004..4007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 27,
        span: 4007..4008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 213,
        column: 29,
        span: 4009..4010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 30,
        span: 4010..4011,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"test\"",
        ),
        line: 213,
        column: 36,
        span: 4011..4017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 37,
        span: 4017..4018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 213,
        column: 39,
        span: 4019..4020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 40,
        span: 4020..4021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 41,
        span: 4021..4022,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 213,
        column: 44,
        span: 4023..4025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 213,
        column: 46,
        span: 4025..4027,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 213,
        column: 50,
        span: 4028..4031,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FAILED\"",
        ),
        line: 213,
        column: 59,
        span: 4032..4040,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 213,
        column: 62,
        span: 4041..4043,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 213,
        column: 67,
        span: 4044..4048,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 68,
        span: 4048..4049,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 213,
        column: 0,
        span: 4050..4053,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 214,
        column: 8,
        span: 4056..4061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 214,
        column: 10,
        span: 4062..4063,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 214,
        column: 12,
        span: 4064..4065,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 0,
        span: 4065..4067,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 215,
        column: 9,
        span: 4070..4076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 215,
        column: 11,
        span: 4077..4078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 12,
        span: 4078..4079,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 215,
        column: 20,
        span: 4079..4087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 21,
        span: 4087..4088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 22,
        span: 4088..4089,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 215,
        column: 29,
        span: 4090..4096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 215,
        column: 31,
        span: 4097..4098,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 215,
        column: 35,
        span: 4099..4102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 36,
        span: 4102..4103,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 216,
        column: 0,
        span: 4104..4107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 217,
        column: 2,
        span: 4108..4109,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 3,
        span: 4109..4110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 4,
        span: 4110..4111,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 221,
        column: 6,
        span: 4157..4162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 221,
        column: 12,
        span: 4163..4168,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 221,
        column: 14,
        span: 4169..4170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 221,
        column: 22,
        span: 4171..4178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'debug'",
        ),
        line: 221,
        column: 30,
        span: 4179..4186,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 223,
        column: 0,
        span: 4188..4190,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 224,
        column: 8,
        span: 4193..4198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 224,
        column: 10,
        span: 4199..4200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 11,
        span: 4200..4201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 224,
        column: 13,
        span: 4202..4203,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 14,
        span: 4203..4204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 224,
        column: 16,
        span: 4205..4206,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 18,
        span: 4207..4208,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 20,
        span: 4208..4210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 21,
        span: 4210..4211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 23,
        span: 4211..4213,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 24,
        span: 4213..4214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 0,
        span: 4214..4216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 225,
        column: 7,
        span: 4219..4223,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 225,
        column: 9,
        span: 4224..4225,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 225,
        column: 18,
        span: 4226..4234,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 19,
        span: 4234..4235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 20,
        span: 4235..4236,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 225,
        column: 27,
        span: 4237..4243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 225,
        column: 29,
        span: 4244..4245,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 225,
        column: 31,
        span: 4246..4247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 225,
        column: 33,
        span: 4248..4249,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 225,
        column: 37,
        span: 4250..4253,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 225,
        column: 38,
        span: 4253..4254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 226,
        column: 7,
        span: 4257..4261,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
        column: 9,
        span: 4262..4263,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 226,
        column: 18,
        span: 4264..4272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 19,
        span: 4272..4273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 20,
        span: 4273..4274,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 226,
        column: 27,
        span: 4275..4281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 226,
        column: 29,
        span: 4282..4283,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 226,
        column: 31,
        span: 4284..4285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 226,
        column: 33,
        span: 4286..4287,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 226,
        column: 37,
        span: 4288..4291,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 226,
        column: 38,
        span: 4291..4292,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 227,
        column: 0,
        span: 4295..4297,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 228,
        column: 10,
        span: 4302..4307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 228,
        column: 12,
        span: 4308..4309,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 14,
        span: 4310..4311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 0,
        span: 4311..4314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 229,
        column: 9,
        span: 4319..4323,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 229,
        column: 11,
        span: 4324..4325,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 229,
        column: 20,
        span: 4326..4334,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 21,
        span: 4334..4335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 22,
        span: 4335..4336,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 229,
        column: 29,
        span: 4337..4343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 229,
        column: 31,
        span: 4344..4345,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 229,
        column: 33,
        span: 4346..4347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 229,
        column: 35,
        span: 4348..4349,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 229,
        column: 39,
        span: 4350..4353,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 229,
        column: 40,
        span: 4353..4354,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 230,
        column: 0,
        span: 4357..4360,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 231,
        column: 0,
        span: 4361..4364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 233,
        column: 7,
        span: 4366..4372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 8,
        span: 4372..4373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 233,
        column: 13,
        span: 4373..4378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 233,
        column: 14,
        span: 4378..4379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 233,
        column: 23,
        span: 4379..4388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 24,
        span: 4388..4389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 233,
        column: 28,
        span: 4389..4393,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 29,
        span: 4393..4394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 31,
        span: 4394..4396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 32,
        span: 4396..4397,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 33,
        span: 4397..4398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
        column: 7,
        span: 4399..4405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 8,
        span: 4405..4406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 234,
        column: 13,
        span: 4406..4411,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 234,
        column: 14,
        span: 4411..4412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 234,
        column: 23,
        span: 4412..4421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 24,
        span: 4421..4422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 234,
        column: 28,
        span: 4422..4426,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 29,
        span: 4426..4427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 234,
        column: 31,
        span: 4427..4429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 32,
        span: 4429..4430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 33,
        span: 4430..4431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
        column: 7,
        span: 4432..4438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 8,
        span: 4438..4439,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 235,
        column: 11,
        span: 4439..4442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 235,
        column: 17,
        span: 4443..4448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 18,
        span: 4448..4449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 235,
        column: 23,
        span: 4449..4454,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 235,
        column: 24,
        span: 4454..4455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 235,
        column: 33,
        span: 4455..4464,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 34,
        span: 4464..4465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 235,
        column: 39,
        span: 4466..4470,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 235,
        column: 40,
        span: 4470..4471,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 235,
        column: 42,
        span: 4471..4473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 43,
        span: 4473..4474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 44,
        span: 4474..4475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 7,
        span: 4476..4482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 8,
        span: 4482..4483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 236,
        column: 13,
        span: 4483..4488,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 236,
        column: 14,
        span: 4488..4489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 236,
        column: 23,
        span: 4489..4498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 24,
        span: 4498..4499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 236,
        column: 28,
        span: 4499..4503,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 29,
        span: 4503..4504,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 236,
        column: 31,
        span: 4504..4506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 32,
        span: 4506..4507,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 236,
        column: 35,
        span: 4508..4510,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 236,
        column: 41,
        span: 4511..4516,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 236,
        column: 42,
        span: 4516..4517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 236,
        column: 51,
        span: 4517..4526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 52,
        span: 4526..4527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 236,
        column: 56,
        span: 4527..4531,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 57,
        span: 4531..4532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 236,
        column: 59,
        span: 4532..4534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 60,
        span: 4534..4535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 61,
        span: 4535..4536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 7,
        span: 4537..4543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 8,
        span: 4543..4544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 237,
        column: 13,
        span: 4544..4549,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 237,
        column: 14,
        span: 4549..4550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 237,
        column: 23,
        span: 4550..4559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 24,
        span: 4559..4560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 237,
        column: 28,
        span: 4560..4564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 29,
        span: 4564..4565,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 237,
        column: 31,
        span: 4565..4567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 32,
        span: 4567..4568,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 237,
        column: 35,
        span: 4569..4571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 237,
        column: 41,
        span: 4572..4577,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 237,
        column: 42,
        span: 4577..4578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 237,
        column: 51,
        span: 4578..4587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 52,
        span: 4587..4588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 237,
        column: 56,
        span: 4588..4592,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 237,
        column: 57,
        span: 4592..4593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 237,
        column: 59,
        span: 4593..4595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 60,
        span: 4595..4596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 61,
        span: 4596..4597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 238,
        column: 7,
        span: 4598..4604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 8,
        span: 4604..4605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 238,
        column: 13,
        span: 4605..4610,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 238,
        column: 14,
        span: 4610..4611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 238,
        column: 23,
        span: 4611..4620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 24,
        span: 4620..4621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 238,
        column: 28,
        span: 4621..4625,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 29,
        span: 4625..4626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
        column: 31,
        span: 4626..4628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 32,
        span: 4628..4629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 33,
        span: 4629..4630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 7,
        span: 4631..4637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 8,
        span: 4637..4638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 239,
        column: 13,
        span: 4638..4643,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 239,
        column: 14,
        span: 4643..4644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 239,
        column: 23,
        span: 4644..4653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 24,
        span: 4653..4654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 239,
        column: 28,
        span: 4654..4658,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 29,
        span: 4658..4659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 31,
        span: 4659..4661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 32,
        span: 4661..4662,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 239,
        column: 35,
        span: 4663..4665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 239,
        column: 41,
        span: 4666..4671,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 239,
        column: 42,
        span: 4671..4672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 239,
        column: 51,
        span: 4672..4681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 52,
        span: 4681..4682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 239,
        column: 56,
        span: 4682..4686,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 57,
        span: 4686..4687,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 59,
        span: 4687..4689,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 60,
        span: 4689..4690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 61,
        span: 4690..4691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 7,
        span: 4692..4698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 8,
        span: 4698..4699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 240,
        column: 13,
        span: 4699..4704,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 240,
        column: 14,
        span: 4704..4705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 240,
        column: 23,
        span: 4705..4714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 24,
        span: 4714..4715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 240,
        column: 28,
        span: 4715..4719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 29,
        span: 4719..4720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 31,
        span: 4720..4722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 32,
        span: 4722..4723,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 240,
        column: 35,
        span: 4724..4726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 240,
        column: 41,
        span: 4727..4732,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 240,
        column: 42,
        span: 4732..4733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 240,
        column: 51,
        span: 4733..4742,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 52,
        span: 4742..4743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 240,
        column: 56,
        span: 4743..4747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 57,
        span: 4747..4748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 59,
        span: 4748..4750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 60,
        span: 4750..4751,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 61,
        span: 4751..4752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 242,
        column: 7,
        span: 4754..4760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 8,
        span: 4760..4761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 242,
        column: 13,
        span: 4761..4766,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 242,
        column: 14,
        span: 4766..4767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalueid",
        ),
        line: 242,
        column: 23,
        span: 4767..4776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 24,
        span: 4776..4777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 242,
        column: 30,
        span: 4777..4783,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 242,
        column: 31,
        span: 4783..4784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 242,
        column: 37,
        span: 4784..4790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 38,
        span: 4790..4791,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 242,
        column: 41,
        span: 4791..4794,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 42,
        span: 4794..4795,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 242,
        column: 46,
        span: 4796..4799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 47,
        span: 4799..4800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 48,
        span: 4800..4801,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 50,
        span: 4801..4803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 51,
        span: 4803..4804,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 242,
        column: 54,
        span: 4805..4807,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 242,
        column: 58,
        span: 4808..4811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 59,
        span: 4811..4812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 244,
        column: 7,
        span: 4814..4820,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 8,
        span: 4820..4821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 244,
        column: 12,
        span: 4821..4825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 13,
        span: 4825..4826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 14,
        span: 4826..4827,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 244,
        column: 17,
        span: 4828..4830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 19,
        span: 4830..4832,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 244,
        column: 21,
        span: 4833..4834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 23,
        span: 4834..4836,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 244,
        column: 27,
        span: 4837..4840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 244,
        column: 32,
        span: 4841..4845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 33,
        span: 4845..4846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 34,
        span: 4846..4847,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 244,
        column: 37,
        span: 4848..4850,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 39,
        span: 4850..4852,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 244,
        column: 41,
        span: 4853..4854,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 43,
        span: 4854..4856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 44,
        span: 4856..4857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 245,
        column: 6,
        span: 4858..4863,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
        column: 7,
        span: 4863..4864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 245,
        column: 18,
        span: 4864..4875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 19,
        span: 4875..4876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 245,
        column: 23,
        span: 4876..4880,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 24,
        span: 4880..4881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 26,
        span: 4881..4883,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 27,
        span: 4883..4884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 245,
        column: 32,
        span: 4885..4889,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 33,
        span: 4889..4890,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 35,
        span: 4890..4892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 36,
        span: 4892..4893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
        column: 7,
        span: 4894..4900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 8,
        span: 4900..4901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 246,
        column: 12,
        span: 4901..4905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 13,
        span: 4905..4906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 14,
        span: 4906..4907,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 17,
        span: 4908..4910,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 19,
        span: 4910..4912,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 246,
        column: 21,
        span: 4913..4914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 23,
        span: 4914..4916,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 246,
        column: 27,
        span: 4917..4920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 246,
        column: 32,
        span: 4921..4925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 33,
        span: 4925..4926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 34,
        span: 4926..4927,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 37,
        span: 4928..4930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 39,
        span: 4930..4932,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 246,
        column: 41,
        span: 4933..4934,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 246,
        column: 43,
        span: 4934..4936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 44,
        span: 4936..4937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 247,
        column: 7,
        span: 4938..4944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 8,
        span: 4944..4945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 247,
        column: 12,
        span: 4945..4949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 13,
        span: 4949..4950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 14,
        span: 4950..4951,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 247,
        column: 17,
        span: 4952..4954,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 20,
        span: 4954..4957,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 247,
        column: 22,
        span: 4958..4959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 247,
        column: 24,
        span: 4959..4961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 25,
        span: 4961..4962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 248,
        column: 6,
        span: 4963..4968,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 248,
        column: 7,
        span: 4968..4969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 248,
        column: 18,
        span: 4969..4980,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 19,
        span: 4980..4981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 248,
        column: 23,
        span: 4981..4985,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 24,
        span: 4985..4986,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 26,
        span: 4986..4988,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 27,
        span: 4988..4989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 248,
        column: 32,
        span: 4990..4994,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 33,
        span: 4994..4995,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 248,
        column: 35,
        span: 4995..4997,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 36,
        span: 4997..4998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 249,
        column: 7,
        span: 4999..5005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 8,
        span: 5005..5006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 249,
        column: 12,
        span: 5006..5010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 13,
        span: 5010..5011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 14,
        span: 5011..5012,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 249,
        column: 17,
        span: 5013..5015,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 20,
        span: 5015..5018,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 249,
        column: 22,
        span: 5019..5020,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 24,
        span: 5020..5022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 25,
        span: 5022..5023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 250,
        column: 6,
        span: 5024..5029,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 250,
        column: 7,
        span: 5029..5030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 250,
        column: 18,
        span: 5030..5041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 19,
        span: 5041..5042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 250,
        column: 23,
        span: 5042..5046,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 24,
        span: 5046..5047,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 26,
        span: 5047..5049,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 27,
        span: 5049..5050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 250,
        column: 32,
        span: 5051..5055,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 33,
        span: 5055..5056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 35,
        span: 5056..5058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 36,
        span: 5058..5059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 251,
        column: 7,
        span: 5060..5066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 8,
        span: 5066..5067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo3",
        ),
        line: 251,
        column: 12,
        span: 5067..5071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 13,
        span: 5071..5072,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 14,
        span: 5072..5073,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 251,
        column: 17,
        span: 5074..5076,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 251,
        column: 20,
        span: 5076..5079,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 251,
        column: 22,
        span: 5080..5081,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 251,
        column: 24,
        span: 5081..5083,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 25,
        span: 5083..5084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 7,
        span: 5086..5092,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 8,
        span: 5092..5093,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 253,
        column: 11,
        span: 5093..5096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 253,
        column: 17,
        span: 5097..5102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 18,
        span: 5102..5103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 253,
        column: 23,
        span: 5103..5108,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 24,
        span: 5108..5109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 253,
        column: 35,
        span: 5109..5120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 36,
        span: 5120..5121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 253,
        column: 41,
        span: 5122..5126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 42,
        span: 5126..5127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 44,
        span: 5127..5129,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 45,
        span: 5129..5130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 253,
        column: 50,
        span: 5131..5135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 253,
        column: 51,
        span: 5135..5136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 53,
        span: 5136..5138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 54,
        span: 5138..5139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 55,
        span: 5139..5140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 7,
        span: 5141..5147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 8,
        span: 5147..5148,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 254,
        column: 11,
        span: 5148..5151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 254,
        column: 17,
        span: 5152..5157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 18,
        span: 5157..5158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 254,
        column: 23,
        span: 5158..5163,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
        column: 24,
        span: 5163..5164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 254,
        column: 35,
        span: 5164..5175,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 36,
        span: 5175..5176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 254,
        column: 41,
        span: 5177..5181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 42,
        span: 5181..5182,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 44,
        span: 5182..5184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 45,
        span: 5184..5185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 254,
        column: 50,
        span: 5186..5190,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 254,
        column: 51,
        span: 5190..5191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 53,
        span: 5191..5193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 54,
        span: 5193..5194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 55,
        span: 5194..5195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
        column: 7,
        span: 5196..5202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 8,
        span: 5202..5203,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 255,
        column: 11,
        span: 5203..5206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 255,
        column: 17,
        span: 5207..5212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 18,
        span: 5212..5213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 255,
        column: 23,
        span: 5213..5218,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 255,
        column: 24,
        span: 5218..5219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 255,
        column: 35,
        span: 5219..5230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 36,
        span: 5230..5231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 255,
        column: 41,
        span: 5232..5236,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 42,
        span: 5236..5237,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 44,
        span: 5237..5239,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 45,
        span: 5239..5240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 255,
        column: 50,
        span: 5241..5245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 51,
        span: 5245..5246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 255,
        column: 53,
        span: 5246..5248,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 54,
        span: 5248..5249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 55,
        span: 5249..5250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
        column: 7,
        span: 5251..5257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 8,
        span: 5257..5258,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 256,
        column: 11,
        span: 5258..5261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 256,
        column: 17,
        span: 5262..5267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 18,
        span: 5267..5268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 256,
        column: 23,
        span: 5268..5273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 256,
        column: 24,
        span: 5273..5274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 256,
        column: 35,
        span: 5274..5285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 36,
        span: 5285..5286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 256,
        column: 42,
        span: 5287..5292,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 43,
        span: 5292..5293,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 45,
        span: 5293..5295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 46,
        span: 5295..5296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 256,
        column: 51,
        span: 5297..5301,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 52,
        span: 5301..5302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 54,
        span: 5302..5304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 55,
        span: 5304..5305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 56,
        span: 5305..5306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 7,
        span: 5307..5313,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 8,
        span: 5313..5314,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 257,
        column: 11,
        span: 5314..5317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 257,
        column: 17,
        span: 5318..5323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 18,
        span: 5323..5324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 257,
        column: 23,
        span: 5324..5329,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 257,
        column: 24,
        span: 5329..5330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 257,
        column: 35,
        span: 5330..5341,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 36,
        span: 5341..5342,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 257,
        column: 38,
        span: 5343..5344,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 257,
        column: 39,
        span: 5344..5345,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 40,
        span: 5345..5346,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 42,
        span: 5346..5348,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 43,
        span: 5348..5349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo2",
        ),
        line: 257,
        column: 48,
        span: 5350..5354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 49,
        span: 5354..5355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 51,
        span: 5355..5357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 52,
        span: 5357..5358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 53,
        span: 5358..5359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 7,
        span: 5360..5366,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 8,
        span: 5366..5367,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 258,
        column: 11,
        span: 5367..5370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 258,
        column: 17,
        span: 5371..5376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 18,
        span: 5376..5377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 258,
        column: 23,
        span: 5377..5382,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 258,
        column: 24,
        span: 5382..5383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvaluejoin",
        ),
        line: 258,
        column: 35,
        span: 5383..5394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 36,
        span: 5394..5395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo1",
        ),
        line: 258,
        column: 41,
        span: 5396..5400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 42,
        span: 5400..5401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 44,
        span: 5401..5403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 45,
        span: 5403..5404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 258,
        column: 51,
        span: 5405..5410,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 52,
        span: 5410..5411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 54,
        span: 5411..5413,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 55,
        span: 5413..5414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 56,
        span: 5414..5415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 260,
        column: 6,
        span: 5417..5422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 260,
        column: 11,
        span: 5423..5427,
    },
]
