---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/coroutine.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1,
            column: 5,
            span: 0..5,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing coroutines\"",
        ),
        position: Position {
            line: 1,
            column: 26,
            span: 6..26,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 3,
            column: 6,
            span: 28..33,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 3,
            column: 12,
            span: 34..39,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 3,
            column: 14,
            span: 40..41,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 3,
            column: 22,
            span: 42..49,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'debug'",
        ),
        position: Position {
            line: 3,
            column: 29,
            span: 49..56,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 5,
            column: 6,
            span: 58..63,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 5,
            column: 0,
            span: 64..65,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 7,
            column: 6,
            span: 67..72,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "main",
        ),
        position: Position {
            line: 7,
            column: 11,
            span: 73..77,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 7,
            column: 12,
            span: 77..78,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismain",
        ),
        position: Position {
            line: 7,
            column: 19,
            span: 79..85,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 7,
            column: 21,
            span: 86..87,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 7,
            column: 31,
            span: 88..97,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 7,
            column: 32,
            span: 97..98,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        position: Position {
            line: 7,
            column: 39,
            span: 98..105,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 7,
            column: 40,
            span: 105..106,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 7,
            column: 41,
            span: 106..107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 8,
            column: 7,
            span: 108..114,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 8,
            span: 114..115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 8,
            column: 12,
            span: 115..119,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 8,
            column: 13,
            span: 119..120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "main",
        ),
        position: Position {
            line: 8,
            column: 17,
            span: 120..124,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 18,
            span: 124..125,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 8,
            column: 21,
            span: 126..128,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        position: Position {
            line: 8,
            column: 30,
            span: 129..137,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 8,
            column: 34,
            span: 138..141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ismain",
        ),
        position: Position {
            line: 8,
            column: 41,
            span: 142..148,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 8,
            column: 42,
            span: 148..149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 9,
            column: 7,
            span: 150..156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 8,
            span: 156..157,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 9,
            column: 11,
            span: 157..160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 9,
            column: 21,
            span: 161..170,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 9,
            column: 22,
            span: 170..171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 9,
            column: 28,
            span: 171..177,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 9,
            column: 29,
            span: 177..178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "main",
        ),
        position: Position {
            line: 9,
            column: 33,
            span: 178..182,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 34,
            span: 182..183,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 9,
            column: 35,
            span: 183..184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 10,
            column: 7,
            span: 185..191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 8,
            span: 191..192,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 10,
            column: 11,
            span: 192..195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 10,
            column: 17,
            span: 196..201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 18,
            span: 201..202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 10,
            column: 27,
            span: 202..211,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 10,
            column: 28,
            span: 211..212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 10,
            column: 33,
            span: 212..217,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 34,
            span: 217..218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 35,
            span: 218..219,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 16,
            column: 6,
            span: 269..274,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 16,
            column: 15,
            span: 275..283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqtab",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 284..289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 23,
            span: 290..291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 16,
            column: 25,
            span: 291..293,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 16,
            column: 26,
            span: 293..294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 16,
            column: 29,
            span: 295..297,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 30,
            span: 297..298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 17,
            column: 9,
            span: 301..307,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 10,
            span: 307..308,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 17,
            column: 11,
            span: 308..309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 17,
            column: 13,
            span: 309..311,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 17,
            column: 16,
            span: 312..314,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 17,
            column: 18,
            span: 315..316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 17,
            column: 20,
            span: 316..318,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 21,
            span: 318..319,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 18,
            column: 6,
            span: 322..325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 18,
            column: 8,
            span: 326..327,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 18,
            column: 10,
            span: 328..329,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 18,
            column: 12,
            span: 329..331,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 18,
            column: 13,
            span: 331..332,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 18,
            column: 15,
            span: 333..334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 18,
            column: 17,
            span: 334..336,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 18,
            column: 0,
            span: 337..339,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 19,
            column: 10,
            span: 344..349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 19,
            column: 12,
            span: 350..351,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 14,
            span: 352..353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 19,
            column: 17,
            span: 354..356,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 19,
            column: 18,
            span: 356..357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 19,
            column: 19,
            span: 357..358,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 19,
            column: 20,
            span: 358..359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 20,
            column: 11,
            span: 364..370,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 12,
            span: 370..371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 20,
            column: 14,
            span: 371..373,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 20,
            column: 15,
            span: 373..374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 20,
            column: 16,
            span: 374..375,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 20,
            column: 17,
            span: 375..376,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 20,
            column: 20,
            span: 377..379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 20,
            column: 22,
            span: 380..381,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 23,
            span: 381..382,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 21,
            column: 0,
            span: 385..388,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 22,
            column: 0,
            span: 389..392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 24,
            column: 3,
            span: 394..396,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 24,
            column: 4,
            span: 396..397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 24,
            column: 5,
            span: 397..398,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 24,
            column: 7,
            span: 399..400,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 24,
            column: 11,
            span: 401..404,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 25,
            column: 9,
            span: 420..428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 25,
            column: 13,
            span: 429..432,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 25,
            column: 15,
            span: 433..434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 25,
            column: 16,
            span: 434..435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 17,
            span: 435..436,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 25,
            column: 21,
            span: 437..440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 25,
            column: 22,
            span: 440..441,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 26,
            column: 8,
            span: 444..449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 26,
            column: 10,
            span: 450..451,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 26,
            column: 11,
            span: 451..452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 26,
            column: 13,
            span: 453..454,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 26,
            column: 15,
            span: 455..456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 26,
            column: 25,
            span: 457..466,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 26,
            column: 26,
            span: 466..467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        position: Position {
            line: 26,
            column: 33,
            span: 467..474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 34,
            span: 474..475,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 35,
            span: 475..476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 27,
            column: 9,
            span: 479..485,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 10,
            span: 485..486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 27,
            column: 11,
            span: 486..487,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 27,
            column: 14,
            span: 488..490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 27,
            column: 16,
            span: 491..492,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 27,
            column: 20,
            span: 493..496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 27,
            column: 22,
            span: 497..498,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 27,
            column: 25,
            span: 499..501,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 27,
            column: 31,
            span: 502..507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 32,
            span: 507..508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 28,
            column: 9,
            span: 511..517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 10,
            span: 517..518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 28,
            column: 19,
            span: 518..527,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 20,
            span: 527..528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 28,
            column: 26,
            span: 528..534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 27,
            span: 534..535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 28,
            column: 28,
            span: 535..536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 29,
            span: 536..537,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 28,
            column: 32,
            span: 538..540,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"running\"",
        ),
        position: Position {
            line: 28,
            column: 42,
            span: 541..550,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 43,
            span: 550..551,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 29,
            column: 8,
            span: 554..559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 29,
            column: 12,
            span: 560..563,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 29,
            column: 14,
            span: 564..565,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 29,
            column: 16,
            span: 566..567,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 29,
            column: 19,
            span: 567..570,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 29,
            column: 20,
            span: 570..571,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 30,
            column: 6,
            span: 574..577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 30,
            column: 8,
            span: 578..579,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 30,
            column: 9,
            span: 579..580,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 30,
            column: 10,
            span: 579..581,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 30,
            column: 11,
            span: 581..582,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 30,
            column: 12,
            span: 582..583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 30,
            column: 15,
            span: 583..586,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 587..589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 31,
            column: 7,
            span: 594..596,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 8,
            span: 596..597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 31,
            column: 9,
            span: 597..598,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 31,
            column: 11,
            span: 599..600,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 31,
            column: 13,
            span: 601..602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 31,
            column: 22,
            span: 602..611,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 23,
            span: 611..612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 31,
            column: 28,
            span: 612..617,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 29,
            span: 617..618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 31,
            column: 34,
            span: 618..623,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 31,
            column: 35,
            span: 623..624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 31,
            column: 41,
            span: 624..630,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 42,
            span: 630..631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 31,
            column: 45,
            span: 631..634,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 31,
            column: 46,
            span: 634..635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 31,
            column: 47,
            span: 635..636,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 31,
            column: 48,
            span: 636..637,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 49,
            span: 637..638,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 50,
            span: 638..639,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 31,
            column: 51,
            span: 639..640,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 32,
            column: 0,
            span: 643..646,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 33,
            column: 9,
            span: 649..655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 33,
            column: 15,
            span: 656..661,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 16,
            span: 661..662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 33,
            column: 22,
            span: 662..668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 23,
            span: 668..669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 33,
            column: 24,
            span: 669..670,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 25,
            span: 670..671,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 34,
            column: 0,
            span: 672..675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 36,
            column: 2,
            span: 677..678,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 36,
            column: 4,
            span: 679..680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 36,
            column: 14,
            span: 681..690,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 15,
            span: 690..691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 36,
            column: 21,
            span: 691..697,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 22,
            span: 697..698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 36,
            column: 25,
            span: 698..701,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 26,
            span: 701..702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 37,
            column: 7,
            span: 703..709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 8,
            span: 709..710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 37,
            column: 12,
            span: 710..714,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 13,
            span: 714..715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 37,
            column: 14,
            span: 715..716,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 15,
            span: 716..717,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 37,
            column: 18,
            span: 718..720,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        position: Position {
            line: 37,
            column: 27,
            span: 721..729,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 37,
            column: 31,
            span: 730..733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 37,
            column: 41,
            span: 734..743,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 37,
            column: 42,
            span: 743..744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 37,
            column: 48,
            span: 744..750,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 49,
            span: 750..751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 37,
            column: 50,
            span: 751..752,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 51,
            span: 752..753,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 37,
            column: 54,
            span: 754..756,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"suspended\"",
        ),
        position: Position {
            line: 37,
            column: 66,
            span: 757..768,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 67,
            span: 768..769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 38,
            column: 7,
            span: 770..776,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 8,
            span: 776..777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 38,
            column: 14,
            span: 777..783,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 38,
            column: 15,
            span: 783..784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 38,
            column: 19,
            span: 784..788,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 20,
            span: 788..789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 38,
            column: 28,
            span: 789..797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 29,
            span: 797..798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 38,
            column: 30,
            span: 798..799,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 31,
            span: 799..800,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 32,
            span: 800..801,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        position: Position {
            line: 38,
            column: 41,
            span: 802..810,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 42,
            span: 810..811,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 43,
            span: 811..812,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 39,
            column: 6,
            span: 813..818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 39,
            column: 8,
            span: 819..820,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 9,
            span: 820..821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 39,
            column: 10,
            span: 821..822,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 11,
            span: 822..823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 39,
            column: 12,
            span: 823..824,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 13,
            span: 824..825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 39,
            column: 14,
            span: 825..826,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 39,
            column: 15,
            span: 826..827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 39,
            column: 0,
            span: 827..828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 40,
            column: 2,
            span: 829..830,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 3,
            span: 830..831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 40,
            column: 4,
            span: 831..832,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 5,
            span: 832..833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 40,
            column: 6,
            span: 833..834,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 7,
            span: 834..835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 40,
            column: 8,
            span: 835..836,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 9,
            span: 836..837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 40,
            column: 10,
            span: 837..838,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 12,
            span: 839..840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 40,
            column: 22,
            span: 841..850,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 40,
            column: 23,
            span: 850..851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 40,
            column: 29,
            span: 851..857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 30,
            span: 857..858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 40,
            column: 31,
            span: 858..859,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 32,
            span: 859..860,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 40,
            column: 34,
            span: 861..862,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 35,
            span: 861..863,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 36,
            span: 863..864,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 37,
            span: 863..865,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 38,
            span: 865..866,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 39,
            span: 865..867,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 40,
            column: 40,
            span: 867..868,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 41,
            span: 868..869,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 40,
            column: 43,
            span: 870..871,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 40,
            column: 44,
            span: 871..872,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 45,
            span: 872..873,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 40,
            column: 47,
            span: 874..875,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 48,
            span: 874..876,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 40,
            column: 49,
            span: 876..877,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 50,
            span: 877..878,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 40,
            column: 52,
            span: 879..880,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 40,
            column: 55,
            span: 880..883,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 56,
            span: 883..884,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 40,
            column: 60,
            span: 885..888,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 61,
            span: 888..889,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c'",
        ),
        position: Position {
            line: 40,
            column: 65,
            span: 890..893,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 40,
            column: 66,
            span: 893..894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 67,
            span: 894..895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 7,
            span: 896..902,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 8,
            span: 902..903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 41,
            column: 9,
            span: 903..904,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 905..908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 41,
            column: 15,
            span: 909..910,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 18,
            span: 911..913,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 41,
            column: 22,
            span: 914..917,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 41,
            column: 26,
            span: 918..921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 41,
            column: 36,
            span: 922..931,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 37,
            span: 931..932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 41,
            column: 43,
            span: 932..938,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 44,
            span: 938..939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 41,
            column: 45,
            span: 939..940,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 46,
            span: 940..941,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 49,
            span: 942..944,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"suspended\"",
        ),
        position: Position {
            line: 41,
            column: 61,
            span: 945..956,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 62,
            span: 956..957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 42,
            column: 2,
            span: 958..959,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 3,
            span: 959..960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 42,
            column: 4,
            span: 960..961,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 5,
            span: 961..962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 42,
            column: 6,
            span: 962..963,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 7,
            span: 963..964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 42,
            column: 8,
            span: 964..965,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 42,
            column: 9,
            span: 965..966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 42,
            column: 10,
            span: 966..967,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 42,
            column: 12,
            span: 968..969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 42,
            column: 22,
            span: 970..979,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 42,
            column: 23,
            span: 979..980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 42,
            column: 29,
            span: 980..986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 42,
            column: 30,
            span: 986..987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 42,
            column: 31,
            span: 987..988,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 42,
            column: 32,
            span: 988..989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqtab",
        ),
        position: Position {
            line: 43,
            column: 6,
            span: 990..995,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 7,
            span: 995..996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 43,
            column: 9,
            span: 996..998,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 43,
            column: 10,
            span: 998..999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 43,
            column: 11,
            span: 999..1000,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 12,
            span: 1000..1001,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 43,
            column: 14,
            span: 1002..1003,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 43,
            column: 15,
            span: 1003..1004,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 16,
            span: 1004..1005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 44,
            column: 7,
            span: 1006..1012,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 8,
            span: 1012..1013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 44,
            column: 9,
            span: 1013..1014,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 44,
            column: 13,
            span: 1015..1018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 44,
            column: 15,
            span: 1019..1020,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 44,
            column: 18,
            span: 1021..1023,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 44,
            column: 20,
            span: 1023..1025,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 44,
            column: 24,
            span: 1026..1029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 44,
            column: 26,
            span: 1030..1031,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 44,
            column: 29,
            span: 1032..1034,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 44,
            column: 33,
            span: 1035..1038,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 34,
            span: 1038..1039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 45,
            column: 2,
            span: 1040..1041,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 3,
            span: 1041..1042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 45,
            column: 4,
            span: 1042..1043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 5,
            span: 1043..1044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 45,
            column: 6,
            span: 1044..1045,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 7,
            span: 1045..1046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 45,
            column: 8,
            span: 1046..1047,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 9,
            span: 1047..1048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 45,
            column: 10,
            span: 1048..1049,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 45,
            column: 12,
            span: 1050..1051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 45,
            column: 22,
            span: 1052..1061,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 45,
            column: 23,
            span: 1061..1062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 45,
            column: 29,
            span: 1062..1068,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 45,
            column: 30,
            span: 1068..1069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 45,
            column: 31,
            span: 1069..1070,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 32,
            span: 1070..1071,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 45,
            column: 34,
            span: 1071..1073,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 35,
            span: 1073..1074,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 45,
            column: 37,
            span: 1074..1076,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 45,
            column: 38,
            span: 1076..1077,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 45,
            column: 40,
            span: 1077..1079,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 45,
            column: 41,
            span: 1079..1080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqtab",
        ),
        position: Position {
            line: 46,
            column: 6,
            span: 1081..1086,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 7,
            span: 1086..1087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 46,
            column: 9,
            span: 1087..1089,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 46,
            column: 10,
            span: 1089..1090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 46,
            column: 11,
            span: 1090..1091,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 12,
            span: 1091..1092,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 46,
            column: 14,
            span: 1093..1094,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 15,
            span: 1093..1095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 16,
            span: 1095..1096,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 18,
            span: 1096..1098,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 46,
            column: 19,
            span: 1098..1099,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 46,
            column: 21,
            span: 1099..1101,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 46,
            column: 22,
            span: 1101..1102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 23,
            span: 1102..1103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 47,
            column: 7,
            span: 1104..1110,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 1110..1111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 47,
            column: 9,
            span: 1111..1112,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 47,
            column: 13,
            span: 1113..1116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 47,
            column: 15,
            span: 1117..1118,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 18,
            span: 1119..1121,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 47,
            column: 22,
            span: 1122..1125,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 47,
            column: 26,
            span: 1126..1129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 47,
            column: 28,
            span: 1130..1131,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 31,
            span: 1132..1134,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 47,
            column: 35,
            span: 1135..1138,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 47,
            column: 39,
            span: 1139..1142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 47,
            column: 41,
            span: 1143..1144,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 44,
            span: 1145..1147,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c'",
        ),
        position: Position {
            line: 47,
            column: 48,
            span: 1148..1151,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 47,
            column: 52,
            span: 1152..1155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 47,
            column: 54,
            span: 1156..1157,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 57,
            span: 1158..1160,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 47,
            column: 61,
            span: 1161..1164,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 62,
            span: 1164..1165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 48,
            column: 2,
            span: 1166..1167,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 3,
            span: 1167..1168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 48,
            column: 4,
            span: 1168..1169,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 5,
            span: 1169..1170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 48,
            column: 6,
            span: 1170..1171,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 7,
            span: 1171..1172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 48,
            column: 8,
            span: 1172..1173,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 9,
            span: 1173..1174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 48,
            column: 10,
            span: 1174..1175,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 48,
            column: 12,
            span: 1176..1177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 48,
            column: 22,
            span: 1178..1187,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 48,
            column: 23,
            span: 1187..1188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 48,
            column: 29,
            span: 1188..1194,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 30,
            span: 1194..1195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 48,
            column: 31,
            span: 1195..1196,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 48,
            column: 32,
            span: 1196..1197,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 48,
            column: 39,
            span: 1198..1204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 40,
            span: 1204..1205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eqtab",
        ),
        position: Position {
            line: 49,
            column: 6,
            span: 1206..1211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 7,
            span: 1211..1212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 49,
            column: 9,
            span: 1212..1214,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 49,
            column: 10,
            span: 1214..1215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 49,
            column: 11,
            span: 1215..1216,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 49,
            column: 12,
            span: 1216..1217,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 49,
            column: 14,
            span: 1218..1219,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 49,
            column: 20,
            span: 1219..1225,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 49,
            column: 21,
            span: 1225..1226,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 22,
            span: 1226..1227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 50,
            column: 7,
            span: 1228..1234,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 1234..1235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 50,
            column: 9,
            span: 1235..1236,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 50,
            column: 13,
            span: 1237..1240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 50,
            column: 15,
            span: 1241..1242,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 18,
            span: 1243..1245,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 20,
            span: 1245..1247,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 50,
            column: 24,
            span: 1248..1251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 50,
            column: 26,
            span: 1252..1253,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 29,
            span: 1254..1256,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 31,
            span: 1256..1258,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 50,
            column: 35,
            span: 1259..1262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 50,
            column: 37,
            span: 1263..1264,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 40,
            span: 1265..1267,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 42,
            span: 1267..1269,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 50,
            column: 46,
            span: 1270..1273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 50,
            column: 48,
            span: 1274..1275,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 51,
            span: 1276..1278,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 50,
            column: 55,
            span: 1279..1282,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 56,
            span: 1282..1283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 51,
            column: 7,
            span: 1284..1290,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1290..1291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 51,
            column: 17,
            span: 1291..1300,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 51,
            column: 18,
            span: 1300..1301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 51,
            column: 24,
            span: 1301..1307,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 25,
            span: 1307..1308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 51,
            column: 26,
            span: 1308..1309,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 27,
            span: 1309..1310,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 51,
            column: 30,
            span: 1311..1313,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        position: Position {
            line: 51,
            column: 37,
            span: 1314..1320,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 38,
            span: 1320..1321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 52,
            column: 2,
            span: 1322..1323,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 3,
            span: 1323..1324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 52,
            column: 5,
            span: 1325..1326,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 52,
            column: 7,
            span: 1327..1328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 52,
            column: 17,
            span: 1329..1338,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 52,
            column: 18,
            span: 1338..1339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 52,
            column: 24,
            span: 1339..1345,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 25,
            span: 1345..1346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 52,
            column: 26,
            span: 1346..1347,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 27,
            span: 1347..1348,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 52,
            column: 34,
            span: 1349..1355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 35,
            span: 1355..1356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 53,
            column: 7,
            span: 1357..1363,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 8,
            span: 1363..1364,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 53,
            column: 11,
            span: 1364..1367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 53,
            column: 13,
            span: 1368..1369,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 53,
            column: 17,
            span: 1370..1373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 53,
            column: 24,
            span: 1374..1380,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 53,
            column: 25,
            span: 1380..1381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 53,
            column: 29,
            span: 1381..1385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 30,
            span: 1385..1386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 53,
            column: 31,
            span: 1386..1387,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 32,
            span: 1387..1388,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        position: Position {
            line: 53,
            column: 39,
            span: 1389..1395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 40,
            span: 1395..1396,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 53,
            column: 44,
            span: 1397..1400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 53,
            column: 54,
            span: 1401..1410,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 53,
            column: 55,
            span: 1410..1411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 53,
            column: 61,
            span: 1411..1417,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 62,
            span: 1417..1418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 53,
            column: 63,
            span: 1418..1419,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 64,
            span: 1419..1420,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 53,
            column: 67,
            span: 1421..1423,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        position: Position {
            line: 53,
            column: 74,
            span: 1424..1430,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 75,
            span: 1430..1431,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 57,
            column: 6,
            span: 1458..1463,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 57,
            column: 15,
            span: 1464..1472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 57,
            column: 19,
            span: 1473..1476,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 21,
            span: 1477..1478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 57,
            column: 22,
            span: 1478..1479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 23,
            span: 1479..1480,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 57,
            column: 30,
            span: 1481..1487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 57,
            column: 40,
            span: 1488..1497,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 57,
            column: 41,
            span: 1497..1498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 57,
            column: 46,
            span: 1498..1503,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 57,
            column: 47,
            span: 1503..1504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 57,
            column: 48,
            span: 1504..1505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 57,
            column: 49,
            span: 1505..1506,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 57,
            column: 0,
            span: 1507..1510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 58,
            column: 2,
            span: 1511..1512,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 58,
            column: 4,
            span: 1513..1514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 58,
            column: 14,
            span: 1515..1524,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 58,
            column: 15,
            span: 1524..1525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 58,
            column: 19,
            span: 1525..1529,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 20,
            span: 1529..1530,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 58,
            column: 28,
            span: 1530..1538,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 30,
            span: 1539..1540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 31,
            span: 1540..1541,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 59,
            column: 6,
            span: 1544..1547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 1548..1549,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 59,
            column: 9,
            span: 1549..1550,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 59,
            column: 10,
            span: 1549..1551,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 59,
            column: 11,
            span: 1551..1552,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 59,
            column: 13,
            span: 1551..1554,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 59,
            column: 0,
            span: 1555..1557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 60,
            column: 11,
            span: 1562..1568,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 12,
            span: 1568..1569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 60,
            column: 15,
            span: 1569..1572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 16,
            span: 1572..1573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 60,
            column: 17,
            span: 1573..1574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 18,
            span: 1574..1575,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 60,
            column: 21,
            span: 1576..1578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 60,
            column: 24,
            span: 1579..1581,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 60,
            column: 25,
            span: 1581..1582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 60,
            column: 26,
            span: 1582..1583,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 27,
            span: 1583..1584,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 61,
            column: 0,
            span: 1587..1590,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 1593..1599,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 62,
            column: 13,
            span: 1600..1603,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 63,
            column: 4,
            span: 1604..1607,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 5,
            span: 1607..1608,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 64,
            column: 4,
            span: 1609..1612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 64,
            column: 6,
            span: 1613..1614,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 64,
            column: 7,
            span: 1614..1615,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 64,
            column: 8,
            span: 1614..1616,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 9,
            span: 1616..1617,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 64,
            column: 11,
            span: 1616..1619,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 64,
            column: 14,
            span: 1620..1622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 64,
            column: 17,
            span: 1623..1625,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 64,
            column: 18,
            span: 1625..1626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 64,
            column: 19,
            span: 1626..1627,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 64,
            column: 21,
            span: 1628..1629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 64,
            column: 23,
            span: 1630..1631,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 64,
            column: 24,
            span: 1631..1632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 64,
            column: 31,
            span: 1633..1639,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 32,
            span: 1639..1640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 64,
            column: 33,
            span: 1640..1641,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 34,
            span: 1641..1642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 64,
            column: 35,
            span: 1642..1643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 36,
            span: 1643..1644,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 64,
            column: 39,
            span: 1645..1647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 64,
            column: 41,
            span: 1648..1649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 42,
            span: 1649..1650,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 64,
            column: 0,
            span: 1651..1654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 65,
            column: 3,
            span: 1655..1657,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 65,
            column: 4,
            span: 1657..1658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 65,
            column: 5,
            span: 1658..1659,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 65,
            column: 7,
            span: 1660..1661,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        position: Position {
            line: 65,
            column: 14,
            span: 1662..1668,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 65,
            column: 15,
            span: 1668..1669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 22,
            span: 1670..1676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 23,
            span: 1676..1677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 65,
            column: 24,
            span: 1677..1678,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 25,
            span: 1678..1679,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        position: Position {
            line: 65,
            column: 31,
            span: 1679..1685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 32,
            span: 1685..1686,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 35,
            span: 1687..1689,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 65,
            column: 39,
            span: 1690..1693,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 40,
            span: 1693..1694,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 1709..1717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pf",
        ),
        position: Position {
            line: 68,
            column: 12,
            span: 1718..1720,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 14,
            span: 1721..1722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 68,
            column: 15,
            span: 1722..1723,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 1723..1724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 68,
            column: 18,
            span: 1725..1726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 19,
            span: 1726..1727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 69,
            column: 12,
            span: 1730..1739,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 69,
            column: 13,
            span: 1739..1740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 69,
            column: 18,
            span: 1740..1745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 69,
            column: 19,
            span: 1745..1746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 69,
            column: 20,
            span: 1746..1747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 69,
            column: 21,
            span: 1747..1748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pf",
        ),
        position: Position {
            line: 70,
            column: 5,
            span: 1751..1753,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 6,
            span: 1753..1754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 70,
            column: 7,
            span: 1754..1755,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 70,
            column: 8,
            span: 1755..1756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 1756..1757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 1757..1758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 70,
            column: 12,
            span: 1759..1760,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 70,
            column: 13,
            span: 1760..1761,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 14,
            span: 1760..1762,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 15,
            span: 1762..1763,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 71,
            column: 0,
            span: 1764..1767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 73,
            column: 2,
            span: 1769..1770,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 73,
            column: 4,
            span: 1771..1772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 73,
            column: 14,
            span: 1773..1782,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 15,
            span: 1782..1783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 73,
            column: 19,
            span: 1783..1787,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 20,
            span: 1787..1788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pf",
        ),
        position: Position {
            line: 73,
            column: 22,
            span: 1788..1790,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 23,
            span: 1790..1791,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 74,
            column: 6,
            span: 1792..1797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 1798..1799,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 1799..1800,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 0,
            span: 1799..1801,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 75,
            column: 4,
            span: 1802..1805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 75,
            column: 6,
            span: 1806..1807,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 75,
            column: 7,
            span: 1807..1808,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 8,
            span: 1807..1809,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 75,
            column: 9,
            span: 1809..1810,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 75,
            column: 11,
            span: 1809..1812,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 75,
            column: 0,
            span: 1813..1815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 1818..1824,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 10,
            span: 1824..1825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 76,
            column: 11,
            span: 1825..1826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 12,
            span: 1826..1827,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 13,
            span: 1826..1828,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 14,
            span: 1828..1829,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 16,
            span: 1829..1831,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 17,
            span: 1831..1832,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 76,
            column: 20,
            span: 1833..1835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 76,
            column: 22,
            span: 1836..1837,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 23,
            span: 1837..1838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 77,
            column: 4,
            span: 1841..1842,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 77,
            column: 6,
            span: 1843..1844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 77,
            column: 8,
            span: 1845..1846,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 1846..1847,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 77,
            column: 0,
            span: 1847..1848,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 78,
            column: 0,
            span: 1849..1852,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 81,
            column: 9,
            span: 1863..1871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        position: Position {
            line: 81,
            column: 13,
            span: 1872..1875,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 15,
            span: 1876..1877,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 81,
            column: 16,
            span: 1877..1878,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 17,
            span: 1878..1879,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 82,
            column: 9,
            span: 1882..1888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 82,
            column: 19,
            span: 1889..1898,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 82,
            column: 20,
            span: 1898..1899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 82,
            column: 24,
            span: 1899..1903,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 25,
            span: 1903..1904,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 82,
            column: 33,
            span: 1904..1912,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 35,
            span: 1913..1914,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 36,
            span: 1914..1915,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 83,
            column: 8,
            span: 1920..1923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 83,
            column: 10,
            span: 1924..1925,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 83,
            column: 11,
            span: 1925..1926,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 12,
            span: 1925..1927,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 13,
            span: 1927..1928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 83,
            column: 14,
            span: 1928..1929,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 83,
            column: 17,
            span: 1930..1932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 83,
            column: 27,
            span: 1933..1942,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 83,
            column: 28,
            span: 1942..1943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 83,
            column: 33,
            span: 1943..1948,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 34,
            span: 1948..1949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 83,
            column: 35,
            span: 1949..1950,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 36,
            span: 1950..1951,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 83,
            column: 0,
            span: 1952..1955,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 84,
            column: 6,
            span: 1958..1961,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 7,
            span: 1961..1962,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 85,
            column: 0,
            span: 1963..1966,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 88,
            column: 9,
            span: 1969..1977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filter",
        ),
        position: Position {
            line: 88,
            column: 16,
            span: 1978..1984,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 18,
            span: 1985..1986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 88,
            column: 19,
            span: 1986..1987,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 20,
            span: 1987..1988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 88,
            column: 22,
            span: 1989..1990,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 23,
            span: 1990..1991,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 89,
            column: 9,
            span: 1994..2000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 89,
            column: 19,
            span: 2001..2010,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 89,
            column: 20,
            span: 2010..2011,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 89,
            column: 24,
            span: 2011..2015,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 25,
            span: 2015..2016,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 89,
            column: 33,
            span: 2016..2024,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 35,
            span: 2025..2026,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 36,
            span: 2026..2027,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 90,
            column: 10,
            span: 2032..2037,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 90,
            column: 12,
            span: 2037..2039,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 90,
            column: 0,
            span: 2040..2042,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 91,
            column: 12,
            span: 2049..2054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 91,
            column: 14,
            span: 2055..2056,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 91,
            column: 16,
            span: 2057..2058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 91,
            column: 18,
            span: 2059..2060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 91,
            column: 19,
            span: 2060..2061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 91,
            column: 20,
            span: 2061..2062,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 92,
            column: 9,
            span: 2069..2071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 92,
            column: 11,
            span: 2072..2073,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 92,
            column: 14,
            span: 2074..2076,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 92,
            column: 18,
            span: 2077..2080,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 92,
            column: 23,
            span: 2081..2085,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 92,
            column: 30,
            span: 2086..2092,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 92,
            column: 0,
            span: 2093..2096,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 93,
            column: 9,
            span: 2103..2105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 93,
            column: 14,
            span: 2106..2110,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 93,
            column: 15,
            span: 2110..2111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        position: Position {
            line: 93,
            column: 19,
            span: 2111..2115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 20,
            span: 2115..2116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 93,
            column: 21,
            span: 2116..2117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 22,
            span: 2117..2118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 93,
            column: 24,
            span: 2119..2120,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 25,
            span: 2120..2121,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 93,
            column: 28,
            span: 2122..2124,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 93,
            column: 30,
            span: 2124..2126,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 93,
            column: 35,
            span: 2127..2131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 93,
            column: 45,
            span: 2132..2141,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 93,
            column: 46,
            span: 2141..2142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 93,
            column: 51,
            span: 2142..2147,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 52,
            span: 2147..2148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 93,
            column: 53,
            span: 2148..2149,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 54,
            span: 2149..2150,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 93,
            column: 0,
            span: 2151..2154,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 94,
            column: 0,
            span: 2159..2162,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 95,
            column: 6,
            span: 2165..2168,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 7,
            span: 2168..2169,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 96,
            column: 0,
            span: 2170..2173,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 98,
            column: 6,
            span: 2175..2180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 98,
            column: 8,
            span: 2181..2182,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 98,
            column: 10,
            span: 2183..2184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        position: Position {
            line: 98,
            column: 14,
            span: 2185..2188,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 98,
            column: 15,
            span: 2188..2189,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 98,
            column: 18,
            span: 2188..2192,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 98,
            column: 19,
            span: 2192..2193,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 99,
            column: 6,
            span: 2194..2199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 99,
            column: 8,
            span: 2200..2201,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 99,
            column: 10,
            span: 2202..2203,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 99,
            column: 12,
            span: 2204..2205,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 99,
            column: 13,
            span: 2205..2206,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 100,
            column: 6,
            span: 2207..2212,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 8,
            span: 2212..2214,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 100,
            column: 0,
            span: 2215..2217,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 101,
            column: 8,
            span: 2220..2225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 2226..2227,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 101,
            column: 12,
            span: 2228..2229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 101,
            column: 14,
            span: 2230..2231,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 15,
            span: 2231..2232,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 16,
            span: 2232..2233,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 102,
            column: 5,
            span: 2236..2238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 102,
            column: 7,
            span: 2239..2240,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 102,
            column: 10,
            span: 2241..2243,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 102,
            column: 14,
            span: 2244..2247,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 102,
            column: 19,
            span: 2248..2252,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 102,
            column: 25,
            span: 2253..2258,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 102,
            column: 0,
            span: 2259..2262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 103,
            column: 8,
            span: 2265..2270,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 103,
            column: 9,
            span: 2270..2271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 103,
            column: 15,
            span: 2271..2277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 16,
            span: 2277..2278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 103,
            column: 17,
            span: 2278..2279,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 18,
            span: 2279..2280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 103,
            column: 20,
            span: 2281..2282,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 21,
            span: 2282..2283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 104,
            column: 4,
            span: 2286..2287,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 104,
            column: 6,
            span: 2288..2289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "filter",
        ),
        position: Position {
            line: 104,
            column: 13,
            span: 2290..2296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 104,
            column: 14,
            span: 2296..2297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 104,
            column: 15,
            span: 2297..2298,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 16,
            span: 2298..2299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 104,
            column: 18,
            span: 2300..2301,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 104,
            column: 19,
            span: 2301..2302,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 105,
            column: 0,
            span: 2303..2306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 107,
            column: 7,
            span: 2308..2314,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 8,
            span: 2314..2315,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 107,
            column: 9,
            span: 2315..2316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 2316..2317,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 107,
            column: 13,
            span: 2318..2320,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 16,
            span: 2320..2323,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 107,
            column: 20,
            span: 2324..2327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 107,
            column: 22,
            span: 2328..2329,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 107,
            column: 23,
            span: 2329..2330,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 107,
            column: 24,
            span: 2330..2331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 107,
            column: 25,
            span: 2331..2332,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 107,
            column: 26,
            span: 2332..2333,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 107,
            column: 29,
            span: 2334..2336,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "97",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 32,
            span: 2336..2339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 33,
            span: 2339..2340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 112,
            column: 3,
            span: 2376..2378,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 112,
            column: 5,
            span: 2379..2380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 112,
            column: 15,
            span: 2381..2390,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 112,
            column: 16,
            span: 2390..2391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 112,
            column: 20,
            span: 2391..2395,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 21,
            span: 2395..2396,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 112,
            column: 29,
            span: 2396..2404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 112,
            column: 30,
            span: 2404..2405,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 112,
            column: 31,
            span: 2405..2406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 113,
            column: 14,
            span: 2414..2420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 15,
            span: 2420..2421,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 113,
            column: 18,
            span: 2421..2424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 113,
            column: 24,
            span: 2425..2430,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 113,
            column: 25,
            span: 2430..2431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 113,
            column: 30,
            span: 2431..2436,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 113,
            column: 31,
            span: 2436..2437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 113,
            column: 35,
            span: 2437..2441,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 36,
            span: 2441..2442,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 113,
            column: 37,
            span: 2442..2443,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 113,
            column: 38,
            span: 2442..2444,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 39,
            span: 2444..2445,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 113,
            column: 40,
            span: 2444..2446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 41,
            span: 2446..2447,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 113,
            column: 42,
            span: 2446..2448,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 113,
            column: 43,
            span: 2448..2449,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 113,
            column: 44,
            span: 2449..2450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 113,
            column: 54,
            span: 2451..2460,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 113,
            column: 55,
            span: 2460..2461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 113,
            column: 60,
            span: 2461..2466,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 61,
            span: 2466..2467,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 113,
            column: 62,
            span: 2467..2468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 114,
            column: 17,
            span: 2476..2485,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 114,
            column: 18,
            span: 2485..2486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 114,
            column: 23,
            span: 2486..2491,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 114,
            column: 24,
            span: 2491..2492,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 26,
            span: 2491..2494,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 114,
            column: 27,
            span: 2494..2495,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 115,
            column: 14,
            span: 2503..2509,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 115,
            column: 0,
            span: 2509..2512,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 116,
            column: 9,
            span: 2518..2521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 116,
            column: 10,
            span: 2521..2522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 118,
            column: 7,
            span: 2524..2530,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 8,
            span: 2530..2531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 2531..2533,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 11,
            span: 2533..2534,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 12,
            span: 2534..2535,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 118,
            column: 15,
            span: 2536..2538,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 118,
            column: 18,
            span: 2538..2541,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 19,
            span: 2541..2542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 119,
            column: 7,
            span: 2543..2549,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 8,
            span: 2549..2550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 119,
            column: 10,
            span: 2550..2552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 11,
            span: 2552..2553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 12,
            span: 2553..2554,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 119,
            column: 15,
            span: 2555..2557,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 119,
            column: 18,
            span: 2557..2560,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 19,
            span: 2560..2561,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 122,
            column: 6,
            span: 2564..2569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 122,
            column: 8,
            span: 2570..2571,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 122,
            column: 10,
            span: 2572..2573,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 122,
            column: 19,
            span: 2574..2582,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 21,
            span: 2583..2584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 122,
            column: 22,
            span: 2584..2585,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 122,
            column: 23,
            span: 2585..2586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 122,
            column: 25,
            span: 2587..2588,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 26,
            span: 2588..2589,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 122,
            column: 33,
            span: 2590..2596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 122,
            column: 43,
            span: 2597..2606,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 122,
            column: 44,
            span: 2606..2607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 122,
            column: 49,
            span: 2607..2612,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 122,
            column: 50,
            span: 2612..2613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 122,
            column: 51,
            span: 2613..2614,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 122,
            column: 52,
            span: 2614..2615,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 122,
            column: 0,
            span: 2616..2619,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 124,
            column: 6,
            span: 2621..2626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 124,
            column: 9,
            span: 2627..2629,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 124,
            column: 11,
            span: 2630..2631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 124,
            column: 21,
            span: 2632..2641,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 124,
            column: 22,
            span: 2641..2642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 124,
            column: 26,
            span: 2642..2646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 27,
            span: 2646..2647,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 124,
            column: 35,
            span: 2647..2655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 37,
            span: 2656..2657,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 38,
            span: 2657..2658,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 125,
            column: 20,
            span: 2672..2678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 125,
            column: 27,
            span: 2679..2685,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 28,
            span: 2685..2686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 125,
            column: 33,
            span: 2686..2691,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 34,
            span: 2691..2692,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 125,
            column: 43,
            span: 2693..2701,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 45,
            span: 2702..2703,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 125,
            column: 48,
            span: 2703..2706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 49,
            span: 2706..2707,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 125,
            column: 56,
            span: 2708..2714,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 125,
            column: 60,
            span: 2715..2718,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 125,
            column: 64,
            span: 2719..2722,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 65,
            span: 2722..2723,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 126,
            column: 24,
            span: 2739..2747,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 26,
            span: 2748..2749,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 27,
            span: 2749..2750,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 127,
            column: 23,
            span: 2768..2773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 127,
            column: 25,
            span: 2774..2775,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 127,
            column: 27,
            span: 2776..2777,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 127,
            column: 0,
            span: 2777..2779,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 128,
            column: 21,
            span: 2797..2800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 128,
            column: 23,
            span: 2801..2802,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 128,
            column: 26,
            span: 2803..2805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 128,
            column: 28,
            span: 2806..2807,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 29,
            span: 2807..2808,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 128,
            column: 33,
            span: 2809..2812,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 128,
            column: 34,
            span: 2812..2813,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 128,
            column: 36,
            span: 2813..2815,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 128,
            column: 39,
            span: 2816..2818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 128,
            column: 45,
            span: 2819..2824,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 46,
            span: 2824..2825,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 128,
            column: 54,
            span: 2825..2833,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 128,
            column: 56,
            span: 2834..2835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 57,
            span: 2835..2836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 128,
            column: 59,
            span: 2837..2838,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 128,
            column: 61,
            span: 2839..2840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 128,
            column: 63,
            span: 2841..2842,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 128,
            column: 65,
            span: 2843..2844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 128,
            column: 67,
            span: 2845..2846,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 128,
            column: 71,
            span: 2847..2850,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 128,
            column: 72,
            span: 2850..2851,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 128,
            column: 0,
            span: 2852..2855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 129,
            column: 23,
            span: 2873..2878,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 24,
            span: 2878..2879,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 129,
            column: 25,
            span: 2879..2880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 129,
            column: 26,
            span: 2880..2881,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 129,
            column: 27,
            span: 2881..2882,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 28,
            span: 2882..2883,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 130,
            column: 19,
            span: 2899..2902,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 20,
            span: 2902..2903,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 131,
            column: 15,
            span: 2915..2918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 16,
            span: 2918..2919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 133,
            column: 3,
            span: 2921..2923,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 4,
            span: 2923..2924,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 5,
            span: 2924..2925,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 134,
            column: 4,
            span: 2926..2929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 134,
            column: 6,
            span: 2930..2931,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 134,
            column: 8,
            span: 2932..2933,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 134,
            column: 10,
            span: 2933..2935,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 11,
            span: 2935..2936,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 134,
            column: 14,
            span: 2936..2939,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 134,
            column: 17,
            span: 2940..2942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 134,
            column: 24,
            span: 2943..2949,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 25,
            span: 2949..2950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 134,
            column: 27,
            span: 2950..2952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 28,
            span: 2952..2953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 134,
            column: 29,
            span: 2953..2954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 30,
            span: 2954..2955,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 134,
            column: 33,
            span: 2956..2958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 134,
            column: 35,
            span: 2959..2960,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 36,
            span: 2960..2961,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 134,
            column: 0,
            span: 2962..2965,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 135,
            column: 6,
            span: 2966..2971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r1",
        ),
        position: Position {
            line: 135,
            column: 9,
            span: 2972..2974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 10,
            span: 2974..2975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r2",
        ),
        position: Position {
            line: 135,
            column: 13,
            span: 2976..2978,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 14,
            span: 2978..2979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 135,
            column: 16,
            span: 2980..2981,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 135,
            column: 18,
            span: 2982..2983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f1",
        ),
        position: Position {
            line: 135,
            column: 21,
            span: 2984..2986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 22,
            span: 2986..2987,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 135,
            column: 25,
            span: 2987..2990,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 135,
            column: 26,
            span: 2990..2991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 136,
            column: 7,
            span: 2992..2998,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 8,
            span: 2998..2999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r1",
        ),
        position: Position {
            line: 136,
            column: 10,
            span: 2999..3001,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 136,
            column: 14,
            span: 3002..3005,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 136,
            column: 18,
            span: 3006..3009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r2",
        ),
        position: Position {
            line: 136,
            column: 21,
            span: 3010..3012,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 136,
            column: 25,
            span: 3013..3016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 136,
            column: 27,
            span: 3017..3018,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 136,
            column: 28,
            span: 3018..3019,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 136,
            column: 29,
            span: 3018..3020,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 136,
            column: 30,
            span: 3020..3021,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 136,
            column: 33,
            span: 3022..3024,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 36,
            span: 3026..3027,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 136,
            column: 38,
            span: 3026..3029,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 136,
            column: 40,
            span: 3030..3031,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 136,
            column: 42,
            span: 3031..3033,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 43,
            span: 3033..3034,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 136,
            column: 44,
            span: 3034..3035,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 136,
            column: 46,
            span: 3034..3037,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 136,
            column: 47,
            span: 3037..3038,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 136,
            column: 48,
            span: 3037..3039,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 49,
            span: 3039..3040,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 139,
            column: 9,
            span: 3043..3051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 139,
            column: 11,
            span: 3052..3053,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 13,
            span: 3054..3055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 139,
            column: 14,
            span: 3055..3056,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 139,
            column: 15,
            span: 3056..3057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 139,
            column: 17,
            span: 3058..3059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 18,
            span: 3059..3060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 139,
            column: 20,
            span: 3061..3062,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 139,
            column: 22,
            span: 3063..3064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 139,
            column: 32,
            span: 3065..3074,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 139,
            column: 33,
            span: 3074..3075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 139,
            column: 38,
            span: 3075..3080,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 139,
            column: 39,
            span: 3080..3081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 139,
            column: 40,
            span: 3081..3082,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 139,
            column: 41,
            span: 3082..3083,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 139,
            column: 42,
            span: 3083..3084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 139,
            column: 49,
            span: 3086..3091,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 139,
            column: 50,
            span: 3091..3092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 139,
            column: 51,
            span: 3092..3093,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 139,
            column: 53,
            span: 3094..3095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 139,
            column: 55,
            span: 3096..3097,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 139,
            column: 56,
            span: 3097..3098,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 139,
            column: 0,
            span: 3099..3102,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 140,
            column: 9,
            span: 3103..3111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 140,
            column: 11,
            span: 3112..3113,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 12,
            span: 3113..3114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 140,
            column: 13,
            span: 3114..3115,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 14,
            span: 3115..3116,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 140,
            column: 21,
            span: 3117..3123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 140,
            column: 23,
            span: 3124..3125,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 140,
            column: 24,
            span: 3125..3126,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 25,
            span: 3125..3127,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 140,
            column: 26,
            span: 3127..3128,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 140,
            column: 27,
            span: 3128..3129,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 28,
            span: 3128..3130,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 140,
            column: 0,
            span: 3131..3134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 142,
            column: 3,
            span: 3136..3138,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 142,
            column: 5,
            span: 3139..3140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 142,
            column: 15,
            span: 3141..3150,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 142,
            column: 16,
            span: 3150..3151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 142,
            column: 20,
            span: 3151..3155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 142,
            column: 21,
            span: 3155..3156,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 142,
            column: 29,
            span: 3156..3164,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 142,
            column: 31,
            span: 3165..3166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 142,
            column: 32,
            span: 3166..3167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 143,
            column: 17,
            span: 3175..3184,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 143,
            column: 18,
            span: 3184..3185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 143,
            column: 23,
            span: 3185..3190,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 24,
            span: 3190..3191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xpcall",
        ),
        position: Position {
            line: 143,
            column: 30,
            span: 3191..3197,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 31,
            span: 3197..3198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 143,
            column: 32,
            span: 3198..3199,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 143,
            column: 33,
            span: 3199..3200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 143,
            column: 35,
            span: 3201..3202,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 143,
            column: 36,
            span: 3202..3203,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 143,
            column: 39,
            span: 3203..3206,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 143,
            column: 40,
            span: 3206..3207,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 143,
            column: 43,
            span: 3207..3210,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 44,
            span: 3210..3211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 45,
            span: 3211..3212,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 144,
            column: 9,
            span: 3218..3221,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 10,
            span: 3221..3222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 146,
            column: 7,
            span: 3224..3230,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 8,
            span: 3230..3231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 146,
            column: 10,
            span: 3231..3233,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 11,
            span: 3233..3234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 12,
            span: 3234..3235,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 146,
            column: 15,
            span: 3236..3238,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 18,
            span: 3238..3241,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 19,
            span: 3241..3242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 147,
            column: 2,
            span: 3243..3244,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 3,
            span: 3244..3245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 147,
            column: 7,
            span: 3246..3249,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 147,
            column: 9,
            span: 3250..3251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 147,
            column: 12,
            span: 3252..3254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 13,
            span: 3254..3255,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 147,
            column: 16,
            span: 3254..3258,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 17,
            span: 3258..3259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 148,
            column: 7,
            span: 3260..3266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 148,
            column: 8,
            span: 3266..3267,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 148,
            column: 11,
            span: 3267..3270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 148,
            column: 13,
            span: 3271..3272,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 148,
            column: 17,
            span: 3273..3276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 148,
            column: 21,
            span: 3277..3280,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 148,
            column: 24,
            span: 3281..3283,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "240",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 148,
            column: 28,
            span: 3283..3287,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 148,
            column: 29,
            span: 3287..3288,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 152,
            column: 9,
            span: 3315..3323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 152,
            column: 13,
            span: 3324..3327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 152,
            column: 15,
            span: 3328..3329,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 16,
            span: 3329..3330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 153,
            column: 9,
            span: 3333..3339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 10,
            span: 3339..3340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 153,
            column: 15,
            span: 3340..3345,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 16,
            span: 3345..3346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 153,
            column: 23,
            span: 3346..3353,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 24,
            span: 3353..3354,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 153,
            column: 25,
            span: 3353..3355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 26,
            span: 3355..3356,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 27,
            span: 3356..3357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 153,
            column: 38,
            span: 3357..3368,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 153,
            column: 41,
            span: 3369..3371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 153,
            column: 47,
            span: 3372..3377,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 48,
            span: 3377..3378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 153,
            column: 55,
            span: 3378..3385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 56,
            span: 3385..3386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 153,
            column: 59,
            span: 3386..3389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 60,
            span: 3389..3390,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 61,
            span: 3390..3391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 153,
            column: 72,
            span: 3391..3402,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 153,
            column: 74,
            span: 3403..3404,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 153,
            column: 76,
            span: 3404..3406,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 77,
            span: 3406..3407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 154,
            column: 9,
            span: 3410..3416,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 10,
            span: 3416..3417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 154,
            column: 15,
            span: 3417..3422,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 154,
            column: 16,
            span: 3422..3423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 154,
            column: 23,
            span: 3423..3430,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 24,
            span: 3430..3431,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 154,
            column: 25,
            span: 3430..3432,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 26,
            span: 3432..3433,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 154,
            column: 27,
            span: 3433..3434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 154,
            column: 38,
            span: 3434..3445,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 154,
            column: 41,
            span: 3446..3448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 154,
            column: 47,
            span: 3449..3454,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 154,
            column: 48,
            span: 3454..3455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 154,
            column: 55,
            span: 3455..3462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 56,
            span: 3462..3463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "goo",
        ),
        position: Position {
            line: 154,
            column: 59,
            span: 3463..3466,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 60,
            span: 3466..3467,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 154,
            column: 61,
            span: 3467..3468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "linedefined",
        ),
        position: Position {
            line: 154,
            column: 72,
            span: 3468..3479,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 73,
            span: 3479..3480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 155,
            column: 12,
            span: 3483..3492,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 155,
            column: 13,
            span: 3492..3493,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 155,
            column: 18,
            span: 3493..3498,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 19,
            span: 3498..3499,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 155,
            column: 20,
            span: 3498..3500,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 21,
            span: 3500..3501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 156,
            column: 8,
            span: 3504..3509,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 156,
            column: 9,
            span: 3509..3510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 156,
            column: 12,
            span: 3510..3513,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 156,
            column: 13,
            span: 3513..3514,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 157,
            column: 0,
            span: 3515..3518,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 159,
            column: 9,
            span: 3520..3528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "goo",
        ),
        position: Position {
            line: 159,
            column: 13,
            span: 3529..3532,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 14,
            span: 3532..3533,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 15,
            span: 3533..3534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 159,
            column: 19,
            span: 3535..3538,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 159,
            column: 20,
            span: 3538..3539,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 159,
            column: 21,
            span: 3539..3540,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 159,
            column: 0,
            span: 3541..3544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 160,
            column: 2,
            span: 3545..3546,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 160,
            column: 4,
            span: 3547..3548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 160,
            column: 14,
            span: 3549..3558,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 160,
            column: 15,
            span: 3558..3559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 160,
            column: 19,
            span: 3559..3563,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 20,
            span: 3563..3564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "goo",
        ),
        position: Position {
            line: 160,
            column: 23,
            span: 3564..3567,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 24,
            span: 3567..3568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 161,
            column: 7,
            span: 3569..3575,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 8,
            span: 3575..3576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 161,
            column: 9,
            span: 3576..3577,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 161,
            column: 10,
            span: 3577..3578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 11,
            span: 3578..3579,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 161,
            column: 14,
            span: 3580..3582,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 161,
            column: 16,
            span: 3582..3584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 161,
            column: 17,
            span: 3584..3585,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 162,
            column: 6,
            span: 3586..3591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 162,
            column: 8,
            span: 3592..3593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 9,
            span: 3593..3594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 162,
            column: 10,
            span: 3594..3595,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 162,
            column: 12,
            span: 3596..3597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 162,
            column: 18,
            span: 3598..3603,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 19,
            span: 3603..3604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 162,
            column: 20,
            span: 3604..3605,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 21,
            span: 3605..3606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 163,
            column: 7,
            span: 3607..3613,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 8,
            span: 3613..3614,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 163,
            column: 11,
            span: 3614..3617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 163,
            column: 13,
            span: 3618..3619,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 163,
            column: 17,
            span: 3620..3623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 163,
            column: 19,
            span: 3624..3625,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 163,
            column: 22,
            span: 3626..3628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 163,
            column: 26,
            span: 3629..3632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 27,
            span: 3632..3633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 165,
            column: 2,
            span: 3635..3636,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 165,
            column: 4,
            span: 3637..3638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 165,
            column: 14,
            span: 3639..3648,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 165,
            column: 15,
            span: 3648..3649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 165,
            column: 21,
            span: 3649..3655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 22,
            span: 3655..3656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "goo",
        ),
        position: Position {
            line: 165,
            column: 25,
            span: 3656..3659,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 26,
            span: 3659..3660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 166,
            column: 2,
            span: 3661..3662,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 166,
            column: 3,
            span: 3662..3663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 166,
            column: 4,
            span: 3663..3664,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 166,
            column: 6,
            span: 3665..3666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 166,
            column: 16,
            span: 3667..3676,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 166,
            column: 17,
            span: 3676..3677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 166,
            column: 23,
            span: 3677..3683,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 24,
            span: 3683..3684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 166,
            column: 25,
            span: 3684..3685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 26,
            span: 3685..3686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 167,
            column: 7,
            span: 3687..3693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 167,
            column: 8,
            span: 3693..3694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 167,
            column: 9,
            span: 3694..3695,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 167,
            column: 13,
            span: 3696..3699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 167,
            column: 15,
            span: 3700..3701,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 167,
            column: 18,
            span: 3702..3704,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 167,
            column: 20,
            span: 3704..3706,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 167,
            column: 21,
            span: 3706..3707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 168,
            column: 2,
            span: 3708..3709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 168,
            column: 3,
            span: 3709..3710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 168,
            column: 4,
            span: 3710..3711,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 168,
            column: 6,
            span: 3712..3713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 168,
            column: 16,
            span: 3714..3723,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 168,
            column: 17,
            span: 3723..3724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 168,
            column: 23,
            span: 3724..3730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 168,
            column: 24,
            span: 3730..3731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 168,
            column: 25,
            span: 3731..3732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 168,
            column: 26,
            span: 3732..3733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 169,
            column: 7,
            span: 3734..3740,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 8,
            span: 3740..3741,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 169,
            column: 11,
            span: 3741..3744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 169,
            column: 13,
            span: 3745..3746,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 169,
            column: 17,
            span: 3747..3750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 169,
            column: 19,
            span: 3751..3752,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 169,
            column: 22,
            span: 3753..3755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 169,
            column: 26,
            span: 3756..3759,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 169,
            column: 30,
            span: 3760..3763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 169,
            column: 40,
            span: 3764..3773,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 169,
            column: 41,
            span: 3773..3774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 169,
            column: 47,
            span: 3774..3780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 169,
            column: 48,
            span: 3780..3781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 169,
            column: 49,
            span: 3781..3782,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 50,
            span: 3782..3783,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 169,
            column: 53,
            span: 3784..3786,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        position: Position {
            line: 169,
            column: 60,
            span: 3787..3793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 169,
            column: 61,
            span: 3793..3794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 170,
            column: 2,
            span: 3795..3796,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 170,
            column: 3,
            span: 3796..3797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 170,
            column: 4,
            span: 3797..3798,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 170,
            column: 6,
            span: 3799..3800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 170,
            column: 16,
            span: 3801..3810,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 170,
            column: 17,
            span: 3810..3811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 170,
            column: 23,
            span: 3811..3817,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 24,
            span: 3817..3818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 170,
            column: 25,
            span: 3818..3819,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 26,
            span: 3819..3820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 171,
            column: 7,
            span: 3821..3827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 8,
            span: 3827..3828,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 171,
            column: 11,
            span: 3828..3831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 171,
            column: 13,
            span: 3832..3833,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 171,
            column: 17,
            span: 3834..3837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 171,
            column: 24,
            span: 3838..3844,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 171,
            column: 25,
            span: 3844..3845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 171,
            column: 29,
            span: 3845..3849,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 30,
            span: 3849..3850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 171,
            column: 31,
            span: 3850..3851,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 171,
            column: 32,
            span: 3851..3852,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        position: Position {
            line: 171,
            column: 39,
            span: 3853..3859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 40,
            span: 3859..3860,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 171,
            column: 44,
            span: 3861..3864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 171,
            column: 54,
            span: 3865..3874,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 171,
            column: 55,
            span: 3874..3875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 171,
            column: 61,
            span: 3875..3881,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 62,
            span: 3881..3882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 171,
            column: 63,
            span: 3882..3883,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 64,
            span: 3883..3884,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 171,
            column: 67,
            span: 3885..3887,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dead\"",
        ),
        position: Position {
            line: 171,
            column: 74,
            span: 3888..3894,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 75,
            span: 3894..3895,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 175,
            column: 9,
            span: 3924..3932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "all",
        ),
        position: Position {
            line: 175,
            column: 13,
            span: 3933..3936,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 15,
            span: 3937..3938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 175,
            column: 16,
            span: 3938..3939,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 175,
            column: 17,
            span: 3939..3940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 175,
            column: 19,
            span: 3941..3942,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 175,
            column: 20,
            span: 3942..3943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 175,
            column: 22,
            span: 3944..3945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 23,
            span: 3945..3946,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 176,
            column: 5,
            span: 3949..3951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 176,
            column: 7,
            span: 3952..3953,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 176,
            column: 10,
            span: 3954..3956,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 176,
            column: 12,
            span: 3956..3958,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 176,
            column: 17,
            span: 3959..3963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 176,
            column: 27,
            span: 3964..3973,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 176,
            column: 28,
            span: 3973..3974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 176,
            column: 33,
            span: 3974..3979,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 34,
            span: 3979..3980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 176,
            column: 35,
            span: 3980..3981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 36,
            span: 3981..3982,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 177,
            column: 0,
            span: 3985..3989,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 178,
            column: 8,
            span: 3994..3997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 178,
            column: 10,
            span: 3998..3999,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 178,
            column: 11,
            span: 3999..4000,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 12,
            span: 3999..4001,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 13,
            span: 4001..4002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 178,
            column: 14,
            span: 4002..4003,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 178,
            column: 0,
            span: 4004..4006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 179,
            column: 8,
            span: 4013..4014,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 179,
            column: 9,
            span: 4014..4015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 179,
            column: 10,
            span: 4015..4016,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 179,
            column: 11,
            span: 4016..4017,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 179,
            column: 13,
            span: 4018..4019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 179,
            column: 0,
            span: 4020..4021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "all",
        ),
        position: Position {
            line: 180,
            column: 10,
            span: 4028..4031,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 11,
            span: 4031..4032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 180,
            column: 12,
            span: 4032..4033,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 180,
            column: 13,
            span: 4033..4034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 180,
            column: 15,
            span: 4035..4036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 180,
            column: 16,
            span: 4036..4037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 180,
            column: 18,
            span: 4038..4039,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 180,
            column: 19,
            span: 4039..4040,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 20,
            span: 4039..4041,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 21,
            span: 4041..4042,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 181,
            column: 0,
            span: 4047..4050,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 182,
            column: 0,
            span: 4053..4056,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 183,
            column: 0,
            span: 4057..4060,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 185,
            column: 6,
            span: 4062..4067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 185,
            column: 8,
            span: 4068..4069,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 185,
            column: 10,
            span: 4070..4071,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 185,
            column: 0,
            span: 4071..4073,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 186,
            column: 4,
            span: 4074..4077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 186,
            column: 6,
            span: 4078..4079,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 186,
            column: 9,
            span: 4080..4082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 186,
            column: 19,
            span: 4083..4092,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 186,
            column: 20,
            span: 4092..4093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 186,
            column: 24,
            span: 4093..4097,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 25,
            span: 4097..4098,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 186,
            column: 33,
            span: 4098..4106,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 35,
            span: 4107..4108,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 36,
            span: 4108..4109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "all",
        ),
        position: Position {
            line: 186,
            column: 40,
            span: 4110..4113,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 41,
            span: 4113..4114,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 186,
            column: 42,
            span: 4114..4115,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 186,
            column: 43,
            span: 4115..4116,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 186,
            column: 44,
            span: 4116..4117,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 186,
            column: 46,
            span: 4117..4119,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 186,
            column: 47,
            span: 4119..4120,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 186,
            column: 49,
            span: 4120..4122,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 50,
            span: 4122..4123,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 186,
            column: 54,
            span: 4124..4127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 55,
            span: 4127..4128,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 186,
            column: 0,
            span: 4129..4131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 187,
            column: 4,
            span: 4134..4135,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 187,
            column: 6,
            span: 4136..4137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 187,
            column: 8,
            span: 4138..4139,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 187,
            column: 9,
            span: 4139..4140,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 187,
            column: 0,
            span: 4139..4141,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 188,
            column: 0,
            span: 4142..4145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 189,
            column: 7,
            span: 4146..4152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 189,
            column: 8,
            span: 4152..4153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 189,
            column: 9,
            span: 4153..4154,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 189,
            column: 12,
            span: 4155..4157,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 189,
            column: 14,
            span: 4157..4159,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 189,
            column: 15,
            span: 4159..4160,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 189,
            column: 16,
            span: 4159..4161,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 17,
            span: 4161..4162,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 193,
            column: 6,
            span: 4210..4215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 193,
            column: 8,
            span: 4216..4217,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 193,
            column: 10,
            span: 4218..4219,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 193,
            column: 12,
            span: 4220..4221,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 193,
            column: 13,
            span: 4221..4222,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 193,
            column: 14,
            span: 4222..4223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 193,
            column: 27,
            span: 4224..4236,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 28,
            span: 4236..4237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 193,
            column: 29,
            span: 4237..4238,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 30,
            span: 4238..4239,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 193,
            column: 32,
            span: 4240..4241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mode",
        ),
        position: Position {
            line: 193,
            column: 38,
            span: 4241..4247,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 193,
            column: 40,
            span: 4248..4249,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"kv\"",
        ),
        position: Position {
            line: 193,
            column: 45,
            span: 4250..4254,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 193,
            column: 46,
            span: 4254..4255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 47,
            span: 4255..4256,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 194,
            column: 6,
            span: 4257..4262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 194,
            column: 8,
            span: 4263..4264,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 194,
            column: 10,
            span: 4265..4266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 194,
            column: 20,
            span: 4267..4276,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 194,
            column: 21,
            span: 4276..4277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 194,
            column: 25,
            span: 4277..4281,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 27,
            span: 4282..4283,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 194,
            column: 35,
            span: 4283..4291,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 37,
            span: 4292..4293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 38,
            span: 4293..4294,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 195,
            column: 18,
            span: 4307..4312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 195,
            column: 20,
            span: 4313..4314,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 195,
            column: 22,
            span: 4315..4316,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 0,
            span: 4316..4319,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 196,
            column: 18,
            span: 4332..4337,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 196,
            column: 27,
            span: 4338..4346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 196,
            column: 29,
            span: 4347..4348,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 31,
            span: 4349..4350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 32,
            span: 4350..4351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 196,
            column: 34,
            span: 4352..4353,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 196,
            column: 36,
            span: 4354..4355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 196,
            column: 38,
            span: 4356..4357,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 196,
            column: 39,
            span: 4357..4358,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 196,
            column: 41,
            span: 4357..4360,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 196,
            column: 42,
            span: 4360..4361,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 196,
            column: 49,
            span: 4362..4368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 196,
            column: 51,
            span: 4369..4370,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 196,
            column: 0,
            span: 4371..4374,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 197,
            column: 18,
            span: 4387..4392,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 197,
            column: 23,
            span: 4393..4397,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 197,
            column: 0,
            span: 4398..4400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 198,
            column: 16,
            span: 4415..4416,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 198,
            column: 18,
            span: 4417..4418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 198,
            column: 20,
            span: 4419..4420,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 198,
            column: 21,
            span: 4420..4421,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 0,
            span: 4420..4422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 199,
            column: 24,
            span: 4437..4446,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 199,
            column: 25,
            span: 4446..4447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 199,
            column: 30,
            span: 4447..4452,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 31,
            span: 4452..4453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 199,
            column: 32,
            span: 4453..4454,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 33,
            span: 4454..4455,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 200,
            column: 0,
            span: 4468..4471,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 201,
            column: 14,
            span: 4482..4485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 15,
            span: 4485..4486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 203,
            column: 2,
            span: 4488..4489,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 203,
            column: 3,
            span: 4489..4490,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 203,
            column: 4,
            span: 4489..4491,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 203,
            column: 5,
            span: 4491..4492,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 203,
            column: 7,
            span: 4493..4494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 203,
            column: 9,
            span: 4495..4496,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 203,
            column: 10,
            span: 4496..4497,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 205,
            column: 6,
            span: 4499..4504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 205,
            column: 8,
            span: 4505..4506,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 205,
            column: 10,
            span: 4507..4508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 205,
            column: 12,
            span: 4509..4510,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 13,
            span: 4510..4511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 14,
            span: 4511..4512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 206,
            column: 7,
            span: 4513..4519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 8,
            span: 4519..4520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 206,
            column: 9,
            span: 4520..4521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 10,
            span: 4521..4522,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 11,
            span: 4522..4523,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 206,
            column: 14,
            span: 4524..4526,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "21",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 17,
            span: 4526..4529,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 206,
            column: 21,
            span: 4530..4533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 206,
            column: 23,
            span: 4534..4535,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 24,
            span: 4535..4536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 25,
            span: 4536..4537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 26,
            span: 4537..4538,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 27,
            span: 4538..4539,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 206,
            column: 30,
            span: 4540..4542,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 206,
            column: 33,
            span: 4542..4545,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 206,
            column: 37,
            span: 4546..4549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 206,
            column: 39,
            span: 4550..4551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 206,
            column: 40,
            span: 4551..4552,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 41,
            span: 4552..4553,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 206,
            column: 44,
            span: 4554..4556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 206,
            column: 46,
            span: 4557..4558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 206,
            column: 47,
            span: 4558..4559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 207,
            column: 2,
            span: 4560..4561,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 207,
            column: 4,
            span: 4562..4563,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 207,
            column: 0,
            span: 4564..4567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 208,
            column: 15,
            span: 4568..4582,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 208,
            column: 16,
            span: 4582..4583,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 208,
            column: 17,
            span: 4583..4584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 209,
            column: 7,
            span: 4585..4591,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 8,
            span: 4591..4592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 209,
            column: 9,
            span: 4592..4593,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 209,
            column: 10,
            span: 4593..4594,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 11,
            span: 4593..4595,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 209,
            column: 12,
            span: 4595..4596,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 209,
            column: 15,
            span: 4597..4599,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 209,
            column: 19,
            span: 4600..4603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 20,
            span: 4603..4604,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 210,
            column: 7,
            span: 4605..4611,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 8,
            span: 4611..4612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 210,
            column: 9,
            span: 4612..4613,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 10,
            span: 4613..4614,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 11,
            span: 4614..4615,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 210,
            column: 14,
            span: 4616..4618,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "43",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 17,
            span: 4618..4621,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 210,
            column: 21,
            span: 4622..4625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 210,
            column: 23,
            span: 4626..4627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 24,
            span: 4627..4628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 25,
            span: 4628..4629,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 210,
            column: 28,
            span: 4630..4632,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "53",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 31,
            span: 4632..4635,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 32,
            span: 4635..4636,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 215,
            column: 9,
            span: 4677..4685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co_func",
        ),
        position: Position {
            line: 215,
            column: 17,
            span: 4686..4693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 19,
            span: 4694..4695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "current_co",
        ),
        position: Position {
            line: 215,
            column: 29,
            span: 4695..4705,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 30,
            span: 4705..4706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 216,
            column: 9,
            span: 4709..4715,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 10,
            span: 4715..4716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 216,
            column: 19,
            span: 4716..4725,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 216,
            column: 20,
            span: 4725..4726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        position: Position {
            line: 216,
            column: 27,
            span: 4726..4733,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 216,
            column: 28,
            span: 4733..4734,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 29,
            span: 4734..4735,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 216,
            column: 32,
            span: 4736..4738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "current_co",
        ),
        position: Position {
            line: 216,
            column: 43,
            span: 4739..4749,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 216,
            column: 44,
            span: 4749..4750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 217,
            column: 9,
            span: 4753..4759,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 10,
            span: 4759..4760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 217,
            column: 19,
            span: 4760..4769,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 217,
            column: 20,
            span: 4769..4770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 217,
            column: 26,
            span: 4770..4776,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 217,
            column: 27,
            span: 4776..4777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "current_co",
        ),
        position: Position {
            line: 217,
            column: 37,
            span: 4777..4787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 38,
            span: 4787..4788,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 217,
            column: 41,
            span: 4789..4791,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 217,
            column: 47,
            span: 4792..4797,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 217,
            column: 48,
            span: 4797..4798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 218,
            column: 9,
            span: 4801..4807,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 10,
            span: 4807..4808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 218,
            column: 19,
            span: 4808..4817,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 218,
            column: 20,
            span: 4817..4818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 218,
            column: 26,
            span: 4818..4824,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 27,
            span: 4824..4825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "current_co",
        ),
        position: Position {
            line: 218,
            column: 37,
            span: 4825..4835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 38,
            span: 4835..4836,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 218,
            column: 41,
            span: 4837..4839,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 218,
            column: 47,
            span: 4840..4845,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 48,
            span: 4845..4846,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 219,
            column: 9,
            span: 4849..4855,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 219,
            column: 0,
            span: 4855..4858,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 220,
            column: 0,
            span: 4859..4862,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 222,
            column: 6,
            span: 4864..4869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 222,
            column: 9,
            span: 4870..4872,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 222,
            column: 11,
            span: 4873..4874,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 222,
            column: 21,
            span: 4875..4884,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 222,
            column: 22,
            span: 4884..4885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 222,
            column: 28,
            span: 4885..4891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 29,
            span: 4891..4892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co_func",
        ),
        position: Position {
            line: 222,
            column: 36,
            span: 4892..4899,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 37,
            span: 4899..4900,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 223,
            column: 6,
            span: 4901..4906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 223,
            column: 8,
            span: 4907..4908,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 9,
            span: 4908..4909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 223,
            column: 10,
            span: 4909..4910,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 223,
            column: 12,
            span: 4911..4912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 223,
            column: 22,
            span: 4913..4922,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 223,
            column: 23,
            span: 4922..4923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 223,
            column: 29,
            span: 4923..4929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 30,
            span: 4929..4930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 223,
            column: 32,
            span: 4930..4932,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 33,
            span: 4932..4933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 223,
            column: 36,
            span: 4934..4936,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 37,
            span: 4936..4937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 224,
            column: 7,
            span: 4938..4944,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 8,
            span: 4944..4945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 224,
            column: 9,
            span: 4945..4946,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 224,
            column: 12,
            span: 4947..4949,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 224,
            column: 17,
            span: 4950..4954,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 224,
            column: 21,
            span: 4955..4958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 224,
            column: 23,
            span: 4959..4960,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 224,
            column: 26,
            span: 4961..4963,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 29,
            span: 4963..4966,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 30,
            span: 4966..4967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 225,
            column: 7,
            span: 4968..4974,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 8,
            span: 4974..4975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 225,
            column: 17,
            span: 4975..4984,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 225,
            column: 18,
            span: 4984..4985,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 225,
            column: 24,
            span: 4985..4991,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 25,
            span: 4991..4992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 225,
            column: 27,
            span: 4992..4994,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 28,
            span: 4994..4995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 225,
            column: 31,
            span: 4996..4998,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 32,
            span: 4998..4999,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 225,
            column: 35,
            span: 5000..5002,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 225,
            column: 41,
            span: 5003..5008,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 42,
            span: 5008..5009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 226,
            column: 7,
            span: 5010..5016,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 8,
            span: 5016..5017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 226,
            column: 17,
            span: 5017..5026,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 226,
            column: 18,
            span: 5026..5027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 226,
            column: 24,
            span: 5027..5033,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 25,
            span: 5033..5034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 226,
            column: 27,
            span: 5034..5036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 28,
            span: 5036..5037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 226,
            column: 31,
            span: 5038..5040,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 32,
            span: 5040..5041,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 226,
            column: 35,
            span: 5042..5044,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 226,
            column: 41,
            span: 5045..5050,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 42,
            span: 5050..5051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co1",
        ),
        position: Position {
            line: 230,
            column: 4,
            span: 5094..5097,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 230,
            column: 6,
            span: 5098..5099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 230,
            column: 16,
            span: 5100..5109,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 230,
            column: 17,
            span: 5109..5110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 230,
            column: 23,
            span: 5110..5116,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 24,
            span: 5116..5117,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 230,
            column: 32,
            span: 5117..5125,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 34,
            span: 5126..5127,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 35,
            span: 5127..5128,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 230,
            column: 42,
            span: 5129..5135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co2",
        ),
        position: Position {
            line: 230,
            column: 46,
            span: 5136..5139,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 47,
            span: 5139..5140,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 48,
            span: 5140..5141,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 230,
            column: 52,
            span: 5142..5145,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 53,
            span: 5145..5146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co2",
        ),
        position: Position {
            line: 231,
            column: 4,
            span: 5147..5150,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 231,
            column: 6,
            span: 5151..5152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 231,
            column: 16,
            span: 5153..5162,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 231,
            column: 17,
            span: 5162..5163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 231,
            column: 21,
            span: 5163..5167,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 22,
            span: 5167..5168,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 231,
            column: 30,
            span: 5168..5176,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 32,
            span: 5177..5178,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 33,
            span: 5178..5179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 232,
            column: 15,
            span: 5188..5194,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 16,
            span: 5194..5195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 232,
            column: 25,
            span: 5195..5204,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 232,
            column: 26,
            span: 5204..5205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 232,
            column: 32,
            span: 5205..5211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 33,
            span: 5211..5212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co1",
        ),
        position: Position {
            line: 232,
            column: 36,
            span: 5212..5215,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 37,
            span: 5215..5216,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 232,
            column: 40,
            span: 5217..5219,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'normal'",
        ),
        position: Position {
            line: 232,
            column: 49,
            span: 5220..5228,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 50,
            span: 5228..5229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 233,
            column: 15,
            span: 5238..5244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 16,
            span: 5244..5245,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 233,
            column: 19,
            span: 5245..5248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 233,
            column: 29,
            span: 5249..5258,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 233,
            column: 30,
            span: 5258..5259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 233,
            column: 36,
            span: 5259..5265,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 37,
            span: 5265..5266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co1",
        ),
        position: Position {
            line: 233,
            column: 40,
            span: 5266..5269,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 41,
            span: 5269..5270,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 42,
            span: 5270..5271,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 234,
            column: 18,
            span: 5280..5289,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 234,
            column: 19,
            span: 5289..5290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 234,
            column: 24,
            span: 5290..5295,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 25,
            span: 5295..5296,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 234,
            column: 26,
            span: 5295..5297,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 27,
            span: 5297..5298,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 235,
            column: 10,
            span: 5305..5308,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 235,
            column: 11,
            span: 5308..5309,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 237,
            column: 2,
            span: 5311..5312,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 3,
            span: 5312..5313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 237,
            column: 4,
            span: 5313..5314,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 237,
            column: 6,
            span: 5315..5316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 237,
            column: 16,
            span: 5317..5326,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 237,
            column: 17,
            span: 5326..5327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 237,
            column: 23,
            span: 5327..5333,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 237,
            column: 24,
            span: 5333..5334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co1",
        ),
        position: Position {
            line: 237,
            column: 27,
            span: 5334..5337,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 237,
            column: 28,
            span: 5337..5338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 238,
            column: 7,
            span: 5339..5345,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 8,
            span: 5345..5346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 9,
            span: 5346..5347,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 238,
            column: 13,
            span: 5348..5351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 238,
            column: 15,
            span: 5352..5353,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 238,
            column: 18,
            span: 5354..5356,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 238,
            column: 20,
            span: 5356..5358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 238,
            column: 21,
            span: 5358..5359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 239,
            column: 7,
            span: 5360..5366,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 8,
            span: 5366..5367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 239,
            column: 17,
            span: 5367..5376,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 239,
            column: 18,
            span: 5376..5377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "status",
        ),
        position: Position {
            line: 239,
            column: 24,
            span: 5377..5383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 239,
            column: 25,
            span: 5383..5384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co1",
        ),
        position: Position {
            line: 239,
            column: 28,
            span: 5384..5387,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 29,
            span: 5387..5388,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 239,
            column: 32,
            span: 5389..5391,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'dead'",
        ),
        position: Position {
            line: 239,
            column: 39,
            span: 5392..5398,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 239,
            column: 40,
            span: 5398..5399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 242,
            column: 2,
            span: 5437..5438,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 242,
            column: 4,
            span: 5439..5440,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 242,
            column: 13,
            span: 5441..5449,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 14,
            span: 5449..5450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 242,
            column: 15,
            span: 5450..5451,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 16,
            span: 5451..5452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 242,
            column: 26,
            span: 5453..5462,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 242,
            column: 27,
            span: 5462..5463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 242,
            column: 31,
            span: 5463..5467,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 32,
            span: 5467..5468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 242,
            column: 33,
            span: 5468..5469,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 34,
            span: 5469..5470,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 242,
            column: 35,
            span: 5470..5471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 242,
            column: 36,
            span: 5471..5472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 242,
            column: 37,
            span: 5472..5473,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 242,
            column: 0,
            span: 5474..5477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 243,
            column: 7,
            span: 5478..5484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 8,
            span: 5484..5485,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 243,
            column: 11,
            span: 5485..5488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 243,
            column: 17,
            span: 5489..5494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 243,
            column: 18,
            span: 5494..5495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 243,
            column: 19,
            span: 5495..5496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 243,
            column: 20,
            span: 5496..5497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 243,
            column: 22,
            span: 5498..5499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 23,
            span: 5499..5500,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 24,
            span: 5500..5501,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 247,
            column: 6,
            span: 5548..5553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 247,
            column: 8,
            span: 5554..5555,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 247,
            column: 10,
            span: 5556..5557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 247,
            column: 20,
            span: 5558..5567,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 247,
            column: 21,
            span: 5567..5568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 247,
            column: 27,
            span: 5568..5574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 29,
            span: 5575..5576,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 247,
            column: 37,
            span: 5576..5584,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 39,
            span: 5585..5586,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 247,
            column: 40,
            span: 5586..5587,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 248,
            column: 18,
            span: 5600..5605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 248,
            column: 20,
            span: 5606..5607,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 248,
            column: 22,
            span: 5608..5609,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 248,
            column: 0,
            span: 5609..5612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 249,
            column: 15,
            span: 5625..5627,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 249,
            column: 16,
            span: 5627..5628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 249,
            column: 17,
            span: 5628..5629,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 249,
            column: 19,
            span: 5630..5631,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 249,
            column: 28,
            span: 5632..5640,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 249,
            column: 30,
            span: 5641..5642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 249,
            column: 31,
            span: 5642..5643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 249,
            column: 33,
            span: 5644..5645,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 249,
            column: 34,
            span: 5645..5646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 249,
            column: 35,
            span: 5646..5647,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 249,
            column: 36,
            span: 5647..5648,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 249,
            column: 37,
            span: 5647..5649,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 249,
            column: 38,
            span: 5649..5650,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 249,
            column: 45,
            span: 5651..5657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 249,
            column: 47,
            span: 5658..5659,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 249,
            column: 0,
            span: 5660..5663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 250,
            column: 18,
            span: 5676..5681,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 250,
            column: 19,
            span: 5681..5682,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        position: Position {
            line: 250,
            column: 22,
            span: 5682..5685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 250,
            column: 23,
            span: 5685..5686,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 251,
            column: 14,
            span: 5697..5700,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 251,
            column: 15,
            span: 5700..5701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 253,
            column: 7,
            span: 5703..5709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 8,
            span: 5709..5710,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 253,
            column: 11,
            span: 5710..5713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 253,
            column: 21,
            span: 5714..5723,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 253,
            column: 22,
            span: 5723..5724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 253,
            column: 28,
            span: 5724..5730,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 29,
            span: 5730..5731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 253,
            column: 30,
            span: 5731..5732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 31,
            span: 5732..5733,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 32,
            span: 5733..5734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 255,
            column: 7,
            span: 5779..5785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 8,
            span: 5785..5786,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 255,
            column: 11,
            span: 5786..5789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 255,
            column: 21,
            span: 5790..5799,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 255,
            column: 22,
            span: 5799..5800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 255,
            column: 28,
            span: 5800..5806,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 255,
            column: 29,
            span: 5806..5807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 255,
            column: 30,
            span: 5807..5808,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 31,
            span: 5808..5809,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 33,
            span: 5809..5811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 34,
            span: 5811..5812,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 36,
            span: 5812..5814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 37,
            span: 5814..5815,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 39,
            span: 5815..5817,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 40,
            span: 5817..5818,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 42,
            span: 5818..5820,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 43,
            span: 5820..5821,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 45,
            span: 5821..5823,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 46,
            span: 5823..5824,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 48,
            span: 5824..5826,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 255,
            column: 49,
            span: 5826..5827,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 51,
            span: 5827..5829,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 52,
            span: 5829..5830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 255,
            column: 53,
            span: 5830..5831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 256,
            column: 7,
            span: 5832..5838,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 8,
            span: 5838..5839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 256,
            column: 10,
            span: 5839..5841,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 256,
            column: 11,
            span: 5841..5842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 256,
            column: 12,
            span: 5842..5843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 13,
            span: 5843..5844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 14,
            span: 5844..5845,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 256,
            column: 17,
            span: 5846..5848,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 256,
            column: 20,
            span: 5848..5851,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 256,
            column: 21,
            span: 5851..5852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 257,
            column: 7,
            span: 5853..5859,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 8,
            span: 5859..5860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 257,
            column: 10,
            span: 5860..5862,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 257,
            column: 11,
            span: 5862..5863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 257,
            column: 12,
            span: 5863..5864,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 257,
            column: 13,
            span: 5864..5865,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 14,
            span: 5865..5866,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 257,
            column: 17,
            span: 5867..5869,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 257,
            column: 20,
            span: 5869..5872,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 257,
            column: 21,
            span: 5872..5873,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 260,
            column: 3,
            span: 5876..5878,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 260,
            column: 7,
            span: 5879..5882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 260,
            column: 9,
            span: 5883..5884,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 260,
            column: 0,
            span: 5885..5889,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 4,
            span: 5892..5893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 261,
            column: 11,
            span: 5893..5900,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 261,
            column: 14,
            span: 5901..5903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 261,
            column: 20,
            span: 5904..5909,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 21,
            span: 5909..5910,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 22,
            span: 5910..5911,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\a\\n >>> testC not active: skipping yield/hook tests <<<\\n\\a'",
        ),
        position: Position {
            line: 261,
            column: 84,
            span: 5911..5973,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 85,
            span: 5973..5974,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 262,
            column: 0,
            span: 5975..5979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 263,
            column: 8,
            span: 5982..5987,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing yields inside hooks\"",
        ),
        position: Position {
            line: 263,
            column: 38,
            span: 5988..6017,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 265,
            column: 8,
            span: 6021..6026,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "turn",
        ),
        position: Position {
            line: 265,
            column: 0,
            span: 6027..6031,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 267,
            column: 11,
            span: 6037..6045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        position: Position {
            line: 267,
            column: 16,
            span: 6046..6050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 18,
            span: 6051..6052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 267,
            column: 19,
            span: 6052..6053,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 267,
            column: 20,
            span: 6053..6054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 267,
            column: 22,
            span: 6055..6056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 267,
            column: 23,
            span: 6056..6057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 268,
            column: 11,
            span: 6062..6068,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 268,
            column: 12,
            span: 6068..6069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "turn",
        ),
        position: Position {
            line: 268,
            column: 16,
            span: 6069..6073,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 268,
            column: 19,
            span: 6074..6076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 268,
            column: 21,
            span: 6077..6078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 268,
            column: 22,
            span: 6078..6079,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 269,
            column: 7,
            span: 6084..6086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 269,
            column: 9,
            span: 6087..6088,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 269,
            column: 12,
            span: 6089..6091,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 269,
            column: 14,
            span: 6091..6093,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 269,
            column: 19,
            span: 6094..6098,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 269,
            column: 26,
            span: 6099..6105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 269,
            column: 0,
            span: 6105..6107,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 270,
            column: 9,
            span: 6112..6116,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 270,
            column: 16,
            span: 6117..6123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 270,
            column: 18,
            span: 6124..6125,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 270,
            column: 19,
            span: 6125..6126,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        position: Position {
            line: 270,
            column: 23,
            span: 6126..6130,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 270,
            column: 24,
            span: 6130..6131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 270,
            column: 25,
            span: 6131..6132,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 270,
            column: 26,
            span: 6132..6133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 270,
            column: 28,
            span: 6134..6135,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 270,
            column: 29,
            span: 6135..6136,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 270,
            column: 30,
            span: 6135..6137,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 270,
            column: 31,
            span: 6137..6138,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 271,
            column: 0,
            span: 6143..6146,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 272,
            column: 0,
            span: 6149..6152,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 274,
            column: 8,
            span: 6156..6161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 274,
            column: 10,
            span: 6162..6163,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 11,
            span: 6163..6164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 274,
            column: 12,
            span: 6164..6165,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 13,
            span: 6165..6166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 274,
            column: 14,
            span: 6166..6167,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 15,
            span: 6167..6168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 274,
            column: 16,
            span: 6168..6169,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 274,
            column: 18,
            span: 6170..6171,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 20,
            span: 6171..6173,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 21,
            span: 6173..6174,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 22,
            span: 6173..6175,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 23,
            span: 6175..6176,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 24,
            span: 6175..6177,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 25,
            span: 6177..6178,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 274,
            column: 0,
            span: 6177..6179,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 276,
            column: 8,
            span: 6183..6188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 276,
            column: 10,
            span: 6189..6190,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 276,
            column: 12,
            span: 6191..6192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 276,
            column: 22,
            span: 6193..6202,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 276,
            column: 23,
            span: 6202..6203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 276,
            column: 29,
            span: 6203..6209,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 30,
            span: 6209..6210,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 276,
            column: 38,
            span: 6210..6218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 276,
            column: 40,
            span: 6219..6220,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 276,
            column: 41,
            span: 6220..6221,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 277,
            column: 6,
            span: 6226..6227,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 277,
            column: 7,
            span: 6227..6228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 277,
            column: 14,
            span: 6228..6235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 277,
            column: 15,
            span: 6235..6236,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield 0\"",
        ),
        position: Position {
            line: 277,
            column: 24,
            span: 6236..6245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 277,
            column: 25,
            span: 6245..6246,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 277,
            column: 28,
            span: 6247..6249,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 277,
            column: 29,
            span: 6249..6250,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 277,
            column: 31,
            span: 6250..6252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 277,
            column: 32,
            span: 6252..6253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 278,
            column: 6,
            span: 6258..6259,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 278,
            column: 8,
            span: 6260..6261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        position: Position {
            line: 278,
            column: 13,
            span: 6262..6266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 14,
            span: 6266..6267,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        position: Position {
            line: 278,
            column: 17,
            span: 6267..6270,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 278,
            column: 18,
            span: 6270..6271,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 278,
            column: 21,
            span: 6271..6274,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 22,
            span: 6274..6275,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 279,
            column: 6,
            span: 6278..6281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 279,
            column: 7,
            span: 6281..6282,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 281,
            column: 8,
            span: 6286..6291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 281,
            column: 10,
            span: 6292..6293,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 281,
            column: 12,
            span: 6294..6295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 281,
            column: 22,
            span: 6296..6305,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 281,
            column: 23,
            span: 6305..6306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 281,
            column: 29,
            span: 6306..6312,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 30,
            span: 6312..6313,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 281,
            column: 38,
            span: 6313..6321,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 40,
            span: 6322..6323,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 41,
            span: 6323..6324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 282,
            column: 6,
            span: 6329..6330,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 282,
            column: 7,
            span: 6330..6331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 282,
            column: 14,
            span: 6331..6338,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 282,
            column: 15,
            span: 6338..6339,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield 0\"",
        ),
        position: Position {
            line: 282,
            column: 24,
            span: 6339..6348,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 282,
            column: 25,
            span: 6348..6349,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 282,
            column: 28,
            span: 6350..6352,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 282,
            column: 29,
            span: 6352..6353,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 282,
            column: 31,
            span: 6353..6355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 282,
            column: 32,
            span: 6355..6356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 283,
            column: 6,
            span: 6361..6362,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 283,
            column: 8,
            span: 6363..6364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fact",
        ),
        position: Position {
            line: 283,
            column: 13,
            span: 6365..6369,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 283,
            column: 14,
            span: 6369..6370,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        position: Position {
            line: 283,
            column: 17,
            span: 6370..6373,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 283,
            column: 18,
            span: 6373..6374,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 283,
            column: 21,
            span: 6374..6377,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 283,
            column: 22,
            span: 6377..6378,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 284,
            column: 6,
            span: 6381..6384,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 284,
            column: 7,
            span: 6384..6385,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 286,
            column: 8,
            span: 6389..6394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 286,
            column: 10,
            span: 6395..6396,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 286,
            column: 12,
            span: 6396..6398,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 286,
            column: 13,
            span: 6397..6399,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 286,
            column: 16,
            span: 6400..6402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 286,
            column: 18,
            span: 6403..6404,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 286,
            column: 20,
            span: 6404..6406,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 286,
            column: 21,
            span: 6405..6407,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 286,
            column: 0,
            span: 6408..6410,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 287,
            column: 7,
            span: 6415..6417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 287,
            column: 9,
            span: 6418..6419,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 287,
            column: 11,
            span: 6419..6421,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 287,
            column: 12,
            span: 6420..6422,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 287,
            column: 17,
            span: 6423..6427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "turn",
        ),
        position: Position {
            line: 287,
            column: 22,
            span: 6428..6432,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 287,
            column: 24,
            span: 6433..6434,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        position: Position {
            line: 287,
            column: 28,
            span: 6435..6438,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 287,
            column: 29,
            span: 6438..6439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 287,
            column: 36,
            span: 6440..6446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 37,
            span: 6446..6447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 287,
            column: 38,
            span: 6447..6448,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 287,
            column: 39,
            span: 6448..6449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 287,
            column: 45,
            span: 6449..6455,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 46,
            span: 6455..6456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 287,
            column: 47,
            span: 6456..6457,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 48,
            span: 6457..6458,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 49,
            span: 6458..6459,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 287,
            column: 0,
            span: 6460..6463,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 288,
            column: 7,
            span: 6468..6470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 288,
            column: 9,
            span: 6471..6472,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 288,
            column: 11,
            span: 6472..6474,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 288,
            column: 12,
            span: 6473..6475,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 288,
            column: 17,
            span: 6476..6480,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "turn",
        ),
        position: Position {
            line: 288,
            column: 22,
            span: 6481..6485,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 288,
            column: 24,
            span: 6486..6487,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        position: Position {
            line: 288,
            column: 28,
            span: 6488..6491,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 288,
            column: 29,
            span: 6491..6492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 288,
            column: 36,
            span: 6493..6499,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 37,
            span: 6499..6500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 288,
            column: 38,
            span: 6500..6501,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 288,
            column: 39,
            span: 6501..6502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 288,
            column: 45,
            span: 6502..6508,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 288,
            column: 46,
            span: 6508..6509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 288,
            column: 47,
            span: 6509..6510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 48,
            span: 6510..6511,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 288,
            column: 49,
            span: 6511..6512,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 288,
            column: 0,
            span: 6513..6516,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 289,
            column: 0,
            span: 6519..6522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 291,
            column: 9,
            span: 6526..6532,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 291,
            column: 10,
            span: 6532..6533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 291,
            column: 11,
            span: 6533..6534,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 291,
            column: 12,
            span: 6534..6535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 291,
            column: 13,
            span: 6535..6536,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 291,
            column: 16,
            span: 6537..6539,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 291,
            column: 19,
            span: 6539..6542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 291,
            column: 20,
            span: 6542..6543,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 293,
            column: 8,
            span: 6547..6552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 293,
            column: 13,
            span: 6553..6557,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 293,
            column: 15,
            span: 6558..6559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 293,
            column: 21,
            span: 6560..6565,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 293,
            column: 22,
            span: 6565..6566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getinfo",
        ),
        position: Position {
            line: 293,
            column: 29,
            span: 6566..6573,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 293,
            column: 30,
            span: 6573..6574,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 293,
            column: 31,
            span: 6573..6575,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 293,
            column: 32,
            span: 6575..6576,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 293,
            column: 36,
            span: 6577..6580,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 293,
            column: 37,
            span: 6580..6581,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 293,
            column: 38,
            span: 6581..6582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "currentline",
        ),
        position: Position {
            line: 293,
            column: 49,
            span: 6582..6593,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 293,
            column: 51,
            span: 6594..6595,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 293,
            column: 53,
            span: 6595..6597,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 294,
            column: 8,
            span: 6622..6627,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 294,
            column: 17,
            span: 6628..6636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 294,
            column: 21,
            span: 6637..6640,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 294,
            column: 23,
            span: 6641..6642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 294,
            column: 24,
            span: 6642..6643,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 295,
            column: 10,
            span: 6648..6653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 295,
            column: 12,
            span: 6654..6655,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 295,
            column: 14,
            span: 6656..6657,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 295,
            column: 17,
            span: 6657..6660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 296,
            column: 6,
            span: 6693..6694,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 296,
            column: 8,
            span: 6695..6696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 296,
            column: 10,
            span: 6697..6698,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 296,
            column: 12,
            span: 6699..6700,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 296,
            column: 0,
            span: 6700..6703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 297,
            column: 7,
            span: 6708..6710,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 297,
            column: 8,
            span: 6710..6711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 297,
            column: 10,
            span: 6711..6713,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 297,
            column: 12,
            span: 6714..6715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 297,
            column: 0,
            span: 6716..6717,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 298,
            column: 0,
            span: 6720..6723,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 301,
            column: 8,
            span: 6760..6765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 301,
            column: 11,
            span: 6766..6768,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 301,
            column: 13,
            span: 6769..6770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 301,
            column: 23,
            span: 6771..6780,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 301,
            column: 24,
            span: 6780..6781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 301,
            column: 28,
            span: 6781..6785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 29,
            span: 6785..6786,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 301,
            column: 37,
            span: 6786..6794,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 301,
            column: 39,
            span: 6795..6796,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 301,
            column: 40,
            span: 6796..6797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 302,
            column: 6,
            span: 6802..6803,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 302,
            column: 7,
            span: 6803..6804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 302,
            column: 14,
            span: 6804..6811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 15,
            span: 6811..6812,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"setglobal X; yield 0\"",
        ),
        position: Position {
            line: 302,
            column: 37,
            span: 6812..6834,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 38,
            span: 6834..6835,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"l\"",
        ),
        position: Position {
            line: 302,
            column: 42,
            span: 6836..6839,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 43,
            span: 6839..6840,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 45,
            span: 6840..6842,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 46,
            span: 6842..6843,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 302,
            column: 47,
            span: 6843..6844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 302,
            column: 51,
            span: 6845..6848,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 52,
            span: 6848..6849,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 53,
            span: 6849..6850,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 302,
            column: 54,
            span: 6850..6851,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 302,
            column: 61,
            span: 6852..6858,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 302,
            column: 64,
            span: 6858..6861,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 302,
            column: 68,
            span: 6862..6865,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 69,
            span: 6865..6866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 304,
            column: 5,
            span: 6870..6872,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 304,
            column: 6,
            span: 6872..6873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 304,
            column: 8,
            span: 6873..6875,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 304,
            column: 10,
            span: 6876..6877,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 304,
            column: 14,
            span: 6878..6881,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 304,
            column: 15,
            span: 6881..6882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 305,
            column: 5,
            span: 6885..6887,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 305,
            column: 6,
            span: 6887..6888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 305,
            column: 7,
            span: 6888..6889,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 305,
            column: 9,
            span: 6890..6891,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 305,
            column: 13,
            span: 6892..6895,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 305,
            column: 14,
            span: 6895..6896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 305,
            column: 17,
            span: 6897..6899,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 305,
            column: 18,
            span: 6899..6900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 305,
            column: 19,
            span: 6900..6901,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 305,
            column: 20,
            span: 6901..6902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 305,
            column: 27,
            span: 6903..6909,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 305,
            column: 28,
            span: 6909..6910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 305,
            column: 30,
            span: 6910..6912,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 305,
            column: 31,
            span: 6912..6913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 305,
            column: 32,
            span: 6913..6914,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 305,
            column: 35,
            span: 6915..6917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 305,
            column: 40,
            span: 6918..6922,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 305,
            column: 41,
            span: 6922..6923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 306,
            column: 5,
            span: 6926..6928,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 306,
            column: 6,
            span: 6928..6929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 306,
            column: 7,
            span: 6929..6930,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 306,
            column: 9,
            span: 6931..6932,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 306,
            column: 13,
            span: 6933..6936,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 306,
            column: 14,
            span: 6936..6937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 306,
            column: 17,
            span: 6938..6940,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 306,
            column: 18,
            span: 6940..6941,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 306,
            column: 19,
            span: 6941..6942,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 306,
            column: 20,
            span: 6942..6943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 306,
            column: 27,
            span: 6944..6950,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 306,
            column: 28,
            span: 6950..6951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 306,
            column: 30,
            span: 6951..6953,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 306,
            column: 31,
            span: 6953..6954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 306,
            column: 32,
            span: 6954..6955,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 306,
            column: 35,
            span: 6956..6958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 306,
            column: 40,
            span: 6959..6963,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 306,
            column: 42,
            span: 6964..6965,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 306,
            column: 44,
            span: 6965..6967,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 306,
            column: 45,
            span: 6967..6968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 307,
            column: 5,
            span: 6971..6973,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 307,
            column: 6,
            span: 6973..6974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 307,
            column: 7,
            span: 6974..6975,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 307,
            column: 9,
            span: 6976..6977,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 307,
            column: 13,
            span: 6978..6981,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 307,
            column: 14,
            span: 6981..6982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 307,
            column: 17,
            span: 6983..6985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 18,
            span: 6985..6986,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 19,
            span: 6986..6987,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 307,
            column: 20,
            span: 6987..6988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 307,
            column: 27,
            span: 6989..6995,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 28,
            span: 6995..6996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 307,
            column: 30,
            span: 6996..6998,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 307,
            column: 31,
            span: 6998..6999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 307,
            column: 32,
            span: 6999..7000,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 307,
            column: 35,
            span: 7001..7003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 307,
            column: 40,
            span: 7004..7008,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 307,
            column: 42,
            span: 7009..7010,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 307,
            column: 44,
            span: 7010..7012,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 307,
            column: 48,
            span: 7013..7016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 307,
            column: 51,
            span: 7017..7019,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 307,
            column: 52,
            span: 7019..7020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 307,
            column: 54,
            span: 7020..7022,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 307,
            column: 57,
            span: 7023..7025,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 307,
            column: 61,
            span: 7026..7029,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 62,
            span: 7029..7030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 308,
            column: 5,
            span: 7033..7035,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 308,
            column: 6,
            span: 7035..7036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 308,
            column: 7,
            span: 7036..7037,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 308,
            column: 9,
            span: 7038..7039,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 308,
            column: 13,
            span: 7040..7043,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 308,
            column: 14,
            span: 7043..7044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 308,
            column: 17,
            span: 7045..7047,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 18,
            span: 7047..7048,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 19,
            span: 7048..7049,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 308,
            column: 20,
            span: 7049..7050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 308,
            column: 27,
            span: 7051..7057,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 28,
            span: 7057..7058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 308,
            column: 30,
            span: 7058..7060,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 308,
            column: 31,
            span: 7060..7061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 308,
            column: 32,
            span: 7061..7062,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 308,
            column: 35,
            span: 7063..7065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 308,
            column: 40,
            span: 7066..7070,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 308,
            column: 42,
            span: 7071..7072,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 308,
            column: 44,
            span: 7072..7074,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 308,
            column: 48,
            span: 7075..7078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 308,
            column: 51,
            span: 7079..7081,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 308,
            column: 52,
            span: 7081..7082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 308,
            column: 54,
            span: 7082..7084,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 308,
            column: 57,
            span: 7085..7087,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 308,
            column: 60,
            span: 7087..7090,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 61,
            span: 7090..7091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 309,
            column: 9,
            span: 7094..7100,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 10,
            span: 7100..7101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 309,
            column: 12,
            span: 7101..7103,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 13,
            span: 7103..7104,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 14,
            span: 7104..7105,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 309,
            column: 17,
            span: 7106..7108,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 309,
            column: 20,
            span: 7108..7111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 21,
            span: 7111..7112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 312,
            column: 5,
            span: 7150..7152,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 312,
            column: 7,
            span: 7153..7154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 312,
            column: 17,
            span: 7155..7164,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 312,
            column: 18,
            span: 7164..7165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 312,
            column: 22,
            span: 7165..7169,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 312,
            column: 23,
            span: 7169..7170,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 312,
            column: 31,
            span: 7170..7178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 312,
            column: 33,
            span: 7179..7180,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 312,
            column: 34,
            span: 7180..7181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 313,
            column: 6,
            span: 7186..7187,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 313,
            column: 7,
            span: 7187..7188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 313,
            column: 14,
            span: 7188..7195,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 313,
            column: 15,
            span: 7195..7196,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield 0\"",
        ),
        position: Position {
            line: 313,
            column: 24,
            span: 7196..7205,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 25,
            span: 7205..7206,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 313,
            column: 28,
            span: 7207..7209,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 313,
            column: 29,
            span: 7209..7210,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 31,
            span: 7210..7212,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 32,
            span: 7212..7213,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 313,
            column: 33,
            span: 7213..7214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 313,
            column: 37,
            span: 7215..7218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 313,
            column: 38,
            span: 7218..7219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 39,
            span: 7219..7220,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 313,
            column: 40,
            span: 7220..7221,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 313,
            column: 47,
            span: 7222..7228,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 50,
            span: 7228..7231,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 313,
            column: 54,
            span: 7232..7235,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 55,
            span: 7235..7236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 315,
            column: 5,
            span: 7240..7242,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 315,
            column: 6,
            span: 7242..7243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 315,
            column: 8,
            span: 7243..7245,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 315,
            column: 10,
            span: 7246..7247,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 315,
            column: 14,
            span: 7248..7251,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 315,
            column: 15,
            span: 7251..7252,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 316,
            column: 8,
            span: 7255..7260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 316,
            column: 10,
            span: 7261..7262,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 316,
            column: 12,
            span: 7263..7264,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 316,
            column: 0,
            span: 7264..7266,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 317,
            column: 9,
            span: 7269..7275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 317,
            column: 11,
            span: 7276..7277,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 317,
            column: 13,
            span: 7278..7279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 317,
            column: 15,
            span: 7280..7281,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 317,
            column: 17,
            span: 7282..7283,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 19,
            span: 7283..7285,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 317,
            column: 20,
            span: 7285..7286,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 317,
            column: 26,
            span: 7287..7292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 317,
            column: 28,
            span: 7293..7294,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 317,
            column: 30,
            span: 7295..7296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 317,
            column: 33,
            span: 7297..7299,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 317,
            column: 34,
            span: 7299..7300,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 317,
            column: 35,
            span: 7300..7301,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 317,
            column: 41,
            span: 7302..7307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 317,
            column: 43,
            span: 7308..7309,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 317,
            column: 46,
            span: 7310..7312,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 317,
            column: 0,
            span: 7312..7315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 318,
            column: 9,
            span: 7318..7324,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 318,
            column: 10,
            span: 7324..7325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 318,
            column: 12,
            span: 7325..7327,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 318,
            column: 13,
            span: 7327..7328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 318,
            column: 15,
            span: 7328..7330,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 318,
            column: 18,
            span: 7331..7333,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 318,
            column: 21,
            span: 7333..7336,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 318,
            column: 25,
            span: 7337..7340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 318,
            column: 27,
            span: 7341..7342,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 318,
            column: 30,
            span: 7343..7345,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 318,
            column: 33,
            span: 7345..7348,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 318,
            column: 34,
            span: 7348..7349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 320,
            column: 5,
            span: 7353..7355,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 320,
            column: 7,
            span: 7356..7357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 320,
            column: 17,
            span: 7358..7367,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 320,
            column: 18,
            span: 7367..7368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 320,
            column: 22,
            span: 7368..7372,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 320,
            column: 23,
            span: 7372..7373,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 320,
            column: 31,
            span: 7373..7381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 320,
            column: 33,
            span: 7382..7383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 320,
            column: 34,
            span: 7383..7384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 321,
            column: 6,
            span: 7389..7390,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 321,
            column: 7,
            span: 7390..7391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 321,
            column: 14,
            span: 7391..7398,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 15,
            span: 7398..7399,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yield 0\"",
        ),
        position: Position {
            line: 321,
            column: 24,
            span: 7399..7408,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 321,
            column: 25,
            span: 7408..7409,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 321,
            column: 28,
            span: 7410..7412,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 321,
            column: 29,
            span: 7412..7413,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 321,
            column: 31,
            span: 7413..7415,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 32,
            span: 7415..7416,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 321,
            column: 33,
            span: 7416..7417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        position: Position {
            line: 321,
            column: 37,
            span: 7418..7421,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 321,
            column: 38,
            span: 7421..7422,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 39,
            span: 7422..7423,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 321,
            column: 40,
            span: 7423..7424,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 321,
            column: 47,
            span: 7425..7431,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 321,
            column: 50,
            span: 7431..7434,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 321,
            column: 54,
            span: 7435..7438,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 321,
            column: 55,
            span: 7438..7439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 323,
            column: 5,
            span: 7443..7445,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 323,
            column: 6,
            span: 7445..7446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 323,
            column: 8,
            span: 7446..7448,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 323,
            column: 10,
            span: 7449..7450,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 323,
            column: 14,
            span: 7451..7454,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 323,
            column: 15,
            span: 7454..7455,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 324,
            column: 8,
            span: 7458..7463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 324,
            column: 10,
            span: 7464..7465,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 324,
            column: 12,
            span: 7466..7467,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 324,
            column: 0,
            span: 7467..7469,
        },
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        position: Position {
            line: 325,
            column: 9,
            span: 7472..7478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 325,
            column: 11,
            span: 7479..7480,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 325,
            column: 13,
            span: 7481..7482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 325,
            column: 15,
            span: 7483..7484,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 325,
            column: 17,
            span: 7485..7486,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 325,
            column: 19,
            span: 7486..7488,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 325,
            column: 20,
            span: 7488..7489,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 325,
            column: 26,
            span: 7490..7495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 325,
            column: 28,
            span: 7496..7497,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 325,
            column: 30,
            span: 7498..7499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 325,
            column: 33,
            span: 7500..7502,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 325,
            column: 34,
            span: 7502..7503,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 325,
            column: 35,
            span: 7503..7504,
        },
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        position: Position {
            line: 325,
            column: 41,
            span: 7505..7510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 325,
            column: 43,
            span: 7511..7512,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 325,
            column: 46,
            span: 7513..7515,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 325,
            column: 0,
            span: 7515..7518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 326,
            column: 9,
            span: 7521..7527,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 326,
            column: 10,
            span: 7527..7528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 326,
            column: 12,
            span: 7528..7530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 326,
            column: 13,
            span: 7530..7531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 326,
            column: 15,
            span: 7531..7533,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 326,
            column: 18,
            span: 7534..7536,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 326,
            column: 21,
            span: 7536..7539,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 326,
            column: 25,
            span: 7540..7543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 326,
            column: 27,
            span: 7544..7545,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 326,
            column: 30,
            span: 7546..7548,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 326,
            column: 32,
            span: 7548..7550,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 326,
            column: 33,
            span: 7550..7551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 327,
            column: 5,
            span: 7554..7556,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 327,
            column: 6,
            span: 7556..7557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 327,
            column: 7,
            span: 7557..7558,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 327,
            column: 9,
            span: 7559..7560,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 327,
            column: 13,
            span: 7561..7564,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 327,
            column: 14,
            span: 7564..7565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 327,
            column: 17,
            span: 7566..7568,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 327,
            column: 18,
            span: 7568..7569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "XX",
        ),
        position: Position {
            line: 327,
            column: 20,
            span: 7569..7571,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 327,
            column: 22,
            span: 7572..7573,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 327,
            column: 0,
            span: 7574..7577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 330,
            column: 8,
            span: 7582..7587,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing coroutine API\"",
        ),
        position: Position {
            line: 330,
            column: 32,
            span: 7588..7611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 333,
            column: 9,
            span: 7639..7645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 10,
            span: 7645..7646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 333,
            column: 11,
            span: 7646..7647,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 333,
            column: 12,
            span: 7647..7648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 333,
            column: 17,
            span: 7648..7653,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 18,
            span: 7653..7654,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    newthread      # create thread\n    pushvalue 2    # push body\n    pushstring 'a a a'  # push argument\n    xmove 0 3 2   # move values to new thread\n    resume -1, 1    # call it first time\n    pushstatus\n    xmove 3 0 0   # move results back to stack\n    setglobal X    # result\n    setglobal Y    # status\n    pushvalue 2     # push body (to call it again)\n    pushstring 'b b b'\n    xmove 0 3 2\n    resume -1, 1    # call it again\n    pushstatus\n    xmove 3 0 0\n    return 1        # return result\n  ]]",
        ),
        position: Position {
            line: 350,
            column: 5,
            span: 7654..8165,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 350,
            column: 6,
            span: 8165..8166,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 350,
            column: 15,
            span: 8167..8175,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 350,
            column: 17,
            span: 8176..8177,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 350,
            column: 20,
            span: 8177..8180,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 21,
            span: 8180..8181,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 350,
            column: 28,
            span: 8182..8188,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 350,
            column: 32,
            span: 8189..8192,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 350,
            column: 36,
            span: 8193..8196,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 37,
            span: 8196..8197,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 350,
            column: 40,
            span: 8198..8200,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b b b'",
        ),
        position: Position {
            line: 350,
            column: 48,
            span: 8201..8208,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 49,
            span: 8208..8209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 352,
            column: 9,
            span: 8213..8219,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 352,
            column: 10,
            span: 8219..8220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        position: Position {
            line: 352,
            column: 11,
            span: 8220..8221,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 352,
            column: 14,
            span: 8222..8224,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a a a'",
        ),
        position: Position {
            line: 352,
            column: 22,
            span: 8225..8232,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 352,
            column: 26,
            span: 8233..8236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Y",
        ),
        position: Position {
            line: 352,
            column: 28,
            span: 8237..8238,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 352,
            column: 31,
            span: 8239..8241,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 352,
            column: 36,
            span: 8242..8246,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 352,
            column: 37,
            span: 8246..8247,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 356,
            column: 4,
            span: 8284..8285,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 356,
            column: 6,
            span: 8286..8287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 356,
            column: 16,
            span: 8288..8297,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 356,
            column: 17,
            span: 8297..8298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 356,
            column: 23,
            span: 8298..8304,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 356,
            column: 24,
            span: 8304..8305,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 356,
            column: 32,
            span: 8305..8313,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 356,
            column: 34,
            span: 8314..8315,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 356,
            column: 35,
            span: 8315..8316,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 357,
            column: 15,
            span: 8325..8331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 357,
            column: 17,
            span: 8332..8333,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 357,
            column: 18,
            span: 8333..8334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 357,
            column: 23,
            span: 8334..8339,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 357,
            column: 24,
            span: 8339..8340,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n                 pushnum 10;\n                 pushnum 20;\n                 resume -3 2;\n                 pushstatus\n                 gettop;\n                 return 3]]",
        ),
        position: Position {
            line: 363,
            column: 28,
            span: 8340..8511,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 363,
            column: 29,
            span: 8511..8512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 363,
            column: 31,
            span: 8513..8514,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 363,
            column: 32,
            span: 8514..8515,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 364,
            column: 10,
            span: 8522..8525,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 364,
            column: 11,
            span: 8525..8526,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 365,
            column: 8,
            span: 8529..8534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 365,
            column: 10,
            span: 8535..8536,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 365,
            column: 11,
            span: 8536..8537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 365,
            column: 13,
            span: 8538..8539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 365,
            column: 14,
            span: 8539..8540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 365,
            column: 16,
            span: 8541..8542,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 365,
            column: 17,
            span: 8542..8543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 365,
            column: 19,
            span: 8544..8545,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 365,
            column: 21,
            span: 8546..8547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 365,
            column: 31,
            span: 8548..8557,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 365,
            column: 32,
            span: 8557..8558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 365,
            column: 38,
            span: 8558..8564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 365,
            column: 39,
            span: 8564..8565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "C",
        ),
        position: Position {
            line: 365,
            column: 40,
            span: 8565..8566,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 365,
            column: 41,
            span: 8566..8567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 366,
            column: 9,
            span: 8570..8576,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 10,
            span: 8576..8577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 366,
            column: 11,
            span: 8577..8578,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 366,
            column: 14,
            span: 8579..8581,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 366,
            column: 19,
            span: 8582..8586,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 366,
            column: 23,
            span: 8587..8590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 366,
            column: 30,
            span: 8591..8597,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 366,
            column: 31,
            span: 8597..8598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 366,
            column: 35,
            span: 8598..8602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 366,
            column: 36,
            span: 8602..8603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 366,
            column: 37,
            span: 8603..8604,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 366,
            column: 38,
            span: 8604..8605,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"non%-suspended\"",
        ),
        position: Position {
            line: 366,
            column: 55,
            span: 8606..8622,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 366,
            column: 56,
            span: 8622..8623,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 366,
            column: 0,
            span: 8624..8627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 367,
            column: 11,
            span: 8637..8638,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 14,
            span: 8639..8641,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ERRRUN\"",
        ),
        position: Position {
            line: 367,
            column: 23,
            span: 8642..8650,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 367,
            column: 27,
            span: 8651..8654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 367,
            column: 29,
            span: 8655..8656,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 32,
            span: 8657..8659,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 367,
            column: 34,
            span: 8659..8661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 35,
            span: 8661..8662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 369,
            column: 4,
            span: 8666..8667,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 5,
            span: 8667..8668,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 369,
            column: 7,
            span: 8669..8670,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 8,
            span: 8670..8671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 369,
            column: 10,
            span: 8672..8673,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 369,
            column: 11,
            span: 8673..8674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 369,
            column: 13,
            span: 8675..8676,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 369,
            column: 15,
            span: 8677..8678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 369,
            column: 17,
            span: 8679..8680,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 369,
            column: 18,
            span: 8680..8681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 369,
            column: 23,
            span: 8681..8686,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 369,
            column: 24,
            span: 8686..8687,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    rawgeti R 1    # get main thread\n    pushnum 10;\n    pushnum 20;\n    resume -3 2;\n    pushstatus\n    gettop;\n    return 4]]",
        ),
        position: Position {
            line: 376,
            column: 15,
            span: 8687..8817,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 16,
            span: 8817..8818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 377,
            column: 9,
            span: 8821..8827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 10,
            span: 8827..8828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 377,
            column: 11,
            span: 8828..8829,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 377,
            column: 14,
            span: 8830..8832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 377,
            column: 24,
            span: 8833..8842,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 377,
            column: 25,
            span: 8842..8843,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        position: Position {
            line: 377,
            column: 32,
            span: 8843..8850,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 33,
            span: 8850..8851,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 34,
            span: 8851..8852,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 377,
            column: 38,
            span: 8853..8856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 377,
            column: 45,
            span: 8857..8863,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 377,
            column: 46,
            span: 8863..8864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 377,
            column: 50,
            span: 8864..8868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 51,
            span: 8868..8869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 377,
            column: 52,
            span: 8869..8870,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 377,
            column: 53,
            span: 8870..8871,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"non%-suspended\"",
        ),
        position: Position {
            line: 377,
            column: 70,
            span: 8872..8888,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 71,
            span: 8888..8889,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 377,
            column: 0,
            span: 8890..8893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 378,
            column: 11,
            span: 8903..8904,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 378,
            column: 14,
            span: 8905..8907,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ERRRUN\"",
        ),
        position: Position {
            line: 378,
            column: 23,
            span: 8908..8916,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 378,
            column: 27,
            span: 8917..8920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 378,
            column: 29,
            span: 8921..8922,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 378,
            column: 32,
            span: 8923..8925,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 378,
            column: 34,
            span: 8925..8927,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 378,
            column: 35,
            span: 8927..8928,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 382,
            column: 8,
            span: 8973..8978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "state",
        ),
        position: Position {
            line: 382,
            column: 14,
            span: 8979..8984,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 382,
            column: 16,
            span: 8985..8986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 382,
            column: 18,
            span: 8987..8988,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 382,
            column: 19,
            span: 8988..8989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 382,
            column: 27,
            span: 8989..8997,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 382,
            column: 28,
            span: 8997..8998,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 382,
            column: 29,
            span: 8998..8999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 383,
            column: 4,
            span: 9002..9003,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 383,
            column: 5,
            span: 9003..9004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 383,
            column: 12,
            span: 9004..9011,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 383,
            column: 13,
            span: 9011..9012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "state",
        ),
        position: Position {
            line: 383,
            column: 18,
            span: 9012..9017,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 383,
            column: 19,
            span: 9017..9018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 385,
            column: 9,
            span: 9022..9028,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 10,
            span: 9028..9029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 385,
            column: 11,
            span: 9029..9030,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 385,
            column: 12,
            span: 9030..9031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 385,
            column: 20,
            span: 9031..9039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 385,
            column: 21,
            span: 9039..9040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "state",
        ),
        position: Position {
            line: 385,
            column: 26,
            span: 9040..9045,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 385,
            column: 27,
            span: 9045..9046,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    coroutine = require'coroutine';\n    X = function (x) coroutine.yield(x, 'BB'); return 'CC' end;\n    return 'ok']]",
        ),
        position: Position {
            line: 388,
            column: 18,
            span: 9047..9167,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 19,
            span: 9167..9168,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 388,
            column: 20,
            span: 9168..9169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 390,
            column: 4,
            span: 9173..9174,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 390,
            column: 6,
            span: 9175..9176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 390,
            column: 12,
            span: 9177..9182,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 390,
            column: 13,
            span: 9182..9183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 390,
            column: 17,
            span: 9183..9187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 390,
            column: 18,
            span: 9187..9188,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 390,
            column: 19,
            span: 9188..9189,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 390,
            column: 20,
            span: 9189..9190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 390,
            column: 25,
            span: 9190..9195,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 390,
            column: 26,
            span: 9195..9196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "state",
        ),
        position: Position {
            line: 390,
            column: 31,
            span: 9196..9201,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 390,
            column: 32,
            span: 9201..9202,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    rawgeti R 1     # get main thread\n    pushstring 'XX'\n    getglobal X    # get function for body\n    pushstring AA      # arg\n    resume 1 1      # 'resume' shadows previous stack!\n    gettop\n    setglobal T    # top\n    setglobal B    # second yielded value\n    setglobal A    # fist yielded value\n    rawgeti R 1     # get main thread\n    pushnum 5       # arg (noise)\n    resume 1 1      # after coroutine ends, previous stack is back\n    pushstatus\n    gettop\n    return .\n  ]]",
        ),
        position: Position {
            line: 406,
            column: 5,
            span: 9203..9691,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 406,
            column: 6,
            span: 9691..9692,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 406,
            column: 7,
            span: 9692..9693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 407,
            column: 9,
            span: 9696..9702,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 407,
            column: 10,
            span: 9702..9703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 407,
            column: 11,
            span: 9703..9704,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 407,
            column: 12,
            span: 9704..9705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 407,
            column: 13,
            span: 9705..9706,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 407,
            column: 16,
            span: 9707..9709,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 407,
            column: 18,
            span: 9709..9711,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 407,
            column: 22,
            span: 9712..9715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 407,
            column: 24,
            span: 9716..9717,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 407,
            column: 25,
            span: 9717..9718,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 407,
            column: 26,
            span: 9717..9719,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 407,
            column: 27,
            span: 9719..9720,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 407,
            column: 30,
            span: 9721..9723,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'XX'",
        ),
        position: Position {
            line: 407,
            column: 35,
            span: 9724..9728,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 407,
            column: 39,
            span: 9729..9732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 407,
            column: 41,
            span: 9733..9734,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 407,
            column: 42,
            span: 9734..9735,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 407,
            column: 43,
            span: 9734..9736,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 407,
            column: 44,
            span: 9736..9737,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 407,
            column: 47,
            span: 9738..9740,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CC'",
        ),
        position: Position {
            line: 407,
            column: 52,
            span: 9741..9745,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 407,
            column: 56,
            span: 9746..9749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 407,
            column: 58,
            span: 9750..9751,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 407,
            column: 59,
            span: 9751..9752,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 407,
            column: 60,
            span: 9751..9753,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 407,
            column: 61,
            span: 9753..9754,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 407,
            column: 64,
            span: 9755..9757,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 407,
            column: 69,
            span: 9758..9762,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 407,
            column: 70,
            span: 9762..9763,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 408,
            column: 9,
            span: 9766..9772,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 408,
            column: 10,
            span: 9772..9773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 408,
            column: 11,
            span: 9773..9774,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 408,
            column: 12,
            span: 9774..9775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 408,
            column: 20,
            span: 9775..9783,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 408,
            column: 21,
            span: 9783..9784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "state",
        ),
        position: Position {
            line: 408,
            column: 26,
            span: 9784..9789,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 408,
            column: 27,
            span: 9789..9790,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return T\"",
        ),
        position: Position {
            line: 408,
            column: 38,
            span: 9791..9801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 408,
            column: 39,
            span: 9801..9802,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 408,
            column: 42,
            span: 9803..9805,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'2'",
        ),
        position: Position {
            line: 408,
            column: 46,
            span: 9806..9809,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 408,
            column: 47,
            span: 9809..9810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 409,
            column: 9,
            span: 9813..9819,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 409,
            column: 10,
            span: 9819..9820,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 409,
            column: 11,
            span: 9820..9821,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 409,
            column: 12,
            span: 9821..9822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 409,
            column: 20,
            span: 9822..9830,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 409,
            column: 21,
            span: 9830..9831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "state",
        ),
        position: Position {
            line: 409,
            column: 26,
            span: 9831..9836,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 409,
            column: 27,
            span: 9836..9837,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return A\"",
        ),
        position: Position {
            line: 409,
            column: 38,
            span: 9838..9848,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 409,
            column: 39,
            span: 9848..9849,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 409,
            column: 42,
            span: 9850..9852,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'AA'",
        ),
        position: Position {
            line: 409,
            column: 47,
            span: 9853..9857,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 409,
            column: 48,
            span: 9857..9858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 410,
            column: 9,
            span: 9861..9867,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 410,
            column: 10,
            span: 9867..9868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 410,
            column: 11,
            span: 9868..9869,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 410,
            column: 12,
            span: 9869..9870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 410,
            column: 20,
            span: 9870..9878,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 410,
            column: 21,
            span: 9878..9879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "state",
        ),
        position: Position {
            line: 410,
            column: 26,
            span: 9879..9884,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 410,
            column: 27,
            span: 9884..9885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return B\"",
        ),
        position: Position {
            line: 410,
            column: 38,
            span: 9886..9896,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 410,
            column: 39,
            span: 9896..9897,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 410,
            column: 42,
            span: 9898..9900,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'BB'",
        ),
        position: Position {
            line: 410,
            column: 47,
            span: 9901..9905,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 410,
            column: 48,
            span: 9905..9906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 412,
            column: 4,
            span: 9910..9911,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 412,
            column: 5,
            span: 9911..9912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 412,
            column: 15,
            span: 9912..9922,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 412,
            column: 16,
            span: 9922..9923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "state",
        ),
        position: Position {
            line: 412,
            column: 21,
            span: 9923..9928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 22,
            span: 9928..9929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 414,
            column: 8,
            span: 9933..9938,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 414,
            column: 11,
            span: 9938..9941,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 416,
            column: 0,
            span: 9943..9946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_X",
        ),
        position: Position {
            line: 420,
            column: 3,
            span: 9985..9987,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 420,
            column: 5,
            span: 9988..9989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 420,
            column: 15,
            span: 9990..9999,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 420,
            column: 16,
            span: 9999..10000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 420,
            column: 20,
            span: 10000..10004,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 420,
            column: 21,
            span: 10004..10005,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 420,
            column: 29,
            span: 10005..10013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 420,
            column: 31,
            span: 10014..10015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 420,
            column: 32,
            span: 10015..10016,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 421,
            column: 12,
            span: 10023..10028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 421,
            column: 14,
            span: 10029..10030,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 421,
            column: 16,
            span: 10031..10032,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 421,
            column: 0,
            span: 10032..10035,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 422,
            column: 12,
            span: 10042..10047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 422,
            column: 14,
            span: 10048..10049,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 422,
            column: 16,
            span: 10050..10051,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 422,
            column: 25,
            span: 10052..10060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 422,
            column: 27,
            span: 10061..10062,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 422,
            column: 28,
            span: 10062..10063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 422,
            column: 30,
            span: 10064..10065,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 422,
            column: 32,
            span: 10066..10067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 422,
            column: 34,
            span: 10068..10069,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 422,
            column: 35,
            span: 10069..10070,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 422,
            column: 36,
            span: 10069..10071,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 422,
            column: 0,
            span: 10072..10075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 423,
            column: 16,
            span: 10082..10091,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 423,
            column: 17,
            span: 10091..10092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 423,
            column: 22,
            span: 10092..10097,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 23,
            span: 10097..10098,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 24,
            span: 10098..10099,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 424,
            column: 8,
            span: 10104..10107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 424,
            column: 9,
            span: 10107..10108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_X",
        ),
        position: Position {
            line: 426,
            column: 3,
            span: 10110..10112,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 426,
            column: 4,
            span: 10112..10113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 426,
            column: 5,
            span: 10113..10114,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 429,
            column: 3,
            span: 10117..10119,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 429,
            column: 7,
            span: 10120..10123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 429,
            column: 13,
            span: 10124..10129,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 429,
            column: 0,
            span: 10130..10134,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 431,
            column: 8,
            span: 10163..10168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 431,
            column: 10,
            span: 10169..10170,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 431,
            column: 12,
            span: 10171..10172,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 431,
            column: 14,
            span: 10172..10174,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 431,
            column: 15,
            span: 10174..10175,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 431,
            column: 0,
            span: 10174..10176,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 432,
            column: 8,
            span: 10179..10184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 432,
            column: 12,
            span: 10185..10188,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 432,
            column: 14,
            span: 10189..10190,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 432,
            column: 22,
            span: 10190..10198,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 433,
            column: 8,
            span: 10246..10251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 433,
            column: 10,
            span: 10252..10253,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 433,
            column: 12,
            span: 10254..10255,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 433,
            column: 14,
            span: 10256..10257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 433,
            column: 17,
            span: 10257..10260,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 433,
            column: 19,
            span: 10261..10262,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 433,
            column: 22,
            span: 10262..10265,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 433,
            column: 23,
            span: 10265..10266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 433,
            column: 27,
            span: 10267..10270,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 433,
            column: 29,
            span: 10271..10272,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 433,
            column: 31,
            span: 10272..10274,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 433,
            column: 32,
            span: 10274..10275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 433,
            column: 36,
            span: 10276..10279,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 433,
            column: 38,
            span: 10280..10281,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 433,
            column: 40,
            span: 10281..10283,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 433,
            column: 41,
            span: 10283..10284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 433,
            column: 45,
            span: 10285..10288,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 433,
            column: 46,
            span: 10288..10289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 433,
            column: 50,
            span: 10290..10293,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 433,
            column: 52,
            span: 10294..10295,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 433,
            column: 54,
            span: 10295..10297,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 433,
            column: 55,
            span: 10297..10298,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 434,
            column: 6,
            span: 10301..10304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 434,
            column: 8,
            span: 10305..10306,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 434,
            column: 10,
            span: 10307..10308,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 434,
            column: 12,
            span: 10308..10310,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 434,
            column: 13,
            span: 10310..10311,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 434,
            column: 15,
            span: 10312..10313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 434,
            column: 16,
            span: 10313..10314,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 434,
            column: 0,
            span: 10315..10317,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 435,
            column: 10,
            span: 10322..10327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 435,
            column: 12,
            span: 10328..10329,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 435,
            column: 14,
            span: 10330..10331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 435,
            column: 16,
            span: 10332..10333,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 435,
            column: 17,
            span: 10333..10334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 435,
            column: 18,
            span: 10334..10335,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 435,
            column: 19,
            span: 10335..10336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 436,
            column: 7,
            span: 10341..10343,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 436,
            column: 9,
            span: 10344..10345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 436,
            column: 19,
            span: 10346..10355,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 436,
            column: 20,
            span: 10355..10356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 436,
            column: 26,
            span: 10356..10362,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 436,
            column: 27,
            span: 10362..10363,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 436,
            column: 35,
            span: 10363..10371,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 436,
            column: 36,
            span: 10371..10372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 436,
            column: 37,
            span: 10372..10373,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 437,
            column: 17,
            span: 10385..10390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 437,
            column: 19,
            span: 10391..10392,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 437,
            column: 21,
            span: 10393..10394,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 437,
            column: 23,
            span: 10395..10396,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 437,
            column: 24,
            span: 10396..10397,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 438,
            column: 15,
            span: 10409..10412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 438,
            column: 17,
            span: 10413..10414,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 438,
            column: 19,
            span: 10415..10416,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 438,
            column: 21,
            span: 10416..10418,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 438,
            column: 22,
            span: 10418..10419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        position: Position {
            line: 438,
            column: 24,
            span: 10420..10421,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 438,
            column: 27,
            span: 10422..10424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 438,
            column: 29,
            span: 10425..10426,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 438,
            column: 30,
            span: 10426..10427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 438,
            column: 31,
            span: 10427..10428,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 438,
            column: 32,
            span: 10428..10429,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 438,
            column: 34,
            span: 10430..10431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 438,
            column: 36,
            span: 10432..10433,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 438,
            column: 0,
            span: 10434..10437,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 439,
            column: 18,
            span: 10449..10455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 439,
            column: 24,
            span: 10456..10461,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 439,
            column: 25,
            span: 10461..10462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 439,
            column: 31,
            span: 10462..10468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 439,
            column: 32,
            span: 10468..10469,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 439,
            column: 33,
            span: 10469..10470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 439,
            column: 34,
            span: 10470..10471,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 440,
            column: 13,
            span: 10481..10484,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 440,
            column: 14,
            span: 10484..10485,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 441,
            column: 10,
            span: 10490..10495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 441,
            column: 12,
            span: 10496..10497,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 441,
            column: 13,
            span: 10497..10498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 441,
            column: 17,
            span: 10499..10502,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 441,
            column: 19,
            span: 10503..10504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 441,
            column: 29,
            span: 10505..10514,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 441,
            column: 30,
            span: 10514..10515,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "resume",
        ),
        position: Position {
            line: 441,
            column: 36,
            span: 10515..10521,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 441,
            column: 37,
            span: 10521..10522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 441,
            column: 39,
            span: 10522..10524,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 441,
            column: 40,
            span: 10524..10525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 442,
            column: 11,
            span: 10530..10536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 442,
            column: 12,
            span: 10536..10537,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 442,
            column: 15,
            span: 10537..10540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 442,
            column: 17,
            span: 10541..10542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 442,
            column: 18,
            span: 10542..10543,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 443,
            column: 0,
            span: 10546..10549,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 444,
            column: 0,
            span: 10550..10553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 447,
            column: 7,
            span: 10556..10562,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 447,
            column: 8,
            span: 10562..10563,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 447,
            column: 17,
            span: 10563..10572,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 447,
            column: 18,
            span: 10572..10573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        position: Position {
            line: 447,
            column: 25,
            span: 10573..10580,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 447,
            column: 26,
            span: 10580..10581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 447,
            column: 27,
            span: 10581..10582,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 447,
            column: 30,
            span: 10583..10585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "main",
        ),
        position: Position {
            line: 447,
            column: 35,
            span: 10586..10590,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 447,
            column: 36,
            span: 10590..10591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 449,
            column: 6,
            span: 10593..10598,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 449,
            column: 9,
            span: 10598..10601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 452,
            column: 6,
            span: 10604..10609,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing yields inside metamethods\"",
        ),
        position: Position {
            line: 452,
            column: 41,
            span: 10609..10644,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 454,
            column: 6,
            span: 10646..10651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 454,
            column: 9,
            span: 10652..10654,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 454,
            column: 11,
            span: 10655..10656,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 454,
            column: 13,
            span: 10657..10658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        position: Position {
            line: 455,
            column: 7,
            span: 10661..10665,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 455,
            column: 9,
            span: 10666..10667,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 455,
            column: 18,
            span: 10668..10676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 455,
            column: 19,
            span: 10676..10677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 455,
            column: 20,
            span: 10677..10678,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 455,
            column: 21,
            span: 10678..10679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 455,
            column: 22,
            span: 10679..10680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 23,
            span: 10680..10681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 455,
            column: 33,
            span: 10682..10691,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 455,
            column: 34,
            span: 10691..10692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 455,
            column: 39,
            span: 10692..10697,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 455,
            column: 40,
            span: 10697..10698,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 455,
            column: 43,
            span: 10698..10701,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 455,
            column: 44,
            span: 10701..10702,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"eq\"",
        ),
        position: Position {
            line: 455,
            column: 49,
            span: 10703..10707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 50,
            span: 10707..10708,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 455,
            column: 51,
            span: 10708..10709,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 455,
            column: 58,
            span: 10710..10716,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 455,
            column: 60,
            span: 10717..10718,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 455,
            column: 61,
            span: 10718..10719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 455,
            column: 62,
            span: 10719..10720,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 455,
            column: 65,
            span: 10721..10723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 455,
            column: 67,
            span: 10724..10725,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 455,
            column: 68,
            span: 10725..10726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 455,
            column: 69,
            span: 10726..10727,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 455,
            column: 73,
            span: 10728..10731,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 455,
            column: 74,
            span: 10731..10732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        position: Position {
            line: 456,
            column: 7,
            span: 10735..10739,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 456,
            column: 9,
            span: 10740..10741,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 456,
            column: 18,
            span: 10742..10750,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 456,
            column: 19,
            span: 10750..10751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 456,
            column: 20,
            span: 10751..10752,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 456,
            column: 21,
            span: 10752..10753,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 456,
            column: 22,
            span: 10753..10754,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 456,
            column: 23,
            span: 10754..10755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 456,
            column: 33,
            span: 10756..10765,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 456,
            column: 34,
            span: 10765..10766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 456,
            column: 39,
            span: 10766..10771,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 456,
            column: 40,
            span: 10771..10772,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 456,
            column: 43,
            span: 10772..10775,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 456,
            column: 44,
            span: 10775..10776,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lt\"",
        ),
        position: Position {
            line: 456,
            column: 49,
            span: 10777..10781,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 456,
            column: 50,
            span: 10781..10782,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 456,
            column: 51,
            span: 10782..10783,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 456,
            column: 58,
            span: 10784..10790,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 456,
            column: 60,
            span: 10791..10792,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 456,
            column: 61,
            span: 10792..10793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 456,
            column: 62,
            span: 10793..10794,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 456,
            column: 64,
            span: 10795..10796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 456,
            column: 66,
            span: 10797..10798,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 456,
            column: 67,
            span: 10798..10799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 456,
            column: 68,
            span: 10799..10800,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 456,
            column: 72,
            span: 10801..10804,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 456,
            column: 73,
            span: 10804..10805,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        position: Position {
            line: 457,
            column: 7,
            span: 10808..10812,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 457,
            column: 9,
            span: 10813..10814,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 457,
            column: 18,
            span: 10815..10823,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 457,
            column: 19,
            span: 10823..10824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 457,
            column: 20,
            span: 10824..10825,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 457,
            column: 21,
            span: 10825..10826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 457,
            column: 22,
            span: 10826..10827,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 457,
            column: 23,
            span: 10827..10828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 457,
            column: 33,
            span: 10829..10838,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 457,
            column: 34,
            span: 10838..10839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 457,
            column: 39,
            span: 10839..10844,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 457,
            column: 40,
            span: 10844..10845,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 457,
            column: 43,
            span: 10845..10848,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 457,
            column: 44,
            span: 10848..10849,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"le\"",
        ),
        position: Position {
            line: 457,
            column: 49,
            span: 10850..10854,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 457,
            column: 50,
            span: 10854..10855,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 457,
            column: 51,
            span: 10855..10856,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 457,
            column: 58,
            span: 10857..10863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 457,
            column: 60,
            span: 10864..10865,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 457,
            column: 62,
            span: 10866..10867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 457,
            column: 64,
            span: 10868..10869,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 457,
            column: 67,
            span: 10870..10872,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 457,
            column: 69,
            span: 10872..10874,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 457,
            column: 73,
            span: 10875..10878,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 457,
            column: 74,
            span: 10878..10879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        position: Position {
            line: 458,
            column: 8,
            span: 10882..10887,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 458,
            column: 10,
            span: 10888..10889,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 458,
            column: 19,
            span: 10890..10898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 458,
            column: 20,
            span: 10898..10899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 458,
            column: 21,
            span: 10899..10900,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 458,
            column: 22,
            span: 10900..10901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 458,
            column: 23,
            span: 10901..10902,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 458,
            column: 24,
            span: 10902..10903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 458,
            column: 34,
            span: 10904..10913,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 458,
            column: 35,
            span: 10913..10914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 458,
            column: 40,
            span: 10914..10919,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 458,
            column: 41,
            span: 10919..10920,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 458,
            column: 44,
            span: 10920..10923,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 458,
            column: 45,
            span: 10923..10924,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        position: Position {
            line: 458,
            column: 51,
            span: 10925..10930,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 458,
            column: 52,
            span: 10930..10931,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 458,
            column: 53,
            span: 10931..10932,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 458,
            column: 60,
            span: 10933..10939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 458,
            column: 62,
            span: 10940..10941,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 458,
            column: 63,
            span: 10941..10942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 458,
            column: 64,
            span: 10942..10943,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 458,
            column: 66,
            span: 10944..10945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 458,
            column: 68,
            span: 10946..10947,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 458,
            column: 69,
            span: 10947..10948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 458,
            column: 70,
            span: 10948..10949,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 458,
            column: 74,
            span: 10950..10953,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 458,
            column: 75,
            span: 10953..10954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__sub",
        ),
        position: Position {
            line: 459,
            column: 8,
            span: 10957..10962,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 459,
            column: 10,
            span: 10963..10964,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 459,
            column: 19,
            span: 10965..10973,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 459,
            column: 20,
            span: 10973..10974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 459,
            column: 21,
            span: 10974..10975,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 459,
            column: 22,
            span: 10975..10976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 459,
            column: 23,
            span: 10976..10977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 459,
            column: 24,
            span: 10977..10978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 459,
            column: 34,
            span: 10979..10988,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 459,
            column: 35,
            span: 10988..10989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 459,
            column: 40,
            span: 10989..10994,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 459,
            column: 41,
            span: 10994..10995,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 459,
            column: 44,
            span: 10995..10998,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 459,
            column: 45,
            span: 10998..10999,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        position: Position {
            line: 459,
            column: 51,
            span: 11000..11005,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 459,
            column: 52,
            span: 11005..11006,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 459,
            column: 53,
            span: 11006..11007,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 459,
            column: 60,
            span: 11008..11014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 459,
            column: 62,
            span: 11015..11016,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 459,
            column: 63,
            span: 11016..11017,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 459,
            column: 64,
            span: 11017..11018,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 459,
            column: 66,
            span: 11019..11020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 459,
            column: 68,
            span: 11021..11022,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 459,
            column: 69,
            span: 11022..11023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 459,
            column: 70,
            span: 11023..11024,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 459,
            column: 74,
            span: 11025..11028,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 459,
            column: 75,
            span: 11028..11029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        position: Position {
            line: 460,
            column: 11,
            span: 11032..11040,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 460,
            column: 13,
            span: 11041..11042,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 460,
            column: 22,
            span: 11043..11051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 460,
            column: 23,
            span: 11051..11052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 460,
            column: 24,
            span: 11052..11053,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 460,
            column: 25,
            span: 11053..11054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 460,
            column: 26,
            span: 11054..11055,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 460,
            column: 27,
            span: 11055..11056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 461,
            column: 25,
            span: 11072..11081,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 461,
            column: 26,
            span: 11081..11082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 461,
            column: 31,
            span: 11082..11087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 461,
            column: 32,
            span: 11087..11088,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 461,
            column: 35,
            span: 11088..11091,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 461,
            column: 36,
            span: 11091..11092,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat\"",
        ),
        position: Position {
            line: 461,
            column: 45,
            span: 11093..11101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 461,
            column: 46,
            span: 11101..11102,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 461,
            column: 47,
            span: 11102..11103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 462,
            column: 17,
            span: 11119..11120,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 462,
            column: 19,
            span: 11121..11122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 462,
            column: 24,
            span: 11123..11127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 462,
            column: 25,
            span: 11127..11128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 462,
            column: 26,
            span: 11128..11129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 462,
            column: 27,
            span: 11129..11130,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 462,
            column: 30,
            span: 11131..11133,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 462,
            column: 38,
            span: 11134..11141,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 462,
            column: 42,
            span: 11142..11145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 462,
            column: 44,
            span: 11146..11147,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 462,
            column: 45,
            span: 11147..11148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 462,
            column: 46,
            span: 11148..11149,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 462,
            column: 49,
            span: 11150..11152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 462,
            column: 0,
            span: 11153..11154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 463,
            column: 17,
            span: 11170..11171,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 463,
            column: 19,
            span: 11172..11173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 463,
            column: 24,
            span: 11174..11178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 463,
            column: 25,
            span: 11178..11179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 463,
            column: 26,
            span: 11179..11180,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 463,
            column: 27,
            span: 11180..11181,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 463,
            column: 30,
            span: 11182..11184,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 463,
            column: 38,
            span: 11185..11192,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 463,
            column: 42,
            span: 11193..11196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 463,
            column: 44,
            span: 11197..11198,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 463,
            column: 45,
            span: 11198..11199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 463,
            column: 46,
            span: 11199..11200,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 463,
            column: 49,
            span: 11201..11203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 463,
            column: 0,
            span: 11204..11205,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 464,
            column: 22,
            span: 11221..11227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 464,
            column: 24,
            span: 11228..11229,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 464,
            column: 27,
            span: 11230..11232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 464,
            column: 0,
            span: 11233..11234,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 465,
            column: 17,
            span: 11248..11251,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 465,
            column: 18,
            span: 11251..11252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 466,
            column: 10,
            span: 11255..11262,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 466,
            column: 12,
            span: 11263..11264,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 466,
            column: 21,
            span: 11265..11273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 466,
            column: 23,
            span: 11274..11275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 466,
            column: 24,
            span: 11275..11276,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 466,
            column: 25,
            span: 11276..11277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 466,
            column: 26,
            span: 11277..11278,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 466,
            column: 27,
            span: 11278..11279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 466,
            column: 37,
            span: 11280..11289,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 466,
            column: 38,
            span: 11289..11290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 466,
            column: 43,
            span: 11290..11295,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 466,
            column: 44,
            span: 11295..11296,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 466,
            column: 47,
            span: 11296..11299,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 466,
            column: 48,
            span: 11299..11300,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"idx\"",
        ),
        position: Position {
            line: 466,
            column: 54,
            span: 11301..11306,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 466,
            column: 55,
            span: 11306..11307,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 466,
            column: 56,
            span: 11307..11308,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 466,
            column: 63,
            span: 11309..11315,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 466,
            column: 65,
            span: 11316..11317,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 466,
            column: 66,
            span: 11317..11318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 466,
            column: 67,
            span: 11318..11319,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 466,
            column: 68,
            span: 11319..11320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 466,
            column: 69,
            span: 11320..11321,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 466,
            column: 70,
            span: 11321..11322,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 466,
            column: 74,
            span: 11323..11326,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 466,
            column: 75,
            span: 11326..11327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        position: Position {
            line: 467,
            column: 13,
            span: 11330..11340,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 467,
            column: 15,
            span: 11341..11342,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 467,
            column: 24,
            span: 11343..11351,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 467,
            column: 26,
            span: 11352..11353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 467,
            column: 27,
            span: 11353..11354,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 28,
            span: 11354..11355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 467,
            column: 29,
            span: 11355..11356,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 30,
            span: 11356..11357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 467,
            column: 31,
            span: 11357..11358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 467,
            column: 32,
            span: 11358..11359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 467,
            column: 42,
            span: 11360..11369,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 467,
            column: 43,
            span: 11369..11370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 467,
            column: 48,
            span: 11370..11375,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 467,
            column: 49,
            span: 11375..11376,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 467,
            column: 52,
            span: 11376..11379,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 53,
            span: 11379..11380,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nidx\"",
        ),
        position: Position {
            line: 467,
            column: 60,
            span: 11381..11387,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 467,
            column: 61,
            span: 11387..11388,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 467,
            column: 62,
            span: 11388..11389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 467,
            column: 64,
            span: 11390..11391,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 467,
            column: 65,
            span: 11391..11392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 467,
            column: 66,
            span: 11392..11393,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 467,
            column: 67,
            span: 11393..11394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 467,
            column: 68,
            span: 11394..11395,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 467,
            column: 69,
            span: 11395..11396,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 467,
            column: 71,
            span: 11397..11398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 467,
            column: 73,
            span: 11399..11400,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 467,
            column: 77,
            span: 11401..11404,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 78,
            span: 11404..11405,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 468,
            column: 2,
            span: 11406..11407,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 471,
            column: 6,
            span: 11410..11415,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 471,
            column: 15,
            span: 11416..11424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "new",
        ),
        position: Position {
            line: 471,
            column: 19,
            span: 11425..11428,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 471,
            column: 21,
            span: 11429..11430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 471,
            column: 22,
            span: 11430..11431,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 471,
            column: 23,
            span: 11431..11432,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 472,
            column: 9,
            span: 11435..11441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 472,
            column: 22,
            span: 11442..11454,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 472,
            column: 23,
            span: 11454..11455,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 472,
            column: 24,
            span: 11455..11456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 472,
            column: 25,
            span: 11456..11457,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 472,
            column: 27,
            span: 11458..11459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 472,
            column: 29,
            span: 11460..11461,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 472,
            column: 30,
            span: 11461..11462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 472,
            column: 32,
            span: 11463..11464,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 472,
            column: 34,
            span: 11465..11466,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 472,
            column: 36,
            span: 11467..11468,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 472,
            column: 37,
            span: 11468..11469,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 472,
            column: 38,
            span: 11469..11470,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 472,
            column: 39,
            span: 11470..11471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 472,
            column: 42,
            span: 11472..11474,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 472,
            column: 43,
            span: 11474..11475,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 473,
            column: 0,
            span: 11476..11479,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 476,
            column: 6,
            span: 11482..11487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 476,
            column: 8,
            span: 11488..11489,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 476,
            column: 10,
            span: 11490..11491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "new",
        ),
        position: Position {
            line: 476,
            column: 14,
            span: 11492..11495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 15,
            span: 11495..11496,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 476,
            column: 17,
            span: 11495..11498,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 18,
            span: 11498..11499,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 477,
            column: 6,
            span: 11500..11505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 477,
            column: 8,
            span: 11506..11507,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 477,
            column: 10,
            span: 11508..11509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "new",
        ),
        position: Position {
            line: 477,
            column: 14,
            span: 11510..11513,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 15,
            span: 11513..11514,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 477,
            column: 17,
            span: 11513..11516,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 18,
            span: 11516..11517,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 478,
            column: 6,
            span: 11518..11523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 478,
            column: 8,
            span: 11524..11525,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 478,
            column: 10,
            span: 11526..11527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "new",
        ),
        position: Position {
            line: 478,
            column: 14,
            span: 11528..11531,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello\"",
        ),
        position: Position {
            line: 478,
            column: 21,
            span: 11531..11538,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 480,
            column: 6,
            span: 11540..11545,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 480,
            column: 15,
            span: 11546..11554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "run",
        ),
        position: Position {
            line: 480,
            column: 19,
            span: 11555..11558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 480,
            column: 21,
            span: 11559..11560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 480,
            column: 22,
            span: 11560..11561,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 480,
            column: 23,
            span: 11561..11562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 480,
            column: 25,
            span: 11563..11564,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 480,
            column: 26,
            span: 11564..11565,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 481,
            column: 8,
            span: 11568..11573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 481,
            column: 10,
            span: 11574..11575,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 481,
            column: 12,
            span: 11576..11577,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 481,
            column: 0,
            span: 11577..11579,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 482,
            column: 8,
            span: 11582..11587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 482,
            column: 10,
            span: 11588..11589,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 482,
            column: 12,
            span: 11590..11591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 482,
            column: 22,
            span: 11592..11601,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 482,
            column: 23,
            span: 11601..11602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 482,
            column: 27,
            span: 11602..11606,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 482,
            column: 28,
            span: 11606..11607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 482,
            column: 29,
            span: 11607..11608,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 482,
            column: 30,
            span: 11608..11609,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 483,
            column: 8,
            span: 11612..11617,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 483,
            column: 13,
            span: 11618..11622,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 483,
            column: 0,
            span: 11623..11625,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 484,
            column: 10,
            span: 11630..11635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 484,
            column: 14,
            span: 11636..11639,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 484,
            column: 15,
            span: 11639..11640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 484,
            column: 20,
            span: 11641..11645,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 484,
            column: 22,
            span: 11646..11647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 484,
            column: 24,
            span: 11648..11649,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 484,
            column: 25,
            span: 11649..11650,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 484,
            column: 26,
            span: 11650..11651,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 485,
            column: 7,
            span: 11656..11658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 485,
            column: 11,
            span: 11659..11662,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 485,
            column: 16,
            span: 11663..11667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 485,
            column: 23,
            span: 11668..11674,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 485,
            column: 24,
            span: 11674..11675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 485,
            column: 25,
            span: 11675..11676,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 485,
            column: 26,
            span: 11676..11677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 485,
            column: 27,
            span: 11677..11678,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 485,
            column: 28,
            span: 11678..11679,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 485,
            column: 31,
            span: 11680..11682,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 485,
            column: 35,
            span: 11683..11686,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 485,
            column: 36,
            span: 11686..11687,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 485,
            column: 37,
            span: 11687..11688,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 485,
            column: 44,
            span: 11689..11695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 485,
            column: 48,
            span: 11696..11699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 485,
            column: 49,
            span: 11699..11700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 485,
            column: 51,
            span: 11701..11702,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 485,
            column: 0,
            span: 11703..11706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 486,
            column: 11,
            span: 11711..11717,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 12,
            span: 11717..11718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 486,
            column: 16,
            span: 11718..11722,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 486,
            column: 19,
            span: 11723..11725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 486,
            column: 21,
            span: 11726..11727,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 486,
            column: 22,
            span: 11727..11728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 486,
            column: 23,
            span: 11728..11729,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 486,
            column: 24,
            span: 11729..11730,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 25,
            span: 11730..11731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 487,
            column: 6,
            span: 11736..11737,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 487,
            column: 8,
            span: 11738..11739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 487,
            column: 10,
            span: 11740..11741,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 487,
            column: 12,
            span: 11742..11743,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 487,
            column: 0,
            span: 11743..11745,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 488,
            column: 0,
            span: 11748..11751,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 489,
            column: 0,
            span: 11752..11755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 492,
            column: 7,
            span: 11758..11764,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 8,
            span: 11764..11765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "run",
        ),
        position: Position {
            line: 492,
            column: 11,
            span: 11765..11768,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 12,
            span: 11768..11769,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 492,
            column: 20,
            span: 11769..11777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 22,
            span: 11778..11779,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 492,
            column: 23,
            span: 11779..11780,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 492,
            column: 26,
            span: 11781..11783,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 28,
            span: 11784..11785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 492,
            column: 29,
            span: 11785..11786,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 492,
            column: 31,
            span: 11786..11788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 492,
            column: 32,
            span: 11788..11789,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 492,
            column: 33,
            span: 11789..11790,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 492,
            column: 38,
            span: 11791..11795,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 492,
            column: 45,
            span: 11796..11802,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'>='",
        ),
        position: Position {
            line: 492,
            column: 50,
            span: 11803..11807,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 492,
            column: 55,
            span: 11808..11812,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 492,
            column: 62,
            span: 11813..11819,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'<'",
        ),
        position: Position {
            line: 492,
            column: 66,
            span: 11820..11823,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 492,
            column: 70,
            span: 11824..11827,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 492,
            column: 74,
            span: 11828..11831,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 75,
            span: 11831..11832,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 493,
            column: 9,
            span: 11840..11841,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"le\"",
        ),
        position: Position {
            line: 493,
            column: 13,
            span: 11841..11845,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 493,
            column: 14,
            span: 11845..11846,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        position: Position {
            line: 493,
            column: 20,
            span: 11847..11852,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 493,
            column: 21,
            span: 11852..11853,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 493,
            column: 22,
            span: 11853..11854,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 493,
            column: 25,
            span: 11855..11857,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<\"",
        ),
        position: Position {
            line: 493,
            column: 29,
            span: 11858..11861,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 493,
            column: 30,
            span: 11861..11862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 495,
            column: 3,
            span: 11881..11883,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 495,
            column: 4,
            span: 11883..11884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        position: Position {
            line: 495,
            column: 8,
            span: 11884..11888,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 495,
            column: 10,
            span: 11889..11890,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 495,
            column: 0,
            span: 11891..11894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 496,
            column: 7,
            span: 11895..11901,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 496,
            column: 8,
            span: 11901..11902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "run",
        ),
        position: Position {
            line: 496,
            column: 11,
            span: 11902..11905,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 496,
            column: 12,
            span: 11905..11906,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 496,
            column: 20,
            span: 11906..11914,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 496,
            column: 22,
            span: 11915..11916,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 496,
            column: 23,
            span: 11916..11917,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 496,
            column: 26,
            span: 11918..11920,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 496,
            column: 28,
            span: 11921..11922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 496,
            column: 29,
            span: 11922..11923,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 496,
            column: 31,
            span: 11923..11925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 496,
            column: 32,
            span: 11925..11926,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 496,
            column: 33,
            span: 11926..11927,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 496,
            column: 38,
            span: 11928..11932,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 496,
            column: 45,
            span: 11933..11939,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'<='",
        ),
        position: Position {
            line: 496,
            column: 50,
            span: 11940..11944,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 496,
            column: 55,
            span: 11945..11949,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 496,
            column: 62,
            span: 11950..11956,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'>'",
        ),
        position: Position {
            line: 496,
            column: 66,
            span: 11957..11960,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 496,
            column: 70,
            span: 11961..11964,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 496,
            column: 74,
            span: 11965..11968,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 496,
            column: 75,
            span: 11968..11969,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 497,
            column: 9,
            span: 11977..11978,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lt\"",
        ),
        position: Position {
            line: 497,
            column: 13,
            span: 11978..11982,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 497,
            column: 14,
            span: 11982..11983,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 497,
            column: 15,
            span: 11983..11984,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 497,
            column: 18,
            span: 11985..11987,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<=\"",
        ),
        position: Position {
            line: 497,
            column: 23,
            span: 11988..11992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 497,
            column: 24,
            span: 11992..11993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 498,
            column: 7,
            span: 11994..12000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 498,
            column: 8,
            span: 12000..12001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "run",
        ),
        position: Position {
            line: 498,
            column: 11,
            span: 12001..12004,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 498,
            column: 12,
            span: 12004..12005,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 498,
            column: 20,
            span: 12005..12013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 498,
            column: 22,
            span: 12014..12015,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 498,
            column: 23,
            span: 12015..12016,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 498,
            column: 26,
            span: 12017..12019,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 498,
            column: 28,
            span: 12020..12021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 498,
            column: 29,
            span: 12021..12022,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 498,
            column: 31,
            span: 12022..12024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 498,
            column: 32,
            span: 12024..12025,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 498,
            column: 33,
            span: 12025..12026,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 498,
            column: 38,
            span: 12027..12031,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 498,
            column: 45,
            span: 12032..12038,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'=='",
        ),
        position: Position {
            line: 498,
            column: 50,
            span: 12039..12043,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 498,
            column: 55,
            span: 12044..12048,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 498,
            column: 62,
            span: 12049..12055,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'~='",
        ),
        position: Position {
            line: 498,
            column: 67,
            span: 12056..12060,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 498,
            column: 71,
            span: 12061..12064,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 498,
            column: 75,
            span: 12065..12068,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 498,
            column: 76,
            span: 12068..12069,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 499,
            column: 9,
            span: 12077..12078,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"eq\"",
        ),
        position: Position {
            line: 499,
            column: 13,
            span: 12078..12082,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 499,
            column: 14,
            span: 12082..12083,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 499,
            column: 15,
            span: 12083..12084,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 499,
            column: 18,
            span: 12085..12087,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"~=\"",
        ),
        position: Position {
            line: 499,
            column: 23,
            span: 12088..12092,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 499,
            column: 24,
            span: 12092..12093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 501,
            column: 7,
            span: 12095..12101,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 501,
            column: 8,
            span: 12101..12102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "run",
        ),
        position: Position {
            line: 501,
            column: 11,
            span: 12102..12105,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 501,
            column: 12,
            span: 12105..12106,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 501,
            column: 20,
            span: 12106..12114,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 501,
            column: 22,
            span: 12115..12116,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 501,
            column: 23,
            span: 12116..12117,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 501,
            column: 30,
            span: 12118..12124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 501,
            column: 32,
            span: 12125..12126,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 501,
            column: 34,
            span: 12126..12128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 501,
            column: 35,
            span: 12128..12129,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 501,
            column: 39,
            span: 12130..12133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 501,
            column: 40,
            span: 12133..12134,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 501,
            column: 42,
            span: 12135..12136,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat\"",
        ),
        position: Position {
            line: 501,
            column: 50,
            span: 12136..12144,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 501,
            column: 51,
            span: 12144..12145,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 501,
            column: 52,
            span: 12145..12146,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 501,
            column: 55,
            span: 12147..12149,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1012\"",
        ),
        position: Position {
            line: 501,
            column: 62,
            span: 12150..12156,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 501,
            column: 63,
            span: 12156..12157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 503,
            column: 7,
            span: 12159..12165,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 503,
            column: 8,
            span: 12165..12166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "run",
        ),
        position: Position {
            line: 503,
            column: 11,
            span: 12166..12169,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 503,
            column: 12,
            span: 12169..12170,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 503,
            column: 20,
            span: 12170..12178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 503,
            column: 21,
            span: 12178..12179,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 503,
            column: 22,
            span: 12179..12180,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 503,
            column: 29,
            span: 12181..12187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 503,
            column: 31,
            span: 12188..12189,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 503,
            column: 34,
            span: 12190..12192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 503,
            column: 36,
            span: 12193..12194,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 503,
            column: 39,
            span: 12195..12197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 503,
            column: 41,
            span: 12198..12199,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 503,
            column: 44,
            span: 12200..12202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 503,
            column: 46,
            span: 12203..12204,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 503,
            column: 50,
            span: 12205..12208,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 503,
            column: 51,
            span: 12208..12209,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 504,
            column: 9,
            span: 12217..12218,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat\"",
        ),
        position: Position {
            line: 504,
            column: 17,
            span: 12218..12226,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 504,
            column: 18,
            span: 12226..12227,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat\"",
        ),
        position: Position {
            line: 504,
            column: 27,
            span: 12228..12236,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 504,
            column: 28,
            span: 12236..12237,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat\"",
        ),
        position: Position {
            line: 504,
            column: 37,
            span: 12238..12246,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 504,
            column: 38,
            span: 12246..12247,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 504,
            column: 39,
            span: 12247..12248,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 504,
            column: 42,
            span: 12249..12251,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1012hello10\"",
        ),
        position: Position {
            line: 504,
            column: 56,
            span: 12252..12265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 504,
            column: 57,
            span: 12265..12266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 506,
            column: 7,
            span: 12268..12274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 8,
            span: 12274..12275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "run",
        ),
        position: Position {
            line: 506,
            column: 11,
            span: 12275..12278,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 12,
            span: 12278..12279,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 506,
            column: 20,
            span: 12279..12287,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 506,
            column: 21,
            span: 12287..12288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 506,
            column: 22,
            span: 12288..12289,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 506,
            column: 29,
            span: 12290..12296,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 506,
            column: 33,
            span: 12297..12300,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 506,
            column: 36,
            span: 12301..12303,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        position: Position {
            line: 506,
            column: 40,
            span: 12304..12307,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 506,
            column: 43,
            span: 12308..12310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 506,
            column: 45,
            span: 12311..12312,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 506,
            column: 48,
            span: 12313..12315,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        position: Position {
            line: 506,
            column: 52,
            span: 12316..12319,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 506,
            column: 55,
            span: 12320..12322,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 506,
            column: 57,
            span: 12323..12324,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 506,
            column: 60,
            span: 12325..12327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 506,
            column: 62,
            span: 12328..12329,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 506,
            column: 65,
            span: 12330..12332,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 506,
            column: 69,
            span: 12333..12336,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 506,
            column: 73,
            span: 12337..12340,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 506,
            column: 74,
            span: 12340..12341,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 507,
            column: 9,
            span: 12349..12350,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat\"",
        ),
        position: Position {
            line: 507,
            column: 17,
            span: 12350..12358,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 507,
            column: 18,
            span: 12358..12359,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat\"",
        ),
        position: Position {
            line: 507,
            column: 27,
            span: 12360..12368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 507,
            column: 28,
            span: 12368..12369,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat\"",
        ),
        position: Position {
            line: 507,
            column: 37,
            span: 12370..12378,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 507,
            column: 38,
            span: 12378..12379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 507,
            column: 39,
            span: 12379..12380,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 507,
            column: 42,
            span: 12381..12383,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab10chello12x\"",
        ),
        position: Position {
            line: 507,
            column: 58,
            span: 12384..12399,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 507,
            column: 59,
            span: 12399..12400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 509,
            column: 7,
            span: 12402..12408,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 509,
            column: 8,
            span: 12408..12409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "run",
        ),
        position: Position {
            line: 509,
            column: 11,
            span: 12409..12412,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 509,
            column: 12,
            span: 12412..12413,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 509,
            column: 20,
            span: 12413..12421,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 509,
            column: 22,
            span: 12422..12423,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 509,
            column: 23,
            span: 12423..12424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 510,
            column: 15,
            span: 12438..12439,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 510,
            column: 16,
            span: 12439..12440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "BB",
        ),
        position: Position {
            line: 510,
            column: 18,
            span: 12440..12442,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 510,
            column: 20,
            span: 12443..12444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 510,
            column: 0,
            span: 12445..12450,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 511,
            column: 20,
            span: 12464..12470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 511,
            column: 22,
            span: 12471..12472,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 511,
            column: 23,
            span: 12472..12473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "BB",
        ),
        position: Position {
            line: 511,
            column: 0,
            span: 12473..12475,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 512,
            column: 15,
            span: 12487..12490,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 512,
            column: 16,
            span: 12490..12491,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 512,
            column: 18,
            span: 12492..12493,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nidx\"",
        ),
        position: Position {
            line: 512,
            column: 24,
            span: 12493..12499,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 512,
            column: 25,
            span: 12499..12500,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"idx\"",
        ),
        position: Position {
            line: 512,
            column: 31,
            span: 12501..12506,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 512,
            column: 32,
            span: 12506..12507,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 512,
            column: 33,
            span: 12507..12508,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 512,
            column: 36,
            span: 12509..12511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 512,
            column: 42,
            span: 12512..12517,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 512,
            column: 43,
            span: 12517..12518,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 515,
            column: 3,
            span: 12547..12549,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 515,
            column: 9,
            span: 12550..12555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 515,
            column: 14,
            span: 12556..12560,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 515,
            column: 16,
            span: 12561..12562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        position: Position {
            line: 515,
            column: 0,
            span: 12563..12567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 516,
            column: 4,
            span: 12570..12571,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 516,
            column: 6,
            span: 12572..12573,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 516,
            column: 15,
            span: 12574..12582,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 516,
            column: 17,
            span: 12583..12584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 516,
            column: 18,
            span: 12584..12585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAA",
        ),
        position: Position {
            line: 516,
            column: 22,
            span: 12586..12589,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 516,
            column: 24,
            span: 12590..12591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "BBB",
        ),
        position: Position {
            line: 516,
            column: 28,
            span: 12592..12595,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 516,
            column: 30,
            span: 12596..12597,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 516,
            column: 32,
            span: 12597..12599,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 516,
            column: 33,
            span: 12599..12600,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 516,
            column: 40,
            span: 12601..12607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAA",
        ),
        position: Position {
            line: 516,
            column: 44,
            span: 12608..12611,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 516,
            column: 0,
            span: 12612..12615,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 517,
            column: 0,
            span: 12616..12619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 518,
            column: 2,
            span: 12620..12621,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 518,
            column: 4,
            span: 12622..12623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "new",
        ),
        position: Position {
            line: 518,
            column: 8,
            span: 12624..12627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 518,
            column: 9,
            span: 12627..12628,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 518,
            column: 11,
            span: 12627..12630,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 518,
            column: 12,
            span: 12630..12631,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 518,
            column: 13,
            span: 12631..12632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 518,
            column: 15,
            span: 12633..12634,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 518,
            column: 16,
            span: 12634..12635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 518,
            column: 17,
            span: 12635..12636,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 518,
            column: 18,
            span: 12636..12637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "BBB",
        ),
        position: Position {
            line: 518,
            column: 21,
            span: 12637..12640,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 518,
            column: 23,
            span: 12641..12642,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 518,
            column: 26,
            span: 12642..12645,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 518,
            column: 27,
            span: 12645..12646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 519,
            column: 6,
            span: 12647..12652,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 519,
            column: 7,
            span: 12652..12653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setupvalue",
        ),
        position: Position {
            line: 519,
            column: 17,
            span: 12653..12663,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 519,
            column: 18,
            span: 12663..12664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 519,
            column: 19,
            span: 12664..12665,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 519,
            column: 20,
            span: 12665..12666,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 519,
            column: 22,
            span: 12666..12668,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 519,
            column: 23,
            span: 12668..12669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 519,
            column: 25,
            span: 12670..12671,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 519,
            column: 26,
            span: 12671..12672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 520,
            column: 7,
            span: 12673..12679,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 8,
            span: 12679..12680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "run",
        ),
        position: Position {
            line: 520,
            column: 11,
            span: 12680..12683,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 12,
            span: 12683..12684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 520,
            column: 13,
            span: 12684..12685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 14,
            span: 12685..12686,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 520,
            column: 16,
            span: 12687..12688,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"idx\"",
        ),
        position: Position {
            line: 520,
            column: 21,
            span: 12688..12693,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 22,
            span: 12693..12694,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nidx\"",
        ),
        position: Position {
            line: 520,
            column: 29,
            span: 12695..12701,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 30,
            span: 12701..12702,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"idx\"",
        ),
        position: Position {
            line: 520,
            column: 36,
            span: 12703..12708,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 520,
            column: 37,
            span: 12708..12709,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 38,
            span: 12709..12710,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 520,
            column: 41,
            span: 12711..12713,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 520,
            column: 44,
            span: 12713..12716,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 45,
            span: 12716..12717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 521,
            column: 7,
            span: 12718..12724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 521,
            column: 8,
            span: 12724..12725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 521,
            column: 9,
            span: 12725..12726,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 521,
            column: 10,
            span: 12726..12727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 521,
            column: 11,
            span: 12727..12728,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 521,
            column: 12,
            span: 12728..12729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AAA",
        ),
        position: Position {
            line: 521,
            column: 15,
            span: 12729..12732,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 521,
            column: 18,
            span: 12733..12735,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 521,
            column: 21,
            span: 12735..12738,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 521,
            column: 22,
            span: 12738..12739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 523,
            column: 6,
            span: 12741..12746,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 523,
            column: 9,
            span: 12746..12749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 525,
            column: 6,
            span: 12751..12756,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing yields inside 'for' iterators\"",
        ),
        position: Position {
            line: 525,
            column: 45,
            span: 12756..12795,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 527,
            column: 6,
            span: 12797..12802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 527,
            column: 8,
            span: 12803..12804,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 527,
            column: 10,
            span: 12805..12806,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 527,
            column: 19,
            span: 12807..12815,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 527,
            column: 21,
            span: 12816..12817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 527,
            column: 22,
            span: 12817..12818,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 527,
            column: 23,
            span: 12818..12819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 527,
            column: 25,
            span: 12820..12821,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 527,
            column: 26,
            span: 12821..12822,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 528,
            column: 9,
            span: 12829..12831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 528,
            column: 11,
            span: 12832..12833,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 528,
            column: 12,
            span: 12833..12834,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 528,
            column: 13,
            span: 12833..12835,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 528,
            column: 16,
            span: 12836..12838,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 528,
            column: 18,
            span: 12838..12840,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 528,
            column: 23,
            span: 12841..12845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 528,
            column: 33,
            span: 12846..12855,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 528,
            column: 34,
            span: 12855..12856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 528,
            column: 39,
            span: 12856..12861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 528,
            column: 40,
            span: 12861..12862,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 528,
            column: 43,
            span: 12862..12865,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 528,
            column: 44,
            span: 12865..12866,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for\"",
        ),
        position: Position {
            line: 528,
            column: 50,
            span: 12867..12872,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 528,
            column: 51,
            span: 12872..12873,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 528,
            column: 0,
            span: 12874..12877,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 529,
            column: 9,
            span: 12884..12886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 529,
            column: 11,
            span: 12887..12888,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 529,
            column: 13,
            span: 12889..12890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 529,
            column: 15,
            span: 12891..12892,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 529,
            column: 20,
            span: 12893..12897,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 529,
            column: 27,
            span: 12898..12904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 529,
            column: 29,
            span: 12905..12906,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 529,
            column: 31,
            span: 12907..12908,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 529,
            column: 33,
            span: 12908..12910,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 529,
            column: 0,
            span: 12911..12914,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 530,
            column: 0,
            span: 12919..12922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 532,
            column: 7,
            span: 12924..12930,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 532,
            column: 8,
            span: 12930..12931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "run",
        ),
        position: Position {
            line: 532,
            column: 11,
            span: 12931..12934,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 532,
            column: 12,
            span: 12934..12935,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 532,
            column: 20,
            span: 12935..12943,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 532,
            column: 22,
            span: 12944..12945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 532,
            column: 23,
            span: 12945..12946,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 533,
            column: 19,
            span: 12960..12965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 533,
            column: 21,
            span: 12966..12967,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 533,
            column: 23,
            span: 12968..12969,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 533,
            column: 0,
            span: 12969..12971,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 534,
            column: 17,
            span: 12985..12988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 534,
            column: 19,
            span: 12989..12990,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 534,
            column: 22,
            span: 12991..12993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 534,
            column: 24,
            span: 12994..12995,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 534,
            column: 25,
            span: 12995..12996,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 534,
            column: 27,
            span: 12996..12998,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 534,
            column: 28,
            span: 12998..12999,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 534,
            column: 30,
            span: 12999..13001,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 534,
            column: 33,
            span: 13002..13004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 534,
            column: 35,
            span: 13005..13006,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 534,
            column: 37,
            span: 13007..13008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 534,
            column: 39,
            span: 13009..13010,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 534,
            column: 41,
            span: 13011..13012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 534,
            column: 43,
            span: 13013..13014,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 534,
            column: 0,
            span: 13015..13018,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 535,
            column: 20,
            span: 13032..13038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 535,
            column: 0,
            span: 13039..13040,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 536,
            column: 15,
            span: 13052..13055,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 536,
            column: 16,
            span: 13055..13056,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 536,
            column: 18,
            span: 13057..13058,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for\"",
        ),
        position: Position {
            line: 536,
            column: 23,
            span: 13058..13063,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 536,
            column: 24,
            span: 13063..13064,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for\"",
        ),
        position: Position {
            line: 536,
            column: 30,
            span: 13065..13070,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 536,
            column: 31,
            span: 13070..13071,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"for\"",
        ),
        position: Position {
            line: 536,
            column: 37,
            span: 13072..13077,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 536,
            column: 38,
            span: 13077..13078,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 536,
            column: 39,
            span: 13078..13079,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 536,
            column: 42,
            span: 13080..13082,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 536,
            column: 45,
            span: 13082..13085,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 536,
            column: 46,
            span: 13085..13086,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 541,
            column: 3,
            span: 13117..13119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 541,
            column: 5,
            span: 13120..13121,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 541,
            column: 7,
            span: 13121..13123,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 541,
            column: 10,
            span: 13123..13126,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 541,
            column: 0,
            span: 13127..13131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 542,
            column: 4,
            span: 13134..13135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 542,
            column: 11,
            span: 13135..13142,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 542,
            column: 14,
            span: 13143..13145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 542,
            column: 20,
            span: 13146..13151,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 542,
            column: 21,
            span: 13151..13152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 542,
            column: 22,
            span: 13152..13153,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\a\\n >>> testC not active: skipping coroutine API tests <<<\\n\\a'",
        ),
        position: Position {
            line: 542,
            column: 87,
            span: 13153..13218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 542,
            column: 88,
            span: 13218..13219,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 543,
            column: 0,
            span: 13222..13228,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 544,
            column: 0,
            span: 13229..13232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 546,
            column: 6,
            span: 13234..13239,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 546,
            column: 7,
            span: 13239..13240,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing coroutine API'",
        ),
        position: Position {
            line: 546,
            column: 30,
            span: 13240..13263,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 546,
            column: 31,
            span: 13263..13264,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 548,
            column: 6,
            span: 13266..13271,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 548,
            column: 15,
            span: 13272..13280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "apico",
        ),
        position: Position {
            line: 548,
            column: 21,
            span: 13281..13286,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 548,
            column: 23,
            span: 13287..13288,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 548,
            column: 26,
            span: 13288..13291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 548,
            column: 27,
            span: 13291..13292,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 549,
            column: 8,
            span: 13295..13300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 549,
            column: 10,
            span: 13301..13302,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 549,
            column: 12,
            span: 13303..13304,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 549,
            column: 14,
            span: 13305..13306,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 549,
            column: 17,
            span: 13306..13309,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 549,
            column: 18,
            span: 13309..13310,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 550,
            column: 9,
            span: 13313..13319,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 550,
            column: 19,
            span: 13320..13329,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 550,
            column: 20,
            span: 13329..13330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 550,
            column: 24,
            span: 13330..13334,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 550,
            column: 25,
            span: 13334..13335,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 550,
            column: 33,
            span: 13335..13343,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 550,
            column: 35,
            span: 13344..13345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 550,
            column: 36,
            span: 13345..13346,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 551,
            column: 11,
            span: 13351..13357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 551,
            column: 13,
            span: 13358..13359,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 551,
            column: 14,
            span: 13359..13360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 551,
            column: 19,
            span: 13360..13365,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 551,
            column: 20,
            span: 13365..13366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 551,
            column: 25,
            span: 13366..13371,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 551,
            column: 26,
            span: 13371..13372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 551,
            column: 32,
            span: 13372..13378,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 551,
            column: 33,
            span: 13378..13379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 551,
            column: 34,
            span: 13379..13380,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 551,
            column: 35,
            span: 13380..13381,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 551,
            column: 36,
            span: 13381..13382,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 552,
            column: 6,
            span: 13385..13388,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 552,
            column: 7,
            span: 13388..13389,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 553,
            column: 0,
            span: 13390..13393,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 555,
            column: 6,
            span: 13395..13400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 555,
            column: 8,
            span: 13401..13402,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 555,
            column: 10,
            span: 13403..13404,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 555,
            column: 12,
            span: 13405..13406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "apico",
        ),
        position: Position {
            line: 555,
            column: 17,
            span: 13406..13411,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 555,
            column: 18,
            span: 13411..13412,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  pushstring errorcode\n  pcallk 1 0 2;\n  invalid command (should not arrive here)\n]]",
        ),
        position: Position {
            line: 560,
            column: 3,
            span: 13413..13500,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 560,
            column: 4,
            span: 13500..13501,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[getctx; gettop; return .]]",
        ),
        position: Position {
            line: 561,
            column: 29,
            span: 13502..13530,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 561,
            column: 30,
            span: 13530..13531,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stackmark\"",
        ),
        position: Position {
            line: 562,
            column: 12,
            span: 13532..13543,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 562,
            column: 13,
            span: 13543..13544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 563,
            column: 0,
            span: 13545..13550,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 564,
            column: 2,
            span: 13551..13552,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 564,
            column: 3,
            span: 13552..13553,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 564,
            column: 4,
            span: 13553..13554,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 564,
            column: 5,
            span: 13554..13555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 565,
            column: 7,
            span: 13556..13562,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 565,
            column: 8,
            span: 13562..13563,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 565,
            column: 9,
            span: 13563..13564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 565,
            column: 10,
            span: 13564..13565,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 565,
            column: 13,
            span: 13566..13568,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 565,
            column: 15,
            span: 13568..13570,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 565,
            column: 0,
            span: 13571..13574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 566,
            column: 9,
            span: 13582..13583,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 566,
            column: 10,
            span: 13583..13584,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 566,
            column: 11,
            span: 13583..13585,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 566,
            column: 12,
            span: 13585..13586,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 566,
            column: 15,
            span: 13587..13589,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stackmark\"",
        ),
        position: Position {
            line: 566,
            column: 27,
            span: 13590..13601,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 566,
            column: 0,
            span: 13602..13605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 567,
            column: 9,
            span: 13613..13614,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 567,
            column: 10,
            span: 13614..13615,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 567,
            column: 11,
            span: 13614..13616,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 567,
            column: 12,
            span: 13616..13617,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 567,
            column: 15,
            span: 13618..13620,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"errorcode\"",
        ),
        position: Position {
            line: 567,
            column: 27,
            span: 13621..13632,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 567,
            column: 0,
            span: 13633..13636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 568,
            column: 9,
            span: 13644..13645,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 568,
            column: 10,
            span: 13645..13646,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 568,
            column: 11,
            span: 13645..13647,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 568,
            column: 12,
            span: 13647..13648,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 568,
            column: 15,
            span: 13649..13651,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ERRRUN\"",
        ),
        position: Position {
            line: 568,
            column: 24,
            span: 13652..13660,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 568,
            column: 0,
            span: 13661..13664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 569,
            column: 9,
            span: 13672..13673,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 569,
            column: 10,
            span: 13673..13674,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 569,
            column: 11,
            span: 13673..13675,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 569,
            column: 12,
            span: 13675..13676,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 569,
            column: 15,
            span: 13677..13679,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 569,
            column: 17,
            span: 13679..13681,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 569,
            column: 18,
            span: 13681..13682,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 571,
            column: 6,
            span: 13709..13714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 571,
            column: 9,
            span: 13715..13717,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 571,
            column: 11,
            span: 13718..13719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "apico",
        ),
        position: Position {
            line: 571,
            column: 17,
            span: 13720..13725,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 571,
            column: 18,
            span: 13725..13726,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue 2; pushnum 10; pcallk 1 2 3; invalid command;\"",
        ),
        position: Position {
            line: 572,
            column: 60,
            span: 13729..13786,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 572,
            column: 61,
            span: 13786..13787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 573,
            column: 12,
            span: 13790..13799,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 573,
            column: 13,
            span: 13799..13800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 573,
            column: 18,
            span: 13800..13805,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 573,
            column: 19,
            span: 13805..13806,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getctx; pushvalue 2; pushstring a; pcallk 1 0 4; invalid command\"",
        ),
        position: Position {
            line: 574,
            column: 69,
            span: 13809..13875,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 574,
            column: 70,
            span: 13875..13876,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getctx; gettop; return .\"",
        ),
        position: Position {
            line: 575,
            column: 29,
            span: 13879..13905,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 575,
            column: 30,
            span: 13905..13906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 577,
            column: 7,
            span: 13908..13914,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 577,
            column: 8,
            span: 13914..13915,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 577,
            column: 10,
            span: 13915..13917,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 577,
            column: 11,
            span: 13917..13918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 577,
            column: 12,
            span: 13918..13919,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 577,
            column: 15,
            span: 13920..13922,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 577,
            column: 18,
            span: 13922..13925,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 577,
            column: 19,
            span: 13925..13926,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 578,
            column: 7,
            span: 13927..13933,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 578,
            column: 8,
            span: 13933..13934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 578,
            column: 10,
            span: 13934..13936,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 578,
            column: 11,
            span: 13936..13937,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 578,
            column: 13,
            span: 13936..13939,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 14,
            span: 13939..13940,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 578,
            column: 17,
            span: 13940..13943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 578,
            column: 18,
            span: 13943..13944,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 578,
            column: 21,
            span: 13945..13947,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 578,
            column: 25,
            span: 13948..13951,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 578,
            column: 26,
            span: 13951..13952,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 579,
            column: 2,
            span: 13953..13954,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 579,
            column: 4,
            span: 13955..13956,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 579,
            column: 6,
            span: 13957..13958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 579,
            column: 8,
            span: 13958..13960,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 579,
            column: 9,
            span: 13960..13961,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 579,
            column: 10,
            span: 13961..13962,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 579,
            column: 11,
            span: 13962..13963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 580,
            column: 7,
            span: 13964..13970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 580,
            column: 8,
            span: 13970..13971,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 580,
            column: 9,
            span: 13971..13972,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 580,
            column: 10,
            span: 13972..13973,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 580,
            column: 13,
            span: 13974..13976,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 580,
            column: 16,
            span: 13976..13979,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 580,
            column: 0,
            span: 13980..13983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 581,
            column: 9,
            span: 13991..13992,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 581,
            column: 10,
            span: 13992..13993,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 581,
            column: 11,
            span: 13992..13994,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 581,
            column: 12,
            span: 13994..13995,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 581,
            column: 15,
            span: 13996..13998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 581,
            column: 25,
            span: 13999..14008,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 581,
            column: 26,
            span: 14008..14009,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 581,
            column: 31,
            span: 14009..14014,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 581,
            column: 0,
            span: 14015..14018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 582,
            column: 9,
            span: 14026..14027,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 582,
            column: 10,
            span: 14027..14028,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 582,
            column: 11,
            span: 14027..14029,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 582,
            column: 12,
            span: 14029..14030,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 582,
            column: 15,
            span: 14031..14033,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 582,
            column: 18,
            span: 14033..14036,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 582,
            column: 22,
            span: 14037..14040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 582,
            column: 24,
            span: 14041..14042,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 582,
            column: 25,
            span: 14042..14043,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 582,
            column: 26,
            span: 14042..14044,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 582,
            column: 27,
            span: 14044..14045,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 582,
            column: 30,
            span: 14046..14048,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 582,
            column: 33,
            span: 14048..14051,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 582,
            column: 0,
            span: 14052..14055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 583,
            column: 9,
            span: 14063..14064,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 583,
            column: 10,
            span: 14064..14065,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 583,
            column: 11,
            span: 14064..14066,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 583,
            column: 12,
            span: 14066..14067,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 583,
            column: 15,
            span: 14068..14070,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"YIELD\"",
        ),
        position: Position {
            line: 583,
            column: 23,
            span: 14071..14078,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 583,
            column: 27,
            span: 14079..14082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 583,
            column: 29,
            span: 14083..14084,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 583,
            column: 30,
            span: 14084..14085,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 583,
            column: 31,
            span: 14084..14086,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 583,
            column: 32,
            span: 14086..14087,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 583,
            column: 35,
            span: 14088..14090,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 583,
            column: 37,
            span: 14090..14092,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 583,
            column: 0,
            span: 14093..14096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 584,
            column: 9,
            span: 14104..14105,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 584,
            column: 10,
            span: 14105..14106,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 584,
            column: 11,
            span: 14105..14107,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 584,
            column: 12,
            span: 14107..14108,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 584,
            column: 15,
            span: 14109..14111,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"YIELD\"",
        ),
        position: Position {
            line: 584,
            column: 23,
            span: 14112..14119,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 584,
            column: 27,
            span: 14120..14123,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 584,
            column: 29,
            span: 14124..14125,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 584,
            column: 30,
            span: 14125..14126,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 584,
            column: 32,
            span: 14125..14128,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 584,
            column: 33,
            span: 14128..14129,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 584,
            column: 36,
            span: 14130..14132,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 584,
            column: 38,
            span: 14132..14134,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 584,
            column: 39,
            span: 14134..14135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 585,
            column: 7,
            span: 14136..14142,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 585,
            column: 8,
            span: 14142..14143,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 585,
            column: 11,
            span: 14143..14146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 585,
            column: 17,
            span: 14147..14152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 585,
            column: 18,
            span: 14152..14153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 585,
            column: 20,
            span: 14153..14155,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 585,
            column: 21,
            span: 14155..14156,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 585,
            column: 22,
            span: 14156..14157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 588,
            column: 2,
            span: 14187..14188,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 588,
            column: 4,
            span: 14189..14190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 588,
            column: 6,
            span: 14191..14192,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 588,
            column: 7,
            span: 14192..14193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 588,
            column: 16,
            span: 14193..14202,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 588,
            column: 17,
            span: 14202..14203,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 3; pushnum 5; yield 1;\"",
        ),
        position: Position {
            line: 588,
            column: 49,
            span: 14203..14235,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 588,
            column: 50,
            span: 14235..14236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 589,
            column: 3,
            span: 14237..14239,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 589,
            column: 5,
            span: 14240..14241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 589,
            column: 15,
            span: 14242..14251,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 589,
            column: 16,
            span: 14251..14252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 589,
            column: 20,
            span: 14252..14256,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 589,
            column: 21,
            span: 14256..14257,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 589,
            column: 29,
            span: 14257..14265,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 589,
            column: 31,
            span: 14266..14267,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 589,
            column: 32,
            span: 14267..14268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 590,
            column: 9,
            span: 14271..14277,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 590,
            column: 10,
            span: 14277..14278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 590,
            column: 11,
            span: 14278..14279,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 590,
            column: 12,
            span: 14279..14280,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 590,
            column: 13,
            span: 14280..14281,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 590,
            column: 16,
            span: 14282..14284,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 590,
            column: 19,
            span: 14284..14287,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 590,
            column: 20,
            span: 14287..14288,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 590,
            column: 21,
            span: 14288..14289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 590,
            column: 28,
            span: 14290..14296,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 590,
            column: 29,
            span: 14296..14297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 590,
            column: 30,
            span: 14297..14298,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 590,
            column: 31,
            span: 14298..14299,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 590,
            column: 32,
            span: 14299..14300,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 590,
            column: 35,
            span: 14301..14303,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 590,
            column: 38,
            span: 14303..14306,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 590,
            column: 39,
            span: 14306..14307,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 590,
            column: 40,
            span: 14307..14308,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 590,
            column: 47,
            span: 14309..14315,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 590,
            column: 0,
            span: 14315..14318,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 591,
            column: 4,
            span: 14319..14322,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 591,
            column: 5,
            span: 14322..14323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 592,
            column: 7,
            span: 14324..14330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 592,
            column: 8,
            span: 14330..14331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 592,
            column: 10,
            span: 14331..14333,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 592,
            column: 11,
            span: 14333..14334,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 592,
            column: 13,
            span: 14333..14336,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 592,
            column: 14,
            span: 14336..14337,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 592,
            column: 16,
            span: 14336..14339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 592,
            column: 17,
            span: 14339..14340,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 592,
            column: 20,
            span: 14341..14343,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 592,
            column: 22,
            span: 14343..14345,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 592,
            column: 23,
            span: 14345..14346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 593,
            column: 7,
            span: 14347..14353,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 593,
            column: 8,
            span: 14353..14354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 593,
            column: 10,
            span: 14354..14356,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 593,
            column: 11,
            span: 14356..14357,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 593,
            column: 13,
            span: 14356..14359,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 593,
            column: 14,
            span: 14359..14360,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 593,
            column: 16,
            span: 14359..14362,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 593,
            column: 17,
            span: 14362..14363,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 593,
            column: 20,
            span: 14364..14366,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 593,
            column: 22,
            span: 14366..14368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 593,
            column: 23,
            span: 14368..14369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 594,
            column: 7,
            span: 14370..14376,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 594,
            column: 8,
            span: 14376..14377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 594,
            column: 10,
            span: 14377..14379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 594,
            column: 11,
            span: 14379..14380,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 594,
            column: 13,
            span: 14379..14382,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 594,
            column: 14,
            span: 14382..14383,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 594,
            column: 16,
            span: 14382..14385,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 594,
            column: 17,
            span: 14385..14386,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 594,
            column: 20,
            span: 14387..14389,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 594,
            column: 23,
            span: 14389..14392,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 594,
            column: 24,
            span: 14392..14393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 598,
            column: 2,
            span: 14432..14433,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 598,
            column: 4,
            span: 14434..14435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 598,
            column: 6,
            span: 14436..14437,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 598,
            column: 7,
            span: 14437..14438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 598,
            column: 16,
            span: 14438..14447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 598,
            column: 17,
            span: 14447..14448,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n        pushnum 102\n\tyieldk\t1 U2\n\treturn 2\n]]",
        ),
        position: Position {
            line: 602,
            column: 3,
            span: 14448..14496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 602,
            column: 4,
            span: 14496..14497,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\tpushnum 23   # continuation\n\tgettop\n\treturn .\n]]",
        ),
        position: Position {
            line: 607,
            column: 3,
            span: 14498..14550,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 607,
            column: 4,
            span: 14550..14551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 609,
            column: 2,
            span: 14553..14554,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 609,
            column: 4,
            span: 14555..14556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 609,
            column: 14,
            span: 14557..14566,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 609,
            column: 15,
            span: 14566..14567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 609,
            column: 19,
            span: 14567..14571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 609,
            column: 20,
            span: 14571..14572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 609,
            column: 21,
            span: 14572..14573,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 609,
            column: 22,
            span: 14573..14574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 610,
            column: 7,
            span: 14575..14581,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 610,
            column: 8,
            span: 14581..14582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 610,
            column: 9,
            span: 14582..14583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 610,
            column: 10,
            span: 14583..14584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 610,
            column: 11,
            span: 14584..14585,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 610,
            column: 14,
            span: 14586..14588,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "102",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 610,
            column: 18,
            span: 14588..14592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 610,
            column: 19,
            span: 14592..14593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 611,
            column: 7,
            span: 14594..14600,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 611,
            column: 8,
            span: 14600..14601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 611,
            column: 9,
            span: 14601..14602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 611,
            column: 10,
            span: 14602..14603,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 611,
            column: 11,
            span: 14603..14604,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 611,
            column: 14,
            span: 14605..14607,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 611,
            column: 17,
            span: 14607..14610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 611,
            column: 18,
            span: 14610..14611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 614,
            column: 2,
            span: 14614..14615,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 614,
            column: 4,
            span: 14616..14617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 614,
            column: 6,
            span: 14618..14619,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 614,
            column: 7,
            span: 14619..14620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 614,
            column: 16,
            span: 14620..14629,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushstring 'a'; pushnum 102; yield 2; ]]",
        ),
        position: Position {
            line: 614,
            column: 58,
            span: 14629..14671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 616,
            column: 2,
            span: 14673..14674,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 616,
            column: 3,
            span: 14674..14675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 616,
            column: 5,
            span: 14676..14677,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 616,
            column: 6,
            span: 14677..14678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 616,
            column: 8,
            span: 14679..14680,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 616,
            column: 9,
            span: 14680..14681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 616,
            column: 11,
            span: 14682..14683,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 616,
            column: 13,
            span: 14684..14685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 616,
            column: 15,
            span: 14686..14687,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 616,
            column: 16,
            span: 14687..14688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 616,
            column: 21,
            span: 14688..14693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 616,
            column: 22,
            span: 14693..14694,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[newthread; pushvalue 2; xmove 0 3 1; resume 3 0;\n                       pushstatus; xmove 3 0 0;  resume 3 0; pushstatus;\n                       return 4; ]]",
        ),
        position: Position {
            line: 618,
            column: 36,
            span: 14694..14853,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 618,
            column: 37,
            span: 14853..14854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 618,
            column: 39,
            span: 14855..14856,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 618,
            column: 40,
            span: 14856..14857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 620,
            column: 7,
            span: 14859..14865,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 620,
            column: 8,
            span: 14865..14866,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 620,
            column: 9,
            span: 14866..14867,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 620,
            column: 12,
            span: 14868..14870,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'YIELD'",
        ),
        position: Position {
            line: 620,
            column: 20,
            span: 14871..14878,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 620,
            column: 24,
            span: 14879..14882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 620,
            column: 26,
            span: 14883..14884,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 620,
            column: 29,
            span: 14885..14887,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 620,
            column: 33,
            span: 14888..14891,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 620,
            column: 37,
            span: 14892..14895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 620,
            column: 39,
            span: 14896..14897,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 620,
            column: 42,
            span: 14898..14900,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "102",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 620,
            column: 46,
            span: 14900..14904,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 620,
            column: 50,
            span: 14905..14908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 620,
            column: 52,
            span: 14909..14910,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 620,
            column: 55,
            span: 14911..14913,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 620,
            column: 60,
            span: 14914..14918,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 620,
            column: 61,
            span: 14918..14919,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 625,
            column: 6,
            span: 14963..14968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 625,
            column: 12,
            span: 14969..14974,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 625,
            column: 14,
            span: 14975..14976,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 625,
            column: 16,
            span: 14976..14978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 627,
            column: 2,
            span: 15002..15003,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 627,
            column: 4,
            span: 15004..15005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 627,
            column: 6,
            span: 15006..15007,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 627,
            column: 7,
            span: 15007..15008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 627,
            column: 16,
            span: 15008..15017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 627,
            column: 17,
            span: 15017..15018,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  remove 1;             # remove argument\n  pushvalue U3;         # get selection function\n  call 0 1;             # call it  (result is 'f' or 'yield')\n  pushstring hello      # single argument for selected function\n  pushupvalueindex 2;   # index of continuation program\n  callk 1 -1 .;\t\t# call selected function\n  errorerror\t\t# should never arrive here\n]]",
        ),
        position: Position {
            line: 635,
            column: 3,
            span: 15018..15379,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 635,
            column: 4,
            span: 15379..15380,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  # continuation program\n  pushnum 34\t# return value\n  gettop\n  return .     # return all results\n]]",
        ),
        position: Position {
            line: 641,
            column: 3,
            span: 15381..15484,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 641,
            column: 4,
            span: 15484..15485,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 642,
            column: 9,
            span: 15486..15494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 642,
            column: 11,
            span: 15495..15496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 642,
            column: 12,
            span: 15496..15497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 643,
            column: 8,
            span: 15526..15531,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 643,
            column: 10,
            span: 15532..15533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 643,
            column: 16,
            span: 15534..15539,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 643,
            column: 18,
            span: 15540..15541,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 643,
            column: 0,
            span: 15541..15543,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 644,
            column: 5,
            span: 15546..15548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 644,
            column: 11,
            span: 15549..15554,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 644,
            column: 14,
            span: 15555..15557,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 644,
            column: 16,
            span: 15557..15559,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 644,
            column: 21,
            span: 15560..15564,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 644,
            column: 28,
            span: 15565..15571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 644,
            column: 38,
            span: 15572..15581,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 644,
            column: 39,
            span: 15581..15582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 644,
            column: 0,
            span: 15582..15587,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 645,
            column: 7,
            span: 15590..15594,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 645,
            column: 14,
            span: 15595..15601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 645,
            column: 0,
            span: 15602..15603,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 646,
            column: 0,
            span: 15606..15609,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 647,
            column: 0,
            span: 15610..15613,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 648,
            column: 2,
            span: 15614..15615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 650,
            column: 3,
            span: 15617..15619,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 650,
            column: 5,
            span: 15620..15621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 650,
            column: 15,
            span: 15622..15631,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 650,
            column: 16,
            span: 15631..15632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 650,
            column: 20,
            span: 15632..15636,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 650,
            column: 21,
            span: 15636..15637,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 650,
            column: 29,
            span: 15637..15645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 650,
            column: 31,
            span: 15646..15647,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 650,
            column: 32,
            span: 15647..15648,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 650,
            column: 39,
            span: 15649..15655,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 650,
            column: 41,
            span: 15656..15657,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 650,
            column: 42,
            span: 15657..15658,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 650,
            column: 45,
            span: 15658..15661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 650,
            column: 46,
            span: 15661..15662,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 650,
            column: 50,
            span: 15663..15666,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 650,
            column: 51,
            span: 15666..15667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 651,
            column: 7,
            span: 15668..15674,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 651,
            column: 8,
            span: 15674..15675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 651,
            column: 10,
            span: 15675..15677,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 651,
            column: 11,
            span: 15677..15678,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 651,
            column: 12,
            span: 15678..15679,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 651,
            column: 15,
            span: 15680..15682,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello\"",
        ),
        position: Position {
            line: 651,
            column: 23,
            span: 15683..15690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 651,
            column: 24,
            span: 15690..15691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 652,
            column: 2,
            span: 15717..15718,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 652,
            column: 4,
            span: 15719..15720,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 652,
            column: 6,
            span: 15721..15722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 652,
            column: 8,
            span: 15722..15724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 652,
            column: 9,
            span: 15724..15725,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 652,
            column: 10,
            span: 15725..15726,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 652,
            column: 11,
            span: 15726..15727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 654,
            column: 7,
            span: 15774..15780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 654,
            column: 8,
            span: 15780..15781,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 654,
            column: 9,
            span: 15781..15782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 654,
            column: 10,
            span: 15782..15783,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 654,
            column: 13,
            span: 15784..15786,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 654,
            column: 15,
            span: 15786..15788,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 654,
            column: 19,
            span: 15789..15792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 654,
            column: 21,
            span: 15793..15794,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 654,
            column: 22,
            span: 15794..15795,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 654,
            column: 23,
            span: 15794..15796,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 654,
            column: 24,
            span: 15796..15797,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 654,
            column: 27,
            span: 15798..15800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 654,
            column: 29,
            span: 15801..15802,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 654,
            column: 30,
            span: 15802..15803,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 654,
            column: 31,
            span: 15802..15804,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 654,
            column: 32,
            span: 15804..15805,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 654,
            column: 36,
            span: 15806..15809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 654,
            column: 38,
            span: 15810..15811,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 654,
            column: 39,
            span: 15811..15812,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 654,
            column: 40,
            span: 15811..15813,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 654,
            column: 41,
            span: 15813..15814,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 654,
            column: 44,
            span: 15815..15817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 654,
            column: 46,
            span: 15818..15819,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 654,
            column: 47,
            span: 15819..15820,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 654,
            column: 48,
            span: 15819..15821,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 654,
            column: 49,
            span: 15821..15822,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 654,
            column: 53,
            span: 15823..15826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 654,
            column: 55,
            span: 15827..15828,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 654,
            column: 56,
            span: 15828..15829,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 654,
            column: 57,
            span: 15828..15830,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 654,
            column: 58,
            span: 15830..15831,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 654,
            column: 61,
            span: 15832..15834,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 654,
            column: 64,
            span: 15834..15837,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 654,
            column: 65,
            span: 15837..15838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 659,
            column: 3,
            span: 15879..15881,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 659,
            column: 5,
            span: 15882..15883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 659,
            column: 15,
            span: 15884..15893,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 659,
            column: 16,
            span: 15893..15894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 659,
            column: 20,
            span: 15894..15898,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 659,
            column: 21,
            span: 15898..15899,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 659,
            column: 29,
            span: 15899..15907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 659,
            column: 31,
            span: 15908..15909,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 659,
            column: 34,
            span: 15909..15912,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 659,
            column: 35,
            span: 15912..15913,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 659,
            column: 0,
            span: 15914..15920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 660,
            column: 9,
            span: 15928..15929,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 660,
            column: 10,
            span: 15929..15930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 660,
            column: 15,
            span: 15930..15935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 660,
            column: 16,
            span: 15935..15936,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n          getctx\n          yieldk 3 2\n          nonexec error\n       ]]",
        ),
        position: Position {
            line: 664,
            column: 10,
            span: 15936..16010,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 664,
            column: 11,
            span: 16010..16011,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[  # continuation\n         getctx\n         yieldk 2 3 \n       ]]",
        ),
        position: Position {
            line: 668,
            column: 10,
            span: 16019..16084,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 668,
            column: 11,
            span: 16084..16085,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[  # continuation\n         getctx\n         yieldk 2 4 \n       ]]",
        ),
        position: Position {
            line: 672,
            column: 10,
            span: 16093..16158,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 672,
            column: 11,
            span: 16158..16159,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[  # continuation\n          pushvalue 6; pushnum 10; pushnum 20;\n          pcall 2 0     # call should throw an error and execution continues\n          pop 1\t\t# remove error message\n          pushvalue 6\n          getctx\n          pcallk 2 2 5  # call should throw an error and jump to continuation\n          cannot be here!\n       ]]",
        ),
        position: Position {
            line: 681,
            column: 10,
            span: 16167..16502,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 681,
            column: 11,
            span: 16502..16503,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[  # continuation\n         gettop\n         return .\n       ]]",
        ),
        position: Position {
            line: 685,
            column: 10,
            span: 16511..16573,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 685,
            column: 11,
            span: 16573..16574,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 686,
            column: 16,
            span: 16582..16590,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 686,
            column: 18,
            span: 16591..16592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 686,
            column: 19,
            span: 16592..16593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 686,
            column: 20,
            span: 16593..16594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 686,
            column: 21,
            span: 16594..16595,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 686,
            column: 22,
            span: 16595..16596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 686,
            column: 25,
            span: 16598..16599,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 686,
            column: 26,
            span: 16599..16600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 686,
            column: 27,
            span: 16600..16601,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 686,
            column: 28,
            span: 16601..16602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 686,
            column: 30,
            span: 16603..16604,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 686,
            column: 31,
            span: 16604..16605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 686,
            column: 32,
            span: 16605..16606,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 686,
            column: 33,
            span: 16606..16607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 686,
            column: 39,
            span: 16608..16613,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 686,
            column: 40,
            span: 16613..16614,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"errmsg\"",
        ),
        position: Position {
            line: 686,
            column: 48,
            span: 16614..16622,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 686,
            column: 49,
            span: 16622..16623,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 686,
            column: 53,
            span: 16624..16627,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 686,
            column: 54,
            span: 16627..16628,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 687,
            column: 11,
            span: 16636..16639,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 688,
            column: 2,
            span: 16640..16641,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 689,
            column: 4,
            span: 16642..16645,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 689,
            column: 5,
            span: 16645..16646,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 691,
            column: 6,
            span: 16648..16653,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 691,
            column: 8,
            span: 16654..16655,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 691,
            column: 10,
            span: 16656..16657,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 691,
            column: 12,
            span: 16658..16659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 691,
            column: 14,
            span: 16659..16661,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 691,
            column: 15,
            span: 16661..16662,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 691,
            column: 16,
            span: 16661..16663,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 691,
            column: 17,
            span: 16663..16664,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 691,
            column: 18,
            span: 16663..16665,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 691,
            column: 19,
            span: 16665..16666,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 691,
            column: 20,
            span: 16665..16667,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 691,
            column: 21,
            span: 16667..16668,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 691,
            column: 22,
            span: 16668..16669,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 691,
            column: 23,
            span: 16669..16670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 691,
            column: 30,
            span: 16671..16677,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 691,
            column: 31,
            span: 16677..16678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 691,
            column: 32,
            span: 16678..16679,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 691,
            column: 33,
            span: 16679..16680,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 691,
            column: 34,
            span: 16679..16681,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 691,
            column: 35,
            span: 16681..16682,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 691,
            column: 38,
            span: 16683..16685,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 691,
            column: 40,
            span: 16685..16687,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 691,
            column: 44,
            span: 16688..16691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 691,
            column: 46,
            span: 16692..16693,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 691,
            column: 47,
            span: 16693..16694,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 691,
            column: 48,
            span: 16693..16695,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 691,
            column: 49,
            span: 16695..16696,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 691,
            column: 52,
            span: 16697..16699,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 691,
            column: 57,
            span: 16700..16704,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 691,
            column: 61,
            span: 16705..16708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 691,
            column: 63,
            span: 16709..16710,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 691,
            column: 64,
            span: 16710..16711,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 691,
            column: 65,
            span: 16710..16712,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 691,
            column: 66,
            span: 16712..16713,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 691,
            column: 69,
            span: 16714..16716,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 691,
            column: 71,
            span: 16716..16718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 691,
            column: 72,
            span: 16718..16719,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 692,
            column: 2,
            span: 16720..16721,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 692,
            column: 4,
            span: 16722..16723,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 692,
            column: 6,
            span: 16724..16725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 692,
            column: 8,
            span: 16725..16727,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 692,
            column: 9,
            span: 16727..16728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 692,
            column: 10,
            span: 16728..16729,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 692,
            column: 11,
            span: 16729..16730,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 692,
            column: 12,
            span: 16730..16731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 692,
            column: 19,
            span: 16732..16738,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 692,
            column: 20,
            span: 16738..16739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 692,
            column: 21,
            span: 16739..16740,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 692,
            column: 22,
            span: 16740..16741,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 692,
            column: 23,
            span: 16740..16742,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 692,
            column: 24,
            span: 16742..16743,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 692,
            column: 27,
            span: 16744..16746,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"YIELD\"",
        ),
        position: Position {
            line: 692,
            column: 35,
            span: 16747..16754,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 692,
            column: 39,
            span: 16755..16758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 692,
            column: 41,
            span: 16759..16760,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 692,
            column: 42,
            span: 16760..16761,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 692,
            column: 43,
            span: 16760..16762,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 692,
            column: 44,
            span: 16762..16763,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 692,
            column: 47,
            span: 16764..16766,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 692,
            column: 49,
            span: 16766..16768,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 692,
            column: 50,
            span: 16768..16769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 693,
            column: 2,
            span: 16770..16771,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 693,
            column: 4,
            span: 16772..16773,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 693,
            column: 6,
            span: 16774..16775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 693,
            column: 8,
            span: 16775..16777,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 693,
            column: 9,
            span: 16777..16778,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 693,
            column: 10,
            span: 16778..16779,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 693,
            column: 11,
            span: 16779..16780,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 693,
            column: 12,
            span: 16780..16781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 693,
            column: 19,
            span: 16782..16788,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 693,
            column: 20,
            span: 16788..16789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 693,
            column: 21,
            span: 16789..16790,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 693,
            column: 22,
            span: 16790..16791,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 693,
            column: 23,
            span: 16790..16792,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 693,
            column: 24,
            span: 16792..16793,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 693,
            column: 27,
            span: 16794..16796,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"YIELD\"",
        ),
        position: Position {
            line: 693,
            column: 35,
            span: 16797..16804,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 693,
            column: 39,
            span: 16805..16808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 693,
            column: 41,
            span: 16809..16810,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 693,
            column: 42,
            span: 16810..16811,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 693,
            column: 43,
            span: 16810..16812,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 693,
            column: 44,
            span: 16812..16813,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 693,
            column: 47,
            span: 16814..16816,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 693,
            column: 49,
            span: 16816..16818,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 693,
            column: 50,
            span: 16818..16819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 694,
            column: 2,
            span: 16820..16821,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 694,
            column: 4,
            span: 16822..16823,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 694,
            column: 6,
            span: 16824..16825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 694,
            column: 8,
            span: 16825..16827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 694,
            column: 9,
            span: 16827..16828,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 694,
            column: 10,
            span: 16827..16829,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 694,
            column: 11,
            span: 16829..16830,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 694,
            column: 12,
            span: 16829..16831,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 694,
            column: 13,
            span: 16831..16832,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 694,
            column: 14,
            span: 16832..16833,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 694,
            column: 15,
            span: 16833..16834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 696,
            column: 7,
            span: 16857..16863,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 696,
            column: 8,
            span: 16863..16864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 696,
            column: 12,
            span: 16864..16868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 696,
            column: 13,
            span: 16868..16869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 696,
            column: 14,
            span: 16869..16870,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 696,
            column: 15,
            span: 16870..16871,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 696,
            column: 16,
            span: 16870..16872,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 696,
            column: 17,
            span: 16872..16873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 696,
            column: 18,
            span: 16873..16874,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 696,
            column: 21,
            span: 16875..16877,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 696,
            column: 30,
            span: 16878..16886,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 696,
            column: 34,
            span: 16887..16890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 696,
            column: 39,
            span: 16891..16895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 696,
            column: 40,
            span: 16895..16896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 696,
            column: 41,
            span: 16896..16897,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 696,
            column: 42,
            span: 16897..16898,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 696,
            column: 43,
            span: 16897..16899,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 696,
            column: 44,
            span: 16899..16900,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 696,
            column: 45,
            span: 16900..16901,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 696,
            column: 48,
            span: 16902..16904,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 696,
            column: 57,
            span: 16905..16913,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 696,
            column: 0,
            span: 16914..16917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 697,
            column: 10,
            span: 16923..16927,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 697,
            column: 11,
            span: 16927..16928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 697,
            column: 12,
            span: 16928..16929,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 697,
            column: 13,
            span: 16929..16930,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 697,
            column: 14,
            span: 16929..16931,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 697,
            column: 15,
            span: 16931..16932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 697,
            column: 16,
            span: 16932..16933,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 697,
            column: 19,
            span: 16934..16936,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 697,
            column: 28,
            span: 16937..16945,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 697,
            column: 32,
            span: 16946..16949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 697,
            column: 37,
            span: 16950..16954,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 697,
            column: 38,
            span: 16954..16955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 697,
            column: 39,
            span: 16955..16956,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 697,
            column: 40,
            span: 16956..16957,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 697,
            column: 41,
            span: 16956..16958,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 697,
            column: 42,
            span: 16958..16959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 697,
            column: 43,
            span: 16959..16960,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 697,
            column: 46,
            span: 16961..16963,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 697,
            column: 55,
            span: 16964..16972,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 697,
            column: 0,
            span: 16973..16976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 698,
            column: 10,
            span: 16982..16986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 698,
            column: 11,
            span: 16986..16987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 698,
            column: 12,
            span: 16987..16988,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 698,
            column: 13,
            span: 16988..16989,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 698,
            column: 14,
            span: 16988..16990,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 698,
            column: 15,
            span: 16990..16991,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 698,
            column: 16,
            span: 16991..16992,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 698,
            column: 19,
            span: 16993..16995,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 698,
            column: 28,
            span: 16996..17004,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 698,
            column: 32,
            span: 17005..17008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 698,
            column: 37,
            span: 17009..17013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 698,
            column: 38,
            span: 17013..17014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 698,
            column: 39,
            span: 17014..17015,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 698,
            column: 40,
            span: 17015..17016,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 698,
            column: 41,
            span: 17015..17017,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 698,
            column: 42,
            span: 17017..17018,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 698,
            column: 43,
            span: 17018..17019,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 698,
            column: 46,
            span: 17020..17022,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function'",
        ),
        position: Position {
            line: 698,
            column: 57,
            span: 17023..17033,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 698,
            column: 58,
            span: 17033..17034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 700,
            column: 7,
            span: 17070..17076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 700,
            column: 8,
            span: 17076..17077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 700,
            column: 9,
            span: 17077..17078,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 700,
            column: 10,
            span: 17078..17079,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 700,
            column: 11,
            span: 17078..17080,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 700,
            column: 12,
            span: 17080..17081,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 700,
            column: 15,
            span: 17082..17084,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 700,
            column: 17,
            span: 17084..17086,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 700,
            column: 21,
            span: 17087..17090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 700,
            column: 23,
            span: 17091..17092,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 700,
            column: 24,
            span: 17092..17093,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 700,
            column: 25,
            span: 17092..17094,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 700,
            column: 26,
            span: 17094..17095,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 700,
            column: 29,
            span: 17096..17098,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 700,
            column: 31,
            span: 17098..17100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 700,
            column: 32,
            span: 17100..17101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 702,
            column: 7,
            span: 17130..17136,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 702,
            column: 8,
            span: 17136..17137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 702,
            column: 9,
            span: 17137..17138,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 702,
            column: 10,
            span: 17138..17139,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 702,
            column: 11,
            span: 17138..17140,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 702,
            column: 12,
            span: 17140..17141,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 702,
            column: 15,
            span: 17142..17144,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 702,
            column: 17,
            span: 17144..17146,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 702,
            column: 21,
            span: 17147..17150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 702,
            column: 23,
            span: 17151..17152,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 702,
            column: 24,
            span: 17152..17153,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 702,
            column: 26,
            span: 17152..17155,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 702,
            column: 27,
            span: 17155..17156,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 702,
            column: 30,
            span: 17157..17159,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 702,
            column: 32,
            span: 17159..17161,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 702,
            column: 33,
            span: 17161..17162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 704,
            column: 7,
            span: 17197..17203,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 704,
            column: 8,
            span: 17203..17204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 704,
            column: 9,
            span: 17204..17205,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 704,
            column: 10,
            span: 17205..17206,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 704,
            column: 12,
            span: 17205..17208,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 704,
            column: 13,
            span: 17208..17209,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 704,
            column: 14,
            span: 17209..17210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 704,
            column: 18,
            span: 17210..17214,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 704,
            column: 19,
            span: 17214..17215,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"errmsg\"",
        ),
        position: Position {
            line: 704,
            column: 27,
            span: 17215..17223,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 704,
            column: 28,
            span: 17223..17224,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 704,
            column: 32,
            span: 17225..17228,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 704,
            column: 34,
            span: 17229..17230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 704,
            column: 35,
            span: 17230..17231,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 704,
            column: 38,
            span: 17232..17234,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 704,
            column: 41,
            span: 17234..17237,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 704,
            column: 42,
            span: 17237..17238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 706,
            column: 7,
            span: 17268..17274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 706,
            column: 8,
            span: 17274..17275,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 706,
            column: 9,
            span: 17275..17276,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 706,
            column: 12,
            span: 17277..17279,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"YIELD\"",
        ),
        position: Position {
            line: 706,
            column: 20,
            span: 17280..17287,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 706,
            column: 24,
            span: 17288..17291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 706,
            column: 26,
            span: 17292..17293,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 706,
            column: 29,
            span: 17294..17296,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 706,
            column: 31,
            span: 17296..17298,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 706,
            column: 32,
            span: 17298..17299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 708,
            column: 7,
            span: 17301..17307,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 708,
            column: 8,
            span: 17307..17308,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 708,
            column: 11,
            span: 17308..17311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 708,
            column: 17,
            span: 17312..17317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 708,
            column: 18,
            span: 17317..17318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 708,
            column: 20,
            span: 17318..17320,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 708,
            column: 21,
            span: 17320..17321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 708,
            column: 22,
            span: 17321..17322,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 712,
            column: 2,
            span: 17370..17371,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 712,
            column: 3,
            span: 17371..17372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 712,
            column: 4,
            span: 17372..17373,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 712,
            column: 6,
            span: 17374..17375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 712,
            column: 8,
            span: 17376..17377,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 712,
            column: 9,
            span: 17377..17378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 712,
            column: 14,
            span: 17378..17383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 712,
            column: 15,
            span: 17383..17384,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ pushstring print; pcallk 0 0 12    # error\n          getctx; return 2 ]]",
        ),
        position: Position {
            line: 714,
            column: 30,
            span: 17392..17467,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 714,
            column: 31,
            span: 17467..17468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 715,
            column: 7,
            span: 17469..17475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 715,
            column: 8,
            span: 17475..17476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 715,
            column: 9,
            span: 17476..17477,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 715,
            column: 12,
            span: 17478..17480,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 715,
            column: 17,
            span: 17481..17485,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 715,
            column: 21,
            span: 17486..17489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 715,
            column: 23,
            span: 17490..17491,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 715,
            column: 26,
            span: 17492..17494,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 715,
            column: 28,
            span: 17494..17496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 715,
            column: 29,
            span: 17496..17497,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 719,
            column: 6,
            span: 17552..17557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 719,
            column: 9,
            span: 17558..17560,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 719,
            column: 11,
            span: 17561..17562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 719,
            column: 21,
            span: 17563..17572,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 719,
            column: 22,
            span: 17572..17573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 719,
            column: 26,
            span: 17573..17577,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 719,
            column: 27,
            span: 17577..17578,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 719,
            column: 35,
            span: 17578..17586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 719,
            column: 37,
            span: 17587..17588,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 719,
            column: 38,
            span: 17588..17589,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 720,
            column: 8,
            span: 17592..17597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 720,
            column: 10,
            span: 17598..17599,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 720,
            column: 12,
            span: 17600..17601,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 720,
            column: 14,
            span: 17602..17603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 720,
            column: 19,
            span: 17603..17608,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 720,
            column: 20,
            span: 17608..17609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 720,
            column: 25,
            span: 17609..17614,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 720,
            column: 26,
            span: 17614..17615,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 720,
            column: 31,
            span: 17615..17620,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 720,
            column: 32,
            span: 17620..17621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 720,
            column: 37,
            span: 17621..17626,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 720,
            column: 38,
            span: 17626..17627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 720,
            column: 43,
            span: 17627..17632,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 720,
            column: 44,
            span: 17632..17633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 720,
            column: 49,
            span: 17633..17638,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 720,
            column: 50,
            span: 17638..17639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 720,
            column: 55,
            span: 17639..17644,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 720,
            column: 56,
            span: 17644..17645,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 720,
            column: 61,
            span: 17645..17650,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 720,
            column: 62,
            span: 17650..17651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 720,
            column: 67,
            span: 17651..17656,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 720,
            column: 68,
            span: 17656..17657,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 720,
            column: 72,
            span: 17657..17661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 720,
            column: 73,
            span: 17661..17662,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 720,
            column: 74,
            span: 17662..17663,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 721,
            column: 9,
            span: 17666..17672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 721,
            column: 15,
            span: 17673..17678,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 721,
            column: 16,
            span: 17678..17679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 721,
            column: 22,
            span: 17679..17685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 721,
            column: 23,
            span: 17685..17686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 721,
            column: 29,
            span: 17687..17692,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 721,
            column: 30,
            span: 17692..17693,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 721,
            column: 36,
            span: 17693..17699,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 721,
            column: 37,
            span: 17699..17700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 721,
            column: 38,
            span: 17700..17701,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 721,
            column: 39,
            span: 17701..17702,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 721,
            column: 40,
            span: 17702..17703,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 722,
            column: 4,
            span: 17704..17707,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 722,
            column: 5,
            span: 17707..17708,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 724,
            column: 6,
            span: 17710..17715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 724,
            column: 8,
            span: 17716..17717,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 724,
            column: 10,
            span: 17718..17719,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 724,
            column: 12,
            span: 17720..17721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "co",
        ),
        position: Position {
            line: 724,
            column: 14,
            span: 17721..17723,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 724,
            column: 15,
            span: 17723..17724,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 724,
            column: 16,
            span: 17724..17725,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 724,
            column: 17,
            span: 17725..17726,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 725,
            column: 7,
            span: 17727..17733,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 725,
            column: 8,
            span: 17733..17734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 725,
            column: 9,
            span: 17734..17735,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 725,
            column: 10,
            span: 17735..17736,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 725,
            column: 12,
            span: 17735..17738,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 725,
            column: 13,
            span: 17738..17739,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 725,
            column: 16,
            span: 17740..17742,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 725,
            column: 21,
            span: 17743..17747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 725,
            column: 22,
            span: 17747..17748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 728,
            column: 6,
            span: 17751..17756,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 728,
            column: 10,
            span: 17756..17760,
        },
    },
]
