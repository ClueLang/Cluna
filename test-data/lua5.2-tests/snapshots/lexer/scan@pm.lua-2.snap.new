---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/pm.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "'testing pattern matching'",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 3,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 3,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 3,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 3,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 4,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 4,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 4,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 4,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 4,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 4,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 4,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 5,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 5,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 5,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 5,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 5,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 5,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 6,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "f1",
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 8,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 9,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 9,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 9,
    },
    Token {
        kind: String,
        lexeme: "\"%%([0-9])\"",
        line: 9,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 9,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 9,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 9,
    },
    Token {
        kind: String,
        lexeme: "\"%\"",
        line: 9,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 9,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 9,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 10,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 10,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 10,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 10,
    },
    Token {
        kind: String,
        lexeme: "\"^(^?)\"",
        line: 10,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 10,
    },
    Token {
        kind: String,
        lexeme: "\"%1()\"",
        line: 10,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 10,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 11,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 11,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 11,
    },
    Token {
        kind: String,
        lexeme: "\"($?)$\"",
        line: 11,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 11,
    },
    Token {
        kind: String,
        lexeme: "\"()%1\"",
        line: 11,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 11,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 12,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 12,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 12,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 12,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 12,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 13,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "sub",
        line: 13,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 13,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 13,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 13,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 13,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 13,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 13,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 13,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 13,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 13,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 13,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 13,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 13,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 16,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 16,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 16,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 16,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 16,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 17,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 17,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 17,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 17,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 17,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 17,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 18,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 18,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 18,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 18,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 19,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 19,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 19,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 19,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 20,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 20,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 20,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: String,
        lexeme: "'a\\0o a\\0o a\\0o'",
        line: 20,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 20,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 20,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 20,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 21,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 21,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 21,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 21,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 22,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 22,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 22,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: String,
        lexeme: "'a\\0o a\\0o a\\0o'",
        line: 22,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 22,
    },
    Token {
        kind: String,
        lexeme: "'a\\0o'",
        line: 22,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 23,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 23,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 23,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 23,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 24,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 24,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: String,
        lexeme: "'a\\0o a\\0o a\\0o'",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: String,
        lexeme: "'a\\0o'",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 25,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 25,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 25,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 26,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 26,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "'a\\0a\\0a\\0a\\0\\0ab'",
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "'\\0ab'",
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 26,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 27,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 27,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 27,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 27,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 28,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: String,
        lexeme: "'a\\0a\\0a\\0a\\0\\0ab'",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 29,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 29,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 30,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: String,
        lexeme: "'a\\0a\\0a\\0a\\0\\0ab'",
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 30,
    },
    Token {
        kind: String,
        lexeme: "'b\\0'",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 30,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 31,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: String,
        lexeme: "'\\0'",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 31,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 32,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: String,
        lexeme: "'alo123alo'",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: String,
        lexeme: "'12'",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 32,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 33,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: String,
        lexeme: "'alo123alo'",
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 33,
    },
    Token {
        kind: String,
        lexeme: "'^12'",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 33,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 35,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: String,
        lexeme: "\"aaab\"",
        line: 35,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 35,
    },
    Token {
        kind: String,
        lexeme: "\".*b\"",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 35,
    },
    Token {
        kind: String,
        lexeme: "\"aaab\"",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 36,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: String,
        lexeme: "\"aaa\"",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: String,
        lexeme: "\".*a\"",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 36,
    },
    Token {
        kind: String,
        lexeme: "\"aaa\"",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 37,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 37,
    },
    Token {
        kind: String,
        lexeme: "\".*b\"",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 37,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 39,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\"aaab\"",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\".+b\"",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\"aaab\"",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 40,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: String,
        lexeme: "\"aaa\"",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: String,
        lexeme: "\".+a\"",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 40,
    },
    Token {
        kind: String,
        lexeme: "\"aaa\"",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 41,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "\".+b\"",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 43,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: String,
        lexeme: "\"aaab\"",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: String,
        lexeme: "\".?b\"",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 43,
    },
    Token {
        kind: String,
        lexeme: "\"ab\"",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 44,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: String,
        lexeme: "\"aaa\"",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: String,
        lexeme: "\".?a\"",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 44,
    },
    Token {
        kind: String,
        lexeme: "\"aa\"",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 45,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\".?b\"",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: String,
        lexeme: "'aloALO'",
        line: 47,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 47,
    },
    Token {
        kind: String,
        lexeme: "'%l*'",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 47,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: String,
        lexeme: "'aLo_ALO'",
        line: 48,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 48,
    },
    Token {
        kind: String,
        lexeme: "'%a*'",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 48,
    },
    Token {
        kind: String,
        lexeme: "'aLo'",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: String,
        lexeme: "\"  \\n\\r*&\\n\\r   xuxu  \\n\\n\"",
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 50,
    },
    Token {
        kind: String,
        lexeme: "\"%g%g%g+\"",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 50,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: String,
        lexeme: "'aaab'",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: String,
        lexeme: "'a*'",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 52,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 53,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 53,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "'^.*$'",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 53,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 53,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 54,
    },
    Token {
        kind: String,
        lexeme: "'b*'",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 54,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 55,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 55,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 55,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 55,
    },
    Token {
        kind: String,
        lexeme: "'ab*a'",
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 55,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 55,
    },
    Token {
        kind: String,
        lexeme: "'aa'",
        line: 55,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 56,
    },
    Token {
        kind: String,
        lexeme: "'aba'",
        line: 56,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 56,
    },
    Token {
        kind: String,
        lexeme: "'ab*a'",
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 56,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 56,
    },
    Token {
        kind: String,
        lexeme: "'aba'",
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: String,
        lexeme: "'aaab'",
        line: 57,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 57,
    },
    Token {
        kind: String,
        lexeme: "'a+'",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 57,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: String,
        lexeme: "'^.+$'",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 58,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 59,
    },
    Token {
        kind: String,
        lexeme: "'b+'",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 59,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: String,
        lexeme: "'ab+a'",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 60,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: String,
        lexeme: "'aba'",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: String,
        lexeme: "'ab+a'",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 61,
    },
    Token {
        kind: String,
        lexeme: "'aba'",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: String,
        lexeme: "'a$a'",
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 62,
    },
    Token {
        kind: String,
        lexeme: "'.$'",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 62,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: String,
        lexeme: "'a$a'",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: String,
        lexeme: "'.%$'",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 63,
    },
    Token {
        kind: String,
        lexeme: "'a$'",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: String,
        lexeme: "'a$a'",
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 64,
    },
    Token {
        kind: String,
        lexeme: "'.$.'",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 64,
    },
    Token {
        kind: String,
        lexeme: "'a$a'",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "'a$a'",
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 65,
    },
    Token {
        kind: String,
        lexeme: "'$$'",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 65,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: String,
        lexeme: "'a$b'",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: String,
        lexeme: "'a$'",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 66,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "'a$a'",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "'$'",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "'b*'",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 69,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 69,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 69,
    },
    Token {
        kind: String,
        lexeme: "'bb*'",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 69,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 69,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "'aaab'",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "'a-'",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: String,
        lexeme: "'^.-$'",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 71,
    },
    Token {
        kind: String,
        lexeme: "'aaa'",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "'aabaaabaaabaaaba'",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "'b.*b'",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 72,
    },
    Token {
        kind: String,
        lexeme: "'baaabaaabaaab'",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: String,
        lexeme: "'aabaaabaaabaaaba'",
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 73,
    },
    Token {
        kind: String,
        lexeme: "'b.-b'",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 73,
    },
    Token {
        kind: String,
        lexeme: "'baaab'",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "'alo xo'",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "'.o$'",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "'xo'",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 75,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "' \\n isto é assim'",
        line: 75,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "'%S%S*'",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 75,
    },
    Token {
        kind: String,
        lexeme: "'isto'",
        line: 75,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "' \\n isto é assim'",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "'%S*$'",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "'assim'",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "' \\n isto é assim'",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "'[a-z]*$'",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "'assim'",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "'um caracter ? extra'",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "'[^%sa-z]'",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "'?'",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "'a?'",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "'á'",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "'á?'",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "'á'",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "'ábl'",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "'á?b?l?'",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "'ábl'",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: String,
        lexeme: "'  ábl'",
        line: 82,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 82,
    },
    Token {
        kind: String,
        lexeme: "'á?b?l?'",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 82,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 83,
    },
    Token {
        kind: String,
        lexeme: "'aa'",
        line: 83,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 83,
    },
    Token {
        kind: String,
        lexeme: "'^aa?a?a'",
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 83,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 83,
    },
    Token {
        kind: String,
        lexeme: "'aa'",
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 84,
    },
    Token {
        kind: String,
        lexeme: "']]]áb'",
        line: 84,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 84,
    },
    Token {
        kind: String,
        lexeme: "'[^]]'",
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 84,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 84,
    },
    Token {
        kind: String,
        lexeme: "'á'",
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 85,
    },
    Token {
        kind: String,
        lexeme: "\"0alo alo\"",
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 85,
    },
    Token {
        kind: String,
        lexeme: "\"%x*\"",
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 85,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 85,
    },
    Token {
        kind: String,
        lexeme: "\"0a\"",
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 86,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 86,
    },
    Token {
        kind: String,
        lexeme: "\"%C+\"",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 86,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "f1",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "'alo alx 123 b\\0o b\\0o'",
        line: 89,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "'(..*) %1'",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "\"b\\0o b\\0o\"",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "f1",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'axz123= 4= 4 34'",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'(.+)=(.*)=%2 %1'",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 90,
    },
    Token {
        kind: String,
        lexeme: "'3= 4= 4 3'",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "f1",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: String,
        lexeme: "'======='",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: String,
        lexeme: "'^(=*)=%1$'",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 91,
    },
    Token {
        kind: String,
        lexeme: "'======='",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 92,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 92,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 92,
    },
    Token {
        kind: String,
        lexeme: "'=========='",
        line: 92,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 92,
    },
    Token {
        kind: String,
        lexeme: "'^([=]*)=%1$'",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 92,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 92,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 92,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 94,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "range",
        line: 94,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 94,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 94,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 94,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 94,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 95,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 95,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 95,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "range",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 96,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 97,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 98,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "abc",
        line: 100,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 100,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "char",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "range",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 100,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 100,
    },
    Token {
        kind: Number,
        lexeme: "255",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 102,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "abc",
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 102,
    },
    Token {
        kind: Number,
        lexeme: "256",
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 102,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 104,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 104,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 104,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 104,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 105,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 105,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 105,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 105,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 105,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 106,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "abc",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 106,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 106,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 106,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 106,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 106,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "res",
        line: 107,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 107,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 108,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 110,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: String,
        lexeme: "'[\\200-\\210]'",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 110,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: String,
        lexeme: "'[a-z]'",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 112,
    },
    Token {
        kind: String,
        lexeme: "\"abcdefghijklmnopqrstuvwxyz\"",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: String,
        lexeme: "'[a-z%d]'",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: String,
        lexeme: "'[%da-uu-z]'",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: String,
        lexeme: "'[a-]'",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 114,
    },
    Token {
        kind: String,
        lexeme: "\"-a\"",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "'[^%W]'",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "'[%w]'",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 116,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 116,
    },
    Token {
        kind: String,
        lexeme: "'[]%%]'",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 116,
    },
    Token {
        kind: String,
        lexeme: "'%]'",
        line: 116,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 116,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: String,
        lexeme: "'[a%-z]'",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 117,
    },
    Token {
        kind: String,
        lexeme: "'-az'",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "'[%^%[%-a%]%-b]'",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "'-[]^ab'",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: String,
        lexeme: "'%Z'",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: String,
        lexeme: "'[\\1-\\255]'",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "'.'",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "strset",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "'[\\1-\\255%z]'",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 123,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: String,
        lexeme: "\"alo xyzK\"",
        line: 123,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 123,
    },
    Token {
        kind: String,
        lexeme: "\"(%w+)K\"",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 123,
    },
    Token {
        kind: String,
        lexeme: "\"xyz\"",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 124,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: String,
        lexeme: "\"254 K\"",
        line: 124,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 124,
    },
    Token {
        kind: String,
        lexeme: "\"(%d*)K\"",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 124,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 125,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: String,
        lexeme: "\"alo \"",
        line: 125,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 125,
    },
    Token {
        kind: String,
        lexeme: "\"(%w*)$\"",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 125,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 126,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: String,
        lexeme: "\"alo \"",
        line: 126,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 126,
    },
    Token {
        kind: String,
        lexeme: "\"(%w+)$\"",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 126,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 127,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: String,
        lexeme: "\"(álo)\"",
        line: 127,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 127,
    },
    Token {
        kind: String,
        lexeme: "\"%(á\"",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 128,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 128,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 128,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 128,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 128,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 128,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: String,
        lexeme: "\"âlo alo\"",
        line: 128,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 128,
    },
    Token {
        kind: String,
        lexeme: "\"^(((.).).* (%w*))$\"",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: String,
        lexeme: "'âlo alo'",
        line: 129,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: String,
        lexeme: "'âl'",
        line: 129,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: String,
        lexeme: "'â'",
        line: 129,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 129,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 130,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 130,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: String,
        lexeme: "'0123456789'",
        line: 130,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 130,
    },
    Token {
        kind: String,
        lexeme: "'(.+(.?)())'",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 131,
    },
    Token {
        kind: String,
        lexeme: "'0123456789'",
        line: 131,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 131,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 131,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 131,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 131,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 132,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 132,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 132,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 134,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: String,
        lexeme: "'ülo ülo'",
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 134,
    },
    Token {
        kind: String,
        lexeme: "'ü'",
        line: 134,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 134,
    },
    Token {
        kind: String,
        lexeme: "'x'",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 134,
    },
    Token {
        kind: String,
        lexeme: "'xlo xlo'",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 135,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "'alo úlo  '",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "' +$'",
        line: 135,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "'alo úlo'",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 136,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: String,
        lexeme: "'  alo alo  '",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: String,
        lexeme: "'^%s*(.-)%s*$'",
        line: 136,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 136,
    },
    Token {
        kind: String,
        lexeme: "'%1'",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 136,
    },
    Token {
        kind: String,
        lexeme: "'alo alo'",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 137,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: String,
        lexeme: "'alo  alo  \\n 123\\n '",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: String,
        lexeme: "'%s+'",
        line: 137,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 137,
    },
    Token {
        kind: String,
        lexeme: "' '",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 137,
    },
    Token {
        kind: String,
        lexeme: "'alo alo 123 '",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 138,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 138,
    },
    Token {
        kind: String,
        lexeme: "\"abç d\"",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 139,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 139,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 139,
    },
    Token {
        kind: String,
        lexeme: "'(.)'",
        line: 139,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 139,
    },
    Token {
        kind: String,
        lexeme: "'%1@'",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "'@'",
        line: 140,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 140,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 140,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "'@'",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 140,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 141,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 141,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "'abçd'",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "'(.)'",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "'%0@'",
        line: 141,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 142,
    },
    Token {
        kind: String,
        lexeme: "'a@b@çd'",
        line: 142,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 143,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "'alo alo'",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "'()[al]'",
        line: 143,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "'%1'",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "'12o 56o'",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 144,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"abc=xyz\"",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"(%w*)(%p)(%w+)\"",
        line: 144,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"%3%2%1-%0\"",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "\"xyz=abc-abc=xyz\"",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 146,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: String,
        lexeme: "\"abc\"",
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 146,
    },
    Token {
        kind: String,
        lexeme: "\"%w\"",
        line: 146,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 146,
    },
    Token {
        kind: String,
        lexeme: "\"%1%0\"",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 146,
    },
    Token {
        kind: String,
        lexeme: "\"aabbcc\"",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 147,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: String,
        lexeme: "\"abc\"",
        line: 147,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 147,
    },
    Token {
        kind: String,
        lexeme: "\"%w+\"",
        line: 147,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 147,
    },
    Token {
        kind: String,
        lexeme: "\"%0%1\"",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 147,
    },
    Token {
        kind: String,
        lexeme: "\"abcabc\"",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 148,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 148,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 148,
    },
    Token {
        kind: String,
        lexeme: "'áéí'",
        line: 148,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 148,
    },
    Token {
        kind: String,
        lexeme: "'$'",
        line: 148,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 148,
    },
    Token {
        kind: String,
        lexeme: "'\\0óú'",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 148,
    },
    Token {
        kind: String,
        lexeme: "'áéí\\0óú'",
        line: 148,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 148,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 149,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 149,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "'^'",
        line: 149,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "'r'",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 149,
    },
    Token {
        kind: String,
        lexeme: "'r'",
        line: 149,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 149,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 150,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 150,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 150,
    },
    Token {
        kind: String,
        lexeme: "''",
        line: 150,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 150,
    },
    Token {
        kind: String,
        lexeme: "'$'",
        line: 150,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 150,
    },
    Token {
        kind: String,
        lexeme: "'r'",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 150,
    },
    Token {
        kind: String,
        lexeme: "'r'",
        line: 150,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 150,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 153,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: String,
        lexeme: "\"um (dois) tres (quatro)\"",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: String,
        lexeme: "\"(%(%w+%))\"",
        line: 153,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 153,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "upper",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 153,
    },
    Token {
        kind: String,
        lexeme: "\"um (DOIS) tres (QUATRO)\"",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 156,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 157,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "setglobal",
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "rawset",
        line: 157,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 157,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 157,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 157,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 158,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 158,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 158,
    },
    Token {
        kind: String,
        lexeme: "\"a=roberto,roberto=a\"",
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 158,
    },
    Token {
        kind: String,
        lexeme: "\"(%w+)=(%w%w*)\"",
        line: 158,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "setglobal",
        line: 158,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 159,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 159,
    },
    Token {
        kind: String,
        lexeme: "\"roberto\"",
        line: 159,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 159,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "roberto",
        line: 159,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 159,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 159,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 160,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 162,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 162,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 162,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 162,
    },
    Token {
        kind: String,
        lexeme: "'.'",
        line: 162,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 163,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: String,
        lexeme: "\"trocar tudo em |teste|b| é |beleza|al|\"",
        line: 163,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 163,
    },
    Token {
        kind: String,
        lexeme: "\"|([^|]*)|([^|]*)|\"",
        line: 163,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 163,
    },
    Token {
        kind: String,
        lexeme: "\"trocar tudo em bbbbb é alalalalalal\"",
        line: 164,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 164,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 166,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 166,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 166,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 166,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 166,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 167,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: String,
        lexeme: "\"alo $a=1$ novamente $return a$\"",
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 167,
    },
    Token {
        kind: String,
        lexeme: "\"$([^$]*)%$\"",
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 167,
    },
    Token {
        kind: String,
        lexeme: "\"alo  novamente 1\"",
        line: 168,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 168,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 170,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 170,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: String,
        lexeme: "\"$x=string.gsub('alo', '.', string.upper)$ assim vai para $return x$\"",
        line: 170,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 170,
    },
    Token {
        kind: String,
        lexeme: "\"$([^$]*)%$\"",
        line: 171,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 172,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "' assim vai para ALO'",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 174,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 174,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 174,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 175,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 175,
    },
    Token {
        kind: String,
        lexeme: "'a alo jose  joao'",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 176,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 176,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 176,
    },
    Token {
        kind: String,
        lexeme: "'()(%w+)()'",
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 176,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "w",
        line: 176,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 177,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "w",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 177,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 178,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 178,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 178,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 178,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 178,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 178,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 180,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 180,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 180,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 180,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 180,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 180,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 180,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 180,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 180,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 180,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 180,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "13",
        line: 180,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 180,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "isbalanced",
        line: 183,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 183,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 183,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 183,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 184,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 184,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 184,
    },
    Token {
        kind: String,
        lexeme: "\"%b()\"",
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 184,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 184,
    },
    Token {
        kind: String,
        lexeme: "\"[()]\"",
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 184,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 184,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 184,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "isbalanced",
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 187,
    },
    Token {
        kind: String,
        lexeme: "\"(9 ((8))(\\0) 7) \\0\\0 a b ()(c)() a\"",
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 188,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "isbalanced",
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 188,
    },
    Token {
        kind: String,
        lexeme: "\"(9 ((8) 7) a b (\\0 c) a\"",
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 189,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 189,
    },
    Token {
        kind: String,
        lexeme: "\"alo 'oi' alo\"",
        line: 189,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 189,
    },
    Token {
        kind: String,
        lexeme: "\"%b''\"",
        line: 189,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 189,
    },
    Token {
        kind: String,
        lexeme: "'\"'",
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 189,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 189,
    },
    Token {
        kind: String,
        lexeme: "'alo \" alo'",
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 189,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 192,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 192,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 192,
    },
    Token {
        kind: String,
        lexeme: "\"apple\"",
        line: 192,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 192,
    },
    Token {
        kind: String,
        lexeme: "\"orange\"",
        line: 192,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 192,
    },
    Token {
        kind: String,
        lexeme: "\"lime\"",
        line: 192,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 192,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 192,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 192,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 193,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: String,
        lexeme: "\"x and x and x\"",
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 193,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 193,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 193,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 193,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 193,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 193,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 193,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 193,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 193,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 193,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 193,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 193,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 193,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 193,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 193,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 194,
    },
    Token {
        kind: String,
        lexeme: "\"apple and orange and lime\"",
        line: 194,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 194,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 196,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 196,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 196,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 196,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 196,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 197,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 197,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 197,
    },
    Token {
        kind: String,
        lexeme: "\"first second word\"",
        line: 197,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 197,
    },
    Token {
        kind: String,
        lexeme: "\"%w%w*\"",
        line: 197,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 197,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 197,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "w",
        line: 197,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 197,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 197,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 197,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 197,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 197,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 197,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 197,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 197,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 197,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 197,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "w",
        line: 197,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 197,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 197,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 198,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 198,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 198,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 198,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 198,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 198,
    },
    Token {
        kind: String,
        lexeme: "\"first\"",
        line: 198,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 198,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 198,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 198,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 198,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 198,
    },
    Token {
        kind: String,
        lexeme: "\"second\"",
        line: 198,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 198,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 198,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 198,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 198,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 198,
    },
    Token {
        kind: String,
        lexeme: "\"word\"",
        line: 198,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 198,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 198,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 198,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 198,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 200,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 200,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 200,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 200,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 200,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 201,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 201,
    },
    Token {
        kind: String,
        lexeme: "\"first second word\"",
        line: 201,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 201,
    },
    Token {
        kind: String,
        lexeme: "\"%w+\"",
        line: 201,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 201,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "w",
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 202,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 202,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 202,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 202,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 202,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 202,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 202,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 202,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 202,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 202,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "w",
        line: 202,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 202,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 202,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 202,
    },
    Token {
        kind: String,
        lexeme: "\"first second word\"",
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 203,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 203,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 203,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 203,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 203,
    },
    Token {
        kind: String,
        lexeme: "\"first\"",
        line: 203,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 203,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 203,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 203,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 203,
    },
    Token {
        kind: String,
        lexeme: "\"second\"",
        line: 203,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 203,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 203,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 203,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 203,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 203,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 203,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 203,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 205,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 205,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 205,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 205,
    },
    Token {
        kind: String,
        lexeme: "\"(.\"",
        line: 205,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 206,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 206,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 206,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 206,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 206,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 206,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 206,
    },
    Token {
        kind: String,
        lexeme: "\".)\"",
        line: 206,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 206,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 207,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 207,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 207,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 207,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 207,
    },
    Token {
        kind: String,
        lexeme: "\"(.\"",
        line: 207,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 207,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 207,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 207,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 208,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 208,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 208,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 208,
    },
    Token {
        kind: String,
        lexeme: "\"(.)\"",
        line: 208,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 208,
    },
    Token {
        kind: String,
        lexeme: "\"%2\"",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 208,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 209,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 209,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 209,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 209,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 209,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 209,
    },
    Token {
        kind: String,
        lexeme: "\"(%1)\"",
        line: 209,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 209,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 210,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 210,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 210,
    },
    Token {
        kind: String,
        lexeme: "\"alo\"",
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 210,
    },
    Token {
        kind: String,
        lexeme: "\"(%0)\"",
        line: 210,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 210,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 210,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 213,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 214,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 214,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "size",
        line: 214,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 214,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 215,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 215,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 215,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 215,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "size",
        line: 215,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 215,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 216,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 216,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 216,
    },
    Token {
        kind: String,
        lexeme: "\".?\"",
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "size",
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 216,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 217,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 217,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 218,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 219,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 219,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 219,
    },
    Token {
        kind: Number,
        lexeme: "80",
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 220,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 220,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 220,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 220,
    },
    Token {
        kind: Number,
        lexeme: "80",
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 221,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 221,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 221,
    },
    Token {
        kind: Number,
        lexeme: "200000",
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 222,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 222,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 222,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 222,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 222,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 222,
    },
    Token {
        kind: String,
        lexeme: "\"too complex\"",
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 222,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 222,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 223,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 225,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "_soft",
        line: 225,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 225,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 227,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 227,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 227,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 227,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: "300000",
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 228,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 228,
    },
    Token {
        kind: String,
        lexeme: "'^a*.?$'",
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 229,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 229,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 229,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 229,
    },
    Token {
        kind: String,
        lexeme: "'^a*.?b$'",
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 230,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 230,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 230,
    },
    Token {
        kind: String,
        lexeme: "'^a-.?$'",
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 233,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 233,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 233,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 233,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: "10000",
        line: 233,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 233,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 233,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 233,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 233,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 233,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: "10000",
        line: 233,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 234,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 234,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 234,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 234,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 234,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 234,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 235,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "rev",
        line: 238,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 238,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 238,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 239,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 239,
    },
    Token {
        kind: String,
        lexeme: "\"(.)(.+)\"",
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 239,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "s1",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "rev",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "s1",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 239,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 240,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 242,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 242,
    },
    Token {
        kind: String,
        lexeme: "\"abcdef\"",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "rev",
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "rev",
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 243,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 247,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 247,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 247,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 247,
    },
    Token {
        kind: String,
        lexeme: "\".\"",
        line: 247,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 247,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 247,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 247,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 247,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 247,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 248,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 248,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 248,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 248,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 248,
    },
    Token {
        kind: String,
        lexeme: "\"(.)\"",
        line: 248,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 248,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 248,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 248,
    },
    Token {
        kind: String,
        lexeme: "\"AA\"",
        line: 248,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 248,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 248,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 248,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 248,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 248,
    },
    Token {
        kind: String,
        lexeme: "\"AAo AAo\"",
        line: 248,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 249,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 249,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 249,
    },
    Token {
        kind: String,
        lexeme: "\"(.).\"",
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 249,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 249,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 249,
    },
    Token {
        kind: String,
        lexeme: "\"AA\"",
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 249,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 249,
    },
    Token {
        kind: String,
        lexeme: "\"K\"",
        line: 249,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 249,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 249,
    },
    Token {
        kind: String,
        lexeme: "\"AAo AAo\"",
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 250,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 250,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 250,
    },
    Token {
        kind: String,
        lexeme: "\"((.)(.?))\"",
        line: 250,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 250,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "al",
        line: 250,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 250,
    },
    Token {
        kind: String,
        lexeme: "\"AA\"",
        line: 250,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "o",
        line: 250,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 250,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 250,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 250,
    },
    Token {
        kind: String,
        lexeme: "\"AAo AAo\"",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 252,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 252,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo\"",
        line: 252,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 252,
    },
    Token {
        kind: String,
        lexeme: "\"().\"",
        line: 252,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 252,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 252,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 252,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 252,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 252,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 252,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 252,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 252,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 252,
    },
    Token {
        kind: String,
        lexeme: "\"256 alo\"",
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 254,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 254,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 254,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 254,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 254,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 254,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 254,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 254,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 254,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 254,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "upper",
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 254,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 254,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 255,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 255,
    },
    Token {
        kind: String,
        lexeme: "\"a alo b hi\"",
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 255,
    },
    Token {
        kind: String,
        lexeme: "\"%w%w+\"",
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 255,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 255,
    },
    Token {
        kind: String,
        lexeme: "\"a ALO b HI\"",
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 255,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 259,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 259,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 259,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 260,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 260,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "gmatch",
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 260,
    },
    Token {
        kind: String,
        lexeme: "'abcde'",
        line: 260,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 260,
    },
    Token {
        kind: String,
        lexeme: "'()'",
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 260,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 260,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 260,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 260,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 260,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 260,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 260,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 261,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 261,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 261,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 261,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 261,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 263,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 263,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 263,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 263,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 263,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 263,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "w",
        line: 264,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 264,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "gmatch",
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 264,
    },
    Token {
        kind: String,
        lexeme: "\"first second word\"",
        line: 264,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 264,
    },
    Token {
        kind: String,
        lexeme: "\"%w+\"",
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 264,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 265,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 265,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 265,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 265,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 265,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 265,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 265,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 265,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 265,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 265,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 265,
    },
    Token {
        kind: Identifier,
        lexeme: "w",
        line: 265,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 267,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 267,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 267,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 267,
    },
    Token {
        kind: String,
        lexeme: "\"first\"",
        line: 267,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 267,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 267,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 267,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 267,
    },
    Token {
        kind: String,
        lexeme: "\"second\"",
        line: 267,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 267,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 267,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 267,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 267,
    },
    Token {
        kind: String,
        lexeme: "\"word\"",
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 269,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 269,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 269,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 269,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 269,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 269,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 269,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 269,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 270,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 270,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "gmatch",
        line: 270,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "\"xuxx uu ppar r\"",
        line: 270,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "\"()(.)%2\"",
        line: 270,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 270,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 271,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 271,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 271,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 271,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 272,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 273,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 273,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 273,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 273,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 273,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 273,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 275,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 275,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 275,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 275,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 276,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 276,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 276,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "gmatch",
        line: 276,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 276,
    },
    Token {
        kind: String,
        lexeme: "\"13 14 10 = 11, 15= 16, 22=23\"",
        line: 276,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 276,
    },
    Token {
        kind: String,
        lexeme: "\"(%d+)%s*=%s*(%d+)\"",
        line: 276,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 276,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 277,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 277,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 277,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "j",
        line: 277,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 279,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 279,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 279,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 280,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 280,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 280,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 280,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 280,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 280,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 280,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 280,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 280,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 280,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 280,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 280,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 280,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 280,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 281,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 286,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 286,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 286,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 286,
    },
    Token {
        kind: String,
        lexeme: "\"aaa aa a aaa a\"",
        line: 286,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 286,
    },
    Token {
        kind: String,
        lexeme: "\"%f[%w]a\"",
        line: 286,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 286,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 286,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 286,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 286,
    },
    Token {
        kind: String,
        lexeme: "\"xaa xa x xaa x\"",
        line: 286,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 287,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 287,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 287,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 287,
    },
    Token {
        kind: String,
        lexeme: "\"[[]] [][] [[[[\"",
        line: 287,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 287,
    },
    Token {
        kind: String,
        lexeme: "\"%f[[].\"",
        line: 287,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 287,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 287,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 287,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 287,
    },
    Token {
        kind: String,
        lexeme: "\"x[]] x]x] x[[[\"",
        line: 287,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 288,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 288,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 288,
    },
    Token {
        kind: String,
        lexeme: "\"01abc45de3\"",
        line: 288,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 288,
    },
    Token {
        kind: String,
        lexeme: "\"%f[%d]\"",
        line: 288,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 288,
    },
    Token {
        kind: String,
        lexeme: "\".\"",
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 288,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 288,
    },
    Token {
        kind: String,
        lexeme: "\".01abc.45de.3\"",
        line: 288,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 289,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: String,
        lexeme: "\"01abc45 de3x\"",
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 289,
    },
    Token {
        kind: String,
        lexeme: "\"%f[%D]%w\"",
        line: 289,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 289,
    },
    Token {
        kind: String,
        lexeme: "\".\"",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 289,
    },
    Token {
        kind: String,
        lexeme: "\"01.bc45 de3.\"",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 290,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 290,
    },
    Token {
        kind: String,
        lexeme: "\"function\"",
        line: 290,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 290,
    },
    Token {
        kind: String,
        lexeme: "\"%f[\\1-\\255]%w\"",
        line: 290,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 290,
    },
    Token {
        kind: String,
        lexeme: "\".\"",
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 290,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 290,
    },
    Token {
        kind: String,
        lexeme: "\".unction\"",
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 291,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: String,
        lexeme: "\"function\"",
        line: 291,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 291,
    },
    Token {
        kind: String,
        lexeme: "\"%f[^\\1-\\255]\"",
        line: 291,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 291,
    },
    Token {
        kind: String,
        lexeme: "\".\"",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 291,
    },
    Token {
        kind: String,
        lexeme: "\"function.\"",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 293,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 293,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 293,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 293,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 293,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 293,
    },
    Token {
        kind: String,
        lexeme: "\"%f[a]\"",
        line: 293,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 293,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 293,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 293,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 294,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 294,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 294,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 294,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 294,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 294,
    },
    Token {
        kind: String,
        lexeme: "\"%f[^%z]\"",
        line: 294,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 294,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 294,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 294,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 295,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 295,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 295,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 295,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 295,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 295,
    },
    Token {
        kind: String,
        lexeme: "\"%f[^%l]\"",
        line: 295,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 295,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 295,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 295,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 296,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 296,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 296,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 296,
    },
    Token {
        kind: String,
        lexeme: "\"aba\"",
        line: 296,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 296,
    },
    Token {
        kind: String,
        lexeme: "\"%f[a%z]\"",
        line: 296,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 296,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 296,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 296,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 297,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 297,
    },
    Token {
        kind: String,
        lexeme: "\"aba\"",
        line: 297,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 297,
    },
    Token {
        kind: String,
        lexeme: "\"%f[%z]\"",
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 297,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 297,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 298,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 298,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 298,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 298,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 298,
    },
    Token {
        kind: String,
        lexeme: "\"aba\"",
        line: 298,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 298,
    },
    Token {
        kind: String,
        lexeme: "\"%f[%l%z]\"",
        line: 298,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 298,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 298,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 299,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 299,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 299,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 299,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 299,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 299,
    },
    Token {
        kind: String,
        lexeme: "\"aba\"",
        line: 299,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 299,
    },
    Token {
        kind: String,
        lexeme: "\"%f[^%l%z]\"",
        line: 299,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 299,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 299,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 301,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 301,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 301,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 301,
    },
    Token {
        kind: String,
        lexeme: "\" alo aalo allo\"",
        line: 301,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 301,
    },
    Token {
        kind: String,
        lexeme: "\"%f[%S].-%f[%s].-%f[%S]\"",
        line: 301,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 301,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 302,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 302,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 302,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 302,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 302,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 302,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 302,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 302,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 303,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 303,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 303,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 303,
    },
    Token {
        kind: String,
        lexeme: "\" alo aalo allo\"",
        line: 303,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 303,
    },
    Token {
        kind: String,
        lexeme: "\"%f[%S](.-%f[%s].-%f[%S])\"",
        line: 303,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 304,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 304,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 304,
    },
    Token {
        kind: String,
        lexeme: "'alo '",
        line: 304,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 304,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 306,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 306,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 306,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 306,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 306,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 306,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 306,
    },
    Token {
        kind: Number,
        lexeme: "9",
        line: 306,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 306,
    },
    Token {
        kind: Number,
        lexeme: "14",
        line: 306,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 306,
    },
    Token {
        kind: Number,
        lexeme: "17",
        line: 306,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 306,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 306,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 307,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 307,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "gmatch",
        line: 307,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 307,
    },
    Token {
        kind: String,
        lexeme: "\"alo alo th02 is 1hat\"",
        line: 307,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 307,
    },
    Token {
        kind: String,
        lexeme: "\"()%f[%w%d]\"",
        line: 307,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 307,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 307,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 308,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "remove",
        line: 308,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 308,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 308,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 308,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 308,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 308,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 308,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 309,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 310,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 310,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 310,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 310,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 310,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 310,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 310,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 314,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "malform",
        line: 314,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 314,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 314,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 315,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 315,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 315,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 315,
    },
    Token {
        kind: String,
        lexeme: "\"malformed\"",
        line: 315,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 316,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 316,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 316,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 316,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 316,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 316,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 316,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 316,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 317,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "r",
        line: 317,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 317,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 317,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 317,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "malform",
        line: 320,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 320,
    },
    Token {
        kind: String,
        lexeme: "\"[a\"",
        line: 320,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 320,
    },
    Token {
        kind: Identifier,
        lexeme: "malform",
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 321,
    },
    Token {
        kind: String,
        lexeme: "\"[]\"",
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "malform",
        line: 322,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 322,
    },
    Token {
        kind: String,
        lexeme: "\"[^]\"",
        line: 322,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 322,
    },
    Token {
        kind: Identifier,
        lexeme: "malform",
        line: 323,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 323,
    },
    Token {
        kind: String,
        lexeme: "\"[a%]\"",
        line: 323,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 323,
    },
    Token {
        kind: Identifier,
        lexeme: "malform",
        line: 324,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 324,
    },
    Token {
        kind: String,
        lexeme: "\"[a%\"",
        line: 324,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 324,
    },
    Token {
        kind: Identifier,
        lexeme: "malform",
        line: 325,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 325,
    },
    Token {
        kind: String,
        lexeme: "\"%b\"",
        line: 325,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "malform",
        line: 326,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 326,
    },
    Token {
        kind: String,
        lexeme: "\"%ba\"",
        line: 326,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "malform",
        line: 327,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 327,
    },
    Token {
        kind: String,
        lexeme: "\"%\"",
        line: 327,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 327,
    },
    Token {
        kind: Identifier,
        lexeme: "malform",
        line: 328,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 328,
    },
    Token {
        kind: String,
        lexeme: "\"%f\"",
        line: 328,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 328,
    },
    Token {
        kind: String,
        lexeme: "\"missing\"",
        line: 328,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 328,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 331,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 331,
    },
    Token {
        kind: String,
        lexeme: "\"ab\\0\\1\\2c\"",
        line: 331,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 331,
    },
    Token {
        kind: String,
        lexeme: "\"[\\0-\\2]+\"",
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 331,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\1\\2\"",
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 332,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 332,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 332,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 332,
    },
    Token {
        kind: String,
        lexeme: "\"ab\\0\\1\\2c\"",
        line: 332,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 332,
    },
    Token {
        kind: String,
        lexeme: "\"[\\0-\\0]+\"",
        line: 332,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 332,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 332,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\"",
        line: 332,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 332,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 333,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 333,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 333,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 333,
    },
    Token {
        kind: String,
        lexeme: "\"b$a\"",
        line: 333,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 333,
    },
    Token {
        kind: String,
        lexeme: "\"$\\0?\"",
        line: 333,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 333,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 333,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 333,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 333,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 334,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 334,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 334,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 334,
    },
    Token {
        kind: String,
        lexeme: "\"abc\\0efg\"",
        line: 334,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 334,
    },
    Token {
        kind: String,
        lexeme: "\"%\\0\"",
        line: 334,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 334,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 334,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 334,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 334,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 335,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 335,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 335,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 335,
    },
    Token {
        kind: String,
        lexeme: "\"abc\\0efg\\0\\1e\\1g\"",
        line: 335,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 335,
    },
    Token {
        kind: String,
        lexeme: "\"%b\\0\\1\"",
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 335,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 335,
    },
    Token {
        kind: String,
        lexeme: "\"\\0efg\\0\\1e\\1\"",
        line: 335,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 335,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 336,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 336,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 336,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 336,
    },
    Token {
        kind: String,
        lexeme: "\"abc\\0\\0\\0\"",
        line: 336,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 336,
    },
    Token {
        kind: String,
        lexeme: "\"%\\0+\"",
        line: 336,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 336,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 336,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\0\\0\"",
        line: 336,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 337,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 337,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "match",
        line: 337,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 337,
    },
    Token {
        kind: String,
        lexeme: "\"abc\\0\\0\\0\"",
        line: 337,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 337,
    },
    Token {
        kind: String,
        lexeme: "\"%\\0%\\0?\"",
        line: 337,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 337,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 337,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\0\"",
        line: 337,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 340,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 340,
    },
    Token {
        kind: String,
        lexeme: "\"abc\\0\\0\"",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: String,
        lexeme: "\"\\0.\"",
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 340,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 340,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 341,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 341,
    },
    Token {
        kind: String,
        lexeme: "\"abcx\\0\\0abc\\0abc\"",
        line: 341,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 341,
    },
    Token {
        kind: String,
        lexeme: "\"x\\0\\0abc\\0a.\"",
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 343,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 343,
    },
]
