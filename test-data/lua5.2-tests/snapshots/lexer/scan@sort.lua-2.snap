---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/sort.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1,
            column: 5,
            span: 0..5,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing (parts of) table library\"",
        ),
        position: Position {
            line: 1,
            column: 40,
            span: 6..40,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 3,
            column: 6,
            span: 42..47,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing unpack\"",
        ),
        position: Position {
            line: 3,
            column: 23,
            span: 48..64,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 5,
            column: 6,
            span: 66..71,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 5,
            column: 13,
            span: 72..78,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 5,
            column: 15,
            span: 79..80,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 5,
            column: 21,
            span: 81..86,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 5,
            column: 22,
            span: 86..87,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 5,
            column: 0,
            span: 87..93,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 7,
            column: 6,
            span: 95..100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 7,
            column: 8,
            span: 101..102,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 7,
            column: 9,
            span: 102..103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 7,
            column: 10,
            span: 103..104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 7,
            column: 11,
            span: 104..105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 7,
            column: 12,
            span: 105..106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 7,
            column: 13,
            span: 106..107,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 7,
            column: 14,
            span: 107..108,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 7,
            column: 15,
            span: 108..109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 7,
            column: 0,
            span: 109..110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 8,
            column: 2,
            span: 111..112,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 8,
            column: 4,
            span: 113..114,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 8,
            column: 6,
            span: 115..116,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 8,
            column: 7,
            span: 116..117,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 8,
            column: 8,
            span: 117..118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 8,
            column: 12,
            span: 119..122,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 8,
            column: 14,
            span: 123..124,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 8,
            column: 0,
            span: 124..129,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 9,
            column: 4,
            span: 130..133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 9,
            column: 6,
            span: 134..135,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 9,
            column: 7,
            span: 135..136,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 9,
            column: 8,
            span: 135..137,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 9,
            column: 9,
            span: 137..138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 9,
            column: 13,
            span: 139..142,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 9,
            column: 16,
            span: 143..145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 9,
            column: 18,
            span: 146..147,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 9,
            column: 19,
            span: 147..148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 9,
            column: 20,
            span: 148..149,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 9,
            column: 21,
            span: 149..150,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 9,
            column: 22,
            span: 150..151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 9,
            column: 23,
            span: 151..152,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 9,
            column: 0,
            span: 153..156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 10,
            column: 7,
            span: 157..163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 8,
            span: 163..164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        position: Position {
            line: 10,
            column: 14,
            span: 164..170,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 15,
            span: 170..171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 10,
            column: 18,
            span: 171..174,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 10,
            column: 19,
            span: 174..175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 10,
            column: 26,
            span: 176..182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 27,
            span: 182..183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 10,
            column: 28,
            span: 183..184,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 29,
            span: 184..185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 30,
            span: 185..186,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 10,
            column: 33,
            span: 187..189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 10,
            column: 37,
            span: 190..193,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 10,
            column: 41,
            span: 194..197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        position: Position {
            line: 10,
            column: 48,
            span: 198..204,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 49,
            span: 204..205,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        position: Position {
            line: 10,
            column: 52,
            span: 205..208,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 10,
            column: 53,
            span: 208..209,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 10,
            column: 60,
            span: 210..216,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 10,
            column: 61,
            span: 216..217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 10,
            column: 62,
            span: 217..218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 63,
            span: 218..219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 64,
            span: 219..220,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 10,
            column: 67,
            span: 221..223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 10,
            column: 71,
            span: 224..227,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 10,
            column: 72,
            span: 227..228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 11,
            column: 2,
            span: 229..230,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 11,
            column: 4,
            span: 231..232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 11,
            column: 11,
            span: 233..239,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 11,
            column: 12,
            span: 239..240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 11,
            column: 13,
            span: 240..241,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 11,
            column: 14,
            span: 241..242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 12,
            column: 7,
            span: 243..249,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 12,
            column: 8,
            span: 249..250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 12,
            column: 9,
            span: 250..251,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 12,
            column: 12,
            span: 252..254,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 12,
            column: 14,
            span: 254..256,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 12,
            column: 15,
            span: 256..257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 13,
            column: 2,
            span: 258..259,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 13,
            column: 4,
            span: 260..261,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 13,
            column: 6,
            span: 262..263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 13,
            column: 12,
            span: 263..269,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 13,
            column: 13,
            span: 269..270,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 13,
            column: 14,
            span: 270..271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 13,
            column: 15,
            span: 271..272,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 13,
            column: 16,
            span: 272..273,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 14,
            column: 7,
            span: 274..280,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 8,
            span: 280..281,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 14,
            column: 9,
            span: 281..282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 14,
            column: 10,
            span: 282..283,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 14,
            column: 13,
            span: 284..286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 14,
            column: 17,
            span: 287..290,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 14,
            column: 21,
            span: 291..294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 14,
            column: 23,
            span: 295..296,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 14,
            column: 24,
            span: 296..297,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 14,
            column: 25,
            span: 296..298,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 14,
            column: 26,
            span: 298..299,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 14,
            column: 29,
            span: 300..302,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 14,
            column: 31,
            span: 302..304,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 14,
            column: 35,
            span: 305..308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 14,
            column: 37,
            span: 309..310,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 14,
            column: 38,
            span: 310..311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 14,
            column: 41,
            span: 311..314,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 14,
            column: 42,
            span: 314..315,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 14,
            column: 45,
            span: 316..318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 14,
            column: 49,
            span: 319..322,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 50,
            span: 322..323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 15,
            column: 2,
            span: 324..325,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 15,
            column: 4,
            span: 326..327,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 15,
            column: 6,
            span: 328..329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 15,
            column: 12,
            span: 329..335,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 13,
            span: 335..336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 15,
            column: 14,
            span: 336..337,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 15,
            column: 15,
            span: 337..338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 15,
            column: 19,
            span: 339..342,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 15,
            column: 20,
            span: 342..343,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 15,
            column: 21,
            span: 342..344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 22,
            span: 344..345,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 15,
            column: 23,
            span: 345..346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 16,
            column: 7,
            span: 347..353,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 8,
            span: 353..354,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 16,
            column: 9,
            span: 354..355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 16,
            column: 10,
            span: 355..356,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 13,
            span: 357..359,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 15,
            span: 359..361,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 16,
            column: 19,
            span: 362..365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 366..367,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 16,
            column: 22,
            span: 367..368,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 23,
            span: 367..369,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 16,
            column: 24,
            span: 369..370,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 27,
            span: 371..373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 16,
            column: 31,
            span: 374..377,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 16,
            column: 32,
            span: 377..378,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 33,
            span: 377..379,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 16,
            column: 37,
            span: 380..383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 16,
            column: 39,
            span: 384..385,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 16,
            column: 40,
            span: 385..386,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 41,
            span: 385..387,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 16,
            column: 42,
            span: 387..388,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 45,
            span: 389..391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 16,
            column: 49,
            span: 392..395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 50,
            span: 395..396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 17,
            column: 2,
            span: 397..398,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 17,
            column: 4,
            span: 399..400,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 17,
            column: 6,
            span: 401..402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 17,
            column: 12,
            span: 402..408,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 17,
            column: 13,
            span: 408..409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 17,
            column: 14,
            span: 409..410,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 15,
            span: 410..411,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 17,
            column: 18,
            span: 411..414,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 17,
            column: 19,
            span: 414..415,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 17,
            column: 21,
            span: 415..417,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 17,
            column: 22,
            span: 417..418,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 17,
            column: 23,
            span: 418..419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 18,
            column: 7,
            span: 420..426,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 8,
            span: 426..427,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 18,
            column: 12,
            span: 427..431,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 18,
            column: 13,
            span: 431..432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 18,
            column: 14,
            span: 432..433,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 15,
            span: 433..434,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 18,
            column: 18,
            span: 435..437,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 18,
            column: 22,
            span: 438..441,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 18,
            column: 23,
            span: 441..442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 19,
            column: 2,
            span: 460..461,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 19,
            column: 4,
            span: 462..463,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 19,
            column: 6,
            span: 464..465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 19,
            column: 12,
            span: 465..471,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 19,
            column: 13,
            span: 471..472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 19,
            column: 14,
            span: 472..473,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 19,
            column: 15,
            span: 473..474,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 19,
            column: 18,
            span: 474..477,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 19,
            column: 19,
            span: 477..478,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 19,
            column: 22,
            span: 478..481,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 19,
            column: 23,
            span: 481..482,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 19,
            column: 24,
            span: 482..483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 20,
            column: 7,
            span: 484..490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 8,
            span: 490..491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 20,
            column: 12,
            span: 491..495,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 13,
            span: 495..496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 20,
            column: 14,
            span: 496..497,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 15,
            span: 497..498,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 20,
            column: 18,
            span: 499..501,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 20,
            column: 22,
            span: 502..505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 23,
            span: 505..506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 21,
            column: 2,
            span: 524..525,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 3,
            span: 525..526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 21,
            column: 4,
            span: 526..527,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 21,
            column: 6,
            span: 528..529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 21,
            column: 13,
            span: 530..536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 14,
            span: 536..537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 21,
            column: 15,
            span: 537..538,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 16,
            span: 538..539,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 19,
            span: 539..542,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 20,
            span: 542..543,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 21,
            column: 23,
            span: 543..546,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 24,
            span: 546..547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 22,
            column: 7,
            span: 548..554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 8,
            span: 554..555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 22,
            column: 9,
            span: 555..556,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 22,
            column: 12,
            span: 557..559,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 22,
            column: 15,
            span: 559..562,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 22,
            column: 19,
            span: 563..566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 22,
            column: 21,
            span: 567..568,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 22,
            column: 24,
            span: 569..571,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 22,
            column: 28,
            span: 572..575,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 29,
            span: 575..576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 23,
            column: 2,
            span: 577..578,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 3,
            span: 578..579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 23,
            column: 4,
            span: 579..580,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 5,
            span: 580..581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 23,
            column: 6,
            span: 581..582,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 23,
            column: 8,
            span: 583..584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 23,
            column: 15,
            span: 585..591,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 23,
            column: 16,
            span: 591..592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 23,
            column: 17,
            span: 592..593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 18,
            span: 593..594,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 21,
            span: 594..597,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 23,
            column: 22,
            span: 597..598,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 23,
            column: 25,
            span: 598..601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 23,
            column: 26,
            span: 601..602,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 24,
            column: 7,
            span: 603..609,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 24,
            column: 8,
            span: 609..610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 24,
            column: 9,
            span: 610..611,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 24,
            column: 12,
            span: 612..614,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 15,
            span: 614..617,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 24,
            column: 19,
            span: 618..621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 24,
            column: 21,
            span: 622..623,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 24,
            column: 24,
            span: 624..626,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 24,
            column: 27,
            span: 626..629,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 24,
            column: 31,
            span: 630..633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 24,
            column: 33,
            span: 634..635,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 24,
            column: 36,
            span: 636..638,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 24,
            column: 40,
            span: 639..642,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 24,
            column: 41,
            span: 642..643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 25,
            column: 2,
            span: 644..645,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 25,
            column: 3,
            span: 645..646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 25,
            column: 4,
            span: 646..647,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 25,
            column: 6,
            span: 648..649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 25,
            column: 13,
            span: 650..656,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 25,
            column: 14,
            span: 656..657,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 25,
            column: 15,
            span: 656..658,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 25,
            column: 16,
            span: 658..659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 26,
            column: 7,
            span: 660..666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 8,
            span: 666..667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 26,
            column: 9,
            span: 667..668,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 26,
            column: 11,
            span: 668..670,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 26,
            column: 12,
            span: 669..671,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 26,
            column: 16,
            span: 672..675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 26,
            column: 18,
            span: 676..677,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 26,
            column: 20,
            span: 677..679,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 26,
            column: 23,
            span: 679..682,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 24,
            span: 682..683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 27,
            column: 2,
            span: 684..685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 3,
            span: 685..686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 27,
            column: 4,
            span: 686..687,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 27,
            column: 6,
            span: 688..689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 27,
            column: 13,
            span: 690..696,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 27,
            column: 14,
            span: 696..697,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 27,
            column: 15,
            span: 697..698,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 27,
            column: 16,
            span: 697..699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 17,
            span: 699..700,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 27,
            column: 18,
            span: 699..701,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 27,
            column: 19,
            span: 701..702,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 20,
            span: 702..703,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 27,
            column: 22,
            span: 703..705,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 27,
            column: 23,
            span: 705..706,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 27,
            column: 25,
            span: 706..708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 27,
            column: 26,
            span: 708..709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 28,
            column: 7,
            span: 710..716,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 8,
            span: 716..717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 28,
            column: 9,
            span: 717..718,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 28,
            column: 11,
            span: 718..720,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 28,
            column: 12,
            span: 719..721,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 28,
            column: 16,
            span: 722..725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 28,
            column: 18,
            span: 726..727,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 28,
            column: 20,
            span: 727..729,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 28,
            column: 23,
            span: 729..732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 24,
            span: 732..733,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 30,
            column: 3,
            span: 735..737,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 30,
            column: 7,
            span: 738..741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_no32",
        ),
        position: Position {
            line: 30,
            column: 13,
            span: 742..747,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 30,
            column: 0,
            span: 748..752,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 31,
            column: 9,
            span: 755..761,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 10,
            span: 761..762,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 31,
            column: 13,
            span: 762..765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 31,
            column: 19,
            span: 766..771,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 31,
            column: 20,
            span: 771..772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 31,
            column: 26,
            span: 772..778,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 27,
            span: 778..779,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 31,
            column: 29,
            span: 780..781,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 31,
            column: 30,
            span: 781..782,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 31,
            span: 782..783,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 31,
            column: 33,
            span: 783..785,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 31,
            column: 34,
            span: 785..786,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 31,
            column: 36,
            span: 786..788,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 31,
            column: 37,
            span: 788..789,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 31,
            column: 39,
            span: 788..791,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 31,
            column: 40,
            span: 791..792,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 31,
            column: 41,
            span: 791..793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 42,
            span: 793..794,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 31,
            column: 43,
            span: 794..795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 32,
            column: 9,
            span: 798..804,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 10,
            span: 804..805,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 32,
            column: 13,
            span: 805..808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 32,
            column: 19,
            span: 809..814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 32,
            column: 20,
            span: 814..815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 32,
            column: 26,
            span: 815..821,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 27,
            span: 821..822,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 32,
            column: 29,
            span: 823..824,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 32,
            column: 30,
            span: 824..825,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 31,
            span: 825..826,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 32,
            column: 33,
            span: 826..828,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 32,
            column: 34,
            span: 828..829,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 32,
            column: 36,
            span: 829..831,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 32,
            column: 37,
            span: 831..832,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 32,
            column: 39,
            span: 831..834,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 32,
            column: 40,
            span: 834..835,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 32,
            column: 41,
            span: 834..836,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 42,
            span: 836..837,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 32,
            column: 43,
            span: 837..838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 9,
            span: 841..847,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 10,
            span: 847..848,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 33,
            column: 13,
            span: 848..851,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 33,
            column: 19,
            span: 852..857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 20,
            span: 857..858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 33,
            column: 26,
            span: 858..864,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 27,
            span: 864..865,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 33,
            column: 29,
            span: 866..867,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 33,
            column: 30,
            span: 867..868,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 31,
            span: 868..869,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 33,
            column: 33,
            span: 870..871,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 34,
            span: 871..872,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 35,
            span: 871..873,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 33,
            column: 36,
            span: 873..874,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 38,
            span: 873..876,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 39,
            span: 876..877,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 33,
            column: 40,
            span: 877..878,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 42,
            span: 878..880,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 33,
            column: 43,
            span: 880..881,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 45,
            span: 880..883,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 33,
            column: 46,
            span: 883..884,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 47,
            span: 883..885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 48,
            span: 885..886,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 49,
            span: 886..887,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 34,
            column: 9,
            span: 890..896,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 10,
            span: 896..897,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 34,
            column: 13,
            span: 897..900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 34,
            column: 19,
            span: 901..906,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 20,
            span: 906..907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 34,
            column: 26,
            span: 907..913,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 34,
            column: 27,
            span: 913..914,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 34,
            column: 29,
            span: 915..916,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 34,
            column: 30,
            span: 916..917,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 34,
            column: 31,
            span: 917..918,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 34,
            column: 33,
            span: 919..920,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 34,
            span: 920..921,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 35,
            span: 920..922,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 34,
            column: 36,
            span: 922..923,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 38,
            span: 922..925,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 34,
            column: 40,
            span: 926..927,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 42,
            span: 927..929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 43,
            span: 929..930,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 34,
            column: 44,
            span: 930..931,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 46,
            span: 931..933,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 34,
            column: 47,
            span: 933..934,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 49,
            span: 933..936,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 34,
            column: 50,
            span: 936..937,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 51,
            span: 936..938,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 52,
            span: 938..939,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 53,
            span: 939..940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 35,
            column: 9,
            span: 943..949,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 10,
            span: 949..950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 35,
            column: 15,
            span: 950..955,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 16,
            span: 955..956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 35,
            column: 22,
            span: 956..962,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 23,
            span: 962..963,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 35,
            column: 25,
            span: 964..965,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 35,
            column: 26,
            span: 965..966,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 27,
            span: 966..967,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 35,
            column: 29,
            span: 967..969,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 35,
            column: 30,
            span: 969..970,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 35,
            column: 32,
            span: 969..972,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 35,
            column: 33,
            span: 972..973,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 35,
            column: 34,
            span: 972..974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 35,
            column: 35,
            span: 974..975,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 35,
            column: 37,
            span: 975..977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 38,
            span: 977..978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 39,
            span: 978..979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 36,
            column: 9,
            span: 982..988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 10,
            span: 988..989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 36,
            column: 15,
            span: 989..994,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 16,
            span: 994..995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 36,
            column: 22,
            span: 995..1001,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 23,
            span: 1001..1002,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 36,
            column: 25,
            span: 1003..1004,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 36,
            column: 26,
            span: 1004..1005,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 27,
            span: 1005..1006,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 29,
            span: 1006..1008,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 36,
            column: 30,
            span: 1008..1009,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 32,
            span: 1008..1011,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 36,
            column: 33,
            span: 1011..1012,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 34,
            span: 1011..1013,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 36,
            column: 35,
            span: 1013..1014,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 37,
            span: 1014..1016,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 38,
            span: 1016..1017,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 39,
            span: 1017..1018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 37,
            column: 8,
            span: 1021..1026,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 37,
            column: 9,
            span: 1026..1027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 37,
            column: 15,
            span: 1027..1033,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 37,
            column: 16,
            span: 1033..1034,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 37,
            column: 18,
            span: 1035..1036,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 37,
            column: 19,
            span: 1036..1037,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 37,
            column: 20,
            span: 1037..1038,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 37,
            column: 22,
            span: 1038..1040,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 37,
            column: 23,
            span: 1040..1041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 37,
            column: 25,
            span: 1041..1043,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 37,
            column: 26,
            span: 1043..1044,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 37,
            column: 28,
            span: 1043..1046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 37,
            column: 29,
            span: 1046..1047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 38,
            column: 4,
            span: 1050..1051,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 5,
            span: 1051..1052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 38,
            column: 7,
            span: 1053..1054,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 38,
            column: 9,
            span: 1055..1056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 38,
            column: 16,
            span: 1057..1063,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 38,
            column: 17,
            span: 1063..1064,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 38,
            column: 18,
            span: 1064..1065,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 38,
            column: 19,
            span: 1065..1066,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 20,
            span: 1065..1067,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 38,
            column: 21,
            span: 1067..1068,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 23,
            span: 1067..1070,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 38,
            column: 24,
            span: 1070..1071,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 25,
            span: 1070..1072,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 38,
            column: 26,
            span: 1072..1073,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 38,
            column: 28,
            span: 1074..1075,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 31,
            span: 1075..1078,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 38,
            column: 32,
            span: 1078..1079,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 33,
            span: 1079..1080,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 35,
            span: 1080..1082,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 38,
            column: 36,
            span: 1082..1083,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 38,
            span: 1082..1085,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 38,
            column: 39,
            span: 1085..1086,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 40,
            span: 1085..1087,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 38,
            column: 41,
            span: 1087..1088,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 43,
            span: 1088..1090,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 38,
            column: 44,
            span: 1090..1091,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 46,
            span: 1090..1093,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 38,
            column: 47,
            span: 1093..1094,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 38,
            column: 48,
            span: 1093..1095,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 38,
            column: 49,
            span: 1095..1096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 39,
            column: 9,
            span: 1099..1105,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 10,
            span: 1105..1106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 39,
            column: 11,
            span: 1106..1107,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 39,
            column: 14,
            span: 1108..1110,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 39,
            column: 17,
            span: 1110..1113,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 39,
            column: 21,
            span: 1114..1117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 39,
            column: 23,
            span: 1118..1119,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 39,
            column: 26,
            span: 1120..1122,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 39,
            column: 30,
            span: 1123..1126,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 31,
            span: 1126..1127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 40,
            column: 4,
            span: 1130..1131,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 5,
            span: 1131..1132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 40,
            column: 7,
            span: 1133..1134,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 9,
            span: 1135..1136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 40,
            column: 16,
            span: 1137..1143,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 17,
            span: 1143..1144,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 40,
            column: 18,
            span: 1144..1145,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 40,
            column: 19,
            span: 1145..1146,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 20,
            span: 1145..1147,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 40,
            column: 21,
            span: 1147..1148,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 23,
            span: 1147..1150,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 40,
            column: 24,
            span: 1150..1151,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 25,
            span: 1150..1152,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 40,
            column: 26,
            span: 1152..1153,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 40,
            column: 28,
            span: 1154..1155,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 31,
            span: 1155..1158,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 40,
            column: 32,
            span: 1158..1159,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 33,
            span: 1159..1160,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 35,
            span: 1160..1162,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 40,
            column: 36,
            span: 1162..1163,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 38,
            span: 1162..1165,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 40,
            column: 39,
            span: 1165..1166,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 40,
            span: 1165..1167,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 41,
            span: 1167..1168,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 43,
            span: 1168..1170,
        },
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        position: Position {
            line: 40,
            column: 44,
            span: 1170..1171,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 46,
            span: 1170..1173,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 40,
            column: 47,
            span: 1173..1174,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 48,
            span: 1173..1175,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 49,
            span: 1175..1176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 9,
            span: 1179..1185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 10,
            span: 1185..1186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 41,
            column: 11,
            span: 1186..1187,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 14,
            span: 1188..1190,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 41,
            column: 18,
            span: 1191..1194,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 41,
            column: 22,
            span: 1195..1198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 41,
            column: 24,
            span: 1199..1200,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 27,
            span: 1201..1203,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 41,
            column: 30,
            span: 1203..1206,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 31,
            span: 1206..1207,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 42,
            column: 0,
            span: 1208..1211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 44,
            column: 6,
            span: 1213..1218,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing pack\"",
        ),
        position: Position {
            line: 44,
            column: 21,
            span: 1219..1233,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 46,
            column: 2,
            span: 1235..1236,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 46,
            column: 4,
            span: 1237..1238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 46,
            column: 10,
            span: 1239..1244,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 46,
            column: 11,
            span: 1244..1245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 46,
            column: 15,
            span: 1245..1249,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 16,
            span: 1249..1250,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 17,
            span: 1250..1251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 47,
            column: 7,
            span: 1252..1258,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 1258..1259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 47,
            column: 9,
            span: 1259..1260,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 47,
            column: 10,
            span: 1260..1261,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 47,
            column: 11,
            span: 1260..1262,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 47,
            column: 12,
            span: 1262..1263,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 15,
            span: 1264..1266,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 47,
            column: 19,
            span: 1267..1270,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 47,
            column: 23,
            span: 1271..1274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 47,
            column: 25,
            span: 1275..1276,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 47,
            column: 26,
            span: 1276..1277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 47,
            column: 27,
            span: 1277..1278,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 47,
            column: 30,
            span: 1279..1281,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 47,
            column: 32,
            span: 1281..1283,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 33,
            span: 1283..1284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 49,
            column: 2,
            span: 1287..1288,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 49,
            column: 4,
            span: 1289..1290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 49,
            column: 10,
            span: 1291..1296,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 49,
            column: 11,
            span: 1296..1297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 49,
            column: 15,
            span: 1297..1301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 49,
            column: 16,
            span: 1301..1302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 49,
            column: 21,
            span: 1302..1307,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 49,
            column: 22,
            span: 1307..1308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 50,
            column: 7,
            span: 1309..1315,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 50,
            column: 8,
            span: 1315..1316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 50,
            column: 9,
            span: 1316..1317,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 50,
            column: 10,
            span: 1317..1318,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 11,
            span: 1317..1319,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 50,
            column: 12,
            span: 1319..1320,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 15,
            span: 1321..1323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 50,
            column: 21,
            span: 1324..1329,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 50,
            column: 25,
            span: 1330..1333,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 50,
            column: 27,
            span: 1334..1335,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 50,
            column: 28,
            span: 1335..1336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 50,
            column: 29,
            span: 1336..1337,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 50,
            column: 32,
            span: 1338..1340,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 50,
            column: 34,
            span: 1340..1342,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 50,
            column: 35,
            span: 1342..1343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 52,
            column: 2,
            span: 1345..1346,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 52,
            column: 4,
            span: 1347..1348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 52,
            column: 10,
            span: 1349..1354,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 52,
            column: 11,
            span: 1354..1355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 52,
            column: 15,
            span: 1355..1359,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 16,
            span: 1359..1360,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 52,
            column: 19,
            span: 1360..1363,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 20,
            span: 1363..1364,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 52,
            column: 24,
            span: 1365..1368,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 25,
            span: 1368..1369,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 52,
            column: 29,
            span: 1370..1373,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 52,
            column: 30,
            span: 1373..1374,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 52,
            column: 34,
            span: 1375..1378,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 35,
            span: 1378..1379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 53,
            column: 7,
            span: 1380..1386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 53,
            column: 8,
            span: 1386..1387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 53,
            column: 9,
            span: 1387..1388,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 53,
            column: 10,
            span: 1388..1389,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 53,
            column: 11,
            span: 1388..1390,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 53,
            column: 12,
            span: 1390..1391,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 53,
            column: 15,
            span: 1392..1394,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 53,
            column: 19,
            span: 1395..1398,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 53,
            column: 23,
            span: 1399..1402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 53,
            column: 25,
            span: 1403..1404,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 53,
            column: 26,
            span: 1404..1405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 53,
            column: 27,
            span: 1405..1406,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 53,
            column: 30,
            span: 1407..1409,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 53,
            column: 32,
            span: 1409..1411,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 53,
            column: 33,
            span: 1411..1412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 56,
            column: 6,
            span: 1415..1420,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing sort\"",
        ),
        position: Position {
            line: 56,
            column: 20,
            span: 1420..1434,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 60,
            column: 6,
            span: 1480..1485,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 60,
            column: 15,
            span: 1486..1494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 60,
            column: 21,
            span: 1495..1500,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 60,
            column: 23,
            span: 1501..1502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 60,
            column: 24,
            span: 1502..1503,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 60,
            column: 25,
            span: 1503..1504,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 61,
            column: 8,
            span: 1507..1512,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 61,
            column: 17,
            span: 1513..1521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 61,
            column: 19,
            span: 1522..1523,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 20,
            span: 1523..1524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 61,
            column: 21,
            span: 1524..1525,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 22,
            span: 1525..1526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 61,
            column: 24,
            span: 1527..1528,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 25,
            span: 1528..1529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 61,
            column: 32,
            span: 1530..1536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 33,
            span: 1536..1537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 61,
            column: 34,
            span: 1537..1538,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 61,
            column: 38,
            span: 1539..1542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 61,
            column: 40,
            span: 1543..1544,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 41,
            span: 1544..1545,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 61,
            column: 42,
            span: 1545..1546,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 61,
            column: 49,
            span: 1547..1553,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 61,
            column: 54,
            span: 1554..1558,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 61,
            column: 0,
            span: 1559..1562,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 1565..1570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 1571..1572,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 11,
            span: 1572..1573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 62,
            column: 13,
            span: 1574..1575,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 62,
            column: 15,
            span: 1576..1577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 62,
            column: 21,
            span: 1578..1583,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 22,
            span: 1583..1584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 62,
            column: 27,
            span: 1584..1589,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 62,
            column: 28,
            span: 1589..1590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 62,
            column: 32,
            span: 1590..1594,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 33,
            span: 1594..1595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 62,
            column: 35,
            span: 1596..1597,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 36,
            span: 1597..1598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 62,
            column: 38,
            span: 1599..1600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 39,
            span: 1600..1601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 63,
            column: 9,
            span: 1604..1610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 10,
            span: 1610..1611,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 63,
            column: 13,
            span: 1611..1614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 63,
            column: 15,
            span: 1615..1616,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 63,
            column: 19,
            span: 1617..1620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 63,
            column: 21,
            span: 1621..1622,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 63,
            column: 22,
            span: 1622..1623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 63,
            column: 26,
            span: 1623..1627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 63,
            column: 27,
            span: 1627..1628,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid order function\"",
        ),
        position: Position {
            line: 63,
            column: 51,
            span: 1628..1652,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 52,
            span: 1652..1653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 63,
            column: 53,
            span: 1653..1654,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 64,
            column: 0,
            span: 1655..1658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 66,
            column: 6,
            span: 1660..1665,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 66,
            column: 7,
            span: 1665..1666,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 8,
            span: 1665..1667,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 9,
            span: 1667..1668,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 10,
            span: 1667..1669,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 11,
            span: 1669..1670,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 12,
            span: 1669..1671,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 66,
            column: 13,
            span: 1671..1672,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 66,
            column: 14,
            span: 1671..1673,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 66,
            column: 15,
            span: 1673..1674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 67,
            column: 6,
            span: 1675..1680,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 67,
            column: 7,
            span: 1680..1681,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 8,
            span: 1680..1682,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 9,
            span: 1682..1683,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 1682..1684,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 11,
            span: 1684..1685,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 12,
            span: 1684..1686,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 13,
            span: 1686..1687,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 14,
            span: 1686..1688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 15,
            span: 1688..1689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 16,
            span: 1688..1690,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 67,
            column: 17,
            span: 1690..1691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 68,
            column: 6,
            span: 1692..1697,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 68,
            column: 7,
            span: 1697..1698,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 8,
            span: 1697..1699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 1699..1700,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 1699..1701,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 11,
            span: 1701..1702,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 12,
            span: 1701..1703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 13,
            span: 1703..1704,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 14,
            span: 1703..1705,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 15,
            span: 1705..1706,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 1705..1707,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 17,
            span: 1707..1708,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 18,
            span: 1707..1709,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 68,
            column: 19,
            span: 1709..1710,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 71,
            column: 9,
            span: 1713..1721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 71,
            column: 15,
            span: 1722..1727,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 17,
            span: 1728..1729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 71,
            column: 18,
            span: 1729..1730,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 19,
            span: 1730..1731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 71,
            column: 21,
            span: 1732..1733,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 22,
            span: 1733..1734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 72,
            column: 4,
            span: 1737..1738,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 72,
            column: 6,
            span: 1739..1740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 72,
            column: 8,
            span: 1741..1742,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 72,
            column: 11,
            span: 1743..1745,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 72,
            column: 20,
            span: 1746..1754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 72,
            column: 22,
            span: 1755..1756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 72,
            column: 23,
            span: 1756..1757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 72,
            column: 24,
            span: 1757..1758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 72,
            column: 25,
            span: 1758..1759,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 72,
            column: 26,
            span: 1759..1760,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 72,
            column: 33,
            span: 1761..1767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 72,
            column: 35,
            span: 1768..1769,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 72,
            column: 36,
            span: 1769..1770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 72,
            column: 37,
            span: 1770..1771,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 72,
            column: 41,
            span: 1772..1775,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 72,
            column: 42,
            span: 1775..1776,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 73,
            column: 6,
            span: 1779..1782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 73,
            column: 8,
            span: 1783..1784,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 1785..1786,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 73,
            column: 12,
            span: 1787..1788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 73,
            column: 13,
            span: 1788..1789,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 14,
            span: 1789..1790,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 16,
            span: 1790..1792,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 17,
            span: 1792..1793,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 73,
            column: 19,
            span: 1794..1795,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 20,
            span: 1794..1796,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 73,
            column: 0,
            span: 1797..1799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 74,
            column: 11,
            span: 1804..1810,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 1810..1811,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 74,
            column: 15,
            span: 1811..1814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 74,
            column: 17,
            span: 1815..1816,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 18,
            span: 1816..1817,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 19,
            span: 1817..1818,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 74,
            column: 20,
            span: 1818..1819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 74,
            column: 21,
            span: 1819..1820,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 74,
            column: 22,
            span: 1820..1821,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 23,
            span: 1821..1822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 74,
            column: 25,
            span: 1823..1824,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 74,
            column: 26,
            span: 1824..1825,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 74,
            column: 27,
            span: 1825..1826,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 74,
            column: 28,
            span: 1826..1827,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 29,
            span: 1826..1828,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 74,
            column: 30,
            span: 1828..1829,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 31,
            span: 1829..1830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 32,
            span: 1830..1831,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 75,
            column: 0,
            span: 1834..1837,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 76,
            column: 0,
            span: 1838..1841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 78,
            column: 2,
            span: 1843..1844,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 78,
            column: 4,
            span: 1845..1846,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 78,
            column: 6,
            span: 1847..1848,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Jan\"",
        ),
        position: Position {
            line: 78,
            column: 11,
            span: 1848..1853,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 12,
            span: 1853..1854,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Feb\"",
        ),
        position: Position {
            line: 78,
            column: 18,
            span: 1855..1860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 19,
            span: 1860..1861,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Mar\"",
        ),
        position: Position {
            line: 78,
            column: 25,
            span: 1862..1867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 26,
            span: 1867..1868,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Apr\"",
        ),
        position: Position {
            line: 78,
            column: 32,
            span: 1869..1874,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 33,
            span: 1874..1875,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"May\"",
        ),
        position: Position {
            line: 78,
            column: 39,
            span: 1876..1881,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 40,
            span: 1881..1882,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Jun\"",
        ),
        position: Position {
            line: 78,
            column: 46,
            span: 1883..1888,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 47,
            span: 1888..1889,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Jul\"",
        ),
        position: Position {
            line: 78,
            column: 53,
            span: 1890..1895,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 54,
            span: 1895..1896,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Aug\"",
        ),
        position: Position {
            line: 78,
            column: 60,
            span: 1897..1902,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 61,
            span: 1902..1903,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Sep\"",
        ),
        position: Position {
            line: 78,
            column: 67,
            span: 1904..1909,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 78,
            column: 68,
            span: 1909..1910,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Oct\"",
        ),
        position: Position {
            line: 79,
            column: 11,
            span: 1916..1921,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 12,
            span: 1921..1922,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Nov\"",
        ),
        position: Position {
            line: 79,
            column: 18,
            span: 1923..1928,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 19,
            span: 1928..1929,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Dec\"",
        ),
        position: Position {
            line: 79,
            column: 25,
            span: 1930..1935,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 79,
            column: 26,
            span: 1935..1936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 81,
            column: 6,
            span: 1938..1943,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 81,
            column: 7,
            span: 1943..1944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 81,
            column: 11,
            span: 1944..1948,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 81,
            column: 12,
            span: 1948..1949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 81,
            column: 13,
            span: 1949..1950,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 81,
            column: 14,
            span: 1950..1951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 82,
            column: 6,
            span: 1952..1957,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 7,
            span: 1957..1958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 82,
            column: 8,
            span: 1958..1959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 9,
            span: 1959..1960,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 84,
            column: 9,
            span: 1962..1970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 84,
            column: 14,
            span: 1971..1975,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 84,
            column: 16,
            span: 1976..1977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 84,
            column: 17,
            span: 1977..1978,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 84,
            column: 18,
            span: 1978..1979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 84,
            column: 20,
            span: 1980..1981,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 84,
            column: 21,
            span: 1981..1982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 85,
            column: 4,
            span: 1985..1986,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 85,
            column: 6,
            span: 1987..1988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 85,
            column: 8,
            span: 1989..1990,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 85,
            column: 11,
            span: 1991..1993,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 85,
            column: 13,
            span: 1994..1995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 85,
            column: 0,
            span: 1995..1996,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 86,
            column: 5,
            span: 1999..2001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 86,
            column: 7,
            span: 2002..2003,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 86,
            column: 10,
            span: 2004..2006,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 12,
            span: 2006..2008,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 86,
            column: 0,
            span: 2009..2013,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 87,
            column: 10,
            span: 2018..2023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 87,
            column: 12,
            span: 2024..2025,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 87,
            column: 14,
            span: 2026..2027,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 87,
            column: 16,
            span: 2028..2029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 87,
            column: 22,
            span: 2029..2035,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 87,
            column: 23,
            span: 2035..2036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 87,
            column: 24,
            span: 2036..2037,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 87,
            column: 25,
            span: 2037..2038,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 87,
            column: 26,
            span: 2038..2039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 88,
            column: 10,
            span: 2044..2049,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 2049..2050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 88,
            column: 15,
            span: 2050..2054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 16,
            span: 2054..2055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 88,
            column: 17,
            span: 2055..2056,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 18,
            span: 2056..2057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 89,
            column: 10,
            span: 2062..2067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 11,
            span: 2067..2068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 89,
            column: 12,
            span: 2068..2069,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 13,
            span: 2069..2070,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 90,
            column: 0,
            span: 2073..2077,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 91,
            column: 8,
            span: 2082..2085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 91,
            column: 10,
            span: 2086..2087,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 91,
            column: 12,
            span: 2088..2089,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 91,
            column: 14,
            span: 2089..2091,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 91,
            column: 15,
            span: 2091..2092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 91,
            column: 17,
            span: 2093..2094,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 91,
            column: 0,
            span: 2095..2097,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 92,
            column: 8,
            span: 2104..2105,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 92,
            column: 9,
            span: 2105..2106,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 92,
            column: 10,
            span: 2106..2107,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 92,
            column: 11,
            span: 2107..2108,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 12,
            span: 2108..2109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 92,
            column: 14,
            span: 2110..2111,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 92,
            column: 15,
            span: 2111..2112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 92,
            column: 16,
            span: 2112..2113,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 92,
            column: 17,
            span: 2113..2114,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 92,
            column: 19,
            span: 2115..2116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 92,
            column: 21,
            span: 2117..2118,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 92,
            column: 22,
            span: 2118..2119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 92,
            column: 23,
            span: 2119..2120,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 92,
            column: 24,
            span: 2120..2121,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 25,
            span: 2121..2122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 92,
            column: 27,
            span: 2123..2124,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 92,
            column: 28,
            span: 2124..2125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 92,
            column: 29,
            span: 2125..2126,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 92,
            column: 30,
            span: 2126..2127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 93,
            column: 11,
            span: 2134..2138,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 93,
            column: 12,
            span: 2138..2139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 93,
            column: 13,
            span: 2139..2140,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 14,
            span: 2140..2141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 93,
            column: 16,
            span: 2142..2143,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 93,
            column: 18,
            span: 2144..2145,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 93,
            column: 20,
            span: 2145..2147,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 93,
            column: 21,
            span: 2147..2148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 94,
            column: 8,
            span: 2155..2156,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 94,
            column: 9,
            span: 2156..2157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 94,
            column: 10,
            span: 2157..2158,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 94,
            column: 11,
            span: 2158..2159,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 94,
            column: 12,
            span: 2159..2160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 94,
            column: 14,
            span: 2161..2162,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 94,
            column: 15,
            span: 2162..2163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 94,
            column: 16,
            span: 2163..2164,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 94,
            column: 17,
            span: 2164..2165,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 94,
            column: 19,
            span: 2166..2167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 94,
            column: 21,
            span: 2168..2169,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 94,
            column: 22,
            span: 2169..2170,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 94,
            column: 23,
            span: 2170..2171,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 94,
            column: 24,
            span: 2171..2172,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 94,
            column: 25,
            span: 2172..2173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 94,
            column: 27,
            span: 2174..2175,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 94,
            column: 28,
            span: 2175..2176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 94,
            column: 29,
            span: 2176..2177,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 94,
            column: 30,
            span: 2177..2178,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 95,
            column: 0,
            span: 2183..2186,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 96,
            column: 0,
            span: 2189..2192,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 97,
            column: 0,
            span: 2193..2196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 99,
            column: 5,
            span: 2198..2202,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 99,
            column: 6,
            span: 2202..2203,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 99,
            column: 7,
            span: 2203..2204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 100,
            column: 5,
            span: 2205..2209,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 100,
            column: 6,
            span: 2209..2210,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 7,
            span: 2209..2211,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 100,
            column: 8,
            span: 2211..2212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 101,
            column: 5,
            span: 2213..2217,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 101,
            column: 6,
            span: 2217..2218,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 7,
            span: 2217..2219,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 8,
            span: 2219..2220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 9,
            span: 2219..2221,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 2221..2222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 102,
            column: 5,
            span: 2223..2227,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 102,
            column: 6,
            span: 2227..2228,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 7,
            span: 2227..2229,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 8,
            span: 2229..2230,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 9,
            span: 2229..2231,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 10,
            span: 2231..2232,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 11,
            span: 2231..2233,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 102,
            column: 12,
            span: 2233..2234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 103,
            column: 5,
            span: 2235..2239,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 103,
            column: 6,
            span: 2239..2240,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 7,
            span: 2239..2241,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 8,
            span: 2241..2242,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 9,
            span: 2241..2243,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 10,
            span: 2243..2244,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 11,
            span: 2243..2245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 12,
            span: 2245..2246,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 13,
            span: 2245..2247,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 103,
            column: 14,
            span: 2247..2248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 104,
            column: 5,
            span: 2249..2253,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 104,
            column: 6,
            span: 2253..2254,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 7,
            span: 2253..2255,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 8,
            span: 2255..2256,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 9,
            span: 2255..2257,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 10,
            span: 2257..2258,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 11,
            span: 2257..2259,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 104,
            column: 12,
            span: 2259..2260,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 104,
            column: 13,
            span: 2259..2261,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 104,
            column: 14,
            span: 2261..2262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 105,
            column: 5,
            span: 2263..2267,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 105,
            column: 6,
            span: 2267..2268,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 7,
            span: 2267..2269,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 8,
            span: 2269..2270,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 9,
            span: 2269..2271,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 10,
            span: 2271..2272,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 11,
            span: 2271..2273,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 12,
            span: 2273..2274,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 13,
            span: 2273..2275,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 105,
            column: 14,
            span: 2275..2276,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 105,
            column: 15,
            span: 2275..2277,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 105,
            column: 16,
            span: 2277..2278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 106,
            column: 5,
            span: 2279..2283,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 106,
            column: 6,
            span: 2283..2284,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 7,
            span: 2283..2285,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 8,
            span: 2285..2286,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 9,
            span: 2285..2287,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 10,
            span: 2287..2288,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 11,
            span: 2287..2289,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 12,
            span: 2289..2290,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 13,
            span: 2289..2291,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 14,
            span: 2291..2292,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 15,
            span: 2291..2293,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 106,
            column: 16,
            span: 2293..2294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 107,
            column: 5,
            span: 2295..2299,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 107,
            column: 6,
            span: 2299..2300,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 7,
            span: 2299..2301,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 8,
            span: 2301..2302,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 9,
            span: 2301..2303,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 2303..2304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 11,
            span: 2303..2305,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 12,
            span: 2305..2306,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 13,
            span: 2305..2307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 14,
            span: 2307..2308,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 15,
            span: 2307..2309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 16,
            span: 2309..2310,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 17,
            span: 2309..2311,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 107,
            column: 18,
            span: 2311..2312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "perm",
        ),
        position: Position {
            line: 108,
            column: 5,
            span: 2313..2317,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 108,
            column: 6,
            span: 2317..2318,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 7,
            span: 2317..2319,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 8,
            span: 2319..2320,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 9,
            span: 2319..2321,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 10,
            span: 2321..2322,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 11,
            span: 2321..2323,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 12,
            span: 2323..2324,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 13,
            span: 2323..2325,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 14,
            span: 2325..2326,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 15,
            span: 2325..2327,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 16,
            span: 2327..2328,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 17,
            span: 2327..2329,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 108,
            column: 18,
            span: 2329..2330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        position: Position {
            line: 110,
            column: 6,
            span: 2332..2337,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 110,
            column: 8,
            span: 2338..2339,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 0,
            span: 2339..2345,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 111,
            column: 3,
            span: 2346..2348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 111,
            column: 9,
            span: 2349..2354,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 111,
            column: 14,
            span: 2355..2359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        position: Position {
            line: 111,
            column: 20,
            span: 2360..2365,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 111,
            column: 22,
            span: 2366..2367,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 27,
            span: 2367..2372,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 111,
            column: 0,
            span: 2373..2376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 113,
            column: 2,
            span: 2378..2379,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 113,
            column: 4,
            span: 2380..2381,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 113,
            column: 6,
            span: 2382..2383,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 113,
            column: 7,
            span: 2383..2384,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 114,
            column: 4,
            span: 2385..2388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 114,
            column: 6,
            span: 2389..2390,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 114,
            column: 7,
            span: 2390..2391,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 114,
            column: 8,
            span: 2390..2392,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 114,
            column: 9,
            span: 2392..2393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        position: Position {
            line: 114,
            column: 14,
            span: 2393..2398,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 114,
            column: 0,
            span: 2399..2401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 115,
            column: 4,
            span: 2404..2405,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 115,
            column: 5,
            span: 2405..2406,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 115,
            column: 6,
            span: 2406..2407,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 115,
            column: 7,
            span: 2407..2408,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 115,
            column: 9,
            span: 2409..2410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 115,
            column: 14,
            span: 2411..2415,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 115,
            column: 15,
            span: 2415..2416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        position: Position {
            line: 115,
            column: 21,
            span: 2416..2422,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 115,
            column: 22,
            span: 2422..2423,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 115,
            column: 23,
            span: 2423..2424,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 116,
            column: 0,
            span: 2425..2428,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 118,
            column: 6,
            span: 2430..2435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 118,
            column: 8,
            span: 2436..2437,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 118,
            column: 10,
            span: 2438..2439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 118,
            column: 13,
            span: 2440..2442,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 118,
            column: 14,
            span: 2442..2443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 118,
            column: 19,
            span: 2443..2448,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 118,
            column: 20,
            span: 2448..2449,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 118,
            column: 21,
            span: 2449..2450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 119,
            column: 6,
            span: 2451..2456,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 119,
            column: 7,
            span: 2456..2457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 119,
            column: 11,
            span: 2457..2461,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 119,
            column: 12,
            span: 2461..2462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 119,
            column: 13,
            span: 2462..2463,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 119,
            column: 14,
            span: 2463..2464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 120,
            column: 6,
            span: 2465..2470,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 7,
            span: 2470..2471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 120,
            column: 13,
            span: 2471..2477,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 120,
            column: 14,
            span: 2477..2478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 120,
            column: 20,
            span: 2478..2484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 21,
            span: 2484..2485,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Sorting %d elements in %.2f sec.\"",
        ),
        position: Position {
            line: 120,
            column: 55,
            span: 2485..2519,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 120,
            column: 56,
            span: 2519..2520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        position: Position {
            line: 120,
            column: 62,
            span: 2521..2526,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 120,
            column: 63,
            span: 2526..2527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 120,
            column: 66,
            span: 2528..2530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 120,
            column: 67,
            span: 2530..2531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 120,
            column: 72,
            span: 2531..2536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 120,
            column: 73,
            span: 2536..2537,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 74,
            span: 2537..2538,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 120,
            column: 75,
            span: 2538..2539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 120,
            column: 76,
            span: 2539..2540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 77,
            span: 2540..2541,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 120,
            column: 78,
            span: 2541..2542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 121,
            column: 6,
            span: 2543..2548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 121,
            column: 7,
            span: 2548..2549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 121,
            column: 8,
            span: 2549..2550,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 121,
            column: 9,
            span: 2550..2551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 123,
            column: 2,
            span: 2553..2554,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 123,
            column: 4,
            span: 2555..2556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 123,
            column: 7,
            span: 2557..2559,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 123,
            column: 8,
            span: 2559..2560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 123,
            column: 13,
            span: 2560..2565,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 123,
            column: 14,
            span: 2565..2566,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 123,
            column: 15,
            span: 2566..2567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 124,
            column: 6,
            span: 2568..2573,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 124,
            column: 7,
            span: 2573..2574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 124,
            column: 11,
            span: 2574..2578,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 12,
            span: 2578..2579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 124,
            column: 13,
            span: 2579..2580,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 14,
            span: 2580..2581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 125,
            column: 6,
            span: 2582..2587,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 7,
            span: 2587..2588,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 125,
            column: 13,
            span: 2588..2594,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 125,
            column: 14,
            span: 2594..2595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 125,
            column: 20,
            span: 2595..2601,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 21,
            span: 2601..2602,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Re-sorting %d elements in %.2f sec.\"",
        ),
        position: Position {
            line: 125,
            column: 58,
            span: 2602..2639,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 59,
            span: 2639..2640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        position: Position {
            line: 125,
            column: 65,
            span: 2641..2646,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 66,
            span: 2646..2647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 125,
            column: 69,
            span: 2648..2650,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 125,
            column: 70,
            span: 2650..2651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 125,
            column: 75,
            span: 2651..2656,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 76,
            span: 2656..2657,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 77,
            span: 2657..2658,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 125,
            column: 78,
            span: 2658..2659,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 125,
            column: 79,
            span: 2659..2660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 80,
            span: 2660..2661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 81,
            span: 2661..2662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 126,
            column: 6,
            span: 2663..2668,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 7,
            span: 2668..2669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 126,
            column: 8,
            span: 2669..2670,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 9,
            span: 2670..2671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 128,
            column: 2,
            span: 2673..2674,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 128,
            column: 4,
            span: 2675..2676,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 128,
            column: 6,
            span: 2677..2678,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 128,
            column: 7,
            span: 2678..2679,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 129,
            column: 4,
            span: 2680..2683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 129,
            column: 6,
            span: 2684..2685,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 7,
            span: 2685..2686,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 129,
            column: 8,
            span: 2685..2687,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 9,
            span: 2687..2688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        position: Position {
            line: 129,
            column: 14,
            span: 2688..2693,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 129,
            column: 0,
            span: 2694..2696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 130,
            column: 4,
            span: 2699..2700,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 130,
            column: 5,
            span: 2700..2701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 130,
            column: 6,
            span: 2701..2702,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 130,
            column: 7,
            span: 2702..2703,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 130,
            column: 9,
            span: 2704..2705,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 130,
            column: 14,
            span: 2706..2710,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 130,
            column: 15,
            span: 2710..2711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        position: Position {
            line: 130,
            column: 21,
            span: 2711..2717,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 22,
            span: 2717..2718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 23,
            span: 2718..2719,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 131,
            column: 0,
            span: 2720..2723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 133,
            column: 2,
            span: 2725..2726,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 133,
            column: 4,
            span: 2727..2728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 133,
            column: 7,
            span: 2729..2731,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 133,
            column: 8,
            span: 2731..2732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 133,
            column: 13,
            span: 2732..2737,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 133,
            column: 14,
            span: 2737..2738,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 133,
            column: 15,
            span: 2738..2739,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 133,
            column: 16,
            span: 2739..2740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 133,
            column: 18,
            span: 2741..2742,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 133,
            column: 19,
            span: 2742..2743,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 133,
            column: 0,
            span: 2742..2744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 134,
            column: 6,
            span: 2745..2750,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 134,
            column: 7,
            span: 2750..2751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 134,
            column: 11,
            span: 2751..2755,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 12,
            span: 2755..2756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 134,
            column: 13,
            span: 2756..2757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 14,
            span: 2757..2758,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 134,
            column: 23,
            span: 2759..2767,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 24,
            span: 2767..2768,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 134,
            column: 25,
            span: 2768..2769,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 134,
            column: 26,
            span: 2769..2770,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 134,
            column: 27,
            span: 2770..2771,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 28,
            span: 2771..2772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 134,
            column: 30,
            span: 2773..2774,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 134,
            column: 31,
            span: 2774..2775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 134,
            column: 32,
            span: 2775..2776,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 134,
            column: 33,
            span: 2776..2777,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 134,
            column: 34,
            span: 2776..2778,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 134,
            column: 35,
            span: 2778..2779,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 134,
            column: 42,
            span: 2780..2786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 134,
            column: 44,
            span: 2787..2788,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 134,
            column: 45,
            span: 2788..2789,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 134,
            column: 46,
            span: 2789..2790,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 134,
            column: 50,
            span: 2791..2794,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 134,
            column: 51,
            span: 2794..2795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 135,
            column: 6,
            span: 2796..2801,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 7,
            span: 2801..2802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 135,
            column: 13,
            span: 2802..2808,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 135,
            column: 14,
            span: 2808..2809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 135,
            column: 20,
            span: 2809..2815,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 135,
            column: 21,
            span: 2815..2816,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Invert-sorting other %d elements in %.2f sec., with %i comparisons\"",
        ),
        position: Position {
            line: 135,
            column: 89,
            span: 2816..2884,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 135,
            column: 90,
            span: 2884..2885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        position: Position {
            line: 136,
            column: 12,
            span: 2892..2897,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 13,
            span: 2897..2898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 136,
            column: 16,
            span: 2899..2901,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 136,
            column: 17,
            span: 2901..2902,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 136,
            column: 22,
            span: 2902..2907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 136,
            column: 23,
            span: 2907..2908,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 24,
            span: 2908..2909,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 136,
            column: 25,
            span: 2909..2910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 136,
            column: 26,
            span: 2910..2911,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 27,
            span: 2911..2912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 136,
            column: 29,
            span: 2913..2914,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 30,
            span: 2914..2915,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 136,
            column: 31,
            span: 2915..2916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 137,
            column: 6,
            span: 2917..2922,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 7,
            span: 2922..2923,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 137,
            column: 8,
            span: 2923..2924,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 9,
            span: 2924..2925,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 137,
            column: 18,
            span: 2926..2934,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 137,
            column: 19,
            span: 2934..2935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 137,
            column: 20,
            span: 2935..2936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 21,
            span: 2936..2937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 137,
            column: 22,
            span: 2937..2938,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 23,
            span: 2938..2939,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 137,
            column: 30,
            span: 2940..2946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 137,
            column: 32,
            span: 2947..2948,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 137,
            column: 33,
            span: 2948..2949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 137,
            column: 34,
            span: 2949..2950,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 137,
            column: 38,
            span: 2951..2954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 39,
            span: 2954..2955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 140,
            column: 6,
            span: 2958..2963,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 140,
            column: 7,
            span: 2963..2964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 140,
            column: 11,
            span: 2964..2968,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 140,
            column: 12,
            span: 2968..2969,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 140,
            column: 13,
            span: 2969..2970,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 142,
            column: 4,
            span: 2988..2991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 142,
            column: 6,
            span: 2992..2993,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 142,
            column: 7,
            span: 2993..2994,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 142,
            column: 8,
            span: 2993..2995,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 142,
            column: 9,
            span: 2995..2996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        position: Position {
            line: 142,
            column: 14,
            span: 2996..3001,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 142,
            column: 17,
            span: 3002..3004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 142,
            column: 19,
            span: 3005..3006,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 142,
            column: 20,
            span: 3006..3007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 142,
            column: 21,
            span: 3007..3008,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 142,
            column: 22,
            span: 3008..3009,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 142,
            column: 24,
            span: 3010..3011,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 142,
            column: 30,
            span: 3012..3017,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 142,
            column: 0,
            span: 3018..3021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 143,
            column: 2,
            span: 3022..3023,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 143,
            column: 4,
            span: 3024..3025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 143,
            column: 7,
            span: 3026..3028,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 143,
            column: 8,
            span: 3028..3029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 143,
            column: 13,
            span: 3029..3034,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 143,
            column: 14,
            span: 3034..3035,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 143,
            column: 15,
            span: 3035..3036,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 143,
            column: 16,
            span: 3036..3037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 144,
            column: 6,
            span: 3038..3043,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 144,
            column: 7,
            span: 3043..3044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 144,
            column: 11,
            span: 3044..3048,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 12,
            span: 3048..3049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 144,
            column: 13,
            span: 3049..3050,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 14,
            span: 3050..3051,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 144,
            column: 23,
            span: 3052..3060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 24,
            span: 3060..3061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 144,
            column: 25,
            span: 3061..3062,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 26,
            span: 3062..3063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 144,
            column: 27,
            span: 3063..3064,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 28,
            span: 3064..3065,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 144,
            column: 35,
            span: 3066..3072,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 144,
            column: 39,
            span: 3073..3076,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 144,
            column: 43,
            span: 3077..3080,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 144,
            column: 44,
            span: 3080..3081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 145,
            column: 6,
            span: 3082..3087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 7,
            span: 3087..3088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 145,
            column: 13,
            span: 3088..3094,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 145,
            column: 14,
            span: 3094..3095,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 145,
            column: 20,
            span: 3095..3101,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 21,
            span: 3101..3102,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"Sorting %d equal elements in %.2f sec.\"",
        ),
        position: Position {
            line: 145,
            column: 61,
            span: 3102..3142,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 62,
            span: 3142..3143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        position: Position {
            line: 145,
            column: 68,
            span: 3144..3149,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 69,
            span: 3149..3150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 145,
            column: 72,
            span: 3151..3153,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 145,
            column: 73,
            span: 3153..3154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "clock",
        ),
        position: Position {
            line: 145,
            column: 78,
            span: 3154..3159,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 79,
            span: 3159..3160,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 80,
            span: 3160..3161,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 145,
            column: 81,
            span: 3161..3162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 145,
            column: 82,
            span: 3162..3163,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 83,
            span: 3163..3164,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 84,
            span: 3164..3165,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 146,
            column: 6,
            span: 3166..3171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 7,
            span: 3171..3172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 146,
            column: 8,
            span: 3172..3173,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 9,
            span: 3173..3174,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 146,
            column: 18,
            span: 3175..3183,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 19,
            span: 3183..3184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 146,
            column: 20,
            span: 3184..3185,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 21,
            span: 3185..3186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 146,
            column: 22,
            span: 3186..3187,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 23,
            span: 3187..3188,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 146,
            column: 30,
            span: 3189..3195,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 146,
            column: 34,
            span: 3196..3199,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 146,
            column: 38,
            span: 3200..3203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 39,
            span: 3203..3204,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 147,
            column: 4,
            span: 3205..3208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 147,
            column: 6,
            span: 3209..3210,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 147,
            column: 7,
            span: 3210..3211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 147,
            column: 8,
            span: 3211..3212,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 147,
            column: 11,
            span: 3213..3215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 147,
            column: 17,
            span: 3216..3221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 18,
            span: 3221..3222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 147,
            column: 19,
            span: 3222..3223,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 20,
            span: 3223..3224,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 147,
            column: 23,
            span: 3225..3227,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 147,
            column: 30,
            span: 3228..3234,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 147,
            column: 31,
            span: 3234..3235,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 147,
            column: 34,
            span: 3235..3238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 147,
            column: 36,
            span: 3239..3240,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 147,
            column: 39,
            span: 3241..3243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 147,
            column: 41,
            span: 3244..3245,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 147,
            column: 43,
            span: 3245..3247,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'n'",
        ),
        position: Position {
            line: 147,
            column: 46,
            span: 3247..3250,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 147,
            column: 50,
            span: 3251..3254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 147,
            column: 52,
            span: 3255..3256,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 147,
            column: 54,
            span: 3256..3258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        position: Position {
            line: 147,
            column: 59,
            span: 3258..3263,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 147,
            column: 60,
            span: 3263..3264,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 147,
            column: 0,
            span: 3265..3268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 149,
            column: 2,
            span: 3270..3271,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 4,
            span: 3272..3273,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 149,
            column: 6,
            span: 3274..3275,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"álo\"",
        ),
        position: Position {
            line: 149,
            column: 11,
            span: 3275..3280,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 12,
            span: 3280..3281,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0first :-)\"",
        ),
        position: Position {
            line: 149,
            column: 26,
            span: 3282..3295,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 27,
            span: 3295..3296,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 149,
            column: 33,
            span: 3297..3302,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 34,
            span: 3302..3303,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"then this one\"",
        ),
        position: Position {
            line: 149,
            column: 50,
            span: 3304..3319,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 51,
            span: 3319..3320,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"45\"",
        ),
        position: Position {
            line: 149,
            column: 56,
            span: 3321..3325,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 149,
            column: 57,
            span: 3325..3326,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"and a new\"",
        ),
        position: Position {
            line: 149,
            column: 69,
            span: 3327..3338,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 149,
            column: 70,
            span: 3338..3339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 150,
            column: 6,
            span: 3340..3345,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 150,
            column: 7,
            span: 3345..3346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 150,
            column: 11,
            span: 3346..3350,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 150,
            column: 12,
            span: 3350..3351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 150,
            column: 13,
            span: 3351..3352,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 150,
            column: 14,
            span: 3352..3353,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 151,
            column: 6,
            span: 3354..3359,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 7,
            span: 3359..3360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 151,
            column: 8,
            span: 3360..3361,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 151,
            column: 9,
            span: 3361..3362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 153,
            column: 6,
            span: 3364..3369,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 153,
            column: 7,
            span: 3369..3370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 153,
            column: 11,
            span: 3370..3374,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 12,
            span: 3374..3375,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 153,
            column: 13,
            span: 3375..3376,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 14,
            span: 3376..3377,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 153,
            column: 23,
            span: 3378..3386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 25,
            span: 3387..3388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 153,
            column: 26,
            span: 3388..3389,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 153,
            column: 27,
            span: 3389..3390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 153,
            column: 29,
            span: 3391..3392,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 30,
            span: 3392..3393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 154,
            column: 15,
            span: 3404..3408,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 16,
            span: 3408..3409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 154,
            column: 22,
            span: 3409..3415,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 154,
            column: 23,
            span: 3415..3416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 154,
            column: 29,
            span: 3416..3422,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 30,
            span: 3422..3423,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A[%q] = ''\"",
        ),
        position: Position {
            line: 154,
            column: 42,
            span: 3423..3435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 154,
            column: 43,
            span: 3435..3436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 154,
            column: 45,
            span: 3437..3438,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 46,
            span: 3438..3439,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 47,
            span: 3439..3440,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 154,
            column: 48,
            span: 3440..3441,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 154,
            column: 49,
            span: 3441..3442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 155,
            column: 25,
            span: 3453..3467,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 155,
            column: 26,
            span: 3467..3468,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 155,
            column: 27,
            span: 3468..3469,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 156,
            column: 17,
            span: 3480..3486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 156,
            column: 19,
            span: 3487..3488,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 156,
            column: 20,
            span: 3488..3489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 156,
            column: 0,
            span: 3489..3490,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 157,
            column: 12,
            span: 3499..3502,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 157,
            column: 13,
            span: 3502..3503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 160,
            column: 3,
            span: 3506..3508,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 160,
            column: 5,
            span: 3509..3510,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 160,
            column: 7,
            span: 3511..3512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        position: Position {
            line: 160,
            column: 11,
            span: 3512..3516,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 160,
            column: 13,
            span: 3517..3518,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 160,
            column: 22,
            span: 3519..3527,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 160,
            column: 24,
            span: 3528..3529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 160,
            column: 25,
            span: 3529..3530,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 160,
            column: 26,
            span: 3530..3531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 160,
            column: 27,
            span: 3531..3532,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 160,
            column: 28,
            span: 3532..3533,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 160,
            column: 35,
            span: 3534..3540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 160,
            column: 37,
            span: 3541..3542,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 160,
            column: 38,
            span: 3542..3543,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 160,
            column: 41,
            span: 3543..3546,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 160,
            column: 43,
            span: 3547..3548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 160,
            column: 45,
            span: 3549..3550,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 160,
            column: 46,
            span: 3550..3551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 160,
            column: 49,
            span: 3551..3554,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 160,
            column: 53,
            span: 3555..3558,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 160,
            column: 54,
            span: 3558..3559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 161,
            column: 2,
            span: 3560..3561,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 161,
            column: 4,
            span: 3562..3563,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 161,
            column: 6,
            span: 3564..3565,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 161,
            column: 7,
            span: 3565..3566,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 162,
            column: 4,
            span: 3567..3570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 162,
            column: 6,
            span: 3571..3572,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 162,
            column: 7,
            span: 3572..3573,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 8,
            span: 3572..3574,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 9,
            span: 3574..3575,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 11,
            span: 3574..3577,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 162,
            column: 14,
            span: 3578..3580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 162,
            column: 17,
            span: 3582..3583,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 162,
            column: 18,
            span: 3583..3584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 162,
            column: 19,
            span: 3584..3585,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 162,
            column: 20,
            span: 3585..3586,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 162,
            column: 22,
            span: 3587..3588,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 162,
            column: 24,
            span: 3589..3590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        position: Position {
            line: 162,
            column: 27,
            span: 3590..3593,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 162,
            column: 28,
            span: 3593..3594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 162,
            column: 32,
            span: 3594..3598,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 162,
            column: 33,
            span: 3598..3599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        position: Position {
            line: 162,
            column: 39,
            span: 3599..3605,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 40,
            span: 3605..3606,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 162,
            column: 43,
            span: 3605..3609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 44,
            span: 3609..3610,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 162,
            column: 45,
            span: 3610..3611,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 162,
            column: 46,
            span: 3611..3612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 162,
            column: 59,
            span: 3613..3625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 162,
            column: 60,
            span: 3625..3626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 162,
            column: 61,
            span: 3626..3627,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 162,
            column: 62,
            span: 3627..3628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 162,
            column: 63,
            span: 3628..3629,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 162,
            column: 64,
            span: 3629..3630,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 162,
            column: 65,
            span: 3630..3631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 162,
            column: 68,
            span: 3632..3634,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 162,
            column: 69,
            span: 3634..3635,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 162,
            column: 70,
            span: 3635..3636,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 162,
            column: 0,
            span: 3637..3640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 163,
            column: 6,
            span: 3641..3646,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 163,
            column: 7,
            span: 3646..3647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sort",
        ),
        position: Position {
            line: 163,
            column: 11,
            span: 3647..3651,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 163,
            column: 12,
            span: 3651..3652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 163,
            column: 13,
            span: 3652..3653,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 163,
            column: 14,
            span: 3653..3654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 164,
            column: 6,
            span: 3655..3660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 164,
            column: 7,
            span: 3660..3661,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 164,
            column: 8,
            span: 3661..3662,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 164,
            column: 9,
            span: 3662..3663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 164,
            column: 12,
            span: 3664..3666,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 164,
            column: 13,
            span: 3666..3667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        position: Position {
            line: 164,
            column: 17,
            span: 3667..3671,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 164,
            column: 18,
            span: 3671..3672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        position: Position {
            line: 165,
            column: 6,
            span: 3673..3678,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 165,
            column: 7,
            span: 3678..3679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 165,
            column: 8,
            span: 3679..3680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 165,
            column: 9,
            span: 3680..3681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 167,
            column: 6,
            span: 3683..3688,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        position: Position {
            line: 167,
            column: 10,
            span: 3688..3692,
        },
    },
]
