---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/main.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 4,
        column: 3,
        span: 105..107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 4,
        column: 9,
        span: 108..113,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 4,
        column: 14,
        span: 114..118,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 4,
        column: 21,
        span: 119..125,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 4,
        column: 0,
        span: 126..129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 6,
        column: 6,
        span: 131..136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 8,
        span: 137..138,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing lua.c options\"",
        ),
        line: 6,
        column: 31,
        span: 138..161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 32,
        span: 161..162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 7,
        span: 164..170,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 8,
        span: 170..171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 8,
        column: 10,
        span: 171..173,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 8,
        column: 11,
        span: 173..174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 8,
        column: 18,
        span: 174..181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 19,
        span: 181..182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 20,
        span: 182..183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 21,
        span: 183..184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 10,
        column: 5,
        span: 220..224,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 7,
        span: 225..226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 10,
        column: 10,
        span: 227..229,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 10,
        column: 11,
        span: 229..230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 10,
        column: 18,
        span: 230..237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 19,
        span: 237..238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 20,
        span: 238..239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 11,
        column: 10,
        span: 240..249,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 11,
        column: 12,
        span: 250..251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 11,
        column: 15,
        span: 252..254,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 11,
        column: 16,
        span: 254..255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 11,
        column: 23,
        span: 255..262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 24,
        span: 262..263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 25,
        span: 263..264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 12,
        column: 4,
        span: 265..268,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 12,
        column: 6,
        span: 269..270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 12,
        column: 9,
        span: 271..273,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 12,
        column: 10,
        span: 273..274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        line: 12,
        column: 17,
        span: 274..281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 18,
        span: 281..282,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 19,
        span: 282..283,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 14,
        column: 0,
        span: 285..287,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 15,
        column: 8,
        span: 290..295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 15,
        column: 10,
        span: 296..297,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 15,
        column: 12,
        span: 298..299,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 0,
        span: 299..301,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 16,
        column: 8,
        span: 304..309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 16,
        column: 12,
        span: 310..313,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 16,
        column: 13,
        span: 313..314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 16,
        column: 14,
        span: 314..315,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 16,
        column: 15,
        span: 315..316,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 16,
        column: 18,
        span: 317..319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 16,
        column: 20,
        span: 320..321,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 21,
        span: 321..322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 16,
        column: 22,
        span: 322..323,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 16,
        column: 23,
        span: 323..324,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 16,
        column: 24,
        span: 323..325,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 16,
        column: 0,
        span: 326..329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 17,
        column: 11,
        span: 332..340,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 17,
        column: 13,
        span: 341..342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 17,
        column: 17,
        span: 343..346,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 17,
        column: 18,
        span: 346..347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 17,
        column: 19,
        span: 347..348,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 17,
        column: 20,
        span: 348..349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 17,
        column: 21,
        span: 348..350,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 17,
        column: 22,
        span: 350..351,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 18,
        column: 0,
        span: 352..355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 19,
        column: 6,
        span: 356..361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 7,
        span: 361..362,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"progname: \"",
        ),
        line: 19,
        column: 19,
        span: 362..374,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 19,
        column: 21,
        span: 374..376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 19,
        column: 29,
        span: 376..384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 30,
        span: 384..385,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 21,
        column: 6,
        span: 387..392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 21,
        column: 15,
        span: 393..401,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 21,
        column: 17,
        span: 402..403,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 21,
        column: 26,
        span: 404..412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 28,
        span: 413..414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 21,
        column: 29,
        span: 414..415,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 30,
        span: 415..416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 21,
        column: 32,
        span: 417..418,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 33,
        span: 418..419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 22,
        column: 4,
        span: 422..423,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 22,
        column: 6,
        span: 424..425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 22,
        column: 8,
        span: 426..427,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 22,
        column: 11,
        span: 428..430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 22,
        column: 0,
        span: 431..435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 23,
        column: 5,
        span: 438..440,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 23,
        column: 6,
        span: 440..441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 23,
        column: 12,
        span: 441..447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 13,
        span: 447..448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 23,
        column: 14,
        span: 448..449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 15,
        span: 449..450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 24,
        column: 5,
        span: 453..455,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 24,
        column: 6,
        span: 455..456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 24,
        column: 11,
        span: 456..461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 12,
        span: 461..462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 24,
        column: 13,
        span: 462..463,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 14,
        span: 463..464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 9,
        span: 467..473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 10,
        span: 473..474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 25,
        column: 12,
        span: 474..476,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
        column: 13,
        span: 476..477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 25,
        column: 18,
        span: 477..482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 19,
        span: 482..483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 20,
        span: 483..484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 21,
        span: 484..485,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 26,
        column: 0,
        span: 486..489,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 28,
        column: 9,
        span: 491..499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 28,
        column: 19,
        span: 500..509,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 21,
        span: 510..511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 22,
        span: 511..512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 29,
        column: 5,
        span: 515..517,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 29,
        column: 6,
        span: 517..518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 29,
        column: 11,
        span: 518..523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 12,
        span: 523..524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 29,
        column: 15,
        span: 524..527,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 16,
        span: 527..528,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 30,
        column: 8,
        span: 531..536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 30,
        column: 10,
        span: 537..538,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 12,
        span: 539..540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 30,
        column: 15,
        span: 541..543,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 30,
        column: 16,
        span: 543..544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        line: 30,
        column: 20,
        span: 544..548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 21,
        span: 548..549,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*a\"",
        ),
        line: 30,
        column: 25,
        span: 549..553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 26,
        span: 553..554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 31,
        column: 5,
        span: 557..559,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 31,
        column: 6,
        span: 559..560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        line: 31,
        column: 11,
        span: 560..565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 12,
        span: 565..566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 13,
        span: 566..567,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 31,
        column: 14,
        span: 567..568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 31,
        column: 19,
        span: 568..573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 20,
        span: 573..574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 21,
        span: 574..575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 9,
        span: 578..584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 10,
        span: 584..585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 32,
        column: 12,
        span: 585..587,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 13,
        span: 587..588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 32,
        column: 19,
        span: 588..594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 20,
        span: 594..595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 32,
        column: 23,
        span: 595..598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 24,
        span: 598..599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 25,
        span: 599..600,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 33,
        column: 9,
        span: 603..609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 33,
        column: 0,
        span: 610..611,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 34,
        column: 0,
        span: 612..615,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 36,
        column: 9,
        span: 617..625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 36,
        column: 22,
        span: 626..638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 24,
        span: 639..640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 36,
        column: 25,
        span: 640..641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 26,
        span: 641..642,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 8,
        span: 645..650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 37,
        column: 10,
        span: 651..652,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 12,
        span: 653..654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 37,
        column: 22,
        span: 655..664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 23,
        span: 664..665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 24,
        span: 665..666,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 38,
        column: 6,
        span: 669..672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 38,
        column: 11,
        span: 673..677,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 38,
        column: 14,
        span: 678..680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 38,
        column: 21,
        span: 681..687,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 22,
        span: 687..688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 38,
        column: 28,
        span: 688..694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 29,
        span: 694..695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 38,
        column: 30,
        span: 695..696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 31,
        span: 696..697,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".-\\n\"",
        ),
        line: 38,
        column: 38,
        span: 698..704,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 39,
        span: 704..705,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 38,
        column: 0,
        span: 706..708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 11,
        span: 713..719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 12,
        span: 719..720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
        column: 18,
        span: 720..726,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 19,
        span: 726..727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 39,
        column: 23,
        span: 727..731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 24,
        span: 731..732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 39,
        column: 25,
        span: 732..733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 26,
        span: 733..734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        line: 39,
        column: 31,
        span: 735..739,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 32,
        span: 739..740,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 34,
        span: 740..742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 35,
        span: 742..743,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 39,
        column: 40,
        span: 744..748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 41,
        span: 748..749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 42,
        span: 749..750,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 40,
        column: 0,
        span: 753..756,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 41,
        column: 0,
        span: 757..760,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 43,
        column: 9,
        span: 762..770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 43,
        column: 18,
        span: 771..779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 20,
        span: 780..781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 43,
        column: 21,
        span: 781..782,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 22,
        span: 782..783,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 44,
        column: 8,
        span: 786..791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 44,
        column: 10,
        span: 792..793,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 12,
        span: 794..795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 44,
        column: 22,
        span: 796..805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 23,
        span: 805..806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 24,
        span: 806..807,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 45,
        column: 5,
        span: 810..812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 45,
        column: 7,
        span: 813..814,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 45,
        column: 10,
        span: 815..817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 45,
        column: 12,
        span: 818..819,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 45,
        column: 17,
        span: 820..824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 45,
        column: 23,
        span: 825..830,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 24,
        span: 830..831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 45,
        column: 30,
        span: 831..837,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 31,
        span: 837..838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 45,
        column: 37,
        span: 838..844,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 38,
        span: 844..845,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'%s' - '%s'\\n\"",
        ),
        line: 45,
        column: 53,
        span: 845..860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 54,
        span: 860..861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 45,
        column: 56,
        span: 862..863,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 57,
        span: 863..864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 45,
        column: 59,
        span: 865..866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 60,
        span: 866..867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 61,
        span: 867..868,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 45,
        column: 0,
        span: 869..872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 9,
        span: 875..881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 10,
        span: 881..882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 46,
        column: 11,
        span: 882..883,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
        column: 14,
        span: 884..886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 46,
        column: 16,
        span: 887..888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 17,
        span: 888..889,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 47,
        column: 9,
        span: 892..898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 47,
        column: 0,
        span: 899..900,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 48,
        column: 0,
        span: 901..904,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 50,
        column: 9,
        span: 906..914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxrun",
        ),
        line: 50,
        column: 16,
        span: 915..921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 18,
        span: 922..923,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 50,
        column: 21,
        span: 923..926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 22,
        span: 926..927,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 51,
        column: 8,
        span: 930..935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 51,
        column: 10,
        span: 936..937,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 12,
        span: 938..939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 51,
        column: 19,
        span: 940..946,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 20,
        span: 946..947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 51,
        column: 26,
        span: 947..953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 27,
        span: 953..954,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 51,
        column: 30,
        span: 954..957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 31,
        span: 957..958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 52,
        column: 4,
        span: 961..962,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 6,
        span: 963..964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 52,
        column: 13,
        span: 965..971,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 14,
        span: 971..972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 52,
        column: 18,
        span: 972..976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 19,
        span: 976..977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 52,
        column: 20,
        span: 977..978,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 21,
        span: 978..979,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        line: 52,
        column: 27,
        span: 980..985,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 28,
        span: 985..986,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 52,
        column: 32,
        span: 987..990,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 52,
        column: 34,
        span: 990..992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 52,
        column: 42,
        span: 992..1000,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 52,
        column: 44,
        span: 1000..1002,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"'",
        ),
        line: 52,
        column: 47,
        span: 1002..1005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 48,
        span: 1005..1006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 50,
        span: 1006..1008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 51,
        span: 1008..1009,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 53,
        column: 9,
        span: 1012..1018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 53,
        column: 12,
        span: 1019..1021,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 13,
        span: 1021..1022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "execute",
        ),
        line: 53,
        column: 20,
        span: 1022..1029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 21,
        span: 1029..1030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 53,
        column: 22,
        span: 1030..1031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 23,
        span: 1031..1032,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 54,
        column: 0,
        span: 1033..1036,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 56,
        column: 9,
        span: 1038..1046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 56,
        column: 13,
        span: 1047..1050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 15,
        span: 1051..1052,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 56,
        column: 18,
        span: 1052..1055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 19,
        span: 1055..1056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
        column: 9,
        span: 1059..1065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 10,
        span: 1065..1066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxrun",
        ),
        line: 57,
        column: 16,
        span: 1066..1072,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 17,
        span: 1072..1073,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 57,
        column: 20,
        span: 1073..1076,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 21,
        span: 1076..1077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 22,
        span: 1077..1078,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 58,
        column: 0,
        span: 1079..1082,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 60,
        column: 9,
        span: 1084..1092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 60,
        column: 15,
        span: 1093..1098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 17,
        span: 1099..1100,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 60,
        column: 20,
        span: 1100..1103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 21,
        span: 1103..1104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 9,
        span: 1107..1113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 10,
        span: 1113..1114,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 61,
        column: 13,
        span: 1114..1117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "auxrun",
        ),
        line: 61,
        column: 20,
        span: 1118..1124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 21,
        span: 1124..1125,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 61,
        column: 24,
        span: 1125..1128,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 25,
        span: 1128..1129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 26,
        span: 1129..1130,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 62,
        column: 0,
        span: 1131..1134,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 64,
        column: 9,
        span: 1136..1144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRunMsg",
        ),
        line: 64,
        column: 18,
        span: 1145..1153,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 20,
        span: 1154..1155,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 64,
        column: 23,
        span: 1155..1158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 24,
        span: 1158..1159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 65,
        column: 8,
        span: 1162..1167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 9,
        span: 1167..1168,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n(the next error is expected by the test)\"",
        ),
        line: 65,
        column: 53,
        span: 1168..1212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 54,
        span: 1212..1213,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 66,
        column: 9,
        span: 1216..1222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 66,
        column: 15,
        span: 1223..1228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 16,
        span: 1228..1229,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 66,
        column: 19,
        span: 1229..1232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 20,
        span: 1232..1233,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 67,
        column: 0,
        span: 1234..1237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 70,
        column: 9,
        span: 1281..1289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 10,
        span: 1289..1290,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path)\"",
        ),
        line: 70,
        column: 31,
        span: 1290..1311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 32,
        span: 1311..1312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 72,
        column: 4,
        span: 1314..1317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 5,
        span: 1317..1318,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"env LUA_INIT= LUA_PATH=x lua %s > %s\"",
        ),
        line: 72,
        column: 43,
        span: 1318..1356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 44,
        span: 1356..1357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 72,
        column: 49,
        span: 1358..1362,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 50,
        span: 1362..1363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 72,
        column: 54,
        span: 1364..1367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 55,
        span: 1367..1368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 73,
        column: 9,
        span: 1369..1377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 10,
        span: 1377..1378,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\\n\"",
        ),
        line: 73,
        column: 15,
        span: 1378..1383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 16,
        span: 1383..1384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 75,
        column: 4,
        span: 1386..1389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 5,
        span: 1389..1390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"env LUA_INIT= LUA_PATH_5_2=y LUA_PATH=x lua %s > %s\"",
        ),
        line: 75,
        column: 58,
        span: 1390..1443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 59,
        span: 1443..1444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 75,
        column: 64,
        span: 1445..1449,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 65,
        span: 1449..1450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 75,
        column: 69,
        span: 1451..1454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 70,
        span: 1454..1455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 76,
        column: 9,
        span: 1456..1464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 10,
        span: 1464..1465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\\n\"",
        ),
        line: 76,
        column: 15,
        span: 1465..1470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 16,
        span: 1470..1471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 78,
        column: 9,
        span: 1473..1481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 10,
        span: 1481..1482,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.cpath)\"",
        ),
        line: 78,
        column: 32,
        span: 1482..1504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 33,
        span: 1504..1505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 80,
        column: 4,
        span: 1507..1510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 5,
        span: 1510..1511,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"env LUA_INIT= LUA_CPATH=xuxu lua %s > %s\"",
        ),
        line: 80,
        column: 47,
        span: 1511..1553,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 48,
        span: 1553..1554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 80,
        column: 53,
        span: 1555..1559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 54,
        span: 1559..1560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 80,
        column: 58,
        span: 1561..1564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 59,
        span: 1564..1565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 81,
        column: 9,
        span: 1566..1574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 10,
        span: 1574..1575,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\\n\"",
        ),
        line: 81,
        column: 18,
        span: 1575..1583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 19,
        span: 1583..1584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 83,
        column: 4,
        span: 1586..1589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 5,
        span: 1589..1590,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"env LUA_INIT= LUA_CPATH_5_2=yacc LUA_CPATH=x lua %s > %s\"",
        ),
        line: 83,
        column: 63,
        span: 1590..1648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 64,
        span: 1648..1649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 83,
        column: 69,
        span: 1650..1654,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 70,
        span: 1654..1655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 83,
        column: 74,
        span: 1656..1659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 75,
        span: 1659..1660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 84,
        column: 9,
        span: 1661..1669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 10,
        span: 1669..1670,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"yacc\\n\"",
        ),
        line: 84,
        column: 18,
        span: 1670..1678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 19,
        span: 1678..1679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 86,
        column: 9,
        span: 1681..1689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 10,
        span: 1689..1690,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(X)\"",
        ),
        line: 86,
        column: 20,
        span: 1690..1700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 21,
        span: 1700..1701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 87,
        column: 4,
        span: 1702..1705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 5,
        span: 1705..1706,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"X=3\" lua %s > %s'",
        ),
        line: 87,
        column: 37,
        span: 1706..1738,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 38,
        span: 1738..1739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 87,
        column: 43,
        span: 1740..1744,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 44,
        span: 1744..1745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 87,
        column: 48,
        span: 1746..1749,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 49,
        span: 1749..1750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 88,
        column: 9,
        span: 1751..1759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 10,
        span: 1759..1760,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\\n\"",
        ),
        line: 88,
        column: 15,
        span: 1760..1765,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 16,
        span: 1765..1766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 90,
        column: 9,
        span: 1768..1776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 10,
        span: 1776..1777,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(X)\"",
        ),
        line: 90,
        column: 20,
        span: 1777..1787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 21,
        span: 1787..1788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 91,
        column: 4,
        span: 1789..1792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 5,
        span: 1792..1793,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT_5_2=\"X=10\" LUA_INIT=\"X=3\" lua %s > %s'",
        ),
        line: 91,
        column: 57,
        span: 1793..1845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 58,
        span: 1845..1846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 91,
        column: 63,
        span: 1847..1851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 64,
        span: 1851..1852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 91,
        column: 68,
        span: 1853..1856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 69,
        span: 1856..1857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 92,
        column: 9,
        span: 1858..1866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 10,
        span: 1866..1867,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\\n\"",
        ),
        line: 92,
        column: 16,
        span: 1867..1873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 17,
        span: 1873..1874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 95,
        column: 9,
        span: 1896..1904,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 10,
        span: 1904..1905,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path, package.cpath)\"",
        ),
        line: 95,
        column: 46,
        span: 1905..1941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 47,
        span: 1941..1942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 96,
        column: 4,
        span: 1943..1946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 5,
        span: 1946..1947,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_INIT=\"error(10)\" LUA_PATH=xxx LUA_CPATH=xxx lua -E %s > %s'",
        ),
        line: 96,
        column: 73,
        span: 1947..2015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 74,
        span: 2015..2016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 97,
        column: 10,
        span: 2022..2026,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 11,
        span: 2026..2027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 97,
        column: 15,
        span: 2028..2031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 16,
        span: 2031..2032,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 98,
        column: 6,
        span: 2033..2038,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 98,
        column: 18,
        span: 2039..2050,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 98,
        column: 20,
        span: 2051..2052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 98,
        column: 30,
        span: 2053..2062,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 31,
        span: 2062..2063,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 32,
        span: 2063..2064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 99,
        column: 12,
        span: 2065..2076,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 14,
        span: 2077..2078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 99,
        column: 21,
        span: 2079..2085,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 22,
        span: 2085..2086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 99,
        column: 27,
        span: 2086..2091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 28,
        span: 2091..2092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 99,
        column: 39,
        span: 2092..2103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 40,
        span: 2103..2104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^(.-)\\t\"",
        ),
        line: 99,
        column: 50,
        span: 2105..2114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 51,
        span: 2114..2115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 100,
        column: 7,
        span: 2132..2138,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 8,
        span: 2138..2139,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 100,
        column: 11,
        span: 2139..2142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 100,
        column: 18,
        span: 2143..2149,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 100,
        column: 19,
        span: 2149..2150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 100,
        column: 23,
        span: 2150..2154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 24,
        span: 2154..2155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 100,
        column: 35,
        span: 2155..2166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 36,
        span: 2166..2167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxx\"",
        ),
        line: 100,
        column: 42,
        span: 2168..2173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 43,
        span: 2173..2174,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 100,
        column: 47,
        span: 2175..2178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 100,
        column: 54,
        span: 2179..2185,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 100,
        column: 55,
        span: 2185..2186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 100,
        column: 59,
        span: 2186..2190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 60,
        span: 2190..2191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 100,
        column: 71,
        span: 2191..2202,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 72,
        span: 2202..2203,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua\"",
        ),
        line: 100,
        column: 78,
        span: 2204..2209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 79,
        span: 2209..2210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 80,
        span: 2210..2211,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 104,
        column: 6,
        span: 2258..2263,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 104,
        column: 15,
        span: 2264..2272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 104,
        column: 23,
        span: 2273..2280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 25,
        span: 2281..2282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 104,
        column: 26,
        span: 2282..2283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 27,
        span: 2283..2284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 105,
        column: 11,
        span: 2287..2295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 12,
        span: 2295..2296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(package.path)\"",
        ),
        line: 105,
        column: 33,
        span: 2296..2317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 34,
        span: 2317..2318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 106,
        column: 6,
        span: 2321..2324,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 7,
        span: 2324..2325,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"%s\" lua %s > %s'",
        ),
        line: 106,
        column: 38,
        span: 2325..2356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 39,
        span: 2356..2357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 106,
        column: 41,
        span: 2358..2359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 42,
        span: 2359..2360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 106,
        column: 47,
        span: 2361..2365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 106,
        column: 48,
        span: 2365..2366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 106,
        column: 52,
        span: 2367..2370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 106,
        column: 53,
        span: 2370..2371,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 107,
        column: 8,
        span: 2374..2379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 107,
        column: 17,
        span: 2380..2388,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 19,
        span: 2389..2390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 107,
        column: 29,
        span: 2391..2400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 30,
        span: 2400..2401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 31,
        span: 2401..2402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 108,
        column: 11,
        span: 2405..2413,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
        column: 13,
        span: 2414..2415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 108,
        column: 20,
        span: 2416..2422,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 108,
        column: 21,
        span: 2422..2423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 108,
        column: 24,
        span: 2423..2426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 25,
        span: 2426..2427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 108,
        column: 33,
        span: 2427..2435,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 34,
        span: 2435..2436,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 36,
        span: 2436..2438,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 37,
        span: 2438..2439,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 108,
        column: 39,
        span: 2440..2441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 40,
        span: 2440..2442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 41,
        span: 2442..2443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 109,
        column: 9,
        span: 2473..2479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 10,
        span: 2479..2480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 109,
        column: 16,
        span: 2480..2486,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 109,
        column: 17,
        span: 2486..2487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 109,
        column: 21,
        span: 2487..2491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 22,
        span: 2491..2492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 109,
        column: 23,
        span: 2492..2493,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 24,
        span: 2493..2494,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;\"",
        ),
        line: 109,
        column: 29,
        span: 2495..2499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 30,
        span: 2499..2500,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 109,
        column: 34,
        span: 2501..2504,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 109,
        column: 36,
        span: 2504..2506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "defaultpath",
        ),
        line: 109,
        column: 47,
        span: 2506..2517,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 109,
        column: 49,
        span: 2517..2519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 109,
        column: 52,
        span: 2519..2522,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 53,
        span: 2522..2523,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
        column: 56,
        span: 2524..2526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expected",
        ),
        line: 109,
        column: 65,
        span: 2527..2535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 66,
        span: 2535..2536,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 110,
        column: 0,
        span: 2537..2540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 112,
        column: 8,
        span: 2542..2549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 9,
        span: 2549..2550,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 112,
        column: 12,
        span: 2550..2553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 13,
        span: 2553..2554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 113,
        column: 8,
        span: 2555..2562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 9,
        span: 2562..2563,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;\"",
        ),
        line: 113,
        column: 13,
        span: 2563..2567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 14,
        span: 2567..2568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 114,
        column: 8,
        span: 2569..2576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 9,
        span: 2576..2577,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;;\"",
        ),
        line: 114,
        column: 14,
        span: 2577..2582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 15,
        span: 2582..2583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 115,
        column: 8,
        span: 2584..2591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 9,
        span: 2591..2592,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;;;\"",
        ),
        line: 115,
        column: 15,
        span: 2592..2598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 16,
        span: 2598..2599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 116,
        column: 8,
        span: 2600..2607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 9,
        span: 2607..2608,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;;;;\"",
        ),
        line: 116,
        column: 16,
        span: 2608..2615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 17,
        span: 2615..2616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "convert",
        ),
        line: 117,
        column: 8,
        span: 2617..2624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 9,
        span: 2624..2625,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";;a;;;bc\"",
        ),
        line: 117,
        column: 19,
        span: 2625..2635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 20,
        span: 2635..2636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 121,
        column: 9,
        span: 2655..2663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 10,
        span: 2663..2664,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(1); a=2; return {x=15}\"",
        ),
        line: 121,
        column: 40,
        span: 2664..2694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 41,
        span: 2694..2695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 122,
        column: 9,
        span: 2696..2704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 10,
        span: 2704..2705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 11,
        span: 2705..2706,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"print(a); print(_G['%s'].x)\"",
        ),
        line: 122,
        column: 40,
        span: 2706..2735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 41,
        span: 2735..2736,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 122,
        column: 42,
        span: 2736..2737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 122,
        column: 48,
        span: 2737..2743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 49,
        span: 2743..2744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 122,
        column: 53,
        span: 2744..2748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 54,
        span: 2748..2749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 55,
        span: 2749..2750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 122,
        column: 65,
        span: 2751..2760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 66,
        span: 2760..2761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 123,
        column: 4,
        span: 2762..2765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 5,
        span: 2765..2766,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"?;;\" lua -l %s -l%s -lstring -l io %s > %s'",
        ),
        line: 123,
        column: 63,
        span: 2766..2824,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 64,
        span: 2824..2825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 123,
        column: 69,
        span: 2826..2830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 70,
        span: 2830..2831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 123,
        column: 80,
        span: 2832..2841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 81,
        span: 2841..2842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 123,
        column: 91,
        span: 2843..2852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 92,
        span: 2852..2853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 123,
        column: 96,
        span: 2854..2857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 97,
        span: 2857..2858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 124,
        column: 9,
        span: 2859..2867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 10,
        span: 2867..2868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n2\\n15\\n2\\n15\\n\"",
        ),
        line: 124,
        column: 29,
        span: 2868..2887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 30,
        span: 2887..2888,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 126,
        column: 6,
        span: 2890..2895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 126,
        column: 8,
        span: 2896..2897,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 126,
        column: 10,
        span: 2898..2899,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  assert(#arg == 3 and arg[1] == 'a' and\n         arg[2] == 'b' and arg[3] == 'c')\n  assert(arg[-1] == '--' and arg[-2] == \"-e \" and arg[-3] == '%s')\n  assert(arg[4] == nil and arg[-4] == nil)\n  local a, b, c = ...\n  assert(... == 'a' and a == 'a' and b == 'b' and c == 'c')\n]]",
        ),
        line: 133,
        column: 3,
        span: 2900..3180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
        column: 2,
        span: 3181..3182,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 134,
        column: 4,
        span: 3183..3184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 134,
        column: 11,
        span: 3185..3191,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 134,
        column: 12,
        span: 3191..3192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 134,
        column: 18,
        span: 3192..3198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 19,
        span: 3198..3199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
        column: 20,
        span: 3199..3200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 21,
        span: 3200..3201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 134,
        column: 30,
        span: 3202..3210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 31,
        span: 3210..3211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 135,
        column: 9,
        span: 3212..3220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 10,
        span: 3220..3221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 135,
        column: 11,
        span: 3221..3222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 12,
        span: 3222..3223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 136,
        column: 4,
        span: 3224..3227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 5,
        span: 3227..3228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'lua \"-e \" -- %s a b c'",
        ),
        line: 136,
        column: 28,
        span: 3228..3251,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 29,
        span: 3251..3252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 136,
        column: 34,
        span: 3253..3257,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 35,
        span: 3257..3258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 138,
        column: 9,
        span: 3260..3268,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(arg==nil)\"",
        ),
        line: 138,
        column: 27,
        span: 3268..3286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 139,
        column: 9,
        span: 3287..3295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 10,
        span: 3295..3296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(arg)\"",
        ),
        line: 139,
        column: 23,
        span: 3296..3309,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 24,
        span: 3309..3310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 139,
        column: 34,
        span: 3311..3320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 35,
        span: 3320..3321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 140,
        column: 4,
        span: 3322..3325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 5,
        span: 3325..3326,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'env LUA_PATH=\"?;;\" lua -l%s - < %s'",
        ),
        line: 140,
        column: 41,
        span: 3326..3362,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 42,
        span: 3362..3363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 140,
        column: 47,
        span: 3364..3368,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 48,
        span: 3368..3369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 140,
        column: 58,
        span: 3370..3379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 59,
        span: 3379..3380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 142,
        column: 9,
        span: 3382..3390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 142,
        column: 11,
        span: 3390..3392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 143,
        column: 4,
        span: 3393..3396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 5,
        span: 3396..3397,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua - < %s > %s\"",
        ),
        line: 143,
        column: 22,
        span: 3397..3414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 23,
        span: 3414..3415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 143,
        column: 28,
        span: 3416..3420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 29,
        span: 3420..3421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 143,
        column: 33,
        span: 3422..3425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 34,
        span: 3425..3426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 144,
        column: 9,
        span: 3427..3435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 10,
        span: 3435..3436,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 144,
        column: 12,
        span: 3436..3438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 13,
        span: 3438..3439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 147,
        column: 9,
        span: 3464..3472,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[print(({...})[30])]]",
        ),
        line: 147,
        column: 31,
        span: 3472..3494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 148,
        column: 4,
        span: 3495..3498,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 5,
        span: 3498..3499,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s %s > %s\"",
        ),
        line: 148,
        column: 21,
        span: 3499..3515,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 22,
        span: 3515..3516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 148,
        column: 27,
        span: 3517..3521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 28,
        span: 3521..3522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 148,
        column: 35,
        span: 3523..3529,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 148,
        column: 36,
        span: 3529..3530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 148,
        column: 39,
        span: 3530..3533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 40,
        span: 3533..3534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" a\"",
        ),
        line: 148,
        column: 44,
        span: 3534..3538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 45,
        span: 3538..3539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 48,
        span: 3539..3542,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 49,
        span: 3542..3543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 50,
        span: 3543..3544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 148,
        column: 54,
        span: 3545..3548,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 55,
        span: 3548..3549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 149,
        column: 9,
        span: 3550..3558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 10,
        span: 3558..3559,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\\n\"",
        ),
        line: 149,
        column: 15,
        span: 3559..3564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 16,
        span: 3564..3565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 151,
        column: 4,
        span: 3567..3570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 5,
        span: 3570..3571,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua \"-eprint(1)\" -ea=3 -e \"print(a)\" > %s]]",
        ),
        line: 151,
        column: 50,
        span: 3571..3616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 51,
        span: 3616..3617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 151,
        column: 55,
        span: 3618..3621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 56,
        span: 3621..3622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 152,
        column: 9,
        span: 3623..3631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 10,
        span: 3631..3632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\n3\\n\"",
        ),
        line: 152,
        column: 18,
        span: 3632..3640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 19,
        span: 3640..3641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 154,
        column: 9,
        span: 3643..3651,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  print(\n1, a\n)\n]]",
        ),
        line: 158,
        column: 3,
        span: 3651..3672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 159,
        column: 4,
        span: 3673..3676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 5,
        span: 3676..3677,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua - < %s > %s\"",
        ),
        line: 159,
        column: 22,
        span: 3677..3694,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 23,
        span: 3694..3695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 159,
        column: 28,
        span: 3696..3700,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 29,
        span: 3700..3701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 159,
        column: 33,
        span: 3702..3705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 34,
        span: 3705..3706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 160,
        column: 9,
        span: 3707..3715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 10,
        span: 3715..3716,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\\tnil\\n\"",
        ),
        line: 160,
        column: 20,
        span: 3716..3726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 21,
        span: 3726..3727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 162,
        column: 9,
        span: 3729..3737,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n= (6*2-6) -- ===\na \n= 10\nprint(a)\n= a]]",
        ),
        line: 167,
        column: 6,
        span: 3737..3779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 168,
        column: 4,
        span: 3780..3783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 5,
        span: 3783..3784,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        line: 168,
        column: 52,
        span: 3784..3831,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 53,
        span: 3831..3832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 168,
        column: 58,
        span: 3833..3837,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 59,
        span: 3837..3838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 168,
        column: 63,
        span: 3839..3842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 64,
        span: 3842..3843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 169,
        column: 13,
        span: 3844..3856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 14,
        span: 3856..3857,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"6\\n10\\n10\\n\\n\"",
        ),
        line: 169,
        column: 29,
        span: 3857..3872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 30,
        span: 3872..3873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 171,
        column: 9,
        span: 3875..3883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 10,
        span: 3883..3884,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = [[b\\nc\\nd\\ne]]\\n=a\"",
        ),
        line: 171,
        column: 34,
        span: 3884..3908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 35,
        span: 3908..3909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 172,
        column: 6,
        span: 3910..3915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 7,
        span: 3915..3916,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"temporary program file: \"",
        ),
        line: 172,
        column: 33,
        span: 3916..3942,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 172,
        column: 35,
        span: 3942..3944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 172,
        column: 39,
        span: 3944..3948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 40,
        span: 3948..3949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 173,
        column: 4,
        span: 3950..3953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 5,
        span: 3953..3954,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        line: 173,
        column: 52,
        span: 3954..4001,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 53,
        span: 4001..4002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 173,
        column: 58,
        span: 4003..4007,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 59,
        span: 4007..4008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 173,
        column: 63,
        span: 4009..4012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 64,
        span: 4012..4013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 174,
        column: 13,
        span: 4014..4026,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 14,
        span: 4026..4027,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\\nc\\nd\\ne\\n\\n\"",
        ),
        line: 174,
        column: 30,
        span: 4027..4043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 31,
        span: 4043..4044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 176,
        column: 7,
        span: 4046..4052,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 176,
        column: 9,
        span: 4053..4054,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 176,
        column: 15,
        span: 4055..4060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 177,
        column: 9,
        span: 4061..4069,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ --\na = 2\n]]",
        ),
        line: 179,
        column: 3,
        span: 4069..4083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 180,
        column: 4,
        span: 4084..4087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 5,
        span: 4087..4088,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua \"-e_PROMPT='%s'\" -i < %s > %s]]",
        ),
        line: 180,
        column: 42,
        span: 4088..4125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 43,
        span: 4125..4126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 180,
        column: 50,
        span: 4127..4133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 51,
        span: 4133..4134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 180,
        column: 56,
        span: 4135..4139,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 57,
        span: 4139..4140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 180,
        column: 61,
        span: 4141..4144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 62,
        span: 4144..4145,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 181,
        column: 6,
        span: 4146..4151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 181,
        column: 8,
        span: 4152..4153,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 181,
        column: 10,
        span: 4154..4155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 181,
        column: 20,
        span: 4156..4165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 21,
        span: 4165..4166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 22,
        span: 4166..4167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 182,
        column: 7,
        span: 4168..4174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 8,
        span: 4174..4175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 182,
        column: 14,
        span: 4175..4181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 15,
        span: 4181..4182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 182,
        column: 19,
        span: 4182..4186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 20,
        span: 4186..4187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 182,
        column: 21,
        span: 4187..4188,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 22,
        span: 4188..4189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 182,
        column: 29,
        span: 4190..4196,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 182,
        column: 32,
        span: 4197..4199,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        line: 182,
        column: 37,
        span: 4200..4204,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 182,
        column: 40,
        span: 4205..4207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 182,
        column: 47,
        span: 4208..4214,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 182,
        column: 50,
        span: 4215..4217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".*\"",
        ),
        line: 182,
        column: 55,
        span: 4218..4222,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 182,
        column: 58,
        span: 4223..4225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prompt",
        ),
        line: 182,
        column: 65,
        span: 4226..4232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 66,
        span: 4232..4233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 67,
        span: 4233..4234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 185,
        column: 9,
        span: 4262..4270,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\ndebug = require \"debug\"\nm = {x=0}\nsetmetatable(m, {__tostring = function(x)\n  return debug.getinfo(4).currentline + x.x\nend})\nerror(m)\n]]",
        ),
        line: 192,
        column: 3,
        span: 4270..4410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 193,
        column: 6,
        span: 4411..4416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 7,
        span: 4416..4417,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua %s 2> %s]]",
        ),
        line: 193,
        column: 23,
        span: 4417..4433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 24,
        span: 4433..4434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 193,
        column: 29,
        span: 4435..4439,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 30,
        span: 4439..4440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 193,
        column: 34,
        span: 4441..4444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 35,
        span: 4444..4445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 194,
        column: 9,
        span: 4462..4470,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 10,
        span: 4470..4471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "progname",
        ),
        line: 194,
        column: 18,
        span: 4471..4479,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 194,
        column: 20,
        span: 4479..4481,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\": 6\\n\"",
        ),
        line: 194,
        column: 27,
        span: 4481..4488,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 28,
        span: 4488..4489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 197,
        column: 2,
        span: 4492..4493,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 197,
        column: 4,
        span: 4494..4495,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[ -- \nfunction f ( x ) \n  local a = [[\nxuxu\n]]\n  local b = \"\\\nxuxu\\n\"\n  if x == 11 then return 1 , 2 end  --[[ test multiple returns ]]\n  return x + 1 \n  --\\\\\nend\n=( f( 10 ) )\nassert( a == b )\n=f( 11 )  ]=]",
        ),
        line: 210,
        column: 14,
        span: 4496..4704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 211,
        column: 2,
        span: 4705..4706,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 211,
        column: 4,
        span: 4707..4708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 211,
        column: 11,
        span: 4709..4715,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 211,
        column: 12,
        span: 4715..4716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 211,
        column: 16,
        span: 4716..4720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 17,
        span: 4720..4721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 211,
        column: 18,
        span: 4721..4722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 211,
        column: 19,
        span: 4722..4723,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' '",
        ),
        line: 211,
        column: 23,
        span: 4724..4727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 211,
        column: 24,
        span: 4727..4728,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n\\n'",
        ),
        line: 211,
        column: 31,
        span: 4729..4735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 32,
        span: 4735..4736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 212,
        column: 9,
        span: 4737..4745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 10,
        span: 4745..4746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 212,
        column: 11,
        span: 4746..4747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 12,
        span: 4747..4748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 213,
        column: 4,
        span: 4749..4752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 5,
        span: 4752..4753,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -e\"_PROMPT='' _PROMPT2=''\" -i < %s > %s]]",
        ),
        line: 213,
        column: 52,
        span: 4753..4800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 53,
        span: 4800..4801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 213,
        column: 58,
        span: 4802..4806,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 59,
        span: 4806..4807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 213,
        column: 63,
        span: 4808..4811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 64,
        span: 4811..4812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 214,
        column: 13,
        span: 4813..4825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 14,
        span: 4825..4826,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"11\\n1\\t2\\n\\n\"",
        ),
        line: 214,
        column: 28,
        span: 4826..4840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 29,
        span: 4840..4841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 216,
        column: 9,
        span: 4845..4853,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[#comment in 1st line without \\n at the end]]",
        ),
        line: 216,
        column: 55,
        span: 4853..4899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 217,
        column: 4,
        span: 4900..4903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 5,
        span: 4903..4904,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        line: 217,
        column: 13,
        span: 4904..4912,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 217,
        column: 14,
        span: 4912..4913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 217,
        column: 19,
        span: 4914..4918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 20,
        span: 4918..4919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 219,
        column: 9,
        span: 4923..4931,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[#test line number when file starts with comment line\ndebug = require\"debug\"\nprint(debug.getinfo(1).currentline)\n]]",
        ),
        line: 222,
        column: 3,
        span: 4931..5047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 223,
        column: 4,
        span: 5048..5051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 5,
        span: 5051..5052,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s > %s\"",
        ),
        line: 223,
        column: 18,
        span: 5052..5065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 19,
        span: 5065..5066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 223,
        column: 24,
        span: 5067..5071,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 25,
        span: 5071..5072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 223,
        column: 29,
        span: 5073..5076,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 30,
        span: 5076..5077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkprogout",
        ),
        line: 224,
        column: 13,
        span: 5078..5090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 14,
        span: 5090..5091,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3'",
        ),
        line: 224,
        column: 17,
        span: 5091..5094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 18,
        span: 5094..5095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 227,
        column: 9,
        span: 5128..5136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 10,
        span: 5136..5137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 227,
        column: 16,
        span: 5137..5143,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 227,
        column: 17,
        span: 5143..5144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 227,
        column: 23,
        span: 5144..5150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 24,
        span: 5150..5151,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[io.output(%q); io.write('alo')]]",
        ),
        line: 227,
        column: 58,
        span: 5151..5185,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 59,
        span: 5185..5186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 227,
        column: 63,
        span: 5187..5190,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 64,
        span: 5190..5191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 65,
        span: 5191..5192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 228,
        column: 4,
        span: 5193..5196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 5,
        span: 5196..5197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        line: 228,
        column: 13,
        span: 5197..5205,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 14,
        span: 5205..5206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 228,
        column: 19,
        span: 5207..5211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 20,
        span: 5211..5212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkout",
        ),
        line: 229,
        column: 9,
        span: 5213..5221,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 229,
        column: 10,
        span: 5221..5222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 229,
        column: 15,
        span: 5222..5227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 229,
        column: 16,
        span: 5227..5228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 232,
        column: 4,
        span: 5279..5282,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 5,
        span: 5282..5283,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[lua -v  -e'print\"hello\"' > %s]]",
        ),
        line: 232,
        column: 38,
        span: 5283..5316,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 39,
        span: 5316..5317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 232,
        column: 43,
        span: 5318..5321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 44,
        span: 5321..5322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 233,
        column: 2,
        span: 5323..5324,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 4,
        span: 5325..5326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getoutput",
        ),
        line: 233,
        column: 14,
        span: 5327..5336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 15,
        span: 5336..5337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 16,
        span: 5337..5338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
        column: 7,
        span: 5339..5345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 8,
        span: 5345..5346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 234,
        column: 14,
        span: 5346..5352,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 234,
        column: 15,
        span: 5352..5353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 234,
        column: 19,
        span: 5353..5357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 20,
        span: 5357..5358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 234,
        column: 21,
        span: 5358..5359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 22,
        span: 5359..5360,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"PUC%-Rio\\nhello\"",
        ),
        line: 234,
        column: 40,
        span: 5361..5378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 41,
        span: 5378..5379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 42,
        span: 5379..5380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 238,
        column: 9,
        span: 5402..5410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 10,
        span: 5410..5411,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(nil, true)\"",
        ),
        line: 238,
        column: 30,
        span: 5411..5431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 31,
        span: 5431..5432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 239,
        column: 4,
        span: 5433..5436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 5,
        span: 5436..5437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        line: 239,
        column: 13,
        span: 5437..5445,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 14,
        span: 5445..5446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 239,
        column: 19,
        span: 5447..5451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 20,
        span: 5451..5452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 240,
        column: 9,
        span: 5453..5461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 10,
        span: 5461..5462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(0, true)\"",
        ),
        line: 240,
        column: 28,
        span: 5462..5480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 29,
        span: 5480..5481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 241,
        column: 4,
        span: 5482..5485,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 5,
        span: 5485..5486,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        line: 241,
        column: 13,
        span: 5486..5494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
        column: 14,
        span: 5494..5495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 241,
        column: 19,
        span: 5496..5500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 20,
        span: 5500..5501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 242,
        column: 9,
        span: 5502..5510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 10,
        span: 5510..5511,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(true, true)\"",
        ),
        line: 242,
        column: 31,
        span: 5511..5532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 32,
        span: 5532..5533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 243,
        column: 4,
        span: 5534..5537,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 5,
        span: 5537..5538,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        line: 243,
        column: 13,
        span: 5538..5546,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 14,
        span: 5546..5547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 243,
        column: 19,
        span: 5548..5552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 20,
        span: 5552..5553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 244,
        column: 9,
        span: 5554..5562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 10,
        span: 5562..5563,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(1, true)\"",
        ),
        line: 244,
        column: 28,
        span: 5563..5581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 29,
        span: 5581..5582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 245,
        column: 6,
        span: 5583..5588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 7,
        span: 5588..5589,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        line: 245,
        column: 15,
        span: 5589..5597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 16,
        span: 5597..5598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 245,
        column: 21,
        span: 5599..5603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 22,
        span: 5603..5604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prepfile",
        ),
        line: 246,
        column: 9,
        span: 5621..5629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 10,
        span: 5629..5630,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os.exit(false, true)\"",
        ),
        line: 246,
        column: 32,
        span: 5630..5652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 33,
        span: 5652..5653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRun",
        ),
        line: 247,
        column: 6,
        span: 5654..5659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 7,
        span: 5659..5660,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua %s\"",
        ),
        line: 247,
        column: 15,
        span: 5660..5668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 247,
        column: 16,
        span: 5668..5669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 247,
        column: 21,
        span: 5670..5674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 22,
        span: 5674..5675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 249,
        column: 7,
        span: 5693..5699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 8,
        span: 5699..5700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 249,
        column: 10,
        span: 5700..5702,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 249,
        column: 11,
        span: 5702..5703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 249,
        column: 17,
        span: 5703..5709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 18,
        span: 5709..5710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 249,
        column: 22,
        span: 5710..5714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 23,
        span: 5714..5715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 24,
        span: 5715..5716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 7,
        span: 5717..5723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 8,
        span: 5723..5724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 250,
        column: 10,
        span: 5724..5726,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 250,
        column: 11,
        span: 5726..5727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 250,
        column: 17,
        span: 5727..5733,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 18,
        span: 5733..5734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "otherprog",
        ),
        line: 250,
        column: 27,
        span: 5734..5743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 28,
        span: 5743..5744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 29,
        span: 5744..5745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 251,
        column: 7,
        span: 5746..5752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 8,
        span: 5752..5753,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 251,
        column: 11,
        span: 5753..5756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 251,
        column: 14,
        span: 5757..5759,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 251,
        column: 15,
        span: 5759..5760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 251,
        column: 21,
        span: 5760..5766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 22,
        span: 5766..5767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "out",
        ),
        line: 251,
        column: 25,
        span: 5767..5770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 26,
        span: 5770..5771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 27,
        span: 5771..5772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "RUN",
        ),
        line: 253,
        column: 4,
        span: 5774..5777,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 5,
        span: 5777..5778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -v\"",
        ),
        line: 253,
        column: 13,
        span: 5778..5786,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 14,
        span: 5786..5787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRunMsg",
        ),
        line: 255,
        column: 9,
        span: 5789..5797,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 10,
        span: 5797..5798,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -h\"",
        ),
        line: 255,
        column: 18,
        span: 5798..5806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 19,
        span: 5806..5807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRunMsg",
        ),
        line: 256,
        column: 9,
        span: 5808..5816,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 10,
        span: 5816..5817,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -e\"",
        ),
        line: 256,
        column: 18,
        span: 5817..5825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 19,
        span: 5825..5826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRunMsg",
        ),
        line: 257,
        column: 9,
        span: 5827..5835,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 10,
        span: 5835..5836,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -e a\"",
        ),
        line: 257,
        column: 20,
        span: 5836..5846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 21,
        span: 5846..5847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NoRunMsg",
        ),
        line: 258,
        column: 9,
        span: 5848..5856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 10,
        span: 5856..5857,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lua -f\"",
        ),
        line: 258,
        column: 18,
        span: 5857..5865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 19,
        span: 5865..5866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 260,
        column: 6,
        span: 5868..5873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 7,
        span: 5873..5874,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"OK\"",
        ),
        line: 260,
        column: 11,
        span: 5874..5878,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 12,
        span: 5878..5879,
    },
]
