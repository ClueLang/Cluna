---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/checktable.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 2,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 2,
    },
    Token {
        kind: Identifier,
        lexeme: "rawget",
        line: 2,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 2,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 2,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 2,
    },
    Token {
        kind: String,
        lexeme: "\"stat\"",
        line: 2,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 2,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 2,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 2,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 2,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 4,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 4,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 4,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 4,
    },
    Token {
        kind: Identifier,
        lexeme: "stat",
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 5,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 5,
    },
    Token {
        kind: String,
        lexeme: "\"`querytab' not active\"",
        line: 5,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 5,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 6,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 7,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "checktable",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "asize",
        line: 11,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "hsize",
        line: 11,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "ff",
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 11,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "querytab",
        line: 11,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 11,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 11,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 12,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 12,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 12,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 12,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 13,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 13,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "hsize",
        line: 13,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 13,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 13,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 13,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "key",
        line: 14,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 14,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 14,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 14,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "querytab",
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 14,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 14,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "asize",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "key",
        line: 15,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 15,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 15,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 16,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 16,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 16,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 16,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 16,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 16,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 16,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: ElseIf,
        lexeme: "elseif",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "key",
        line: 17,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 17,
    },
    Token {
        kind: String,
        lexeme: "\"<undef>\"",
        line: 17,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 18,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 18,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 20,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "key",
        line: 20,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 20,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 21,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 21,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "hash",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "key",
        line: 21,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 22,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 22,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 22,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 23,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 23,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 23,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: ElseIf,
        lexeme: "elseif",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 24,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 24,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 25,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 25,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 25,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 27,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 27,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 27,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 27,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 27,
    },
    Token {
        kind: While,
        lexeme: "while",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 28,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "ff",
        line: 29,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 29,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 29,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "hsize",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 30,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 30,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 30,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 30,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 30,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 30,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 30,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 30,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 30,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 30,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 31,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "insert",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 31,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "mp",
        line: 31,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "key",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 32,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 32,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "querytab",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "key",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 34,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 35,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 36,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "asize",
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "asize",
        line: 38,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "hsize",
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "hsize",
        line: 38,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 38,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "ff",
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "ff",
        line: 38,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 39,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 40,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "mostra",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "asize",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "hsize",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "ff",
        line: 43,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 43,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "querytab",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "asize",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "hsize",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "ff",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "'------'",
        line: 45,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 46,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 46,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 46,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 46,
    },
    Token {
        kind: Identifier,
        lexeme: "asize",
        line: 46,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 46,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 46,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 46,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 47,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 47,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 47,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "querytab",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 47,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 48,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: String,
        lexeme: "\"[%d] -\"",
        line: 48,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 50,
    },
    Token {
        kind: String,
        lexeme: "'------'",
        line: 50,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 51,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "hsize",
        line: 51,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 51,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 51,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "querytab",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 52,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "asize",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 54,
    },
    Token {
        kind: String,
        lexeme: "'-------------'",
        line: 54,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 55,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "stat",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "checktable",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "nelem",
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "nlist",
        line: 59,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 59,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "maxlist",
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 60,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 60,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 60,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 61,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 61,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "hsize",
        line: 61,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 61,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 61,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 62,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 62,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 62,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 62,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 62,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 63,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 63,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 63,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 63,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "nlist",
        line: 64,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "nlist",
        line: 64,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 64,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "nelem",
        line: 65,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "nelem",
        line: 65,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 65,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 66,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "maxlist",
        line: 66,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 66,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 66,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "maxlist",
        line: 66,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 66,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 66,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 66,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 66,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "maxlist",
        line: 67,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 67,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 67,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "maxlist",
        line: 67,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 67,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 67,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 67,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 67,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 68,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 69,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 70,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: String,
        lexeme: "\"hsize=%d  elements=%d  load=%.2f  med.len=%.2f (asize=%d)\"",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 71,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "hsize",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "nelem",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "nelem",
        line: 71,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 71,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "hsize",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "nelem",
        line: 71,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "nlist",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 71,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "asize",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 72,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 72,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 72,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "getn",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "maxlist",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 72,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 73,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "maxlist",
        line: 73,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 73,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 73,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 73,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 74,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 74,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 74,
    },
    Token {
        kind: String,
        lexeme: "\"%5d %10d %.2f%%\"",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 74,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 74,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 74,
    },
    Token {
        kind: Number,
        lexeme: "100",
        line: 74,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 74,
    },
    Token {
        kind: Identifier,
        lexeme: "nlist",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 74,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 75,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 76,
    },
]
