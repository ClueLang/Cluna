---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/code.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 1,
        column: 2,
        span: 0..2,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 1,
        column: 4,
        span: 3..4,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 1,
        column: 7,
        span: 5..7,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 1,
        column: 11,
        span: 8..11,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 1,
        column: 0,
        span: 12..16,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 2,
        column: 4,
        span: 19..20,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 2,
        column: 11,
        span: 20..27,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 2,
        column: 14,
        span: 28..30,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 2,
        column: 20,
        span: 31..36,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 2,
        column: 21,
        span: 36..37,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 2,
        column: 22,
        span: 37..38,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\a\\n >>> testC not active: skipping opcode tests <<<\\n\\a'",
        ),
        line: 2,
        column: 80,
        span: 38..96,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 2,
        column: 81,
        span: 96..97,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 3,
        column: 0,
        span: 100..106,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 4,
        column: 0,
        span: 107..110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 5,
        column: 6,
        span: 111..116,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing code generation and optimizations\"",
        ),
        line: 5,
        column: 50,
        span: 117..160,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 9,
        column: 0,
        span: 211..213,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 10,
        column: 8,
        span: 216..221,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 10,
        column: 17,
        span: 222..230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 10,
        column: 19,
        span: 231..232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 20,
        span: 232..233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 10,
        column: 21,
        span: 233..234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 22,
        span: 234..235,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 11,
        column: 8,
        span: 240..243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 11,
        column: 10,
        span: 244..245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 11,
        span: 245..246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 11,
        column: 13,
        span: 247..248,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 14,
        span: 248..249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 11,
        column: 16,
        span: 250..251,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 11,
        column: 19,
        span: 252..254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 11,
        column: 21,
        span: 255..256,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 11,
        column: 24,
        span: 257..259,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 11,
        column: 0,
        span: 260..263,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 12,
        column: 0,
        span: 266..269,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 13,
        column: 0,
        span: 270..273,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 16,
        column: 9,
        span: 276..284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 16,
        column: 15,
        span: 285..290,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 16,
        span: 290..291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 16,
        column: 17,
        span: 291..292,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 18,
        span: 292..293,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 16,
        column: 22,
        span: 294..297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 23,
        span: 297..298,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 17,
        column: 8,
        span: 301..306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 17,
        column: 12,
        span: 307..310,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 17,
        column: 14,
        span: 311..312,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 17,
        column: 16,
        span: 313..314,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 17,
        column: 20,
        span: 315..318,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 17,
        column: 22,
        span: 319..320,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 8,
        span: 323..328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 18,
        column: 10,
        span: 329..330,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 12,
        span: 331..332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 18,
        column: 14,
        span: 333..334,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 18,
        column: 15,
        span: 334..335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        line: 18,
        column: 23,
        span: 335..343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 24,
        span: 343..344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 18,
        column: 25,
        span: 344..345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 26,
        span: 345..346,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 19,
        column: 6,
        span: 349..352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 19,
        column: 8,
        span: 353..354,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
        column: 10,
        span: 355..356,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 12,
        span: 356..358,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 13,
        span: 358..359,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 19,
        column: 15,
        span: 360..361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 19,
        column: 18,
        span: 361..364,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 19,
        column: 0,
        span: 365..367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 11,
        span: 399..405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 12,
        span: 405..406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 21,
        column: 18,
        span: 406..412,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 21,
        column: 19,
        span: 412..413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 21,
        column: 23,
        span: 413..417,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 24,
        span: 417..418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 21,
        column: 25,
        span: 418..419,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 21,
        column: 26,
        span: 419..420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 21,
        column: 27,
        span: 420..421,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 21,
        column: 28,
        span: 421..422,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 29,
        span: 422..423,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'- '",
        ),
        line: 21,
        column: 34,
        span: 424..428,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 21,
        column: 37,
        span: 429..431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 21,
        column: 41,
        span: 432..435,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 21,
        column: 42,
        span: 435..436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 21,
        column: 43,
        span: 436..437,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 21,
        column: 44,
        span: 437..438,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 21,
        column: 47,
        span: 439..441,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' *%d'",
        ),
        line: 21,
        column: 54,
        span: 442..448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 55,
        span: 448..449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 56,
        span: 449..450,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 22,
        column: 0,
        span: 453..456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 23,
        column: 9,
        span: 459..465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 10,
        span: 465..466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 23,
        column: 11,
        span: 466..467,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 23,
        column: 12,
        span: 467..468,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 23,
        column: 13,
        span: 468..469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        line: 23,
        column: 16,
        span: 469..472,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 23,
        column: 18,
        span: 473..474,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 20,
        span: 474..476,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 23,
        column: 21,
        span: 476..477,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 23,
        column: 24,
        span: 478..480,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 23,
        column: 28,
        span: 481..484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 29,
        span: 484..485,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 24,
        column: 0,
        span: 486..489,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 26,
        column: 9,
        span: 491..499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 26,
        column: 20,
        span: 500..510,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 21,
        span: 510..511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 26,
        column: 22,
        span: 511..512,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 23,
        span: 512..513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 26,
        column: 25,
        span: 514..515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 26,
        span: 515..516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 27,
        column: 4,
        span: 519..520,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 6,
        span: 521..522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 27,
        column: 8,
        span: 523..524,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 9,
        span: 524..525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        line: 27,
        column: 17,
        span: 525..533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 18,
        span: 533..534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 27,
        column: 19,
        span: 534..535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 20,
        span: 535..536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 28,
        column: 4,
        span: 539..540,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 6,
        span: 541..542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 28,
        column: 8,
        span: 543..544,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 9,
        span: 544..545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "listcode",
        ),
        line: 28,
        column: 17,
        span: 545..553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 18,
        span: 553..554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 28,
        column: 19,
        span: 554..555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 20,
        span: 555..556,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 29,
        column: 6,
        span: 559..562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 29,
        column: 8,
        span: 563..564,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 29,
        column: 10,
        span: 565..566,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 12,
        span: 566..568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 13,
        span: 568..569,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 29,
        column: 15,
        span: 570..571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 29,
        column: 16,
        span: 571..572,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 29,
        column: 0,
        span: 573..575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 6,
        span: 580..581,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 30,
        column: 7,
        span: 581..582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 30,
        column: 8,
        span: 582..583,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 30,
        column: 9,
        span: 583..584,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 11,
        span: 585..586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 30,
        column: 18,
        span: 587..593,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 30,
        column: 19,
        span: 593..594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 30,
        column: 23,
        span: 594..598,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 24,
        span: 598..599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 25,
        span: 599..600,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 30,
        column: 26,
        span: 600..601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 30,
        column: 27,
        span: 601..602,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 30,
        column: 28,
        span: 602..603,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 29,
        span: 603..604,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%b()'",
        ),
        line: 30,
        column: 36,
        span: 605..611,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 37,
        span: 611..612,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 30,
        column: 40,
        span: 613..615,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 41,
        span: 615..616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 31,
        column: 6,
        span: 643..644,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 31,
        column: 7,
        span: 644..645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 31,
        column: 8,
        span: 645..646,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 31,
        column: 9,
        span: 646..647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 11,
        span: 648..649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 31,
        column: 18,
        span: 650..656,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 31,
        column: 19,
        span: 656..657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 31,
        column: 23,
        span: 657..661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 24,
        span: 661..662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 31,
        column: 25,
        span: 662..663,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 31,
        column: 26,
        span: 663..664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 31,
        column: 27,
        span: 664..665,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 31,
        column: 28,
        span: 665..666,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 29,
        span: 666..667,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%b()'",
        ),
        line: 31,
        column: 36,
        span: 668..674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 37,
        span: 674..675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 31,
        column: 40,
        span: 676..678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 41,
        span: 678..679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 11,
        span: 706..712,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 12,
        span: 712..713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 32,
        column: 13,
        span: 713..714,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 32,
        column: 14,
        span: 714..715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 32,
        column: 15,
        span: 715..716,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 32,
        column: 16,
        span: 716..717,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 19,
        span: 718..720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 32,
        column: 21,
        span: 721..722,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 32,
        column: 22,
        span: 722..723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 32,
        column: 23,
        span: 723..724,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 32,
        column: 24,
        span: 724..725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 25,
        span: 725..726,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 33,
        column: 0,
        span: 729..732,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 34,
        column: 0,
        span: 733..736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 37,
        column: 6,
        span: 765..770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 7,
        span: 770..771,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 37,
        column: 15,
        span: 771..779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 16,
        span: 779..780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 17,
        span: 780..781,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 4,
        span: 784..785,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 38,
        column: 12,
        span: 785..793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 13,
        span: 793..794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 14,
        span: 794..795,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 38,
        column: 18,
        span: 796..799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 19,
        span: 799..800,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 38,
        column: 21,
        span: 801..802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 38,
        column: 23,
        span: 803..804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 24,
        span: 804..805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 25,
        span: 805..806,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 38,
        column: 27,
        span: 807..808,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 39,
        column: 4,
        span: 809..812,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 5,
        span: 812..813,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CLOSURE'",
        ),
        line: 39,
        column: 15,
        span: 814..823,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 16,
        span: 823..824,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'NEWTABLE'",
        ),
        line: 39,
        column: 27,
        span: 825..835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 28,
        span: 835..836,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABUP'",
        ),
        line: 39,
        column: 39,
        span: 837..847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 40,
        span: 847..848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        line: 39,
        column: 47,
        span: 849..855,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 48,
        span: 855..856,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETLIST'",
        ),
        line: 39,
        column: 58,
        span: 857..866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 59,
        span: 866..867,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CALL'",
        ),
        line: 39,
        column: 66,
        span: 868..874,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 67,
        span: 874..875,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 39,
        column: 76,
        span: 876..884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 77,
        span: 884..885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 43,
        column: 6,
        span: 912..917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 7,
        span: 917..918,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 43,
        column: 15,
        span: 918..926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 16,
        span: 926..927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 17,
        span: 927..928,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 44,
        column: 8,
        span: 931..936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 44,
        column: 10,
        span: 937..938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 11,
        span: 938..939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 44,
        column: 13,
        span: 940..941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 14,
        span: 941..942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 44,
        column: 0,
        span: 943..944,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 8,
        span: 947..952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 45,
        column: 10,
        span: 953..954,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 45,
        column: 11,
        span: 954..955,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 17,
        span: 956..961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 45,
        column: 19,
        span: 962..963,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 45,
        column: 20,
        span: 963..964,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 46,
        column: 8,
        span: 967..972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 46,
        column: 10,
        span: 973..974,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 11,
        span: 974..975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        line: 46,
        column: 13,
        span: 976..977,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 14,
        span: 977..978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        line: 46,
        column: 16,
        span: 979..980,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 46,
        column: 17,
        span: 980..981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 47,
        column: 4,
        span: 984..985,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 6,
        span: 986..987,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 47,
        column: 10,
        span: 988..991,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 47,
        column: 11,
        span: 991..992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 47,
        column: 13,
        span: 993..994,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 15,
        span: 995..996,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 47,
        column: 19,
        span: 997..1000,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 47,
        column: 20,
        span: 1000..1001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 47,
        column: 22,
        span: 1002..1003,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 24,
        span: 1004..1005,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 47,
        column: 28,
        span: 1006..1009,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 47,
        column: 29,
        span: 1009..1010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 47,
        column: 31,
        span: 1011..1012,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 33,
        span: 1013..1014,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 47,
        column: 37,
        span: 1015..1018,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 47,
        column: 38,
        span: 1018..1019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 47,
        column: 40,
        span: 1020..1021,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 42,
        span: 1022..1023,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 47,
        column: 46,
        span: 1024..1027,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 47,
        column: 47,
        span: 1027..1028,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 48,
        column: 4,
        span: 1029..1032,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 5,
        span: 1032..1033,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 48,
        column: 15,
        span: 1034..1043,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 16,
        span: 1043..1044,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 48,
        column: 25,
        span: 1045..1053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 26,
        span: 1053..1054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 50,
        column: 6,
        span: 1056..1061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 7,
        span: 1061..1062,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 50,
        column: 15,
        span: 1062..1070,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 16,
        span: 1070..1071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 17,
        span: 1071..1072,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 51,
        column: 8,
        span: 1075..1080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 51,
        column: 10,
        span: 1081..1082,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 11,
        span: 1082..1083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 51,
        column: 13,
        span: 1084..1085,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 14,
        span: 1085..1086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 51,
        column: 16,
        span: 1087..1088,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 17,
        span: 1088..1089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 51,
        column: 19,
        span: 1090..1091,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 51,
        column: 21,
        span: 1092..1093,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 23,
        span: 1093..1095,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 24,
        span: 1095..1096,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 26,
        span: 1096..1098,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 27,
        span: 1098..1099,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 29,
        span: 1099..1101,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 30,
        span: 1101..1102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 0,
        span: 1102..1104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 52,
        column: 4,
        span: 1107..1108,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 6,
        span: 1109..1110,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 52,
        column: 10,
        span: 1111..1114,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 52,
        column: 11,
        span: 1114..1115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 52,
        column: 13,
        span: 1116..1117,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 15,
        span: 1118..1119,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 52,
        column: 19,
        span: 1120..1123,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 52,
        column: 20,
        span: 1123..1124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 52,
        column: 22,
        span: 1125..1126,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 24,
        span: 1127..1128,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 52,
        column: 28,
        span: 1129..1132,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 52,
        column: 29,
        span: 1132..1133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 52,
        column: 31,
        span: 1134..1135,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 33,
        span: 1136..1137,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 52,
        column: 0,
        span: 1138..1141,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 53,
        column: 4,
        span: 1142..1145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 5,
        span: 1145..1146,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 53,
        column: 13,
        span: 1147..1154,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 14,
        span: 1154..1155,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 53,
        column: 22,
        span: 1156..1163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 23,
        span: 1163..1164,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 53,
        column: 31,
        span: 1165..1172,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 32,
        span: 1172..1173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 53,
        column: 40,
        span: 1174..1181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 41,
        span: 1181..1182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 53,
        column: 51,
        span: 1183..1192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 52,
        span: 1192..1193,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 53,
        column: 61,
        span: 1194..1202,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 62,
        span: 1202..1203,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 55,
        column: 0,
        span: 1205..1207,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 56,
        column: 8,
        span: 1210..1215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 56,
        column: 10,
        span: 1216..1217,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 11,
        span: 1217..1218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 56,
        column: 13,
        span: 1219..1220,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 14,
        span: 1220..1221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 56,
        column: 16,
        span: 1222..1223,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 17,
        span: 1223..1224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 56,
        column: 19,
        span: 1225..1226,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 56,
        column: 21,
        span: 1227..1228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 23,
        span: 1228..1230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 24,
        span: 1230..1231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 26,
        span: 1231..1233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 27,
        span: 1233..1234,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 29,
        span: 1234..1236,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 30,
        span: 1236..1237,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 0,
        span: 1237..1239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 57,
        column: 4,
        span: 1242..1243,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 6,
        span: 1244..1245,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 57,
        column: 10,
        span: 1246..1249,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 57,
        column: 11,
        span: 1249..1250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 57,
        column: 13,
        span: 1251..1252,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 15,
        span: 1253..1254,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 57,
        column: 19,
        span: 1255..1258,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 57,
        column: 20,
        span: 1258..1259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 57,
        column: 22,
        span: 1260..1261,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 24,
        span: 1262..1263,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 57,
        column: 28,
        span: 1264..1267,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 57,
        column: 29,
        span: 1267..1268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 57,
        column: 31,
        span: 1269..1270,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 33,
        span: 1271..1272,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 57,
        column: 0,
        span: 1273..1276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
        column: 9,
        span: 1279..1285,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 10,
        span: 1285..1286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
        column: 11,
        span: 1286..1287,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 14,
        span: 1288..1290,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 58,
        column: 18,
        span: 1291..1294,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 58,
        column: 22,
        span: 1295..1298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 58,
        column: 24,
        span: 1299..1300,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 27,
        span: 1301..1303,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 58,
        column: 31,
        span: 1304..1307,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 58,
        column: 35,
        span: 1308..1311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 58,
        column: 37,
        span: 1312..1313,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 40,
        span: 1314..1316,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 58,
        column: 44,
        span: 1317..1320,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 58,
        column: 48,
        span: 1321..1324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 58,
        column: 50,
        span: 1325..1326,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 53,
        span: 1327..1329,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 58,
        column: 57,
        span: 1330..1333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 58,
        span: 1333..1334,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 59,
        column: 0,
        span: 1335..1338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 63,
        column: 6,
        span: 1358..1363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 7,
        span: 1363..1364,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 63,
        column: 15,
        span: 1364..1372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 16,
        span: 1372..1373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 63,
        column: 17,
        span: 1373..1374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 18,
        span: 1374..1375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 63,
        column: 20,
        span: 1376..1377,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 21,
        span: 1377..1378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 63,
        column: 23,
        span: 1379..1380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 24,
        span: 1380..1381,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 63,
        column: 31,
        span: 1382..1388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 63,
        column: 33,
        span: 1389..1390,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 63,
        column: 37,
        span: 1391..1394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 38,
        span: 1394..1395,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 63,
        column: 47,
        span: 1396..1404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 48,
        span: 1404..1405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 67,
        column: 6,
        span: 1426..1431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 7,
        span: 1431..1432,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 67,
        column: 15,
        span: 1432..1440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 16,
        span: 1440..1441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 17,
        span: 1441..1442,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 67,
        column: 23,
        span: 1443..1448,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 67,
        column: 28,
        span: 1449..1453,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 67,
        column: 31,
        span: 1454..1456,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 67,
        column: 37,
        span: 1457..1462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 67,
        column: 39,
        span: 1463..1464,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 67,
        column: 41,
        span: 1465..1466,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 67,
        column: 43,
        span: 1467..1468,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 44,
        span: 1467..1469,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 67,
        column: 48,
        span: 1470..1473,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 67,
        column: 52,
        span: 1474..1477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 53,
        span: 1477..1478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 68,
        column: 10,
        span: 1481..1488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 11,
        span: 1488..1489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 68,
        column: 17,
        span: 1490..1495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 18,
        span: 1495..1496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 68,
        column: 27,
        span: 1497..1505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 28,
        span: 1505..1506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 70,
        column: 6,
        span: 1508..1513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 7,
        span: 1513..1514,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 70,
        column: 15,
        span: 1514..1522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 16,
        span: 1522..1523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 17,
        span: 1523..1524,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 70,
        column: 23,
        span: 1525..1530,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 25,
        span: 1530..1532,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 70,
        column: 28,
        span: 1533..1535,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 70,
        column: 34,
        span: 1536..1541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 70,
        column: 36,
        span: 1542..1543,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
        column: 38,
        span: 1544..1545,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 70,
        column: 40,
        span: 1546..1547,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 41,
        span: 1546..1548,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 70,
        column: 45,
        span: 1549..1552,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 70,
        column: 49,
        span: 1553..1556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 50,
        span: 1556..1557,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 71,
        column: 10,
        span: 1560..1567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 11,
        span: 1567..1568,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 71,
        column: 17,
        span: 1569..1574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 18,
        span: 1574..1575,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 71,
        column: 27,
        span: 1576..1584,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 28,
        span: 1584..1585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 73,
        column: 6,
        span: 1587..1592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 7,
        span: 1592..1593,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 73,
        column: 15,
        span: 1593..1601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 16,
        span: 1601..1602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 17,
        span: 1602..1603,
    },
    Token {
        kind: Repeat,
        lexeme: Symbol(
            "repeat",
        ),
        line: 73,
        column: 24,
        span: 1604..1610,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 73,
        column: 30,
        span: 1611..1616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 73,
        column: 32,
        span: 1617..1618,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 34,
        span: 1619..1620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 36,
        span: 1620..1622,
    },
    Token {
        kind: Until,
        lexeme: Symbol(
            "until",
        ),
        line: 73,
        column: 42,
        span: 1623..1628,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 73,
        column: 47,
        span: 1629..1633,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 73,
        column: 51,
        span: 1634..1637,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 52,
        span: 1637..1638,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 74,
        column: 10,
        span: 1641..1648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 11,
        span: 1648..1649,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 74,
        column: 20,
        span: 1650..1658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 21,
        span: 1658..1659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 78,
        column: 6,
        span: 1685..1690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 7,
        span: 1690..1691,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 78,
        column: 15,
        span: 1691..1699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 16,
        span: 1699..1700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
        column: 17,
        span: 1700..1701,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 18,
        span: 1701..1702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 78,
        column: 20,
        span: 1703..1704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 21,
        span: 1704..1705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 78,
        column: 23,
        span: 1706..1707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 24,
        span: 1707..1708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 78,
        column: 26,
        span: 1709..1710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 27,
        span: 1710..1711,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 78,
        column: 34,
        span: 1712..1718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
        column: 36,
        span: 1719..1720,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 78,
        column: 39,
        span: 1721..1723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 78,
        column: 41,
        span: 1724..1725,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 78,
        column: 44,
        span: 1726..1728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 78,
        column: 46,
        span: 1729..1730,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 78,
        column: 49,
        span: 1731..1733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 78,
        column: 51,
        span: 1734..1735,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 78,
        column: 55,
        span: 1736..1739,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 56,
        span: 1739..1740,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 79,
        column: 9,
        span: 1743..1749,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 10,
        span: 1749..1750,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 79,
        column: 17,
        span: 1751..1757,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 18,
        span: 1757..1758,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 79,
        column: 25,
        span: 1759..1765,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 26,
        span: 1765..1766,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 79,
        column: 33,
        span: 1767..1773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 34,
        span: 1773..1774,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'CONCAT'",
        ),
        line: 79,
        column: 43,
        span: 1775..1783,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 44,
        span: 1783..1784,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 79,
        column: 53,
        span: 1785..1793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 54,
        span: 1793..1794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 82,
        column: 6,
        span: 1803..1808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 7,
        span: 1808..1809,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 82,
        column: 15,
        span: 1809..1817,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 16,
        span: 1817..1818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 17,
        span: 1818..1819,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 82,
        column: 24,
        span: 1820..1826,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 82,
        column: 28,
        span: 1827..1830,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 82,
        column: 32,
        span: 1831..1834,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 82,
        column: 36,
        span: 1835..1838,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 82,
        column: 40,
        span: 1839..1842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 41,
        span: 1842..1843,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        line: 82,
        column: 52,
        span: 1844..1854,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 53,
        span: 1854..1855,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 82,
        column: 62,
        span: 1856..1864,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 63,
        span: 1864..1865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 83,
        column: 6,
        span: 1866..1871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 7,
        span: 1871..1872,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 83,
        column: 15,
        span: 1872..1880,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 16,
        span: 1880..1881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 17,
        span: 1881..1882,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 83,
        column: 24,
        span: 1883..1889,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 83,
        column: 28,
        span: 1890..1893,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 83,
        column: 32,
        span: 1894..1897,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 83,
        column: 38,
        span: 1898..1903,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 83,
        column: 42,
        span: 1904..1907,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 43,
        span: 1907..1908,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        line: 83,
        column: 54,
        span: 1909..1919,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 55,
        span: 1919..1920,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 83,
        column: 64,
        span: 1921..1929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 65,
        span: 1929..1930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 84,
        column: 6,
        span: 1931..1936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 7,
        span: 1936..1937,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 84,
        column: 15,
        span: 1937..1945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 16,
        span: 1945..1946,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 17,
        span: 1946..1947,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 84,
        column: 24,
        span: 1948..1954,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 84,
        column: 28,
        span: 1955..1958,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 84,
        column: 32,
        span: 1959..1962,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 84,
        column: 37,
        span: 1963..1967,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 84,
        column: 41,
        span: 1968..1971,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 42,
        span: 1971..1972,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        line: 84,
        column: 53,
        span: 1973..1983,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 54,
        span: 1983..1984,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 84,
        column: 63,
        span: 1985..1993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 64,
        span: 1993..1994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 85,
        column: 6,
        span: 1995..2000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 7,
        span: 2000..2001,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 85,
        column: 15,
        span: 2001..2009,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 16,
        span: 2009..2010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 17,
        span: 2010..2011,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 85,
        column: 24,
        span: 2012..2018,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 85,
        column: 28,
        span: 2019..2022,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 85,
        column: 32,
        span: 2023..2026,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 34,
        span: 2026..2028,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 85,
        column: 38,
        span: 2029..2032,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 39,
        span: 2032..2033,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADBOOL'",
        ),
        line: 85,
        column: 50,
        span: 2034..2044,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 51,
        span: 2044..2045,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 85,
        column: 60,
        span: 2046..2054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 61,
        span: 2054..2055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 88,
        column: 6,
        span: 2084..2089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 7,
        span: 2089..2090,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 88,
        column: 15,
        span: 2090..2098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 16,
        span: 2098..2099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 17,
        span: 2099..2100,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 89,
        column: 10,
        span: 2105..2110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 89,
        column: 12,
        span: 2111..2112,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 13,
        span: 2112..2113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 89,
        column: 15,
        span: 2114..2115,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 16,
        span: 2115..2116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 89,
        column: 18,
        span: 2117..2118,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 19,
        span: 2118..2119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 89,
        column: 0,
        span: 2120..2121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 90,
        column: 6,
        span: 2126..2127,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 90,
        column: 8,
        span: 2128..2129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 90,
        column: 10,
        span: 2130..2131,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 90,
        column: 12,
        span: 2132..2133,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 0,
        span: 2133..2135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 91,
        column: 6,
        span: 2140..2141,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 91,
        column: 7,
        span: 2141..2142,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 8,
        span: 2141..2143,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 91,
        column: 9,
        span: 2143..2144,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 10,
        span: 2144..2145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 91,
        column: 12,
        span: 2146..2147,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 91,
        column: 13,
        span: 2147..2148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 91,
        column: 14,
        span: 2148..2149,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 91,
        column: 15,
        span: 2149..2150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 17,
        span: 2151..2152,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 91,
        column: 19,
        span: 2153..2154,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 20,
        span: 2154..2155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 21,
        span: 2155..2156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 91,
        column: 22,
        span: 2156..2157,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 91,
        column: 24,
        span: 2158..2159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 91,
        column: 26,
        span: 2160..2161,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 91,
        column: 28,
        span: 2162..2163,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 91,
        column: 30,
        span: 2164..2165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 91,
        column: 34,
        span: 2164..2169,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 91,
        column: 36,
        span: 2170..2171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 91,
        column: 38,
        span: 2172..2173,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 91,
        column: 39,
        span: 2173..2174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 91,
        column: 40,
        span: 2174..2175,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 91,
        column: 41,
        span: 2175..2176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 42,
        span: 2176..2177,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 91,
        column: 44,
        span: 2178..2179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 91,
        column: 46,
        span: 2180..2181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 47,
        span: 2181..2182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 91,
        column: 48,
        span: 2182..2183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 49,
        span: 2183..2184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 50,
        span: 2184..2185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 91,
        column: 0,
        span: 2186..2187,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 92,
        column: 6,
        span: 2190..2193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 7,
        span: 2193..2194,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 93,
        column: 12,
        span: 2197..2206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 13,
        span: 2206..2207,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MUL'",
        ),
        line: 94,
        column: 8,
        span: 2210..2215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 9,
        span: 2215..2216,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIV'",
        ),
        line: 95,
        column: 8,
        span: 2219..2224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 9,
        span: 2224..2225,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ADD'",
        ),
        line: 95,
        column: 15,
        span: 2226..2231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 16,
        span: 2231..2232,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABLE'",
        ),
        line: 95,
        column: 27,
        span: 2233..2243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 28,
        span: 2243..2244,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SUB'",
        ),
        line: 95,
        column: 34,
        span: 2245..2250,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 35,
        span: 2250..2251,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABLE'",
        ),
        line: 95,
        column: 46,
        span: 2252..2262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 47,
        span: 2262..2263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'POW'",
        ),
        line: 95,
        column: 53,
        span: 2264..2269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 54,
        span: 2269..2270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'UNM'",
        ),
        line: 96,
        column: 8,
        span: 2273..2278,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 9,
        span: 2278..2279,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 96,
        column: 20,
        span: 2280..2290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 21,
        span: 2290..2291,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 96,
        column: 32,
        span: 2292..2302,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 33,
        span: 2302..2303,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 96,
        column: 42,
        span: 2304..2312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 43,
        span: 2312..2313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 100,
        column: 6,
        span: 2346..2351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 7,
        span: 2351..2352,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 100,
        column: 15,
        span: 2352..2360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 16,
        span: 2360..2361,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 17,
        span: 2361..2362,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 101,
        column: 10,
        span: 2367..2372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 101,
        column: 12,
        span: 2373..2374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 13,
        span: 2374..2375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 101,
        column: 0,
        span: 2376..2377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 102,
        column: 6,
        span: 2382..2383,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 102,
        column: 7,
        span: 2383..2384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 102,
        column: 8,
        span: 2384..2385,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
        column: 10,
        span: 2386..2387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 102,
        column: 0,
        span: 2387..2389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 103,
        column: 6,
        span: 2394..2395,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
        column: 7,
        span: 2395..2396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 103,
        column: 8,
        span: 2396..2397,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 103,
        column: 10,
        span: 2398..2399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 103,
        column: 0,
        span: 2400..2401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 104,
        column: 6,
        span: 2406..2407,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 104,
        column: 7,
        span: 2407..2408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 104,
        column: 8,
        span: 2408..2409,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 104,
        column: 9,
        span: 2409..2410,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 104,
        column: 11,
        span: 2411..2412,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'y'",
        ),
        line: 104,
        column: 15,
        span: 2413..2416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 6,
        span: 2421..2422,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 8,
        span: 2423..2424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 105,
        column: 10,
        span: 2424..2426,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 105,
        column: 12,
        span: 2427..2428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 0,
        span: 2429..2430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 106,
        column: 6,
        span: 2435..2436,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 106,
        column: 8,
        span: 2437..2438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 106,
        column: 10,
        span: 2438..2440,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 106,
        column: 12,
        span: 2441..2442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 106,
        column: 0,
        span: 2443..2444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 107,
        column: 6,
        span: 2449..2450,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 8,
        span: 2451..2452,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 10,
        span: 2452..2454,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 107,
        column: 12,
        span: 2455..2456,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 0,
        span: 2456..2458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
        column: 6,
        span: 2463..2464,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 108,
        column: 7,
        span: 2464..2465,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 108,
        column: 11,
        span: 2465..2469,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 108,
        column: 12,
        span: 2469..2470,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
        column: 14,
        span: 2471..2472,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 108,
        column: 0,
        span: 2473..2478,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 109,
        column: 6,
        span: 2481..2484,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 7,
        span: 2484..2485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 110,
        column: 12,
        span: 2488..2497,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 13,
        span: 2497..2498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 111,
        column: 13,
        span: 2501..2511,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 14,
        span: 2511..2512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 111,
        column: 25,
        span: 2513..2523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 26,
        span: 2523..2524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 111,
        column: 37,
        span: 2525..2535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 38,
        span: 2535..2536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SUB'",
        ),
        line: 111,
        column: 44,
        span: 2537..2542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 45,
        span: 2542..2543,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'DIV'",
        ),
        line: 111,
        column: 51,
        span: 2544..2549,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 52,
        span: 2549..2550,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 111,
        column: 60,
        span: 2551..2558,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 61,
        span: 2558..2559,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 112,
        column: 13,
        span: 2562..2572,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 14,
        span: 2572..2573,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 112,
        column: 23,
        span: 2574..2582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 24,
        span: 2582..2583,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 115,
        column: 6,
        span: 2605..2610,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 115,
        column: 15,
        span: 2611..2619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 115,
        column: 17,
        span: 2620..2621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 18,
        span: 2621..2622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 19,
        span: 2622..2623,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 115,
        column: 26,
        span: 2624..2630,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 115,
        column: 28,
        span: 2631..2632,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 29,
        span: 2632..2633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 30,
        span: 2633..2634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 31,
        span: 2633..2635,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 115,
        column: 33,
        span: 2636..2637,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 35,
        span: 2637..2639,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 115,
        column: 37,
        span: 2640..2641,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 115,
        column: 39,
        span: 2642..2643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 40,
        span: 2643..2644,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 115,
        column: 41,
        span: 2644..2645,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 42,
        span: 2644..2646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 43,
        span: 2646..2647,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 44,
        span: 2647..2648,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 115,
        column: 46,
        span: 2649..2650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 48,
        span: 2650..2652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 49,
        span: 2652..2653,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 115,
        column: 51,
        span: 2654..2655,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 53,
        span: 2655..2657,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 115,
        column: 55,
        span: 2658..2659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 57,
        span: 2659..2661,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 115,
        column: 59,
        span: 2662..2663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 61,
        span: 2663..2665,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 115,
        column: 0,
        span: 2666..2669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 117,
        column: 6,
        span: 2671..2676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 7,
        span: 2676..2677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 117,
        column: 8,
        span: 2677..2678,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 9,
        span: 2678..2679,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADK'",
        ),
        line: 117,
        column: 17,
        span: 2680..2687,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 18,
        span: 2687..2688,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 117,
        column: 27,
        span: 2689..2697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 28,
        span: 2697..2698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
        column: 7,
        span: 2699..2705,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 8,
        span: 2705..2706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 118,
        column: 9,
        span: 2706..2707,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 10,
        span: 2707..2708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 11,
        span: 2708..2709,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 14,
        span: 2710..2712,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 118,
        column: 16,
        span: 2713..2714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 17,
        span: 2713..2715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 18,
        span: 2715..2716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 122,
        column: 6,
        span: 2754..2759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 7,
        span: 2759..2760,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 122,
        column: 15,
        span: 2760..2768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 16,
        span: 2768..2769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 17,
        span: 2769..2770,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 122,
        column: 24,
        span: 2771..2777,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 122,
        column: 26,
        span: 2778..2779,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 122,
        column: 29,
        span: 2779..2782,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 122,
        column: 33,
        span: 2783..2786,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 34,
        span: 2786..2787,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 123,
        column: 12,
        span: 2790..2799,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 13,
        span: 2799..2800,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'UNM'",
        ),
        line: 123,
        column: 19,
        span: 2801..2806,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 20,
        span: 2806..2807,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 123,
        column: 29,
        span: 2808..2816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 30,
        span: 2816..2817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 126,
        column: 6,
        span: 2820..2825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 7,
        span: 2825..2826,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 126,
        column: 15,
        span: 2826..2834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 16,
        span: 2834..2835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 17,
        span: 2835..2836,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 127,
        column: 10,
        span: 2841..2846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 127,
        column: 12,
        span: 2847..2848,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 13,
        span: 2848..2849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 127,
        column: 15,
        span: 2850..2851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 127,
        column: 16,
        span: 2851..2852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 127,
        column: 0,
        span: 2853..2854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 128,
        column: 6,
        span: 2859..2860,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 128,
        column: 7,
        span: 2860..2861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 128,
        column: 8,
        span: 2861..2862,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 128,
        column: 9,
        span: 2862..2863,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 10,
        span: 2863..2864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 128,
        column: 12,
        span: 2865..2866,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 14,
        span: 2867..2868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 128,
        column: 16,
        span: 2869..2870,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 17,
        span: 2870..2871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 128,
        column: 0,
        span: 2872..2873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 129,
        column: 6,
        span: 2878..2879,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 129,
        column: 7,
        span: 2879..2880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 129,
        column: 8,
        span: 2880..2881,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 129,
        column: 9,
        span: 2881..2882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 10,
        span: 2882..2883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 129,
        column: 12,
        span: 2884..2885,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 14,
        span: 2886..2887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 129,
        column: 16,
        span: 2888..2889,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 17,
        span: 2889..2890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 129,
        column: 0,
        span: 2891..2892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 130,
        column: 6,
        span: 2897..2898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 7,
        span: 2898..2899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 130,
        column: 9,
        span: 2900..2901,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
        column: 11,
        span: 2902..2903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 130,
        column: 13,
        span: 2904..2905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 14,
        span: 2905..2906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 130,
        column: 0,
        span: 2907..2908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
        column: 6,
        span: 2913..2914,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 131,
        column: 8,
        span: 2915..2916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 131,
        column: 0,
        span: 2917..2918,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 132,
        column: 6,
        span: 2921..2924,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 7,
        span: 2924..2925,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'LOADNIL'",
        ),
        line: 133,
        column: 12,
        span: 2928..2937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 13,
        span: 2937..2938,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 134,
        column: 9,
        span: 2941..2947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 10,
        span: 2947..2948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 134,
        column: 17,
        span: 2949..2955,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 18,
        span: 2955..2956,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 134,
        column: 29,
        span: 2957..2967,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 30,
        span: 2967..2968,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 135,
        column: 9,
        span: 2971..2977,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 10,
        span: 2977..2978,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 135,
        column: 17,
        span: 2979..2985,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 18,
        span: 2985..2986,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 135,
        column: 25,
        span: 2987..2993,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 26,
        span: 2993..2994,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABLE'",
        ),
        line: 135,
        column: 37,
        span: 2995..3005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 38,
        span: 3005..3006,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 136,
        column: 9,
        span: 3009..3015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 10,
        span: 3015..3016,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 136,
        column: 17,
        span: 3017..3023,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 18,
        span: 3023..3024,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'MOVE'",
        ),
        line: 136,
        column: 25,
        span: 3025..3031,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 26,
        span: 3031..3032,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 138,
        column: 11,
        span: 3058..3066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 12,
        span: 3066..3067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 142,
        column: 11,
        span: 3093..3103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 12,
        span: 3103..3104,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 142,
        column: 20,
        span: 3104..3112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 21,
        span: 3112..3113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 22,
        span: 3113..3114,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 143,
        column: 7,
        span: 3119..3121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 9,
        span: 3122..3123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 143,
        column: 10,
        span: 3123..3124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 13,
        span: 3125..3127,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 143,
        column: 17,
        span: 3128..3131,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 18,
        span: 3131..3132,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 143,
        column: 23,
        span: 3133..3137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 143,
        column: 25,
        span: 3138..3139,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 143,
        column: 27,
        span: 3140..3141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 29,
        span: 3141..3143,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 143,
        column: 0,
        span: 3144..3147,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 144,
        column: 6,
        span: 3152..3153,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 144,
        column: 9,
        span: 3154..3156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 144,
        column: 11,
        span: 3157..3158,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 144,
        column: 14,
        span: 3159..3161,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 144,
        column: 18,
        span: 3162..3165,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 144,
        column: 23,
        span: 3166..3170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 144,
        column: 25,
        span: 3171..3172,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 144,
        column: 27,
        span: 3173..3174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 29,
        span: 3174..3176,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 144,
        column: 0,
        span: 3177..3180,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 145,
        column: 6,
        span: 3183..3186,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 7,
        span: 3186..3187,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 146,
        column: 11,
        span: 3190..3198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 12,
        span: 3198..3199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 13,
        span: 3199..3200,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 147,
        column: 7,
        span: 3205..3207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 9,
        span: 3208..3209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 147,
        column: 10,
        span: 3209..3210,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 13,
        span: 3211..3213,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 15,
        span: 3213..3215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 16,
        span: 3215..3216,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 147,
        column: 21,
        span: 3217..3221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 147,
        column: 23,
        span: 3222..3223,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
        column: 25,
        span: 3224..3225,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 27,
        span: 3225..3227,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 147,
        column: 0,
        span: 3228..3231,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 148,
        column: 6,
        span: 3236..3237,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 148,
        column: 9,
        span: 3238..3240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 148,
        column: 11,
        span: 3241..3242,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 148,
        column: 14,
        span: 3243..3245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 16,
        span: 3245..3247,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 148,
        column: 21,
        span: 3248..3252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 148,
        column: 23,
        span: 3253..3254,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 148,
        column: 25,
        span: 3255..3256,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 148,
        column: 27,
        span: 3256..3258,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 148,
        column: 0,
        span: 3259..3262,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 149,
        column: 6,
        span: 3265..3268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 7,
        span: 3268..3269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 151,
        column: 6,
        span: 3271..3276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 7,
        span: 3276..3277,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 151,
        column: 15,
        span: 3277..3285,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 16,
        span: 3285..3286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 17,
        span: 3286..3287,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 151,
        column: 20,
        span: 3288..3290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 151,
        column: 22,
        span: 3291..3292,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 151,
        column: 25,
        span: 3293..3295,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 151,
        column: 29,
        span: 3296..3299,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 151,
        column: 34,
        span: 3300..3304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 151,
        column: 36,
        span: 3305..3306,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 151,
        column: 38,
        span: 3307..3308,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 40,
        span: 3308..3310,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 151,
        column: 44,
        span: 3311..3314,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 151,
        column: 48,
        span: 3315..3318,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 49,
        span: 3318..3319,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'GETTABUP'",
        ),
        line: 152,
        column: 13,
        span: 3322..3332,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 14,
        span: 3332..3333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQ'",
        ),
        line: 152,
        column: 19,
        span: 3334..3338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 20,
        span: 3338..3339,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 152,
        column: 26,
        span: 3340..3345,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 27,
        span: 3345..3346,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'SETTABUP'",
        ),
        line: 152,
        column: 38,
        span: 3347..3357,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 39,
        span: 3357..3358,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 152,
        column: 48,
        span: 3359..3367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 49,
        span: 3367..3368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 155,
        column: 11,
        span: 3383..3393,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 12,
        span: 3393..3394,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 155,
        column: 20,
        span: 3394..3402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 21,
        span: 3402..3403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 22,
        span: 3403..3404,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 156,
        column: 10,
        span: 3409..3414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 156,
        column: 12,
        span: 3415..3416,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 156,
        column: 13,
        span: 3416..3417,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 156,
        column: 16,
        span: 3418..3420,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 156,
        column: 20,
        span: 3421..3424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 22,
        span: 3425..3426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 156,
        column: 23,
        span: 3426..3427,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 156,
        column: 26,
        span: 3428..3430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 156,
        column: 28,
        span: 3431..3432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 29,
        span: 3432..3433,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 156,
        column: 34,
        span: 3434..3438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 156,
        column: 36,
        span: 3439..3440,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 156,
        column: 38,
        span: 3441..3442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 156,
        column: 40,
        span: 3443..3444,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 156,
        column: 0,
        span: 3445..3448,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 157,
        column: 6,
        span: 3451..3454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 7,
        span: 3454..3455,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 158,
        column: 11,
        span: 3458..3466,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 12,
        span: 3466..3467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 13,
        span: 3467..3468,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 159,
        column: 10,
        span: 3473..3478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 159,
        column: 12,
        span: 3479..3480,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 159,
        column: 13,
        span: 3480..3481,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 159,
        column: 16,
        span: 3482..3484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 18,
        span: 3485..3486,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 159,
        column: 21,
        span: 3486..3489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 159,
        column: 23,
        span: 3490..3491,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 159,
        column: 27,
        span: 3492..3495,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 159,
        column: 31,
        span: 3496..3499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 159,
        column: 33,
        span: 3500..3501,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 34,
        span: 3501..3502,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 159,
        column: 39,
        span: 3503..3507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 159,
        column: 41,
        span: 3508..3509,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 159,
        column: 43,
        span: 3510..3511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 159,
        column: 45,
        span: 3512..3513,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 159,
        column: 0,
        span: 3514..3517,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 160,
        column: 6,
        span: 3520..3523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 7,
        span: 3523..3524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 162,
        column: 11,
        span: 3526..3536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 12,
        span: 3536..3537,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 162,
        column: 20,
        span: 3537..3545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 21,
        span: 3545..3546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 162,
        column: 22,
        span: 3546..3547,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 23,
        span: 3547..3548,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 163,
        column: 10,
        span: 3553..3558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 163,
        column: 12,
        span: 3559..3560,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 163,
        column: 13,
        span: 3560..3561,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 163,
        column: 20,
        span: 3562..3568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 22,
        span: 3568..3570,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 163,
        column: 25,
        span: 3571..3573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 163,
        column: 27,
        span: 3574..3575,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 163,
        column: 31,
        span: 3576..3579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 163,
        column: 33,
        span: 3580..3581,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 163,
        column: 36,
        span: 3582..3584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 163,
        column: 0,
        span: 3585..3586,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 164,
        column: 6,
        span: 3589..3592,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 164,
        column: 7,
        span: 3592..3593,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 165,
        column: 11,
        span: 3596..3604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 12,
        span: 3604..3605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 165,
        column: 13,
        span: 3605..3606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 14,
        span: 3606..3607,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 166,
        column: 10,
        span: 3612..3617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 166,
        column: 12,
        span: 3618..3619,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 166,
        column: 13,
        span: 3619..3620,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 166,
        column: 20,
        span: 3621..3627,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 166,
        column: 24,
        span: 3628..3631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 26,
        span: 3632..3633,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 166,
        column: 29,
        span: 3633..3636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 31,
        span: 3637..3638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 166,
        column: 32,
        span: 3638..3639,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 166,
        column: 35,
        span: 3640..3642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 37,
        span: 3642..3644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 38,
        span: 3644..3645,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 166,
        column: 41,
        span: 3646..3648,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 166,
        column: 45,
        span: 3649..3652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 47,
        span: 3653..3654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 166,
        column: 48,
        span: 3654..3655,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 166,
        column: 51,
        span: 3656..3658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 166,
        column: 53,
        span: 3659..3660,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 54,
        span: 3660..3661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 55,
        span: 3661..3662,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 167,
        column: 6,
        span: 3665..3668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 7,
        span: 3668..3669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 171,
        column: 6,
        span: 3679..3684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 7,
        span: 3684..3685,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 171,
        column: 15,
        span: 3685..3693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 16,
        span: 3693..3694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 171,
        column: 17,
        span: 3694..3695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 18,
        span: 3695..3696,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 172,
        column: 5,
        span: 3699..3701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 172,
        column: 7,
        span: 3702..3703,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 172,
        column: 10,
        span: 3704..3706,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 12,
        span: 3706..3708,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 172,
        column: 0,
        span: 3709..3713,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 173,
        column: 9,
        span: 3716..3722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 173,
        column: 11,
        span: 3723..3724,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 14,
        span: 3725..3727,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 16,
        span: 3727..3729,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 173,
        column: 0,
        span: 3730..3734,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 174,
        column: 9,
        span: 3737..3743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 174,
        column: 11,
        span: 3744..3745,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 174,
        column: 14,
        span: 3746..3748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 16,
        span: 3748..3750,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 174,
        column: 0,
        span: 3751..3755,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 175,
        column: 0,
        span: 3758..3762,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 176,
        column: 7,
        span: 3767..3769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 176,
        column: 9,
        span: 3770..3771,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 176,
        column: 12,
        span: 3772..3774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 14,
        span: 3774..3776,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 176,
        column: 0,
        span: 3777..3781,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 177,
        column: 0,
        span: 3786..3790,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 178,
        column: 0,
        span: 3795..3798,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 179,
        column: 0,
        span: 3801..3804,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 180,
        column: 4,
        span: 3805..3808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 5,
        span: 3808..3809,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQ'",
        ),
        line: 180,
        column: 10,
        span: 3810..3814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 11,
        span: 3814..3815,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 180,
        column: 17,
        span: 3816..3821,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 18,
        span: 3821..3822,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQ'",
        ),
        line: 180,
        column: 23,
        span: 3823..3827,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 24,
        span: 3827..3828,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 180,
        column: 30,
        span: 3829..3834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 31,
        span: 3834..3835,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQ'",
        ),
        line: 180,
        column: 36,
        span: 3836..3840,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 37,
        span: 3840..3841,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 180,
        column: 43,
        span: 3842..3847,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 44,
        span: 3847..3848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'EQ'",
        ),
        line: 180,
        column: 49,
        span: 3849..3853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 50,
        span: 3853..3854,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 180,
        column: 56,
        span: 3855..3860,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 57,
        span: 3860..3861,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'JMP'",
        ),
        line: 180,
        column: 63,
        span: 3862..3867,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 64,
        span: 3867..3868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'RETURN'",
        ),
        line: 180,
        column: 73,
        span: 3869..3877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 74,
        span: 3877..3878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 182,
        column: 11,
        span: 3880..3890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 12,
        span: 3890..3891,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 183,
        column: 11,
        span: 3894..3902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 12,
        span: 3902..3903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 183,
        column: 13,
        span: 3903..3904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 14,
        span: 3904..3905,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 183,
        column: 20,
        span: 3906..3911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 183,
        column: 22,
        span: 3912..3913,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 183,
        column: 24,
        span: 3914..3915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 27,
        span: 3915..3918,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 183,
        column: 30,
        span: 3919..3921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 183,
        column: 32,
        span: 3922..3923,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 183,
        column: 34,
        span: 3924..3925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 183,
        column: 36,
        span: 3926..3927,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 183,
        column: 38,
        span: 3928..3929,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 40,
        span: 3929..3931,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 183,
        column: 44,
        span: 3932..3935,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 183,
        column: 48,
        span: 3936..3939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 49,
        span: 3939..3940,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 184,
        column: 11,
        span: 3943..3951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 12,
        span: 3951..3952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 184,
        column: 13,
        span: 3952..3953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 14,
        span: 3953..3954,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 185,
        column: 7,
        span: 3959..3961,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 185,
        column: 11,
        span: 3962..3965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 13,
        span: 3966..3967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 185,
        column: 14,
        span: 3967..3968,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 185,
        column: 16,
        span: 3969..3970,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 19,
        span: 3970..3973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 20,
        span: 3973..3974,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 185,
        column: 25,
        span: 3975..3979,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 185,
        column: 0,
        span: 3980..3983,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 186,
        column: 6,
        span: 3988..3989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 186,
        column: 8,
        span: 3990..3991,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 10,
        span: 3992..3993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 186,
        column: 12,
        span: 3994..3995,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 186,
        column: 14,
        span: 3996..3997,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 16,
        span: 3997..3999,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 186,
        column: 17,
        span: 3999..4000,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 187,
        column: 0,
        span: 4003..4006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 2,
        span: 4007..4008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkequal",
        ),
        line: 190,
        column: 11,
        span: 4010..4020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 12,
        span: 4020..4021,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 191,
        column: 11,
        span: 4024..4032,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 12,
        span: 4032..4033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 191,
        column: 13,
        span: 4033..4034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 14,
        span: 4034..4035,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 191,
        column: 20,
        span: 4036..4041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 191,
        column: 22,
        span: 4042..4043,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 191,
        column: 24,
        span: 4044..4045,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 27,
        span: 4045..4048,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 191,
        column: 30,
        span: 4049..4051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 191,
        column: 32,
        span: 4052..4053,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 191,
        column: 34,
        span: 4054..4055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 191,
        column: 36,
        span: 4056..4057,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 191,
        column: 38,
        span: 4058..4059,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 40,
        span: 4059..4061,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 191,
        column: 44,
        span: 4062..4065,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 191,
        column: 48,
        span: 4066..4069,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 49,
        span: 4069..4070,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 192,
        column: 11,
        span: 4073..4081,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 12,
        span: 4081..4082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 192,
        column: 13,
        span: 4082..4083,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 14,
        span: 4083..4084,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 193,
        column: 10,
        span: 4089..4094,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 193,
        column: 15,
        span: 4095..4099,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 193,
        column: 0,
        span: 4100..4102,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 194,
        column: 9,
        span: 4109..4111,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 194,
        column: 13,
        span: 4112..4115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 15,
        span: 4116..4117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 194,
        column: 16,
        span: 4117..4118,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 194,
        column: 18,
        span: 4119..4120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 21,
        span: 4120..4123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 22,
        span: 4123..4124,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 194,
        column: 27,
        span: 4125..4129,
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        line: 194,
        column: 33,
        span: 4130..4135,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 194,
        column: 0,
        span: 4136..4139,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 195,
        column: 8,
        span: 4146..4147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 195,
        column: 10,
        span: 4148..4149,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
        column: 12,
        span: 4150..4151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 195,
        column: 14,
        span: 4152..4153,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 195,
        column: 16,
        span: 4154..4155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 18,
        span: 4155..4157,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 195,
        column: 19,
        span: 4157..4158,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 196,
        column: 0,
        span: 4163..4166,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 197,
        column: 0,
        span: 4169..4172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 2,
        span: 4173..4174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 200,
        column: 6,
        span: 4176..4181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 200,
        column: 11,
        span: 4182..4186,
    },
]
