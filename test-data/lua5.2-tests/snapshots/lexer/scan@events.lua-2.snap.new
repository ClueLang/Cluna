---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/events.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "'testing metatables'",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 3,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 3,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 3,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 3,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 3,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "_ENV",
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 5,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 5,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 5,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 5,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 5,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 5,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 5,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 5,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 5,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 7,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 7,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 9,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 10,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 10,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 10,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 10,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 10,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 10,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 10,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 10,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 11,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 12,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 12,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 12,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 13,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "B",
        line: 14,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 16,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 16,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 16,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 16,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 17,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 17,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 17,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 17,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 17,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 17,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 18,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 18,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 18,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 18,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 19,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 19,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 19,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 19,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "__metatable",
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 19,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "__tostring",
        line: 20,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 20,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 20,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "name",
        line: 20,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 20,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 21,
    },
    Token {
        kind: String,
        lexeme: "\"xuxu\"",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 22,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 24,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 24,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 24,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 24,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 24,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 24,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 24,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 25,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "name",
        line: 25,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"gororoba\"",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "tostring",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 26,
    },
    Token {
        kind: String,
        lexeme: "\"gororoba\"",
        line: 26,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 26,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 28,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: String,
        lexeme: "\"10\"",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: String,
        lexeme: "\"20\"",
        line: 28,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 28,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 29,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 29,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 31,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 31,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 32,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 33,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 38,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "rawget",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"parent\"",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 39,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "p",
        line: 39,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 39,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 39,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\"dummy return\"",
        line: 39,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 42,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 44,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "parent",
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 44,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: "25",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 44,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 44,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 44,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 44,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 44,
    },
    Token {
        kind: Number,
        lexeme: "24",
        line: 44,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 45,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 45,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "z",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "28",
        line: 45,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 45,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 45,
    },
    Token {
        kind: Number,
        lexeme: "27",
        line: 45,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 45,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 45,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"10\"",
        line: 45,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 45,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 49,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 49,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 49,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 49,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 49,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "rawset",
        line: 50,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 50,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 50,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 50,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 50,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 50,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 50,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 52,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "__newindex",
        line: 52,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 53,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 53,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 53,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: "30",
        line: 53,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 53,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "\"101\"",
        line: 53,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 53,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 53,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 53,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 53,
    },
    Token {
        kind: Number,
        lexeme: "200",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 54,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 54,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "27",
        line: 54,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 54,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "98",
        line: 54,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 54,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 54,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 54,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "197",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 57,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 57,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 57,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 58,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 58,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 59,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "__newindex",
        line: 59,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 60,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 60,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 60,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 60,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 60,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 60,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 60,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 60,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "90",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 61,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 61,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 61,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 61,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 61,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 61,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 61,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 61,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 61,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 61,
    },
    Token {
        kind: Number,
        lexeme: "90",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 64,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 65,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 66,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 66,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 66,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 66,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 67,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 67,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 68,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 68,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 68,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 68,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 68,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 68,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 68,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "\"lixo\"",
        line: 68,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 68,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 69,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 69,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 69,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 69,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 69,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 70,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 70,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 71,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 71,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 71,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 71,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 71,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 71,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 71,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 72,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 73,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 76,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 77,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 78,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 78,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 78,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 78,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 79,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 79,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 79,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 79,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 79,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 79,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 79,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 79,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 79,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 79,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 79,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "__newindex",
        line: 80,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 80,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 80,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 80,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 80,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "rawset",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 80,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 81,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 81,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 81,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 81,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 81,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 81,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 81,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 81,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 82,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 82,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 82,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 82,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 82,
    },
    Token {
        kind: String,
        lexeme: "'a1'",
        line: 82,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 82,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 82,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 82,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 83,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 83,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 83,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 83,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 83,
    },
    Token {
        kind: String,
        lexeme: "'a11'",
        line: 83,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 83,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 83,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 83,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 83,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 83,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 83,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 84,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 84,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 84,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 84,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: "11",
        line: 84,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 84,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 84,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 84,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 84,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 84,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 84,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 85,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 85,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 85,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 85,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 85,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 85,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 85,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 85,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 85,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 85,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 85,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 85,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 86,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 86,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 86,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 86,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 86,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 86,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 86,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "foi",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 90,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 90,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 90,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 90,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 90,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 91,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 91,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 91,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 91,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 91,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 91,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 91,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 91,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 91,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 92,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "__call",
        line: 92,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 92,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 92,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 94,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 95,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "unpack",
        line: 95,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 95,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 95,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 96,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 96,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 96,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 96,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 96,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 96,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 96,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 96,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 96,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 96,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 96,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 96,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 96,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 96,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 96,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 96,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 97,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 97,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 98,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 98,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 98,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 98,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 98,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 98,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 99,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 102,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 102,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 102,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 102,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 102,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 102,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 102,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 103,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 103,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 103,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 103,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 105,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "op",
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 105,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 106,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 106,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 106,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 106,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 106,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 106,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 106,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 106,
    },
    Token {
        kind: Identifier,
        lexeme: "op",
        line: 106,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 106,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 106,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 106,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 106,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 106,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 106,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 106,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 107,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 108,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "__add",
        line: 108,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 108,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 108,
    },
    Token {
        kind: String,
        lexeme: "\"add\"",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 109,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "__sub",
        line: 109,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: String,
        lexeme: "\"sub\"",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 110,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "__mul",
        line: 110,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 110,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 110,
    },
    Token {
        kind: String,
        lexeme: "\"mul\"",
        line: 110,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 110,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 111,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "__div",
        line: 111,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 111,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "\"div\"",
        line: 111,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 112,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "__mod",
        line: 112,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: String,
        lexeme: "\"mod\"",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 113,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "__unm",
        line: 113,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 113,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 113,
    },
    Token {
        kind: String,
        lexeme: "\"unm\"",
        line: 113,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 113,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 114,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "__pow",
        line: 114,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 114,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 114,
    },
    Token {
        kind: String,
        lexeme: "\"pow\"",
        line: 114,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 114,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 115,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "__len",
        line: 115,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 115,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 115,
    },
    Token {
        kind: String,
        lexeme: "\"len\"",
        line: 115,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 115,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 117,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 117,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 117,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 117,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 117,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 117,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 118,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 118,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 118,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 118,
    },
    Token {
        kind: String,
        lexeme: "\"add\"",
        line: 118,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 118,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 118,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 118,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 118,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 118,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 118,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 118,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 118,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 118,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 118,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 118,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 118,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 119,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 119,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 119,
    },
    Token {
        kind: String,
        lexeme: "'5'",
        line: 119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 119,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 119,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 120,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "\"add\"",
        line: 120,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 120,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 120,
    },
    Token {
        kind: String,
        lexeme: "'5'",
        line: 120,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 120,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 120,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 120,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 120,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 120,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 120,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 120,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 121,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 121,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 121,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 121,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 121,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 121,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 122,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 122,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 122,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 122,
    },
    Token {
        kind: String,
        lexeme: "\"add\"",
        line: 122,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 122,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 122,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 122,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 122,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 122,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 122,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 122,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 122,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 122,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 122,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 122,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 122,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 123,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 123,
    },
    Token {
        kind: String,
        lexeme: "'5'",
        line: 123,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 123,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 123,
    },
    Token {
        kind: String,
        lexeme: "'5'",
        line: 123,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 123,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 124,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 124,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 124,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 124,
    },
    Token {
        kind: String,
        lexeme: "\"add\"",
        line: 124,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 124,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 124,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 124,
    },
    Token {
        kind: String,
        lexeme: "'5'",
        line: 124,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 124,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 124,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 124,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 124,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 124,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 124,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 124,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 124,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 124,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 125,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 125,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 125,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 125,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 125,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 125,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 125,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 126,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 126,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 126,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 126,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 126,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 126,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 127,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 127,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 127,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 127,
    },
    Token {
        kind: String,
        lexeme: "\"sub\"",
        line: 127,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 127,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 127,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 127,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 127,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 127,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 127,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 127,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 127,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 127,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 127,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 127,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 127,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 128,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 128,
    },
    Token {
        kind: String,
        lexeme: "'5'",
        line: 128,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 128,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 128,
    },
    Token {
        kind: String,
        lexeme: "'5'",
        line: 128,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 128,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 129,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 129,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 129,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: String,
        lexeme: "\"sub\"",
        line: 129,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 129,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 129,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: String,
        lexeme: "'5'",
        line: 129,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 129,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 129,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 129,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 129,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 129,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 129,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 129,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 129,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 129,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 130,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 130,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 130,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 130,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 131,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 131,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 131,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 131,
    },
    Token {
        kind: String,
        lexeme: "\"mul\"",
        line: 131,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 131,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 131,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 131,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 131,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 131,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 131,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 131,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 131,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 131,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 131,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 131,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 131,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 132,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 132,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 132,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 132,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 132,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 132,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 133,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 133,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 133,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 133,
    },
    Token {
        kind: String,
        lexeme: "\"div\"",
        line: 133,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 133,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 133,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 133,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 133,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 133,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 133,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 133,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 133,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 133,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 133,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 133,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 133,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 134,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 134,
    },
    Token {
        kind: Percent,
        lexeme: "%",
        line: 134,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 134,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 134,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 135,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 135,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 135,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 135,
    },
    Token {
        kind: String,
        lexeme: "\"mod\"",
        line: 135,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 135,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 135,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 135,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 135,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 135,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 135,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 135,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 135,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 135,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 135,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 135,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 135,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 136,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 136,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 136,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 136,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 136,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 137,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 137,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 137,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 137,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 137,
    },
    Token {
        kind: String,
        lexeme: "\"unm\"",
        line: 137,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 137,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 137,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 137,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 137,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 137,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 137,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 138,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 138,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 138,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 138,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 138,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 138,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 139,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 139,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 139,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 139,
    },
    Token {
        kind: String,
        lexeme: "\"pow\"",
        line: 139,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 139,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 139,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 139,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 139,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 139,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 139,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 139,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 139,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 139,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 139,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 139,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 139,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 140,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 140,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 140,
    },
    Token {
        kind: String,
        lexeme: "'4'",
        line: 140,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 140,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 140,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 141,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 141,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 141,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "\"pow\"",
        line: 141,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 141,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 141,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 141,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 141,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 141,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 141,
    },
    Token {
        kind: String,
        lexeme: "'4'",
        line: 141,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 141,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 141,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 141,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 141,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 141,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 141,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 142,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 142,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 142,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 142,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 142,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 143,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 143,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 143,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 143,
    },
    Token {
        kind: String,
        lexeme: "\"pow\"",
        line: 143,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 143,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 143,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 143,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 143,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 143,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 143,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 143,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 143,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 143,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 143,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 143,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 143,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 144,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "'4'",
        line: 144,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 144,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 144,
    },
    Token {
        kind: String,
        lexeme: "'4'",
        line: 144,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 144,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 145,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 145,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 145,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 145,
    },
    Token {
        kind: String,
        lexeme: "\"pow\"",
        line: 145,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 145,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 145,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 145,
    },
    Token {
        kind: String,
        lexeme: "'4'",
        line: 145,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 145,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 145,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 145,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 145,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 145,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 145,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 145,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 145,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 145,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 146,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 146,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 146,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 146,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 146,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 147,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 147,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 147,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 147,
    },
    Token {
        kind: String,
        lexeme: "\"len\"",
        line: 147,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "cap",
        line: 147,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 147,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 147,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 147,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 147,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 151,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 151,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 151,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 151,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "__len",
        line: 151,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 151,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 151,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 151,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 151,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 151,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 151,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 151,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 152,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 152,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 152,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 152,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "rawlen",
        line: 152,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 152,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 152,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 152,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 152,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 153,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "rawlen",
        line: 153,
    },
    Token {
        kind: String,
        lexeme: "\"abc\"",
        line: 153,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 153,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 153,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 153,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 154,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "rawlen",
        line: 154,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "io",
        line: 154,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "stdin",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 154,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 155,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "rawlen",
        line: 155,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 155,
    },
    Token {
        kind: Number,
        lexeme: "34",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 155,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 156,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "rawlen",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 156,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 158,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 158,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 158,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 158,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 159,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "__lt",
        line: 159,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 159,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 159,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 159,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "collectgarbage",
        line: 160,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 160,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 161,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 161,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 161,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 162,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 162,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 162,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 162,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 162,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 162,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 163,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 163,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 163,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 163,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 163,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 163,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 163,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 163,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 163,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 164,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 164,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 164,
    },
    Token {
        kind: String,
        lexeme: "\"dummy\"",
        line: 164,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 165,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 167,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 167,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 167,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 167,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 167,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 167,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 167,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 167,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 167,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 169,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "test",
        line: 169,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 169,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 169,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 170,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 170,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 170,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 170,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 171,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 171,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 171,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 171,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 171,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 171,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 172,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 172,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 172,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 172,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 173,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 173,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 173,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 173,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 173,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 174,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 174,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 174,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 174,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 175,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 175,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 175,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 175,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 176,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 176,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 176,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 176,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 177,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 177,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 177,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 177,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 178,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 178,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 178,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 178,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 179,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 179,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 179,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 179,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 179,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 179,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 179,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 179,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 179,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 179,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 180,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 180,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 180,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 180,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 181,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 181,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 181,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 181,
    },
    Token {
        kind: Identifier,
        lexeme: "Op",
        line: 181,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 181,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 181,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 182,
    },
    Token {
        kind: Identifier,
        lexeme: "test",
        line: 184,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 184,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 186,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "__le",
        line: 186,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 186,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 186,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 187,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 187,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 187,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 188,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 188,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 188,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 188,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 188,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 188,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 188,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 188,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 188,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 189,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 189,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 189,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 189,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 189,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 189,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 189,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 189,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 189,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 189,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 190,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 190,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 190,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 190,
    },
    Token {
        kind: String,
        lexeme: "\"dummy\"",
        line: 190,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 191,
    },
    Token {
        kind: Identifier,
        lexeme: "test",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 193,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 198,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 198,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 198,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 198,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 199,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 199,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 199,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 199,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 200,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 200,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 200,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 200,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 200,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 200,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 200,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 200,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 200,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 200,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 200,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 200,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 201,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 201,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 201,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 201,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 204,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "__lt",
        line: 204,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 204,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 204,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 204,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 204,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 204,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 204,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 205,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 205,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 205,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 205,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 205,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 205,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 206,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 206,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 206,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 206,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 206,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 206,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 206,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 206,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 207,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 207,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 207,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 207,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 207,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 207,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 208,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 209,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 209,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 209,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 209,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 209,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 209,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 210,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 212,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "__le",
        line: 212,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 212,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 212,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 214,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 214,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 214,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 214,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 214,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 214,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 214,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 214,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 215,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 215,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 215,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 215,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 215,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 215,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 215,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 215,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 215,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 215,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 216,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 216,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 216,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 216,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 216,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 216,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 217,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 217,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 217,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 217,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 217,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 217,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 217,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 217,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 217,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 217,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 218,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 218,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 218,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 218,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 218,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 218,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 218,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 218,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 220,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "__le",
        line: 220,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 220,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 220,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 220,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 220,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 220,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 220,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 221,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 221,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 221,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 221,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 221,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 221,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 222,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 222,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 222,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 222,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 222,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 222,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 222,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 222,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 222,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 223,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 224,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 224,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 227,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 227,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 227,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 227,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 227,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 227,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 227,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 227,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 227,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 227,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 227,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 227,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 228,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 228,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 228,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 228,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 228,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 228,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 228,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 228,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 228,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 228,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 228,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 229,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 229,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 229,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 229,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 229,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 229,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 229,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 229,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: ">=",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 229,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 229,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 229,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 229,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 229,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 229,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 229,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 231,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "__eq",
        line: 231,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 231,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 231,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 231,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 232,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 232,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 232,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 232,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 232,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 233,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 233,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 233,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 233,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 233,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 233,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 233,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 234,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 234,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 234,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 234,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 234,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 235,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "next",
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 236,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 236,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 236,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 237,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 239,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 239,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 239,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 239,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 239,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 239,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 240,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 240,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 240,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 240,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 240,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 240,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 240,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 240,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 240,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 240,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 241,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "rawequal",
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 241,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 241,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 241,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 241,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 241,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 241,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 241,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 241,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 241,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 242,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "rawequal",
        line: 242,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 242,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 242,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 242,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 243,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 243,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 243,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 243,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 243,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 243,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 243,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 243,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 243,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 243,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 243,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 243,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 243,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 244,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 244,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 244,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 244,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 244,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 244,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 244,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 244,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 244,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 244,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 245,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 245,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 245,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 245,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 245,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 245,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 245,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 245,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 246,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 246,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "Set",
        line: 246,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 246,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 246,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 246,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 246,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 246,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 246,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 246,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 246,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 246,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 249,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "__concat",
        line: 249,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 249,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 250,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 251,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 251,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 251,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 251,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 251,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 251,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 251,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 251,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 251,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 251,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 252,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 252,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 252,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 252,
    },
    Token {
        kind: String,
        lexeme: "'table'",
        line: 252,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 252,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 252,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 252,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 252,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 252,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 253,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 253,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 253,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 253,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 254,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 255,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 255,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 255,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 255,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 255,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 255,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 256,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 257,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 259,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 259,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 259,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 259,
    },
    Token {
        kind: String,
        lexeme: "\"c\"",
        line: 259,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 259,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 259,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 259,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 259,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 259,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 260,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 260,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 260,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 260,
    },
    Token {
        kind: String,
        lexeme: "\"d\"",
        line: 260,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 260,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 260,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 260,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 260,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 260,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 262,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 262,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 262,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 263,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 263,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 263,
    },
    Token {
        kind: String,
        lexeme: "'cd'",
        line: 263,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 263,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 264,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 264,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 264,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 264,
    },
    Token {
        kind: String,
        lexeme: "\"e\"",
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 264,
    },
    Token {
        kind: String,
        lexeme: "\"f\"",
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 264,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 264,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 264,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 264,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 264,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 264,
    },
    Token {
        kind: String,
        lexeme: "\"g\"",
        line: 264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 264,
    },
    Token {
        kind: String,
        lexeme: "\"0abcdef8g\"",
        line: 264,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 264,
    },
    Token {
        kind: Identifier,
        lexeme: "A",
        line: 266,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 266,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 266,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 267,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 267,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 267,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 267,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 267,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 267,
    },
    Token {
        kind: String,
        lexeme: "'cdcd'",
        line: 267,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 267,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 268,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 268,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 268,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 269,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 269,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 269,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 269,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 269,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 269,
    },
    Token {
        kind: String,
        lexeme: "'cd'",
        line: 269,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 269,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 270,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 270,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "\"b\"",
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "\"e\"",
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "\"f\"",
        line: 270,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 270,
    },
    Token {
        kind: String,
        lexeme: "\"g\"",
        line: 270,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 271,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 271,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "val",
        line: 271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 271,
    },
    Token {
        kind: String,
        lexeme: "\"0abcdefg\"",
        line: 271,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 271,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 275,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 275,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 275,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 275,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 276,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 277,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "__concat",
        line: 277,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 277,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 277,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 277,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 277,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 277,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 278,
    },
    Token {
        kind: String,
        lexeme: "\"number\"",
        line: 278,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 278,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "type",
        line: 278,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 278,
    },
    Token {
        kind: String,
        lexeme: "\"number\"",
        line: 278,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 278,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 278,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 278,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 279,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 279,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 280,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 280,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 280,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 281,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 281,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 281,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 281,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 281,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 281,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 281,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 281,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 281,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 282,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 282,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 282,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: "6",
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 282,
    },
    Token {
        kind: Number,
        lexeme: "7",
        line: 282,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 282,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 282,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 282,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 282,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 286,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 286,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 286,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 286,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 287,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 287,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 287,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 287,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 287,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 287,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 287,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 287,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 287,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 287,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 287,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 287,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 288,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 288,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 288,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 288,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 289,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "__eq",
        line: 289,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 289,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 289,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 289,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 289,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 289,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 289,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 289,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 290,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "__lt",
        line: 290,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 290,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 290,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 290,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 290,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 290,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 290,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 290,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 291,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 291,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 291,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 291,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 292,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 292,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 292,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 292,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 292,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 292,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 292,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 292,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 292,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 293,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 293,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 293,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 293,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 294,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "__eq",
        line: 294,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 294,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "__eq",
        line: 294,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 295,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "__lt",
        line: 295,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "t1",
        line: 295,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "__lt",
        line: 295,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 296,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 296,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "t2",
        line: 296,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 296,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 297,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 297,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 297,
    },
    Token {
        kind: LessThan,
        lexeme: "<",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 297,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 297,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 297,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "d",
        line: 297,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: "<=",
        line: 297,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 297,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 297,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 302,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 302,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 303,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 303,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 303,
    },
    Token {
        kind: Identifier,
        lexeme: "__call",
        line: 304,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 304,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 304,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 304,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 304,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 304,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 304,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 305,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 305,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 305,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 305,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 305,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 306,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 306,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 306,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 306,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 306,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 306,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 306,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 306,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 306,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 307,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 307,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 307,
    },
    Token {
        kind: TripleDot,
        lexeme: "...",
        line: 307,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 307,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 308,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 309,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 310,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 312,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 312,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 312,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 312,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 312,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 312,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 312,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 312,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 313,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 313,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 313,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 313,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 313,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 313,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 313,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 313,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 313,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 314,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 314,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 314,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 314,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 314,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 314,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "tt",
        line: 314,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 314,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 316,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 316,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 316,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 317,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 317,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 317,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 317,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 317,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 317,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 317,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 317,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 317,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 318,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 318,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 318,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 318,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 318,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 318,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 318,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 318,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 318,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 318,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 321,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 321,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 321,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 321,
    },
    Token {
        kind: Number,
        lexeme: "20",
        line: 321,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 321,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 323,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 323,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "_g",
        line: 325,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 325,
    },
    Token {
        kind: Identifier,
        lexeme: "_ENV",
        line: 326,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 326,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 326,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 326,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 326,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 326,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 326,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 326,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 326,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 326,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 326,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 326,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "_g",
        line: 326,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 326,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 326,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 326,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 326,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 326,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 329,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 329,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 329,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 329,
    },
    Token {
        kind: Identifier,
        lexeme: "rawset",
        line: 330,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 330,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 330,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 330,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 330,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 330,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 330,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 330,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 330,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 330,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 330,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 331,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 331,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 331,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "rawget",
        line: 331,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 331,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 331,
    },
    Token {
        kind: String,
        lexeme: "\"x\"",
        line: 331,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 331,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 331,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 331,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 331,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 333,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 333,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 336,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "require",
        line: 336,
    },
    Token {
        kind: String,
        lexeme: "'debug'",
        line: 336,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 337,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 337,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 337,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 337,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 338,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 338,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 338,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 338,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 338,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 338,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 339,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 339,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 339,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 339,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 339,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 339,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 339,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 339,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 340,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 340,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 340,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 340,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 340,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 340,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 340,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 340,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 340,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 340,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 341,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 341,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 341,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 341,
    },
    Token {
        kind: Number,
        lexeme: "13",
        line: 341,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 341,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 342,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 342,
    },
    Token {
        kind: String,
        lexeme: "\"3\"",
        line: 342,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 342,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 342,
    },
    Token {
        kind: Number,
        lexeme: "13",
        line: 342,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 342,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 343,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 343,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 343,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 343,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 343,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 343,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 343,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 344,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 344,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 344,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 344,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 344,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 344,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 344,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 346,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 346,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 346,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 346,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 346,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 346,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 347,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 347,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 347,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 347,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 347,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 348,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 348,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 348,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 348,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 348,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 348,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 348,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 348,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 348,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 348,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 349,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 349,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 349,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 349,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 349,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 349,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 349,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 349,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 349,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 350,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 350,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 350,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 350,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 350,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 350,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 350,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 350,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 350,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 351,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 351,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 351,
    },
    Token {
        kind: False,
        lexeme: "false",
        line: 351,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 351,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 351,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 351,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 352,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 352,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 352,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 352,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 352,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 352,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 354,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 354,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 354,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 354,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 354,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 354,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 355,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 355,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 355,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 355,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 355,
    },
    Token {
        kind: Identifier,
        lexeme: "mt",
        line: 356,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "__add",
        line: 356,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 356,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 356,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 356,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 356,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 356,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 356,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 356,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 356,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 356,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 356,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 356,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 356,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 357,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 357,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 357,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 357,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 357,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 357,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 357,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 357,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 358,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 358,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 358,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 358,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 358,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 358,
    },
    Token {
        kind: Number,
        lexeme: "23",
        line: 358,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 358,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 359,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 359,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 359,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 359,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 359,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 359,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 359,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 359,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 360,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 360,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 360,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 360,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 360,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 360,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 360,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 361,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 361,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 361,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 361,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 361,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 361,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 363,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 363,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 363,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 363,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 363,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 363,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 363,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 363,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 367,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 367,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 367,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 367,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 367,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 367,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 367,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 367,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 367,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 367,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 367,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 367,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "__newindex",
        line: 367,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 367,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 368,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 368,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 368,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 368,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 368,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 368,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 368,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 368,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 368,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 368,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 368,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 368,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 368,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 368,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 368,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 368,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 368,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 369,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 369,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 369,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 369,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 369,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 369,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 369,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 369,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 369,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 369,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 369,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 369,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 372,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: "K",
        line: 372,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: "V",
        line: 372,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 372,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 372,
    },
    Token {
        kind: Identifier,
        lexeme: "grandparent",
        line: 373,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 373,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 373,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 373,
    },
    Token {
        kind: Identifier,
        lexeme: "grandparent",
        line: 374,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "__newindex",
        line: 374,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 374,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 374,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 374,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 374,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 374,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 374,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 374,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "K",
        line: 374,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 374,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "V",
        line: 374,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 374,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 374,
    },
    Token {
        kind: Identifier,
        lexeme: "parent",
        line: 376,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 376,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 376,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 376,
    },
    Token {
        kind: Identifier,
        lexeme: "parent",
        line: 377,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "__newindex",
        line: 377,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "parent",
        line: 377,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 378,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "parent",
        line: 378,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "grandparent",
        line: 378,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 378,
    },
    Token {
        kind: Identifier,
        lexeme: "child",
        line: 380,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 380,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 380,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 380,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 380,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "parent",
        line: 380,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 380,
    },
    Token {
        kind: Identifier,
        lexeme: "child",
        line: 381,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "foo",
        line: 381,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 381,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 381,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 382,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "T",
        line: 382,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "parent",
        line: 382,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "K",
        line: 382,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 382,
    },
    Token {
        kind: String,
        lexeme: "\"foo\"",
        line: 382,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "V",
        line: 382,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 382,
    },
    Token {
        kind: Number,
        lexeme: "10",
        line: 382,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 382,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 384,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 384,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 386,
    },
    Token {
        kind: Number,
        lexeme: "12",
        line: 386,
    },
]
