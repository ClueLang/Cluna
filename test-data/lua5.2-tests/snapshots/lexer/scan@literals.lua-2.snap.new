---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/literals.lua
---
[
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 1,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 1,
    },
    Token {
        kind: String,
        lexeme: "'testing scanner'",
        line: 1,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 3,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "require",
        line: 3,
    },
    Token {
        kind: String,
        lexeme: "\"debug\"",
        line: 3,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 6,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 6,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 6,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 6,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 8,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 8,
    },
    Token {
        kind: String,
        lexeme: "\"x \\v\\f = \\t\\r 'a\\0a' \\v\\f\\f\"",
        line: 8,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 8,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 9,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 9,
    },
    Token {
        kind: String,
        lexeme: "'a\\0a'",
        line: 9,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 9,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 9,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 9,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 9,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 12,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 12,
    },
    Token {
        kind: String,
        lexeme: "'\\n\\\"\\'\\\\'",
        line: 12,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 12,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n\n\"'\\]]",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 16,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: String,
        lexeme: "\"\\a\\b\\f\\n\\r\\t\\v\"",
        line: 16,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 16,
    },
    Token {
        kind: String,
        lexeme: "\"^%c%c%c%c%c%c%c$\"",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: String,
        lexeme: "\"\\09912\"",
        line: 19,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 19,
    },
    Token {
        kind: String,
        lexeme: "'c12'",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 20,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 20,
    },
    Token {
        kind: String,
        lexeme: "\"\\99ab\"",
        line: 20,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 20,
    },
    Token {
        kind: String,
        lexeme: "'cab'",
        line: 20,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 20,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: String,
        lexeme: "\"\\099\"",
        line: 21,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 21,
    },
    Token {
        kind: String,
        lexeme: "'\\99'",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: String,
        lexeme: "\"\\099\\n\"",
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 22,
    },
    Token {
        kind: String,
        lexeme: "'c\\10'",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0\\0alo'",
        line: 23,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 23,
    },
    Token {
        kind: String,
        lexeme: "'\\0'",
        line: 23,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 23,
    },
    Token {
        kind: String,
        lexeme: "'\\0\\0'",
        line: 23,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 23,
    },
    Token {
        kind: String,
        lexeme: "'alo'",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 25,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "010",
        line: 25,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "020",
        line: 25,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 25,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 25,
    },
    Token {
        kind: Number,
        lexeme: "030",
        line: 25,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 25,
    },
    Token {
        kind: String,
        lexeme: "\"1020-30\"",
        line: 25,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 25,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: String,
        lexeme: "\"\\x00\\x05\\x10\\x1f\\x3C\\xfF\\xe8\"",
        line: 28,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 28,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\\5\\16\\31\\60\\255\\232\"",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 30,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "lexstring",
        line: 30,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 30,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 30,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 30,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 30,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 31,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 31,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 31,
    },
    Token {
        kind: String,
        lexeme: "'return '",
        line: 31,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 31,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 31,
    },
    Token {
        kind: String,
        lexeme: "', debug.getinfo(1).currentline'",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 31,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 32,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 32,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 33,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "l",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "lexstring",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: String,
        lexeme: "\"'abc\\\\z  \\n   efg'\"",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: String,
        lexeme: "\"abcefg\"",
        line: 36,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "lexstring",
        line: 37,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 37,
    },
    Token {
        kind: String,
        lexeme: "\"'abc\\\\z  \\n\\n\\n'\"",
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 37,
    },
    Token {
        kind: String,
        lexeme: "\"abc\"",
        line: 37,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 37,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 37,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 37,
    },
    Token {
        kind: Identifier,
        lexeme: "lexstring",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"'\\\\z  \\n\\t\\f\\v\\n'\"",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 38,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "3",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "lexstring",
        line: 39,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\"[[\\nalo\\nalo\\n\\n]]\"",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: String,
        lexeme: "\"alo\\nalo\\n\\n\"",
        line: 39,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 39,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 39,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 39,
    },
    Token {
        kind: Identifier,
        lexeme: "lexstring",
        line: 40,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 40,
    },
    Token {
        kind: String,
        lexeme: "\"[[\\nalo\\ralo\\n\\n]]\"",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: String,
        lexeme: "\"alo\\nalo\\n\\n\"",
        line: 40,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 40,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 40,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 40,
    },
    Token {
        kind: Identifier,
        lexeme: "lexstring",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "\"[[\\nalo\\ralo\\r\\n]]\"",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: String,
        lexeme: "\"alo\\nalo\\n\"",
        line: 41,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 41,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "lexstring",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: String,
        lexeme: "\"[[\\ralo\\n\\ralo\\r\\n]]\"",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: String,
        lexeme: "\"alo\\nalo\\n\"",
        line: 42,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 42,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "lexstring",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: String,
        lexeme: "\"[[alo]\\n]alo]]\"",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: String,
        lexeme: "\"alo]\\n]alo\"",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 45,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 45,
    },
    Token {
        kind: String,
        lexeme: "\"abc\\z\n        def\\z\n        ghi\\z\n       \"",
        line: 48,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 48,
    },
    Token {
        kind: String,
        lexeme: "'abcdefghi'",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 51,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 51,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "err",
        line: 51,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 51,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "st",
        line: 52,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 52,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 52,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 52,
    },
    Token {
        kind: String,
        lexeme: "'return '",
        line: 52,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 52,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 52,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 52,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "err",
        line: 53,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "'<eof>'",
        line: 53,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "err",
        line: 53,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "\"'\"",
        line: 53,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "err",
        line: 53,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "\"'\"",
        line: 53,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "st",
        line: 54,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 54,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 54,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "msg",
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 54,
    },
    Token {
        kind: String,
        lexeme: "\"near \"",
        line: 54,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 54,
    },
    Token {
        kind: Identifier,
        lexeme: "err",
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 54,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 54,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 54,
    },
    Token {
        kind: True,
        lexeme: "true",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 54,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 56,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 56,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"abc\\x\"]]",
        line: 56,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 56,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\x\"]]",
        line: 56,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 56,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 57,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 57,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"abc\\x]]",
        line: 57,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 57,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\x]]",
        line: 57,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 57,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 58,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 58,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\x]]",
        line: 58,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 58,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\x]]",
        line: 58,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 58,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 59,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 59,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\x5\"]]",
        line: 59,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 59,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\x5\"]]",
        line: 59,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\x5]]",
        line: 60,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 60,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\x5]]",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 61,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 61,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\xr\"]]",
        line: 61,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 61,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\xr]]",
        line: 61,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 61,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\xr]]",
        line: 62,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 62,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\xr]]",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 63,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 63,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\x.]]",
        line: 63,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 63,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\x.]]",
        line: 63,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 63,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\x8%\"]]",
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 64,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\x8%]]",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 65,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 65,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\xAG]]",
        line: 65,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 65,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\xAG]]",
        line: 65,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 65,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 66,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 66,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\g\"]]",
        line: 66,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 66,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\g]]",
        line: 66,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 66,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\g]]",
        line: 67,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 67,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\g]]",
        line: 67,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\.\"]]",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\.]]",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"\\999\"]]",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\999]]",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 71,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 71,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"xyz\\300\"]]",
        line: 71,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 71,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\300]]",
        line: 71,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 71,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 72,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 72,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\"   \\256\"]]",
        line: 72,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 72,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\\256]]",
        line: 72,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 72,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 76,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "\"[=[alo]]\"",
        line: 76,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 76,
    },
    Token {
        kind: String,
        lexeme: "\"<eof>\"",
        line: 76,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 76,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 77,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "\"[=[alo]=\"",
        line: 77,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "\"<eof>\"",
        line: 77,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 77,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 78,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"[=[alo]\"",
        line: 78,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 78,
    },
    Token {
        kind: String,
        lexeme: "\"<eof>\"",
        line: 78,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 78,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 79,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "\"'alo\"",
        line: 79,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "\"<eof>\"",
        line: 79,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 79,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 80,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "\"'alo \\\\z  \\n\\n\"",
        line: 80,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 80,
    },
    Token {
        kind: String,
        lexeme: "\"<eof>\"",
        line: 80,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 80,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 81,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "\"'alo \\\\z\"",
        line: 81,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 81,
    },
    Token {
        kind: String,
        lexeme: "\"<eof>\"",
        line: 81,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 81,
    },
    Token {
        kind: Identifier,
        lexeme: "lexerror",
        line: 82,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 82,
    },
    Token {
        kind: MultilineString,
        lexeme: "[['alo \\98]]",
        line: 82,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 82,
    },
    Token {
        kind: String,
        lexeme: "\"<eof>\"",
        line: 82,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 82,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 85,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 85,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 85,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 85,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 85,
    },
    Token {
        kind: Number,
        lexeme: "255",
        line: 85,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 85,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 86,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 86,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "char",
        line: 86,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 86,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 86,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 87,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 87,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "\"[a-zA-Z_]\"",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 87,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 87,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 87,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 87,
    },
    Token {
        kind: String,
        lexeme: "\"=1\"",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 87,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 88,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 88,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 88,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 88,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 88,
    },
    Token {
        kind: String,
        lexeme: "\"[a-zA-Z_0-9]\"",
        line: 88,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 88,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 88,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 89,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 89,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 89,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 89,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 89,
    },
    Token {
        kind: String,
        lexeme: "\"1 = 1\"",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 89,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 90,
    },
    Token {
        kind: Identifier,
        lexeme: "var",
        line: 95,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 95,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 95,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 95,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 95,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 95,
    },
    Token {
        kind: Number,
        lexeme: "15000",
        line: 95,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 95,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 96,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 96,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 96,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 96,
    },
    Token {
        kind: String,
        lexeme: "\"%s = 5\"",
        line: 96,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "var",
        line: 96,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 96,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 97,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 97,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 97,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 98,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 98,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "var",
        line: 98,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 98,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 98,
    },
    Token {
        kind: Number,
        lexeme: "5",
        line: 98,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 98,
    },
    Token {
        kind: Identifier,
        lexeme: "var",
        line: 99,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 99,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 99,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 100,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 100,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 100,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 100,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 103,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 103,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\t\"",
        line: 103,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 103,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n\n\t]]",
        line: 105,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 105,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 106,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 106,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\n\n $debug]]",
        line: 108,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 108,
    },
    Token {
        kind: String,
        lexeme: "\"\\n $debug\"",
        line: 108,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 108,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 109,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 109,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[ [ ]]",
        line: 109,
    },
    Token {
        kind: NotEquals,
        lexeme: "~=",
        line: 109,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[ ] ]]",
        line: 109,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 109,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 111,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 111,
    },
    Token {
        kind: String,
        lexeme: "\"001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789\"",
        line: 111,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 112,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 112,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 112,
    },
    Token {
        kind: Number,
        lexeme: "960",
        line: 112,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 112,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 113,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 113,
    },
    Token {
        kind: MultilineString,
        lexeme: "[=[\nprint('+')\n\na1 = [[\"isto e' um string com várias 'aspas'\"]]\na2 = \"'aspas'\"\n\nassert(string.find(a1, a2) == 31)\nprint('+')\n\na1 = [==[temp = [[um valor qualquer]]; ]==]\nassert(load(a1))()\nassert(temp == 'um valor qualquer')\n-- long strings --\nb = \"001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789\"\nassert(string.len(b) == 960)\nprint('+')\n\na = [[00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n]]\nassert(string.len(a) == 1863)\nassert(string.sub(a, 1, 40) == string.sub(b, 1, 40))\nx = 1\n]=]",
        line: 157,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 159,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 159,
    },
    Token {
        kind: String,
        lexeme: "'+'",
        line: 159,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 159,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 160,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 160,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 160,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 161,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 161,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 161,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 162,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 162,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 162,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 164,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 164,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 164,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 165,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 165,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 165,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 166,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 166,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 166,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 170,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 170,
    },
    Token {
        kind: MultilineString,
        lexeme: "[[\na = 1        -- a comment\nb = 2\n\n\nx = [=[\nhi\n]=]\ny = \"\\\nhello\\r\\n\\\n\"\nreturn debug.getinfo(1).currentline\n]]",
        line: 182,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 184,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 184,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 184,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 184,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 184,
    },
    Token {
        kind: String,
        lexeme: "\"\\r\"",
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 184,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\\r\"",
        line: 184,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 184,
    },
    Token {
        kind: String,
        lexeme: "\"\\r\\n\"",
        line: 184,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 184,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 184,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 185,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "nn",
        line: 185,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 185,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "gsub",
        line: 185,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 185,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 185,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 185,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 185,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 185,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "dostring",
        line: 186,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "nn",
        line: 186,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 186,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 187,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 187,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 187,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 187,
    },
    Token {
        kind: String,
        lexeme: "\"hi\\n\"",
        line: 187,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 187,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 187,
    },
    Token {
        kind: Identifier,
        lexeme: "y",
        line: 187,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 187,
    },
    Token {
        kind: String,
        lexeme: "\"\\nhello\\r\\n\\n\"",
        line: 187,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 187,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 188,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 192,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 192,
    },
    Token {
        kind: MultilineString,
        lexeme: "[==[]=]==]",
        line: 192,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 193,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 193,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 193,
    },
    Token {
        kind: String,
        lexeme: "\"]=\"",
        line: 193,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 193,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 195,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 195,
    },
    Token {
        kind: MultilineString,
        lexeme: "[==[[===[[=[]]=][====[]]===]===]==]",
        line: 195,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 196,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 196,
    },
    Token {
        kind: String,
        lexeme: "\"[===[[=[]]=][====[]]===]===\"",
        line: 196,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 196,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 198,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 198,
    },
    Token {
        kind: MultilineString,
        lexeme: "[====[[===[[=[]]=][====[]]===]===]====]",
        line: 198,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 199,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 199,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 199,
    },
    Token {
        kind: String,
        lexeme: "\"[===[[=[]]=][====[]]===]===\"",
        line: 199,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 199,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 201,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 201,
    },
    Token {
        kind: MultilineString,
        lexeme: "[=[]]]]]]]]]=]",
        line: 201,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 202,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 202,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 202,
    },
    Token {
        kind: String,
        lexeme: "\"]]]]]]]]\"",
        line: 202,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 202,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 213,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 213,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 213,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 213,
    },
    Token {
        kind: String,
        lexeme: "\"=\"",
        line: 213,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 213,
    },
    Token {
        kind: String,
        lexeme: "\"[\"",
        line: 213,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 213,
    },
    Token {
        kind: String,
        lexeme: "\"]\"",
        line: 213,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 213,
    },
    Token {
        kind: String,
        lexeme: "\"\\n\"",
        line: 213,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 213,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 214,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 214,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 214,
    },
    Token {
        kind: Number,
        lexeme: "4",
        line: 214,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 215,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "gen",
        line: 215,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 215,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 215,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 215,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 215,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 216,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 216,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 216,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 216,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "yield",
        line: 216,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 216,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 216,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 216,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 217,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "_",
        line: 218,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 218,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 218,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "x",
        line: 218,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 218,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 218,
    },
    Token {
        kind: Identifier,
        lexeme: "gen",
        line: 219,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 219,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 219,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 219,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 219,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 219,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 219,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 219,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 220,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 221,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 222,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 224,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 224,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "wrap",
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 224,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "gen",
        line: 224,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 224,
    },
    Token {
        kind: String,
        lexeme: "\"\"",
        line: 224,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "len",
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 224,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 224,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 224,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 224,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 225,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 225,
    },
    Token {
        kind: String,
        lexeme: "\"return [====[\\n\"",
        line: 225,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 225,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 225,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 225,
    },
    Token {
        kind: String,
        lexeme: "\"]====]\"",
        line: 225,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 225,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 225,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 225,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 225,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 226,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 230,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 230,
    },
    Token {
        kind: String,
        lexeme: "\"pt_BR\"",
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 230,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 230,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 230,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 230,
    },
    Token {
        kind: String,
        lexeme: "\"ptb\"",
        line: 230,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 230,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 230,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 231,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 231,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 231,
    },
    Token {
        kind: String,
        lexeme: "\"á = 3\"",
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 231,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 231,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 232,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 232,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 232,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 232,
    },
    Token {
        kind: String,
        lexeme: "\"a = (3,4)\"",
        line: 232,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 232,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 232,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 233,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "tonumber",
        line: 233,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 233,
    },
    Token {
        kind: String,
        lexeme: "\"3,4\"",
        line: 233,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 233,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 233,
    },
    Token {
        kind: Number,
        lexeme: "3.4",
        line: 233,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "tonumber",
        line: 233,
    },
    Token {
        kind: String,
        lexeme: "\"3.4\"",
        line: 233,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 233,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 233,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 233,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 234,
    },
    Token {
        kind: String,
        lexeme: "\"return 3.4\"",
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 234,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 234,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 234,
    },
    Token {
        kind: Number,
        lexeme: "3.4",
        line: 234,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 234,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 235,
    },
    Token {
        kind: String,
        lexeme: "\"return .4,3\"",
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 235,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 235,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 235,
    },
    Token {
        kind: Number,
        lexeme: "0.4",
        line: 235,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 235,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 236,
    },
    Token {
        kind: String,
        lexeme: "\"return 4.\"",
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 236,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 236,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 236,
    },
    Token {
        kind: Number,
        lexeme: "4.",
        line: 236,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 236,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 237,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 237,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 237,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 237,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 237,
    },
    Token {
        kind: String,
        lexeme: "\"return 4.+.5\"",
        line: 237,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 237,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 237,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 237,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 237,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 237,
    },
    Token {
        kind: Number,
        lexeme: "4.5",
        line: 237,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 237,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 238,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 238,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 238,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 238,
    },
    Token {
        kind: String,
        lexeme: "\"return 4.5.\"",
        line: 238,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 238,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 239,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 239,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 239,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 239,
    },
    Token {
        kind: String,
        lexeme: "\"'4%.5%.'\"",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 239,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 240,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "os",
        line: 240,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 240,
    },
    Token {
        kind: Identifier,
        lexeme: "setlocale",
        line: 240,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 240,
    },
    Token {
        kind: String,
        lexeme: "\"C\"",
        line: 240,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 240,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 240,
    },
    Token {
        kind: Else,
        lexeme: "else",
        line: 241,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "Message",
        line: 242,
    },
    Token {
        kind: Or,
        lexeme: "or",
        line: 242,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 242,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 242,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 242,
    },
    Token {
        kind: String,
        lexeme: "'\\a\\n >>> pt_BR locale not available: skipping decimal point tests <<<\\n\\a'",
        line: 243,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 243,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 244,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 248,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 248,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 248,
    },
    Token {
        kind: String,
        lexeme: "\"a string with \\r and \\n and \\r\\n and \\n\\r\"",
        line: 248,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 249,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 249,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 249,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 249,
    },
    Token {
        kind: String,
        lexeme: "\"return %q\"",
        line: 249,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 249,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 249,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "c",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "s",
        line: 250,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 250,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 253,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 253,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 253,
    },
    Token {
        kind: String,
        lexeme: "\"a = 'non-ending string\"",
        line: 253,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 253,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 254,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 254,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 254,
    },
    Token {
        kind: String,
        lexeme: "\"a = 'non-ending string\\n'\"",
        line: 254,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 254,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 255,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 255,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 255,
    },
    Token {
        kind: String,
        lexeme: "\"a = '\\\\345'\"",
        line: 255,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 255,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 256,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 256,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 256,
    },
    Token {
        kind: String,
        lexeme: "\"a = [=x]\"",
        line: 256,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 256,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 258,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 258,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 258,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 258,
    },
]
