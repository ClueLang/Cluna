---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/strings.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
        column: 6,
        span: 5..6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing strings and string library'",
        ),
        line: 1,
        column: 42,
        span: 6..42,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
        column: 43,
        span: 42..43,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 3,
        column: 7,
        span: 45..51,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 3,
        column: 8,
        span: 51..52,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 3,
        column: 13,
        span: 52..57,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 3,
        column: 15,
        span: 58..59,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo1'",
        ),
        line: 3,
        column: 22,
        span: 60..66,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 3,
        column: 23,
        span: 66..67,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 4,
        column: 7,
        span: 68..74,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 8,
        span: 74..75,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 4,
        column: 10,
        span: 75..77,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 4,
        column: 12,
        span: 78..79,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 4,
        column: 16,
        span: 80..83,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 17,
        span: 83..84,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 5,
        column: 7,
        span: 85..91,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 8,
        span: 91..92,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0alo'",
        ),
        line: 5,
        column: 18,
        span: 92..102,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 5,
        column: 20,
        span: 103..104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0b'",
        ),
        line: 5,
        column: 29,
        span: 105..113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 30,
        span: 113..114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 6,
        column: 7,
        span: 115..121,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 8,
        span: 121..122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0alo\\0\\0'",
        ),
        line: 6,
        column: 22,
        span: 122..136,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 6,
        column: 24,
        span: 137..138,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0alo\\0'",
        ),
        line: 6,
        column: 37,
        span: 139..151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 38,
        span: 151..152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 7,
        column: 7,
        span: 153..159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 8,
        span: 159..160,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 7,
        column: 13,
        span: 160..165,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 7,
        column: 15,
        span: 166..167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0'",
        ),
        line: 7,
        column: 23,
        span: 168..175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 24,
        span: 175..176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 7,
        span: 177..183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 8,
        span: 183..184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo\\0'",
        ),
        line: 8,
        column: 15,
        span: 184..191,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 8,
        column: 17,
        span: 192..193,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 8,
        column: 23,
        span: 194..199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 24,
        span: 199..200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 9,
        column: 7,
        span: 201..207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 8,
        span: 207..208,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        line: 9,
        column: 12,
        span: 208..212,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 9,
        column: 14,
        span: 213..214,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1'",
        ),
        line: 9,
        column: 19,
        span: 215..219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 20,
        span: 219..220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 221..227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 227..228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0'",
        ),
        line: 10,
        column: 14,
        span: 228..234,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 10,
        column: 16,
        span: 235..236,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\1'",
        ),
        line: 10,
        column: 23,
        span: 237..243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 24,
        span: 243..244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 11,
        column: 7,
        span: 245..251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 8,
        span: 251..252,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0a\\0a'",
        ),
        line: 11,
        column: 18,
        span: 252..262,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 11,
        column: 21,
        span: 263..265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0a\\0a'",
        ),
        line: 11,
        column: 32,
        span: 266..276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 33,
        span: 276..277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
        column: 7,
        span: 278..284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 284..285,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 12,
        column: 11,
        span: 285..288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 13,
        span: 289..290,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0a\\0b'",
        ),
        line: 12,
        column: 23,
        span: 290..300,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 12,
        column: 26,
        span: 301..303,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0a\\0a'",
        ),
        line: 12,
        column: 37,
        span: 304..314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 38,
        span: 314..315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 39,
        span: 315..316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
        column: 7,
        span: 317..323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 8,
        span: 323..324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 13,
        column: 16,
        span: 324..332,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 13,
        column: 18,
        span: 333..334,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0\\0'",
        ),
        line: 13,
        column: 29,
        span: 335..345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 30,
        span: 345..346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 14,
        column: 7,
        span: 347..353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 8,
        span: 353..354,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 14,
        column: 11,
        span: 354..357,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 12,
        span: 357..358,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0\\0'",
        ),
        line: 14,
        column: 22,
        span: 358..368,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 14,
        column: 24,
        span: 369..370,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 14,
        column: 33,
        span: 371..379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 34,
        span: 379..380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 35,
        span: 380..381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
        column: 7,
        span: 382..388,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 8,
        span: 388..389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 15,
        column: 16,
        span: 389..397,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 15,
        column: 19,
        span: 398..400,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0\\0'",
        ),
        line: 15,
        column: 30,
        span: 401..411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 31,
        span: 411..412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 7,
        span: 413..419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 419..420,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 16,
        column: 11,
        span: 420..423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 12,
        span: 423..424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0\\0'",
        ),
        line: 16,
        column: 22,
        span: 424..434,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 16,
        column: 25,
        span: 435..437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 16,
        column: 34,
        span: 438..446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 35,
        span: 446..447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 36,
        span: 447..448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 17,
        column: 7,
        span: 449..455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 8,
        span: 455..456,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 17,
        column: 16,
        span: 456..464,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 17,
        column: 19,
        span: 465..467,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 17,
        column: 28,
        span: 468..476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 29,
        span: 476..477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 7,
        span: 478..484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 8,
        span: 484..485,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 18,
        column: 16,
        span: 485..493,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 18,
        column: 19,
        span: 494..496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0'",
        ),
        line: 18,
        column: 28,
        span: 497..505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 29,
        span: 505..506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 19,
        column: 7,
        span: 507..513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 8,
        span: 513..514,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 19,
        column: 11,
        span: 514..517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 13,
        span: 518..519,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0b'",
        ),
        line: 19,
        column: 20,
        span: 519..526,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 19,
        column: 22,
        span: 527..528,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0a\\0'",
        ),
        line: 19,
        column: 32,
        span: 529..538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 33,
        span: 538..539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 34,
        span: 539..540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 20,
        column: 6,
        span: 541..546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 7,
        span: 546..547,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 20,
        column: 10,
        span: 547..550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 11,
        span: 550..551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 7,
        span: 553..559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 8,
        span: 559..560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 22,
        column: 14,
        span: 560..566,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 22,
        column: 15,
        span: 566..567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 22,
        column: 18,
        span: 567..570,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 19,
        span: 570..571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 22,
        column: 30,
        span: 571..582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 31,
        span: 582..583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 32,
        span: 582..584,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 33,
        span: 584..585,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 34,
        span: 584..586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 35,
        span: 586..587,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 38,
        span: 588..590,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"234\"",
        ),
        line: 22,
        column: 44,
        span: 591..596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 45,
        span: 596..597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 23,
        column: 7,
        span: 598..604,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 8,
        span: 604..605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 23,
        column: 14,
        span: 605..611,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 23,
        column: 15,
        span: 611..612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 23,
        column: 18,
        span: 612..615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 19,
        span: 615..616,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 23,
        column: 30,
        span: 616..627,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 23,
        column: 31,
        span: 627..628,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 23,
        column: 32,
        span: 627..629,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 33,
        span: 629..630,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 23,
        column: 36,
        span: 631..633,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"789\"",
        ),
        line: 23,
        column: 42,
        span: 634..639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 43,
        span: 639..640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 24,
        column: 7,
        span: 641..647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 8,
        span: 647..648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 24,
        column: 14,
        span: 648..654,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 24,
        column: 15,
        span: 654..655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 24,
        column: 18,
        span: 655..658,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 19,
        span: 658..659,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 24,
        column: 30,
        span: 659..670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 31,
        span: 670..671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 32,
        span: 670..672,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 33,
        span: 672..673,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 34,
        span: 672..674,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 35,
        span: 674..675,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 24,
        column: 38,
        span: 676..678,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 24,
        column: 41,
        span: 679..681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 24,
        column: 42,
        span: 681..682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 683..689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 689..690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 25,
        column: 14,
        span: 690..696,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
        column: 15,
        span: 696..697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 25,
        column: 18,
        span: 697..700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 19,
        span: 700..701,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 25,
        column: 30,
        span: 701..712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 31,
        span: 712..713,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 32,
        span: 712..714,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 33,
        span: 714..715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 34,
        span: 714..716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 35,
        span: 716..717,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 38,
        span: 718..720,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"7\"",
        ),
        line: 25,
        column: 42,
        span: 721..724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 43,
        span: 724..725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 7,
        span: 726..732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 732..733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 26,
        column: 14,
        span: 733..739,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 26,
        column: 15,
        span: 739..740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 26,
        column: 18,
        span: 740..743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 19,
        span: 743..744,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 26,
        column: 30,
        span: 744..755,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 31,
        span: 755..756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 32,
        span: 755..757,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 33,
        span: 757..758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 34,
        span: 757..759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 35,
        span: 759..760,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 38,
        span: 761..763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 26,
        column: 41,
        span: 764..766,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 42,
        span: 766..767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 27,
        column: 7,
        span: 768..774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 8,
        span: 774..775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 27,
        column: 14,
        span: 775..781,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 15,
        span: 781..782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 27,
        column: 18,
        span: 782..785,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 19,
        span: 785..786,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 27,
        column: 30,
        span: 786..797,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 31,
        span: 797..798,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 27,
        column: 32,
        span: 798..799,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 34,
        span: 798..801,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 27,
        column: 35,
        span: 801..802,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 37,
        span: 801..804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 38,
        span: 804..805,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 27,
        column: 41,
        span: 806..808,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 27,
        column: 53,
        span: 809..820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 54,
        span: 820..821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 7,
        span: 822..828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 8,
        span: 828..829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 28,
        column: 14,
        span: 829..835,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 15,
        span: 835..836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 28,
        column: 18,
        span: 836..839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 19,
        span: 839..840,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 28,
        column: 30,
        span: 840..851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 31,
        span: 851..852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 32,
        span: 851..853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 33,
        span: 853..854,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 34,
        span: 853..855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 35,
        span: 855..856,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
        column: 38,
        span: 857..859,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 28,
        column: 50,
        span: 860..871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 51,
        span: 871..872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 7,
        span: 873..879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 8,
        span: 879..880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 29,
        column: 14,
        span: 880..886,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 29,
        column: 15,
        span: 886..887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 29,
        column: 18,
        span: 887..890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 19,
        span: 890..891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 29,
        column: 30,
        span: 891..902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 31,
        span: 902..903,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 29,
        column: 32,
        span: 903..904,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 34,
        span: 903..906,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 35,
        span: 906..907,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 29,
        column: 36,
        span: 907..908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 38,
        span: 907..910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 39,
        span: 910..911,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 42,
        span: 912..914,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 29,
        column: 45,
        span: 915..917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 46,
        span: 917..918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 30,
        column: 7,
        span: 919..925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 8,
        span: 925..926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 30,
        column: 14,
        span: 926..932,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 30,
        column: 15,
        span: 932..933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 30,
        column: 18,
        span: 933..936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 19,
        span: 936..937,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 30,
        column: 30,
        span: 937..948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 31,
        span: 948..949,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 30,
        column: 32,
        span: 949..950,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 30,
        column: 33,
        span: 949..951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 34,
        span: 951..952,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 30,
        column: 37,
        span: 953..955,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"9\"",
        ),
        line: 30,
        column: 41,
        span: 956..959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 42,
        span: 959..960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 7,
        span: 961..967,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 967..968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 31,
        column: 14,
        span: 968..974,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 31,
        column: 15,
        span: 974..975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 31,
        column: 18,
        span: 975..978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 19,
        span: 978..979,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 31,
        column: 30,
        span: 979..990,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 31,
        column: 31,
        span: 990..991,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 31,
        column: 32,
        span: 991..992,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 31,
        column: 33,
        span: 991..993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 34,
        span: 993..994,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 37,
        span: 995..997,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"6789\"",
        ),
        line: 31,
        column: 44,
        span: 998..1004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 45,
        span: 1004..1005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 32,
        column: 7,
        span: 1006..1012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 8,
        span: 1012..1013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 32,
        column: 14,
        span: 1013..1019,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 15,
        span: 1019..1020,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 32,
        column: 18,
        span: 1020..1023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 19,
        span: 1023..1024,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 32,
        column: 30,
        span: 1024..1035,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 31,
        span: 1035..1036,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 32,
        column: 32,
        span: 1036..1037,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 33,
        span: 1036..1038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 34,
        span: 1038..1039,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 32,
        column: 36,
        span: 1040..1041,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 37,
        span: 1040..1042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 38,
        span: 1042..1043,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 41,
        span: 1044..1046,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"456\"",
        ),
        line: 32,
        column: 47,
        span: 1047..1052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 48,
        span: 1052..1053,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 33,
        column: 3,
        span: 1054..1056,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 33,
        column: 7,
        span: 1057..1060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_no32",
        ),
        line: 33,
        column: 13,
        span: 1061..1066,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 33,
        column: 0,
        span: 1067..1071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 9,
        span: 1074..1080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 10,
        span: 1080..1081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 34,
        column: 16,
        span: 1081..1087,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 17,
        span: 1087..1088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 34,
        column: 20,
        span: 1088..1091,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 21,
        span: 1091..1092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 34,
        column: 32,
        span: 1092..1103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 33,
        span: 1103..1104,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 34,
        column: 34,
        span: 1104..1105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 35,
        span: 1104..1106,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 34,
        column: 36,
        span: 1106..1107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 38,
        span: 1106..1109,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 39,
        span: 1109..1110,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 34,
        column: 41,
        span: 1111..1112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 42,
        span: 1111..1113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 43,
        span: 1113..1114,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 34,
        column: 46,
        span: 1115..1117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456\"",
        ),
        line: 34,
        column: 55,
        span: 1118..1126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 56,
        span: 1126..1127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 9,
        span: 1130..1136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 10,
        span: 1136..1137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 35,
        column: 16,
        span: 1137..1143,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
        column: 17,
        span: 1143..1144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 35,
        column: 20,
        span: 1144..1147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 21,
        span: 1147..1148,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 35,
        column: 32,
        span: 1148..1159,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 33,
        span: 1159..1160,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 35,
        column: 34,
        span: 1160..1161,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 35,
        span: 1160..1162,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 35,
        column: 36,
        span: 1162..1163,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 38,
        span: 1162..1165,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 39,
        span: 1165..1166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 41,
        span: 1166..1168,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 35,
        column: 42,
        span: 1168..1169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 44,
        span: 1168..1171,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 35,
        column: 46,
        span: 1172..1173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 35,
        column: 48,
        span: 1173..1175,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 49,
        span: 1175..1176,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 52,
        span: 1177..1179,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 35,
        column: 64,
        span: 1180..1191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 65,
        span: 1191..1192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 9,
        span: 1195..1201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 10,
        span: 1201..1202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 36,
        column: 16,
        span: 1202..1208,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 17,
        span: 1208..1209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 36,
        column: 20,
        span: 1209..1212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 21,
        span: 1212..1213,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 36,
        column: 32,
        span: 1213..1224,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 33,
        span: 1224..1225,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 36,
        column: 34,
        span: 1225..1226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 35,
        span: 1225..1227,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 36,
        column: 36,
        span: 1227..1228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 38,
        span: 1227..1230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 39,
        span: 1230..1231,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 36,
        column: 41,
        span: 1232..1233,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 42,
        span: 1232..1234,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 36,
        column: 43,
        span: 1234..1235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 45,
        span: 1234..1237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 46,
        span: 1237..1238,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 49,
        span: 1239..1241,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 36,
        column: 52,
        span: 1242..1244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 53,
        span: 1244..1245,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 37,
        column: 0,
        span: 1246..1249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 7,
        span: 1250..1256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 8,
        span: 1256..1257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 38,
        column: 14,
        span: 1257..1263,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 15,
        span: 1263..1264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 38,
        column: 18,
        span: 1264..1267,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 19,
        span: 1267..1268,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\000123456789\"",
        ),
        line: 38,
        column: 34,
        span: 1268..1283,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 35,
        span: 1283..1284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 36,
        span: 1283..1285,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 37,
        span: 1285..1286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 38,
        span: 1285..1287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 39,
        span: 1287..1288,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 42,
        span: 1289..1291,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"234\"",
        ),
        line: 38,
        column: 48,
        span: 1292..1297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 49,
        span: 1297..1298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 7,
        span: 1299..1305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 8,
        span: 1305..1306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 9,
        span: 1306..1307,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\000123456789\"",
        ),
        line: 39,
        column: 24,
        span: 1307..1322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 25,
        span: 1322..1323,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 39,
        column: 26,
        span: 1323..1324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 39,
        column: 29,
        span: 1324..1327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 30,
        span: 1327..1328,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 31,
        span: 1327..1329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 32,
        span: 1329..1330,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 39,
        column: 35,
        span: 1331..1333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"789\"",
        ),
        line: 39,
        column: 41,
        span: 1334..1339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 42,
        span: 1339..1340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 40,
        column: 6,
        span: 1341..1346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 7,
        span: 1346..1347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 40,
        column: 10,
        span: 1347..1350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 11,
        span: 1350..1351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 7,
        span: 1353..1359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 8,
        span: 1359..1360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 42,
        column: 14,
        span: 1360..1366,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 42,
        column: 15,
        span: 1366..1367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 42,
        column: 19,
        span: 1367..1371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 20,
        span: 1371..1372,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 42,
        column: 31,
        span: 1372..1383,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 32,
        span: 1383..1384,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"345\"",
        ),
        line: 42,
        column: 38,
        span: 1385..1390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 39,
        span: 1390..1391,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 42,
        span: 1392..1394,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 44,
        span: 1394..1396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 45,
        span: 1396..1397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 43,
        column: 2,
        span: 1398..1399,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 3,
        span: 1399..1400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 43,
        column: 4,
        span: 1400..1401,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 6,
        span: 1402..1403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 43,
        column: 13,
        span: 1404..1410,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 14,
        span: 1410..1411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 43,
        column: 18,
        span: 1411..1415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 19,
        span: 1415..1416,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 43,
        column: 30,
        span: 1416..1427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 31,
        span: 1427..1428,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"345\"",
        ),
        line: 43,
        column: 37,
        span: 1429..1434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 38,
        span: 1434..1435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 7,
        span: 1436..1442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 8,
        span: 1442..1443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 44,
        column: 14,
        span: 1443..1449,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 15,
        span: 1449..1450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 44,
        column: 18,
        span: 1450..1453,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 19,
        span: 1453..1454,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123456789\"",
        ),
        line: 44,
        column: 30,
        span: 1454..1465,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 31,
        span: 1465..1466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 44,
        column: 33,
        span: 1467..1468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 34,
        span: 1468..1469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 44,
        column: 36,
        span: 1470..1471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 37,
        span: 1471..1472,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 40,
        span: 1473..1475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"345\"",
        ),
        line: 44,
        column: 46,
        span: 1476..1481,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 47,
        span: 1481..1482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 7,
        span: 1483..1489,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 8,
        span: 1489..1490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 45,
        column: 14,
        span: 1490..1496,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 15,
        span: 1496..1497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 45,
        column: 19,
        span: 1497..1501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 20,
        span: 1501..1502,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890123456789\"",
        ),
        line: 45,
        column: 41,
        span: 1502..1523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 42,
        span: 1523..1524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"345\"",
        ),
        line: 45,
        column: 48,
        span: 1525..1530,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 49,
        span: 1530..1531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 51,
        span: 1531..1533,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 52,
        span: 1533..1534,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 45,
        column: 55,
        span: 1535..1537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 45,
        column: 57,
        span: 1537..1539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 58,
        span: 1539..1540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 7,
        span: 1541..1547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 8,
        span: 1547..1548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 46,
        column: 14,
        span: 1548..1554,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 15,
        span: 1554..1555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 46,
        column: 19,
        span: 1555..1559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 20,
        span: 1559..1560,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890123456789\"",
        ),
        line: 46,
        column: 41,
        span: 1560..1581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 42,
        span: 1581..1582,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"345\"",
        ),
        line: 46,
        column: 48,
        span: 1583..1588,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 49,
        span: 1588..1589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 51,
        span: 1589..1591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 52,
        span: 1591..1592,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 46,
        column: 55,
        span: 1593..1595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 46,
        column: 58,
        span: 1595..1598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 59,
        span: 1598..1599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 47,
        column: 7,
        span: 1600..1606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 8,
        span: 1606..1607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 47,
        column: 14,
        span: 1607..1613,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 15,
        span: 1613..1614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 47,
        column: 19,
        span: 1614..1618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 20,
        span: 1618..1619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890123456789\"",
        ),
        line: 47,
        column: 41,
        span: 1619..1640,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 42,
        span: 1640..1641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"346\"",
        ),
        line: 47,
        column: 48,
        span: 1642..1647,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 49,
        span: 1647..1648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 47,
        column: 51,
        span: 1648..1650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 52,
        span: 1650..1651,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 47,
        column: 55,
        span: 1652..1654,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 47,
        column: 59,
        span: 1655..1658,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 60,
        span: 1658..1659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
        column: 7,
        span: 1660..1666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 8,
        span: 1666..1667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 48,
        column: 14,
        span: 1667..1673,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 15,
        span: 1673..1674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 48,
        column: 19,
        span: 1674..1678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 20,
        span: 1678..1679,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890123456789\"",
        ),
        line: 48,
        column: 41,
        span: 1679..1700,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 42,
        span: 1700..1701,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".45\"",
        ),
        line: 48,
        column: 48,
        span: 1702..1707,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 49,
        span: 1707..1708,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 48,
        column: 51,
        span: 1709..1710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 52,
        span: 1709..1711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 53,
        span: 1711..1712,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 48,
        column: 56,
        span: 1713..1715,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 48,
        column: 59,
        span: 1715..1718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 60,
        span: 1718..1719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 1720..1726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 1726..1727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 49,
        column: 14,
        span: 1727..1733,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 49,
        column: 15,
        span: 1733..1734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 49,
        column: 19,
        span: 1734..1738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 20,
        span: 1738..1739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcdefg\"",
        ),
        line: 49,
        column: 29,
        span: 1739..1748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 30,
        span: 1748..1749,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 49,
        column: 35,
        span: 1750..1754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 36,
        span: 1754..1755,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 38,
        span: 1755..1757,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 39,
        span: 1757..1758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 41,
        span: 1758..1760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 42,
        span: 1760..1761,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 45,
        span: 1762..1764,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 49,
        column: 49,
        span: 1765..1768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 50,
        span: 1768..1769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 50,
        column: 7,
        span: 1770..1776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 8,
        span: 1776..1777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 50,
        column: 14,
        span: 1777..1783,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 15,
        span: 1783..1784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 50,
        column: 19,
        span: 1784..1788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 20,
        span: 1788..1789,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 50,
        column: 22,
        span: 1789..1791,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 50,
        column: 23,
        span: 1791..1792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 50,
        column: 26,
        span: 1793..1795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 27,
        span: 1795..1796,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 30,
        span: 1797..1799,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 32,
        span: 1799..1801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 33,
        span: 1801..1802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 51,
        column: 7,
        span: 1803..1809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 8,
        span: 1809..1810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 51,
        column: 14,
        span: 1810..1816,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 51,
        column: 15,
        span: 1816..1817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 51,
        column: 19,
        span: 1817..1821,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 20,
        span: 1821..1822,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 51,
        column: 22,
        span: 1822..1824,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 23,
        span: 1824..1825,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 51,
        column: 26,
        span: 1826..1828,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 27,
        span: 1828..1829,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 29,
        span: 1829..1831,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 30,
        span: 1831..1832,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 51,
        column: 33,
        span: 1833..1835,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 35,
        span: 1835..1837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 36,
        span: 1837..1838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 52,
        column: 7,
        span: 1839..1845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 8,
        span: 1845..1846,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 52,
        column: 11,
        span: 1846..1849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 52,
        column: 18,
        span: 1850..1856,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 52,
        column: 19,
        span: 1856..1857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 52,
        column: 23,
        span: 1857..1861,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 24,
        span: 1861..1862,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 52,
        column: 26,
        span: 1862..1864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 27,
        span: 1864..1865,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 52,
        column: 30,
        span: 1866..1868,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 31,
        span: 1868..1869,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 52,
        column: 33,
        span: 1869..1871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 34,
        span: 1871..1872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 35,
        span: 1872..1873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 53,
        column: 7,
        span: 1874..1880,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 8,
        span: 1880..1881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 53,
        column: 14,
        span: 1881..1887,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 53,
        column: 15,
        span: 1887..1888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 53,
        column: 19,
        span: 1888..1892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 53,
        column: 20,
        span: 1892..1893,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 53,
        column: 22,
        span: 1893..1895,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 23,
        span: 1895..1896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'aaa'",
        ),
        line: 53,
        column: 29,
        span: 1897..1902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 53,
        column: 30,
        span: 1902..1903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 53,
        column: 32,
        span: 1903..1905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 33,
        span: 1905..1906,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
        column: 36,
        span: 1907..1909,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 53,
        column: 40,
        span: 1910..1913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 53,
        column: 41,
        span: 1913..1914,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
        column: 7,
        span: 1915..1921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 8,
        span: 1921..1922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 9,
        span: 1922..1923,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo(.)alo'",
        ),
        line: 54,
        column: 20,
        span: 1923..1934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 21,
        span: 1934..1935,
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        line: 54,
        column: 22,
        span: 1935..1936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 54,
        column: 26,
        span: 1936..1940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 27,
        span: 1940..1941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'(.)'",
        ),
        line: 54,
        column: 32,
        span: 1941..1946,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 33,
        span: 1946..1947,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 35,
        span: 1947..1949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 36,
        span: 1949..1950,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 38,
        span: 1950..1952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 39,
        span: 1952..1953,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
        column: 42,
        span: 1954..1956,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 44,
        span: 1956..1958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 45,
        span: 1958..1959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 55,
        column: 6,
        span: 1960..1965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 7,
        span: 1965..1966,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 55,
        column: 10,
        span: 1966..1969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 11,
        span: 1969..1970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 57,
        column: 7,
        span: 1972..1978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 8,
        span: 1978..1979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 57,
        column: 14,
        span: 1979..1985,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 15,
        span: 1985..1986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 57,
        column: 18,
        span: 1986..1989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 19,
        span: 1989..1990,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 57,
        column: 21,
        span: 1990..1992,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 22,
        span: 1992..1993,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 57,
        column: 25,
        span: 1994..1996,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 57,
        column: 27,
        span: 1996..1998,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 28,
        span: 1998..1999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
        column: 7,
        span: 2000..2006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 8,
        span: 2006..2007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 58,
        column: 14,
        span: 2007..2013,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 15,
        span: 2013..2014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 58,
        column: 18,
        span: 2014..2017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 19,
        span: 2017..2018,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        line: 58,
        column: 27,
        span: 2018..2026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 28,
        span: 2026..2027,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 31,
        span: 2028..2030,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 33,
        span: 2030..2032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 34,
        span: 2032..2033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 7,
        span: 2034..2040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 8,
        span: 2040..2041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 59,
        column: 14,
        span: 2041..2047,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 15,
        span: 2047..2048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 59,
        column: 18,
        span: 2048..2051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 19,
        span: 2051..2052,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890\"",
        ),
        line: 59,
        column: 31,
        span: 2052..2064,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 32,
        span: 2064..2065,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 35,
        span: 2066..2068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 38,
        span: 2068..2071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 39,
        span: 2071..2072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 7,
        span: 2074..2080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 8,
        span: 2080..2081,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 61,
        column: 9,
        span: 2081..2082,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 61,
        column: 11,
        span: 2082..2084,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
        column: 14,
        span: 2085..2087,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 16,
        span: 2087..2089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 17,
        span: 2089..2090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 62,
        column: 7,
        span: 2091..2097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 8,
        span: 2097..2098,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 62,
        column: 9,
        span: 2098..2099,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\"",
        ),
        line: 62,
        column: 17,
        span: 2099..2107,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 62,
        column: 20,
        span: 2108..2110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 62,
        column: 22,
        span: 2110..2112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 23,
        span: 2112..2113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 63,
        column: 7,
        span: 2114..2120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 8,
        span: 2120..2121,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 63,
        column: 9,
        span: 2121..2122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1234567890\"",
        ),
        line: 63,
        column: 21,
        span: 2122..2134,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 63,
        column: 24,
        span: 2135..2137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 63,
        column: 27,
        span: 2137..2140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 28,
        span: 2140..2141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 7,
        span: 2143..2149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 8,
        span: 2149..2150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 65,
        column: 14,
        span: 2150..2156,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 15,
        span: 2156..2157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 65,
        column: 19,
        span: 2157..2161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 20,
        span: 2161..2162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 65,
        column: 23,
        span: 2162..2165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 24,
        span: 2165..2166,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 27,
        span: 2167..2169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "97",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 30,
        span: 2169..2172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 31,
        span: 2172..2173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
        column: 7,
        span: 2174..2180,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 8,
        span: 2180..2181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 66,
        column: 14,
        span: 2181..2187,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
        column: 15,
        span: 2187..2188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 66,
        column: 19,
        span: 2188..2192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 20,
        span: 2192..2193,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4\"",
        ),
        line: 66,
        column: 26,
        span: 2193..2199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 27,
        span: 2199..2200,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 66,
        column: 29,
        span: 2201..2202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "127",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 33,
        span: 2202..2206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 34,
        span: 2206..2207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
        column: 7,
        span: 2208..2214,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 8,
        span: 2214..2215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 67,
        column: 14,
        span: 2215..2221,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 15,
        span: 2221..2222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 67,
        column: 19,
        span: 2222..2226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 20,
        span: 2226..2227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 67,
        column: 26,
        span: 2227..2233,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 27,
        span: 2233..2234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 67,
        column: 31,
        span: 2234..2238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 32,
        span: 2238..2239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 35,
        span: 2238..2242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 36,
        span: 2242..2243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 37,
        span: 2243..2244,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 40,
        span: 2245..2247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 44,
        span: 2247..2251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 45,
        span: 2251..2252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 7,
        span: 2253..2259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 8,
        span: 2259..2260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 68,
        column: 14,
        span: 2260..2266,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 15,
        span: 2266..2267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 68,
        column: 19,
        span: 2267..2271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 20,
        span: 2271..2272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 68,
        column: 26,
        span: 2272..2278,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 68,
        column: 27,
        span: 2278..2279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 68,
        column: 31,
        span: 2279..2283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 32,
        span: 2283..2284,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 33,
        span: 2283..2285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 34,
        span: 2285..2286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 35,
        span: 2286..2287,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 68,
        column: 38,
        span: 2288..2290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 40,
        span: 2290..2292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 41,
        span: 2292..2293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 2294..2300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 2300..2301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 69,
        column: 14,
        span: 2301..2307,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 69,
        column: 15,
        span: 2307..2308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 69,
        column: 19,
        span: 2308..2312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 20,
        span: 2312..2313,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 69,
        column: 24,
        span: 2313..2317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 25,
        span: 2317..2318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 28,
        span: 2319..2321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 30,
        span: 2321..2323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 31,
        span: 2323..2324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
        column: 7,
        span: 2325..2331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 8,
        span: 2331..2332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 70,
        column: 14,
        span: 2332..2338,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 15,
        span: 2338..2339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 70,
        column: 19,
        span: 2339..2343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 20,
        span: 2343..2344,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0alo\\0x\"",
        ),
        line: 70,
        column: 32,
        span: 2344..2356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 33,
        span: 2356..2357,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 70,
        column: 35,
        span: 2358..2359,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 36,
        span: 2358..2360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 37,
        span: 2360..2361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 40,
        span: 2362..2364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 70,
        column: 47,
        span: 2365..2371,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 70,
        column: 48,
        span: 2371..2372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 70,
        column: 52,
        span: 2372..2376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 53,
        span: 2376..2377,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 70,
        column: 56,
        span: 2377..2380,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 57,
        span: 2380..2381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 58,
        span: 2381..2382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 7,
        span: 2383..2389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 8,
        span: 2389..2390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 71,
        column: 14,
        span: 2390..2396,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 71,
        column: 15,
        span: 2396..2397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 71,
        column: 19,
        span: 2397..2401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 20,
        span: 2401..2402,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ba\"",
        ),
        line: 71,
        column: 24,
        span: 2402..2406,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 25,
        span: 2406..2407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 27,
        span: 2407..2409,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 28,
        span: 2409..2410,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 31,
        span: 2411..2413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "97",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 34,
        span: 2413..2416,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 35,
        span: 2416..2417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 72,
        column: 7,
        span: 2418..2424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 8,
        span: 2424..2425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 72,
        column: 14,
        span: 2425..2431,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 15,
        span: 2431..2432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 72,
        column: 19,
        span: 2432..2436,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 20,
        span: 2436..2437,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n\"",
        ),
        line: 72,
        column: 26,
        span: 2437..2443,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 27,
        span: 2443..2444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 29,
        span: 2444..2446,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 30,
        span: 2446..2447,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 72,
        column: 32,
        span: 2448..2449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 33,
        span: 2448..2450,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 34,
        span: 2450..2451,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 72,
        column: 37,
        span: 2452..2454,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 40,
        span: 2454..2457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 41,
        span: 2457..2458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 73,
        column: 7,
        span: 2459..2465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 8,
        span: 2465..2466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 73,
        column: 14,
        span: 2466..2472,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 15,
        span: 2472..2473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 73,
        column: 19,
        span: 2473..2477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 20,
        span: 2477..2478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\n\"",
        ),
        line: 73,
        column: 26,
        span: 2478..2484,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 27,
        span: 2484..2485,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 29,
        span: 2485..2487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 30,
        span: 2487..2488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 32,
        span: 2488..2490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 33,
        span: 2490..2491,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
        column: 36,
        span: 2492..2494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 39,
        span: 2494..2497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 40,
        span: 2497..2498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
        column: 7,
        span: 2499..2505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 8,
        span: 2505..2506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 74,
        column: 14,
        span: 2506..2512,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 74,
        column: 15,
        span: 2512..2513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 74,
        column: 19,
        span: 2513..2517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 20,
        span: 2517..2518,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 74,
        column: 22,
        span: 2518..2520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 23,
        span: 2520..2521,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 26,
        span: 2522..2524,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 74,
        column: 30,
        span: 2525..2528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 31,
        span: 2528..2529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
        column: 7,
        span: 2530..2536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 8,
        span: 2536..2537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 75,
        column: 14,
        span: 2537..2543,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 75,
        column: 15,
        span: 2543..2544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 75,
        column: 19,
        span: 2544..2548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 20,
        span: 2548..2549,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 75,
        column: 24,
        span: 2549..2553,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 25,
        span: 2553..2554,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 75,
        column: 27,
        span: 2555..2556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 28,
        span: 2555..2557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 29,
        span: 2557..2558,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 32,
        span: 2559..2561,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 75,
        column: 36,
        span: 2562..2565,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 37,
        span: 2565..2566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
        column: 7,
        span: 2567..2573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 8,
        span: 2573..2574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 76,
        column: 14,
        span: 2574..2580,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 76,
        column: 15,
        span: 2580..2581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 76,
        column: 19,
        span: 2581..2585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 20,
        span: 2585..2586,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 76,
        column: 24,
        span: 2586..2590,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 25,
        span: 2590..2591,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 27,
        span: 2591..2593,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 28,
        span: 2593..2594,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 31,
        span: 2595..2597,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 76,
        column: 35,
        span: 2598..2601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 36,
        span: 2601..2602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 77,
        column: 7,
        span: 2603..2609,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 8,
        span: 2609..2610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 77,
        column: 14,
        span: 2610..2616,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 77,
        column: 15,
        span: 2616..2617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 77,
        column: 19,
        span: 2617..2621,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 20,
        span: 2621..2622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 77,
        column: 24,
        span: 2622..2626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 25,
        span: 2626..2627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 27,
        span: 2627..2629,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 28,
        span: 2629..2630,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 31,
        span: 2630..2633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 32,
        span: 2633..2634,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 77,
        column: 35,
        span: 2635..2637,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 77,
        column: 39,
        span: 2638..2641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 40,
        span: 2641..2642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 78,
        column: 7,
        span: 2643..2649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 8,
        span: 2649..2650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 78,
        column: 14,
        span: 2650..2656,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 78,
        column: 15,
        span: 2656..2657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 78,
        column: 19,
        span: 2657..2661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 20,
        span: 2661..2662,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 78,
        column: 24,
        span: 2662..2666,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 25,
        span: 2666..2667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 27,
        span: 2667..2669,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 28,
        span: 2669..2670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 30,
        span: 2670..2672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 31,
        span: 2672..2673,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 78,
        column: 34,
        span: 2674..2676,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 78,
        column: 38,
        span: 2677..2680,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 39,
        span: 2680..2681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 79,
        column: 7,
        span: 2682..2688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 8,
        span: 2688..2689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 79,
        column: 14,
        span: 2689..2695,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 79,
        column: 15,
        span: 2695..2696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 79,
        column: 19,
        span: 2696..2700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 20,
        span: 2700..2701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 21,
        span: 2701..2702,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 79,
        column: 24,
        span: 2703..2705,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 79,
        column: 27,
        span: 2706..2708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 28,
        span: 2708..2709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 80,
        column: 7,
        span: 2710..2716,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 8,
        span: 2716..2717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 80,
        column: 14,
        span: 2717..2723,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 15,
        span: 2723..2724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 80,
        column: 19,
        span: 2724..2728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 20,
        span: 2728..2729,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 21,
        span: 2728..2730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 22,
        span: 2730..2731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 26,
        span: 2731..2735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 27,
        span: 2735..2736,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 80,
        column: 29,
        span: 2736..2738,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 30,
        span: 2738..2739,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 80,
        column: 33,
        span: 2740..2742,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\255\\0\"",
        ),
        line: 80,
        column: 44,
        span: 2743..2753,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 45,
        span: 2753..2754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 81,
        column: 7,
        span: 2755..2761,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 8,
        span: 2761..2762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 81,
        column: 14,
        span: 2762..2768,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
        column: 15,
        span: 2768..2769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 81,
        column: 19,
        span: 2769..2773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 20,
        span: 2773..2774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 21,
        span: 2773..2775,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 22,
        span: 2775..2776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 81,
        column: 29,
        span: 2777..2783,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
        column: 30,
        span: 2783..2784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 81,
        column: 34,
        span: 2784..2788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 35,
        span: 2788..2789,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4\"",
        ),
        line: 81,
        column: 41,
        span: 2789..2795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 42,
        span: 2795..2796,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 43,
        span: 2796..2797,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 45,
        span: 2797..2799,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 46,
        span: 2799..2800,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 81,
        column: 49,
        span: 2801..2803,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\xe4\\0\"",
        ),
        line: 81,
        column: 60,
        span: 2804..2814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 61,
        span: 2814..2815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
        column: 7,
        span: 2816..2822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 8,
        span: 2822..2823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 82,
        column: 14,
        span: 2823..2829,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 15,
        span: 2829..2830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 82,
        column: 19,
        span: 2830..2834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 20,
        span: 2834..2835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 82,
        column: 26,
        span: 2835..2841,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 27,
        span: 2841..2842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 82,
        column: 31,
        span: 2842..2846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 32,
        span: 2846..2847,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4l\\0óu\"",
        ),
        line: 82,
        column: 43,
        span: 2847..2858,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 44,
        span: 2858..2859,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 46,
        span: 2859..2861,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 47,
        span: 2861..2862,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 82,
        column: 49,
        span: 2863..2864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 50,
        span: 2863..2865,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 51,
        span: 2865..2866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 52,
        span: 2866..2867,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
        column: 55,
        span: 2868..2870,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4l\\0óu\"",
        ),
        line: 82,
        column: 67,
        span: 2871..2882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 68,
        span: 2882..2883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 83,
        column: 7,
        span: 2884..2890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 8,
        span: 2890..2891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 83,
        column: 14,
        span: 2891..2897,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 83,
        column: 15,
        span: 2897..2898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 83,
        column: 19,
        span: 2898..2902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 20,
        span: 2902..2903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 83,
        column: 26,
        span: 2903..2909,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 83,
        column: 27,
        span: 2909..2910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 83,
        column: 31,
        span: 2910..2914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 32,
        span: 2914..2915,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4l\\0óu\"",
        ),
        line: 83,
        column: 43,
        span: 2915..2926,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 44,
        span: 2926..2927,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 46,
        span: 2927..2929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 47,
        span: 2929..2930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 49,
        span: 2930..2932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 50,
        span: 2932..2933,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 51,
        span: 2933..2934,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 83,
        column: 54,
        span: 2935..2937,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 83,
        column: 57,
        span: 2938..2940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 58,
        span: 2940..2941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
        column: 7,
        span: 2942..2948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 8,
        span: 2948..2949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 84,
        column: 14,
        span: 2949..2955,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 84,
        column: 15,
        span: 2955..2956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 84,
        column: 19,
        span: 2956..2960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 20,
        span: 2960..2961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 84,
        column: 26,
        span: 2961..2967,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 84,
        column: 27,
        span: 2967..2968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 84,
        column: 31,
        span: 2968..2972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 32,
        span: 2972..2973,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4l\\0óu\"",
        ),
        line: 84,
        column: 43,
        span: 2973..2984,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 44,
        span: 2984..2985,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 84,
        column: 46,
        span: 2986..2987,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 48,
        span: 2986..2989,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 49,
        span: 2989..2990,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 53,
        span: 2990..2994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 54,
        span: 2994..2995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 55,
        span: 2995..2996,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
        column: 58,
        span: 2997..2999,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4l\\0óu\"",
        ),
        line: 84,
        column: 70,
        span: 3000..3011,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 71,
        span: 3011..3012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 85,
        column: 6,
        span: 3013..3018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 7,
        span: 3018..3019,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 85,
        column: 10,
        span: 3019..3022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 11,
        span: 3022..3023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
        column: 7,
        span: 3025..3031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 8,
        span: 3031..3032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 87,
        column: 14,
        span: 3032..3038,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 87,
        column: 15,
        span: 3038..3039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        line: 87,
        column: 20,
        span: 3039..3044,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 21,
        span: 3044..3045,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ab\\0c\"",
        ),
        line: 87,
        column: 28,
        span: 3045..3052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 29,
        span: 3052..3053,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 32,
        span: 3054..3056,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AB\\0C\"",
        ),
        line: 87,
        column: 40,
        span: 3057..3064,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 41,
        span: 3064..3065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 7,
        span: 3066..3072,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 8,
        span: 3072..3073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 88,
        column: 14,
        span: 3073..3079,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 15,
        span: 3079..3080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lower",
        ),
        line: 88,
        column: 20,
        span: 3080..3085,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 21,
        span: 3085..3086,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0ABCc%$\"",
        ),
        line: 88,
        column: 31,
        span: 3086..3096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 32,
        span: 3096..3097,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 35,
        span: 3098..3100,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0abcc%$\"",
        ),
        line: 88,
        column: 46,
        span: 3101..3111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 47,
        span: 3111..3112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 89,
        column: 7,
        span: 3113..3119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 8,
        span: 3119..3120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 89,
        column: 14,
        span: 3120..3126,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 89,
        column: 15,
        span: 3126..3127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 89,
        column: 18,
        span: 3127..3130,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 19,
        span: 3130..3131,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'teste'",
        ),
        line: 89,
        column: 26,
        span: 3131..3138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 89,
        column: 27,
        span: 3138..3139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 89,
        column: 29,
        span: 3139..3141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 30,
        span: 3141..3142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 89,
        column: 33,
        span: 3143..3145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 89,
        column: 36,
        span: 3146..3148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 37,
        span: 3148..3149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 90,
        column: 7,
        span: 3150..3156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 8,
        span: 3156..3157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 90,
        column: 14,
        span: 3157..3163,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 90,
        column: 15,
        span: 3163..3164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 90,
        column: 18,
        span: 3164..3167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 19,
        span: 3167..3168,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'tés\\00tê'",
        ),
        line: 90,
        column: 29,
        span: 3168..3178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 90,
        column: 30,
        span: 3178..3179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 32,
        span: 3179..3181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 33,
        span: 3181..3182,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 90,
        column: 36,
        span: 3183..3185,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'tés\\0têtés\\000tê'",
        ),
        line: 90,
        column: 55,
        span: 3186..3204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 56,
        span: 3204..3205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 91,
        column: 7,
        span: 3206..3212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 8,
        span: 3212..3213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 91,
        column: 14,
        span: 3213..3219,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 91,
        column: 15,
        span: 3219..3220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 91,
        column: 18,
        span: 3220..3223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 19,
        span: 3223..3224,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 91,
        column: 21,
        span: 3224..3226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 91,
        column: 22,
        span: 3226..3227,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 91,
        column: 25,
        span: 3227..3230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 26,
        span: 3230..3231,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 91,
        column: 29,
        span: 3232..3234,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 91,
        column: 32,
        span: 3235..3237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 33,
        span: 3237..3238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 94,
        column: 7,
        span: 3270..3276,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 8,
        span: 3276..3277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 94,
        column: 14,
        span: 3277..3283,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 94,
        column: 15,
        span: 3283..3284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 94,
        column: 18,
        span: 3284..3287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 19,
        span: 3287..3288,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'teste'",
        ),
        line: 94,
        column: 26,
        span: 3288..3295,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 27,
        span: 3295..3296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 29,
        span: 3296..3298,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 30,
        span: 3298..3299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 94,
        column: 37,
        span: 3300..3306,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 38,
        span: 3306..3307,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 94,
        column: 41,
        span: 3308..3310,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 94,
        column: 44,
        span: 3311..3313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 45,
        span: 3313..3314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 95,
        column: 7,
        span: 3315..3321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 8,
        span: 3321..3322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 95,
        column: 14,
        span: 3322..3328,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
        column: 15,
        span: 3328..3329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 95,
        column: 18,
        span: 3329..3332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 19,
        span: 3332..3333,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'teste'",
        ),
        line: 95,
        column: 26,
        span: 3333..3340,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 27,
        span: 3340..3341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 29,
        span: 3341..3343,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 30,
        span: 3343..3344,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 95,
        column: 37,
        span: 3345..3351,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 38,
        span: 3351..3352,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 41,
        span: 3353..3355,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'teste'",
        ),
        line: 95,
        column: 49,
        span: 3356..3363,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 50,
        span: 3363..3364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
        column: 7,
        span: 3365..3371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 8,
        span: 3371..3372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 96,
        column: 14,
        span: 3372..3378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
        column: 15,
        span: 3378..3379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 96,
        column: 18,
        span: 3379..3382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 19,
        span: 3382..3383,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0\\1'",
        ),
        line: 96,
        column: 27,
        span: 3383..3391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 28,
        span: 3391..3392,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
        column: 30,
        span: 3392..3394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 31,
        span: 3394..3395,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0'",
        ),
        line: 96,
        column: 38,
        span: 3396..3402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 39,
        span: 3402..3403,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
        column: 42,
        span: 3404..3406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\1\\0\\1\\0\\0\\1\\0\\1'",
        ),
        line: 96,
        column: 61,
        span: 3407..3425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 62,
        span: 3425..3426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 97,
        column: 7,
        span: 3427..3433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 8,
        span: 3433..3434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 97,
        column: 14,
        span: 3434..3440,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 97,
        column: 15,
        span: 3440..3441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 97,
        column: 18,
        span: 3441..3444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 19,
        span: 3444..3445,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 97,
        column: 21,
        span: 3445..3447,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 22,
        span: 3447..3448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 25,
        span: 3448..3451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 26,
        span: 3451..3452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 97,
        column: 30,
        span: 3453..3456,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 31,
        span: 3456..3457,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 97,
        column: 34,
        span: 3458..3460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 97,
        column: 41,
        span: 3461..3467,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 97,
        column: 42,
        span: 3467..3468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 97,
        column: 45,
        span: 3468..3471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 46,
        span: 3471..3472,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 97,
        column: 49,
        span: 3472..3475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 50,
        span: 3475..3476,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 52,
        span: 3476..3478,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 53,
        span: 3478..3479,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 54,
        span: 3479..3480,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 98,
        column: 3,
        span: 3481..3483,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 98,
        column: 7,
        span: 3484..3487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_no32",
        ),
        line: 98,
        column: 13,
        span: 3488..3493,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 98,
        column: 0,
        span: 3494..3498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 99,
        column: 9,
        span: 3501..3507,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 10,
        span: 3507..3508,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 99,
        column: 13,
        span: 3508..3511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 99,
        column: 19,
        span: 3512..3517,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 20,
        span: 3517..3518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 99,
        column: 26,
        span: 3518..3524,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 27,
        span: 3524..3525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 99,
        column: 30,
        span: 3525..3528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 31,
        span: 3528..3529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aa\"",
        ),
        line: 99,
        column: 36,
        span: 3530..3534,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 37,
        span: 3534..3535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 39,
        span: 3535..3537,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 99,
        column: 40,
        span: 3537..3538,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 42,
        span: 3537..3540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 43,
        span: 3540..3541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 44,
        span: 3541..3542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 100,
        column: 9,
        span: 3545..3551,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 10,
        span: 3551..3552,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 100,
        column: 13,
        span: 3552..3555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 100,
        column: 19,
        span: 3556..3561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 20,
        span: 3561..3562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 100,
        column: 26,
        span: 3562..3568,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 100,
        column: 27,
        span: 3568..3569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 100,
        column: 30,
        span: 3569..3572,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 31,
        span: 3572..3573,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 100,
        column: 34,
        span: 3574..3576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 35,
        span: 3576..3577,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 37,
        span: 3577..3579,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 100,
        column: 38,
        span: 3579..3580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 100,
        column: 40,
        span: 3579..3582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 41,
        span: 3582..3583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aa\"",
        ),
        line: 100,
        column: 46,
        span: 3584..3588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 47,
        span: 3588..3589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 48,
        span: 3589..3590,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 101,
        column: 0,
        span: 3591..3594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 103,
        column: 7,
        span: 3596..3602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 8,
        span: 3602..3603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 103,
        column: 14,
        span: 3603..3609,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
        column: 15,
        span: 3609..3610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        line: 103,
        column: 22,
        span: 3610..3617,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 103,
        column: 24,
        span: 3617..3619,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 103,
        column: 27,
        span: 3620..3622,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 103,
        column: 30,
        span: 3623..3625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 31,
        span: 3625..3626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 104,
        column: 7,
        span: 3627..3633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 8,
        span: 3633..3634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 104,
        column: 14,
        span: 3634..3640,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 104,
        column: 15,
        span: 3640..3641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        line: 104,
        column: 22,
        span: 3641..3648,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\1\\2\\3\"",
        ),
        line: 104,
        column: 32,
        span: 3648..3658,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 104,
        column: 35,
        span: 3659..3661,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\3\\2\\1\\0\"",
        ),
        line: 104,
        column: 46,
        span: 3662..3672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 47,
        span: 3672..3673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 105,
        column: 7,
        span: 3674..3680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 105,
        column: 8,
        span: 3680..3681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 105,
        column: 14,
        span: 3681..3687,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
        column: 15,
        span: 3687..3688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "reverse",
        ),
        line: 105,
        column: 22,
        span: 3688..3695,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0001234\"",
        ),
        line: 105,
        column: 32,
        span: 3695..3705,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 105,
        column: 35,
        span: 3706..3708,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4321\\0\"",
        ),
        line: 105,
        column: 44,
        span: 3709..3717,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 45,
        span: 3717..3718,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 107,
        column: 4,
        span: 3720..3723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 107,
        column: 6,
        span: 3724..3725,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 7,
        span: 3725..3726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 8,
        span: 3725..3727,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
        column: 9,
        span: 3727..3728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 107,
        column: 11,
        span: 3727..3730,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 107,
        column: 14,
        span: 3731..3733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 107,
        column: 21,
        span: 3734..3740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 22,
        span: 3740..3741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 107,
        column: 28,
        span: 3741..3747,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
        column: 29,
        span: 3747..3748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 107,
        column: 32,
        span: 3748..3751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 33,
        span: 3751..3752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 107,
        column: 39,
        span: 3752..3758,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
        column: 40,
        span: 3758..3759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 107,
        column: 43,
        span: 3759..3762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 44,
        span: 3762..3763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 107,
        column: 47,
        span: 3763..3766,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
        column: 48,
        span: 3766..3767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 107,
        column: 50,
        span: 3768..3769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 51,
        span: 3769..3770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 52,
        span: 3770..3771,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 107,
        column: 55,
        span: 3772..3774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 107,
        column: 57,
        span: 3775..3776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 58,
        span: 3776..3777,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 107,
        column: 0,
        span: 3778..3781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 109,
        column: 7,
        span: 3783..3789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 8,
        span: 3789..3790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 109,
        column: 12,
        span: 3790..3794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 13,
        span: 3794..3795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 109,
        column: 21,
        span: 3795..3803,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 22,
        span: 3803..3804,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 109,
        column: 25,
        span: 3804..3807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 26,
        span: 3807..3808,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 27,
        span: 3808..3809,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
        column: 30,
        span: 3810..3812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 109,
        column: 39,
        span: 3813..3821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 40,
        span: 3821..3822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 110,
        column: 7,
        span: 3823..3829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 8,
        span: 3829..3830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 110,
        column: 12,
        span: 3830..3834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 13,
        span: 3834..3835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 110,
        column: 21,
        span: 3835..3843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 22,
        span: 3843..3844,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 24,
        span: 3843..3846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 25,
        span: 3846..3847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 26,
        span: 3847..3848,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 110,
        column: 29,
        span: 3849..3851,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 110,
        column: 38,
        span: 3852..3860,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 39,
        span: 3860..3861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 7,
        span: 3862..3868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 8,
        span: 3868..3869,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 111,
        column: 10,
        span: 3869..3871,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 111,
        column: 12,
        span: 3871..3873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 14,
        span: 3872..3875,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 111,
        column: 17,
        span: 3876..3878,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'12'",
        ),
        line: 111,
        column: 22,
        span: 3879..3883,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 111,
        column: 26,
        span: 3884..3887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 111,
        column: 31,
        span: 3888..3892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 32,
        span: 3892..3893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 34,
        span: 3892..3895,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 111,
        column: 37,
        span: 3896..3898,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 111,
        column: 40,
        span: 3899..3901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 41,
        span: 3901..3902,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 111,
        column: 44,
        span: 3903..3905,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 111,
        column: 53,
        span: 3906..3914,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 54,
        span: 3914..3915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 7,
        span: 3916..3922,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 8,
        span: 3922..3923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 112,
        column: 14,
        span: 3923..3929,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
        column: 15,
        span: 3929..3930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 112,
        column: 19,
        span: 3930..3934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 20,
        span: 3934..3935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 112,
        column: 28,
        span: 3935..3943,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 112,
        column: 29,
        span: 3943..3944,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 112,
        column: 30,
        span: 3944..3945,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 112,
        column: 31,
        span: 3945..3946,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table:'",
        ),
        line: 112,
        column: 40,
        span: 3947..3955,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 41,
        span: 3955..3956,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 42,
        span: 3956..3957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 113,
        column: 7,
        span: 3958..3964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 8,
        span: 3964..3965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 113,
        column: 14,
        span: 3965..3971,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 113,
        column: 15,
        span: 3971..3972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 113,
        column: 19,
        span: 3972..3976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 20,
        span: 3976..3977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 113,
        column: 28,
        span: 3977..3985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 29,
        span: 3985..3986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 113,
        column: 34,
        span: 3986..3991,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 35,
        span: 3991..3992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 113,
        column: 36,
        span: 3992..3993,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'function:'",
        ),
        line: 113,
        column: 48,
        span: 3994..4005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 49,
        span: 4005..4006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 50,
        span: 4006..4007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
        column: 7,
        span: 4008..4014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 8,
        span: 4014..4015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 114,
        column: 16,
        span: 4015..4023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 17,
        span: 4023..4024,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1234567890123",
                    after_decimal: "",
                },
            ),
        ),
        line: 114,
        column: 30,
        span: 4023..4037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 31,
        span: 4037..4038,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 114,
        column: 34,
        span: 4039..4041,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1234567890123'",
        ),
        line: 114,
        column: 50,
        span: 4042..4057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 51,
        span: 4057..4058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 115,
        column: 7,
        span: 4059..4065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 8,
        span: 4065..4066,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 115,
        column: 9,
        span: 4066..4067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 115,
        column: 17,
        span: 4067..4075,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 18,
        span: 4075..4076,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        line: 115,
        column: 22,
        span: 4076..4080,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 23,
        span: 4080..4081,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 26,
        span: 4082..4084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 28,
        span: 4084..4086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 29,
        span: 4086..4087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 116,
        column: 7,
        span: 4088..4094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 8,
        span: 4094..4095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 116,
        column: 16,
        span: 4095..4103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 17,
        span: 4103..4104,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 116,
        column: 21,
        span: 4104..4108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 22,
        span: 4108..4109,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 116,
        column: 25,
        span: 4110..4112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"true\"",
        ),
        line: 116,
        column: 32,
        span: 4113..4119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 33,
        span: 4119..4120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 7,
        span: 4121..4127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 8,
        span: 4127..4128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 117,
        column: 16,
        span: 4128..4136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 17,
        span: 4136..4137,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 117,
        column: 22,
        span: 4137..4142,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 23,
        span: 4142..4143,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 26,
        span: 4144..4146,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"false\"",
        ),
        line: 117,
        column: 34,
        span: 4147..4154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 35,
        span: 4154..4155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 118,
        column: 6,
        span: 4156..4161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 7,
        span: 4161..4162,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 118,
        column: 10,
        span: 4162..4165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 11,
        span: 4165..4166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 120,
        column: 2,
        span: 4168..4169,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 4,
        span: 4170..4171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"ílo\"\\n\\\\'",
        ),
        line: 120,
        column: 16,
        span: 4172..4183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 121,
        column: 7,
        span: 4184..4190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 8,
        span: 4190..4191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 121,
        column: 14,
        span: 4191..4197,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 121,
        column: 15,
        span: 4197..4198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 121,
        column: 21,
        span: 4198..4204,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 22,
        span: 4204..4205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%q%s'",
        ),
        line: 121,
        column: 28,
        span: 4205..4211,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 29,
        span: 4211..4212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 121,
        column: 31,
        span: 4213..4214,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 32,
        span: 4214..4215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 121,
        column: 34,
        span: 4216..4217,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 35,
        span: 4217..4218,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 38,
        span: 4219..4221,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"\\\\\"ílo\\\\\"\\\\\\n\\\\\\\\\"\"ílo\"\\n\\\\'",
        ),
        line: 121,
        column: 69,
        span: 4222..4252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 70,
        span: 4252..4253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 122,
        column: 7,
        span: 4254..4260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 8,
        span: 4260..4261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 122,
        column: 14,
        span: 4261..4267,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 122,
        column: 15,
        span: 4267..4268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 122,
        column: 21,
        span: 4268..4274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 22,
        span: 4274..4275,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%q'",
        ),
        line: 122,
        column: 26,
        span: 4275..4279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 122,
        column: 27,
        span: 4279..4280,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\"",
        ),
        line: 122,
        column: 32,
        span: 4281..4285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 33,
        span: 4285..4286,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
        column: 36,
        span: 4287..4289,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\0\"]]",
        ),
        line: 122,
        column: 45,
        span: 4290..4298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 46,
        span: 4298..4299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 123,
        column: 7,
        span: 4300..4306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 8,
        span: 4306..4307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 123,
        column: 12,
        span: 4307..4311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 13,
        span: 4311..4312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 123,
        column: 19,
        span: 4312..4318,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 123,
        column: 20,
        span: 4318..4319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 123,
        column: 26,
        span: 4319..4325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 27,
        span: 4325..4326,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return %q'",
        ),
        line: 123,
        column: 38,
        span: 4326..4337,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 39,
        span: 4337..4338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 123,
        column: 41,
        span: 4339..4340,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 42,
        span: 4340..4341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 43,
        span: 4341..4342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 44,
        span: 4342..4343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 45,
        span: 4343..4344,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 123,
        column: 48,
        span: 4345..4347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 123,
        column: 50,
        span: 4348..4349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 51,
        span: 4349..4350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 124,
        column: 2,
        span: 4351..4352,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 124,
        column: 4,
        span: 4353..4354,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\1\\0023\\5\\0009\"",
        ),
        line: 124,
        column: 23,
        span: 4355..4373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
        column: 7,
        span: 4374..4380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 8,
        span: 4380..4381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 125,
        column: 12,
        span: 4381..4385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 13,
        span: 4385..4386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 125,
        column: 19,
        span: 4386..4392,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
        column: 20,
        span: 4392..4393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 125,
        column: 26,
        span: 4393..4399,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 27,
        span: 4399..4400,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return %q'",
        ),
        line: 125,
        column: 38,
        span: 4400..4411,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 39,
        span: 4411..4412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 125,
        column: 41,
        span: 4413..4414,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 42,
        span: 4414..4415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 43,
        span: 4415..4416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 44,
        span: 4416..4417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 45,
        span: 4417..4418,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 48,
        span: 4419..4421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 125,
        column: 50,
        span: 4422..4423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 51,
        span: 4423..4424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 126,
        column: 7,
        span: 4425..4431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 8,
        span: 4431..4432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 126,
        column: 14,
        span: 4432..4438,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
        column: 15,
        span: 4438..4439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 126,
        column: 21,
        span: 4439..4445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 22,
        span: 4445..4446,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0%c\\0%c%x\\0\"",
        ),
        line: 126,
        column: 36,
        span: 4446..4460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 37,
        span: 4460..4461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 126,
        column: 44,
        span: 4462..4468,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
        column: 45,
        span: 4468..4469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 126,
        column: 49,
        span: 4469..4473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 50,
        span: 4473..4474,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\xe4\"",
        ),
        line: 126,
        column: 56,
        span: 4474..4480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 57,
        span: 4480..4481,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 58,
        span: 4481..4482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 126,
        column: 65,
        span: 4483..4489,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
        column: 66,
        span: 4489..4490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "byte",
        ),
        line: 126,
        column: 70,
        span: 4490..4494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 71,
        span: 4494..4495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 126,
        column: 74,
        span: 4495..4498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 75,
        span: 4498..4499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 126,
        column: 76,
        span: 4499..4500,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "140",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 80,
        span: 4500..4504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 81,
        span: 4504..4505,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 84,
        span: 4506..4508,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\xe4\\0b8c\\0\"",
        ),
        line: 127,
        column: 30,
        span: 4523..4538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 31,
        span: 4538..4539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 128,
        column: 7,
        span: 4540..4546,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 8,
        span: 4546..4547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 128,
        column: 14,
        span: 4547..4553,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 128,
        column: 15,
        span: 4553..4554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 128,
        column: 21,
        span: 4554..4560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 22,
        span: 4560..4561,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 128,
        column: 24,
        span: 4561..4563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 25,
        span: 4563..4564,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
        column: 28,
        span: 4565..4567,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 128,
        column: 31,
        span: 4568..4570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 32,
        span: 4570..4571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 129,
        column: 7,
        span: 4572..4578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 8,
        span: 4578..4579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 129,
        column: 14,
        span: 4579..4585,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 15,
        span: 4585..4586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 129,
        column: 21,
        span: 4586..4592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 22,
        span: 4592..4593,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%c\"",
        ),
        line: 129,
        column: 26,
        span: 4593..4597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 27,
        span: 4597..4598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 29,
        span: 4597..4600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 30,
        span: 4600..4601,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 129,
        column: 32,
        span: 4601..4603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 129,
        column: 38,
        span: 4603..4609,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 39,
        span: 4609..4610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 129,
        column: 45,
        span: 4610..4616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 46,
        span: 4616..4617,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%c\"",
        ),
        line: 129,
        column: 50,
        span: 4617..4621,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 51,
        span: 4621..4622,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "48",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 53,
        span: 4621..4624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 54,
        span: 4624..4625,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 129,
        column: 56,
        span: 4625..4627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 129,
        column: 62,
        span: 4627..4633,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 63,
        span: 4633..4634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 129,
        column: 69,
        span: 4634..4640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 70,
        span: 4640..4641,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%c\"",
        ),
        line: 129,
        column: 74,
        span: 4641..4645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 75,
        span: 4645..4646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 77,
        span: 4645..4648,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 78,
        span: 4648..4649,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 129,
        column: 80,
        span: 4649..4651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 129,
        column: 86,
        span: 4651..4657,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 87,
        span: 4657..4658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 129,
        column: 93,
        span: 4658..4664,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 94,
        span: 4664..4665,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%c\"",
        ),
        line: 129,
        column: 98,
        span: 4665..4669,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 129,
        column: 99,
        span: 4669..4670,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 129,
        column: 102,
        span: 4669..4673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 103,
        span: 4673..4674,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
        column: 106,
        span: 4675..4677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 130,
        column: 14,
        span: 4685..4691,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 130,
        column: 15,
        span: 4691..4692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 130,
        column: 21,
        span: 4692..4698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 22,
        span: 4698..4699,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%c%c%c%c\"",
        ),
        line: 130,
        column: 32,
        span: 4699..4709,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 33,
        span: 4709..4710,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 36,
        span: 4710..4713,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 37,
        span: 4713..4714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "48",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 40,
        span: 4714..4717,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 41,
        span: 4717..4718,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 44,
        span: 4718..4721,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 130,
        column: 45,
        span: 4721..4722,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 130,
        column: 49,
        span: 4722..4726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 50,
        span: 4726..4727,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 51,
        span: 4727..4728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
        column: 7,
        span: 4729..4735,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 8,
        span: 4735..4736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 131,
        column: 14,
        span: 4736..4742,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
        column: 15,
        span: 4742..4743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 131,
        column: 21,
        span: 4743..4749,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 22,
        span: 4749..4750,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s\\0 is not \\0%s\"",
        ),
        line: 131,
        column: 40,
        span: 4750..4768,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 41,
        span: 4768..4769,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not be'",
        ),
        line: 131,
        column: 50,
        span: 4770..4778,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 131,
        column: 51,
        span: 4778..4779,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'be'",
        ),
        line: 131,
        column: 56,
        span: 4780..4784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 57,
        span: 4784..4785,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 131,
        column: 60,
        span: 4786..4788,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'not be\\0 is not \\0be'",
        ),
        line: 131,
        column: 83,
        span: 4789..4811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 84,
        span: 4811..4812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 132,
        column: 7,
        span: 4813..4819,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 8,
        span: 4819..4820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 132,
        column: 14,
        span: 4820..4826,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 132,
        column: 15,
        span: 4826..4827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 132,
        column: 21,
        span: 4827..4833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 22,
        span: 4833..4834,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%%d %010d\"",
        ),
        line: 132,
        column: 34,
        span: 4834..4846,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 35,
        span: 4846..4847,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 38,
        span: 4847..4850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 132,
        column: 39,
        span: 4850..4851,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 42,
        span: 4851..4854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 43,
        span: 4854..4855,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 132,
        column: 46,
        span: 4856..4858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%10 0000000023\"",
        ),
        line: 132,
        column: 63,
        span: 4859..4875,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 64,
        span: 4875..4876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 133,
        column: 7,
        span: 4877..4883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 8,
        span: 4883..4884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 133,
        column: 16,
        span: 4884..4892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 17,
        span: 4892..4893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 133,
        column: 23,
        span: 4893..4899,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 133,
        column: 24,
        span: 4899..4900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 133,
        column: 30,
        span: 4900..4906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 31,
        span: 4906..4907,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%f\"",
        ),
        line: 133,
        column: 35,
        span: 4907..4911,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 133,
        column: 36,
        span: 4911..4912,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 133,
        column: 41,
        span: 4912..4917,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 42,
        span: 4917..4918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 43,
        span: 4918..4919,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 133,
        column: 46,
        span: 4920..4922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 133,
        column: 51,
        span: 4922..4927,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 52,
        span: 4927..4928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 134,
        column: 2,
        span: 4929..4930,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 134,
        column: 4,
        span: 4931..4932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 134,
        column: 11,
        span: 4933..4939,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 134,
        column: 12,
        span: 4939..4940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 134,
        column: 18,
        span: 4940..4946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 19,
        span: 4946..4947,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"%-50s\"'",
        ),
        line: 134,
        column: 28,
        span: 4947..4956,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 29,
        span: 4956..4957,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 134,
        column: 33,
        span: 4958..4961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 34,
        span: 4961..4962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 135,
        column: 7,
        span: 4963..4969,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 8,
        span: 4969..4970,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 135,
        column: 9,
        span: 4970..4971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 135,
        column: 10,
        span: 4971..4972,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
        column: 13,
        span: 4973..4975,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "52",
                    after_decimal: "",
                },
            ),
        ),
        line: 135,
        column: 16,
        span: 4975..4978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 17,
        span: 4978..4979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 136,
        column: 7,
        span: 4980..4986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 8,
        span: 4986..4987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 136,
        column: 14,
        span: 4987..4993,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 136,
        column: 15,
        span: 4993..4994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sub",
        ),
        line: 136,
        column: 18,
        span: 4994..4997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 19,
        span: 4997..4998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 136,
        column: 20,
        span: 4998..4999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 21,
        span: 4999..5000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 23,
        span: 5000..5002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 136,
        column: 24,
        span: 5002..5003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 136,
        column: 26,
        span: 5003..5005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 27,
        span: 5005..5006,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 136,
        column: 30,
        span: 5007..5009,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"a  '",
        ),
        line: 136,
        column: 37,
        span: 5010..5016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 38,
        span: 5016..5017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 5019..5025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 5025..5026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 138,
        column: 14,
        span: 5026..5032,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 138,
        column: 15,
        span: 5032..5033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 138,
        column: 21,
        span: 5033..5039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 22,
        span: 5039..5040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-%.20s.20s\"",
        ),
        line: 138,
        column: 34,
        span: 5040..5052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 35,
        span: 5052..5053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 138,
        column: 42,
        span: 5054..5060,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 138,
        column: 43,
        span: 5060..5061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 138,
        column: 46,
        span: 5061..5064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 47,
        span: 5064..5065,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 138,
        column: 50,
        span: 5065..5068,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 51,
        span: 5068..5069,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 56,
        span: 5069..5074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 57,
        span: 5074..5075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 58,
        span: 5075..5076,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 61,
        span: 5077..5079,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 139,
        column: 25,
        span: 5101..5104,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 139,
        column: 27,
        span: 5104..5106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 139,
        column: 33,
        span: 5106..5112,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 139,
        column: 34,
        span: 5112..5113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 139,
        column: 37,
        span: 5113..5116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 38,
        span: 5116..5117,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 139,
        column: 41,
        span: 5117..5120,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 42,
        span: 5120..5121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 45,
        span: 5121..5124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 46,
        span: 5124..5125,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 139,
        column: 48,
        span: 5125..5127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".20s\"",
        ),
        line: 139,
        column: 54,
        span: 5127..5133,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 55,
        span: 5133..5134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 5135..5141,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 5141..5142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 140,
        column: 14,
        span: 5142..5148,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 15,
        span: 5148..5149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 140,
        column: 21,
        span: 5149..5155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 22,
        span: 5155..5156,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\"-%20s.20s\"'",
        ),
        line: 140,
        column: 35,
        span: 5156..5169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 36,
        span: 5169..5170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 140,
        column: 43,
        span: 5171..5177,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 44,
        span: 5177..5178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 140,
        column: 47,
        span: 5178..5181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 48,
        span: 5181..5182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 140,
        column: 51,
        span: 5182..5185,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 52,
        span: 5185..5186,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 57,
        span: 5186..5191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 58,
        span: 5191..5192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 59,
        span: 5192..5193,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 62,
        span: 5194..5196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 141,
        column: 14,
        span: 5204..5210,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 141,
        column: 15,
        span: 5210..5211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 141,
        column: 21,
        span: 5211..5217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 22,
        span: 5217..5218,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%q\"",
        ),
        line: 141,
        column: 26,
        span: 5218..5222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 27,
        span: 5222..5223,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 141,
        column: 31,
        span: 5224..5227,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 141,
        column: 33,
        span: 5227..5229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 141,
        column: 39,
        span: 5229..5235,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 141,
        column: 40,
        span: 5235..5236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 141,
        column: 43,
        span: 5236..5239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 44,
        span: 5239..5240,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 141,
        column: 47,
        span: 5240..5243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 141,
        column: 48,
        span: 5243..5244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 53,
        span: 5244..5249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 54,
        span: 5249..5250,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 141,
        column: 56,
        span: 5250..5252,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".20s\"",
        ),
        line: 141,
        column: 62,
        span: 5252..5258,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 63,
        span: 5258..5259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 64,
        span: 5259..5260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
        column: 7,
        span: 5283..5289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 8,
        span: 5289..5290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 144,
        column: 14,
        span: 5290..5296,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 144,
        column: 15,
        span: 5296..5297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 144,
        column: 21,
        span: 5297..5303,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 22,
        span: 5303..5304,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s %s\"",
        ),
        line: 144,
        column: 29,
        span: 5304..5311,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 30,
        span: 5311..5312,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 144,
        column: 34,
        span: 5313..5316,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 35,
        span: 5316..5317,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 144,
        column: 40,
        span: 5318..5322,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 41,
        span: 5322..5323,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 44,
        span: 5324..5326,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nil true\"",
        ),
        line: 144,
        column: 55,
        span: 5327..5337,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 56,
        span: 5337..5338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 145,
        column: 7,
        span: 5339..5345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 8,
        span: 5345..5346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 145,
        column: 14,
        span: 5346..5352,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 145,
        column: 15,
        span: 5352..5353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 145,
        column: 21,
        span: 5353..5359,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 22,
        span: 5359..5360,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s %.4s\"",
        ),
        line: 145,
        column: 31,
        span: 5360..5369,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 32,
        span: 5369..5370,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 145,
        column: 38,
        span: 5371..5376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 39,
        span: 5376..5377,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 145,
        column: 44,
        span: 5378..5382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 45,
        span: 5382..5383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
        column: 48,
        span: 5384..5386,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"false true\"",
        ),
        line: 145,
        column: 61,
        span: 5387..5399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 62,
        span: 5399..5400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 7,
        span: 5401..5407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 8,
        span: 5407..5408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 146,
        column: 14,
        span: 5408..5414,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 146,
        column: 15,
        span: 5414..5415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 146,
        column: 21,
        span: 5415..5421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 22,
        span: 5421..5422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.3s %.3s\"",
        ),
        line: 146,
        column: 33,
        span: 5422..5433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 34,
        span: 5433..5434,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 146,
        column: 40,
        span: 5435..5440,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 41,
        span: 5440..5441,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 146,
        column: 46,
        span: 5442..5446,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 47,
        span: 5446..5447,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 50,
        span: 5448..5450,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fal tru\"",
        ),
        line: 146,
        column: 60,
        span: 5451..5460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 61,
        span: 5460..5461,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 147,
        column: 6,
        span: 5462..5467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 147,
        column: 8,
        span: 5468..5469,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
        column: 10,
        span: 5470..5471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 147,
        column: 23,
        span: 5472..5484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 24,
        span: 5484..5485,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 147,
        column: 25,
        span: 5485..5486,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 147,
        column: 26,
        span: 5486..5487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 147,
        column: 27,
        span: 5487..5488,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 147,
        column: 29,
        span: 5489..5490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__tostring",
        ),
        line: 147,
        column: 39,
        span: 5490..5500,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
        column: 41,
        span: 5501..5502,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 147,
        column: 50,
        span: 5503..5511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 52,
        span: 5512..5513,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 53,
        span: 5513..5514,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 147,
        column: 60,
        span: 5515..5521,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello\"",
        ),
        line: 147,
        column: 68,
        span: 5522..5529,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 147,
        column: 72,
        span: 5530..5533,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 147,
        column: 73,
        span: 5533..5534,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 74,
        span: 5534..5535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
        column: 7,
        span: 5536..5542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 8,
        span: 5542..5543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 148,
        column: 14,
        span: 5543..5549,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 148,
        column: 15,
        span: 5549..5550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 148,
        column: 21,
        span: 5550..5556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 22,
        span: 5556..5557,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s %.10s\"",
        ),
        line: 148,
        column: 32,
        span: 5557..5567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 33,
        span: 5567..5568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 148,
        column: 35,
        span: 5569..5570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 36,
        span: 5570..5571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 148,
        column: 38,
        span: 5572..5573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 39,
        span: 5573..5574,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 148,
        column: 42,
        span: 5575..5577,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hello hello\"",
        ),
        line: 148,
        column: 56,
        span: 5578..5591,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 57,
        span: 5591..5592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
        column: 7,
        span: 5595..5601,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 8,
        span: 5601..5602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 151,
        column: 14,
        span: 5602..5608,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 15,
        span: 5608..5609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 151,
        column: 21,
        span: 5609..5615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 22,
        span: 5615..5616,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 151,
        column: 26,
        span: 5616..5620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 151,
        column: 27,
        span: 5620..5621,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".3",
                },
            ),
        ),
        line: 151,
        column: 31,
        span: 5621..5625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 32,
        span: 5625..5626,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 151,
        column: 35,
        span: 5627..5629,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0\"",
        ),
        line: 151,
        column: 39,
        span: 5630..5633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 40,
        span: 5633..5634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
        column: 7,
        span: 5635..5641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 8,
        span: 5641..5642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 152,
        column: 14,
        span: 5642..5648,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 152,
        column: 15,
        span: 5648..5649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 152,
        column: 21,
        span: 5649..5655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 22,
        span: 5655..5656,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%02x\"",
        ),
        line: 152,
        column: 28,
        span: 5656..5662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 29,
        span: 5662..5663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 152,
        column: 33,
        span: 5663..5667,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 34,
        span: 5667..5668,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 152,
        column: 37,
        span: 5669..5671,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"00\"",
        ),
        line: 152,
        column: 42,
        span: 5672..5676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 43,
        span: 5676..5677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
        column: 7,
        span: 5678..5684,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 8,
        span: 5684..5685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 153,
        column: 14,
        span: 5685..5691,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 153,
        column: 15,
        span: 5691..5692,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 153,
        column: 21,
        span: 5692..5698,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 22,
        span: 5698..5699,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%08X\"",
        ),
        line: 153,
        column: 28,
        span: 5699..5705,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 29,
        span: 5705..5706,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 31,
        span: 5706..5708,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 153,
        column: 32,
        span: 5708..5709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 34,
        span: 5708..5711,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 153,
        column: 36,
        span: 5712..5713,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 38,
        span: 5713..5715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 39,
        span: 5715..5716,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 42,
        span: 5717..5719,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FFFFFFFF\"",
        ),
        line: 153,
        column: 53,
        span: 5720..5730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 54,
        span: 5730..5731,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 7,
        span: 5732..5738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 8,
        span: 5738..5739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 154,
        column: 14,
        span: 5739..5745,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 15,
        span: 5745..5746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 154,
        column: 21,
        span: 5746..5752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 22,
        span: 5752..5753,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%+08d\"",
        ),
        line: 154,
        column: 29,
        span: 5753..5760,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 154,
        column: 30,
        span: 5760..5761,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 32,
        span: 5761..5763,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 154,
        column: 33,
        span: 5763..5764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 35,
        span: 5763..5766,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 154,
        column: 37,
        span: 5767..5768,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 39,
        span: 5768..5770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 40,
        span: 5770..5771,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 43,
        span: 5772..5774,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+2147483647\"",
        ),
        line: 154,
        column: 57,
        span: 5775..5788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 58,
        span: 5788..5789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 155,
        column: 7,
        span: 5790..5796,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 8,
        span: 5796..5797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 155,
        column: 14,
        span: 5797..5803,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
        column: 15,
        span: 5803..5804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 155,
        column: 21,
        span: 5804..5810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 22,
        span: 5810..5811,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%+08d\"",
        ),
        line: 155,
        column: 29,
        span: 5811..5818,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 155,
        column: 30,
        span: 5818..5819,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 155,
        column: 32,
        span: 5820..5821,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 33,
        span: 5820..5822,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 155,
        column: 34,
        span: 5822..5823,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 36,
        span: 5822..5825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 37,
        span: 5825..5826,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 155,
        column: 40,
        span: 5827..5829,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-2147483648\"",
        ),
        line: 155,
        column: 54,
        span: 5830..5843,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 55,
        span: 5843..5844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 159,
        column: 7,
        span: 5886..5892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 8,
        span: 5892..5893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 159,
        column: 14,
        span: 5893..5899,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 159,
        column: 15,
        span: 5899..5900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 159,
        column: 18,
        span: 5900..5903,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 19,
        span: 5903..5904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 159,
        column: 25,
        span: 5904..5910,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 159,
        column: 26,
        span: 5910..5911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 159,
        column: 32,
        span: 5911..5917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 33,
        span: 5917..5918,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'%99.99f'",
        ),
        line: 159,
        column: 42,
        span: 5918..5927,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 159,
        column: 43,
        span: 5927..5928,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 159,
        column: 45,
        span: 5929..5930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "308",
            },
        ),
        line: 159,
        column: 50,
        span: 5929..5935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 51,
        span: 5935..5936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 52,
        span: 5936..5937,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 159,
        column: 55,
        span: 5938..5940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 59,
        span: 5940..5944,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 60,
        span: 5944..5945,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 163,
        column: 3,
        span: 5949..5951,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 163,
        column: 7,
        span: 5952..5955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_nolonglong",
        ),
        line: 163,
        column: 19,
        span: 5956..5967,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 163,
        column: 0,
        span: 5968..5972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 164,
        column: 8,
        span: 5975..5980,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 9,
        span: 5980..5981,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing large numbers for format\"",
        ),
        line: 164,
        column: 43,
        span: 5981..6015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 44,
        span: 6015..6016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 165,
        column: 9,
        span: 6019..6025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 10,
        span: 6025..6026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 165,
        column: 16,
        span: 6026..6032,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 165,
        column: 17,
        span: 6032..6033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 165,
        column: 23,
        span: 6033..6039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 24,
        span: 6039..6040,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%8x\"",
        ),
        line: 165,
        column: 29,
        span: 6040..6045,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 30,
        span: 6045..6046,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 32,
        span: 6046..6048,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 165,
        column: 33,
        span: 6048..6049,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "52",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 35,
        span: 6048..6051,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 165,
        column: 37,
        span: 6052..6053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 39,
        span: 6053..6055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 40,
        span: 6055..6056,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 165,
        column: 43,
        span: 6057..6059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fffffffffffff\"",
        ),
        line: 165,
        column: 59,
        span: 6060..6075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 60,
        span: 6075..6076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 166,
        column: 9,
        span: 6079..6085,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 10,
        span: 6085..6086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 166,
        column: 16,
        span: 6086..6092,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 166,
        column: 17,
        span: 6092..6093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 166,
        column: 23,
        span: 6093..6099,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 24,
        span: 6099..6100,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 166,
        column: 28,
        span: 6100..6104,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 29,
        span: 6104..6105,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 166,
        column: 31,
        span: 6106..6107,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 32,
        span: 6106..6108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 33,
        span: 6108..6109,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 166,
        column: 36,
        span: 6110..6112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-1\"",
        ),
        line: 166,
        column: 41,
        span: 6113..6117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 42,
        span: 6117..6118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
        column: 9,
        span: 6121..6127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 10,
        span: 6127..6128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 167,
        column: 18,
        span: 6128..6136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 19,
        span: 6136..6137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 167,
        column: 25,
        span: 6137..6143,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 167,
        column: 26,
        span: 6143..6144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 167,
        column: 32,
        span: 6144..6150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 33,
        span: 6150..6151,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%u\"",
        ),
        line: 167,
        column: 37,
        span: 6151..6155,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 167,
        column: 38,
        span: 6155..6156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 40,
        span: 6156..6158,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 167,
        column: 41,
        span: 6158..6159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "62",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 43,
        span: 6158..6161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 44,
        span: 6161..6162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 45,
        span: 6162..6163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 167,
        column: 48,
        span: 6164..6166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 50,
        span: 6166..6168,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 167,
        column: 51,
        span: 6168..6169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "62",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 53,
        span: 6168..6171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 54,
        span: 6171..6172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
        column: 9,
        span: 6175..6181,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 10,
        span: 6181..6182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 168,
        column: 16,
        span: 6182..6188,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 168,
        column: 17,
        span: 6188..6189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 168,
        column: 23,
        span: 6189..6195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 24,
        span: 6195..6196,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%8x\"",
        ),
        line: 168,
        column: 29,
        span: 6196..6201,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 168,
        column: 30,
        span: 6201..6202,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xffffffff",
            ),
        ),
        line: 168,
        column: 41,
        span: 6202..6213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 42,
        span: 6213..6214,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 168,
        column: 45,
        span: 6215..6217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ffffffff\"",
        ),
        line: 168,
        column: 56,
        span: 6218..6228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 57,
        span: 6228..6229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 9,
        span: 6232..6238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 10,
        span: 6238..6239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 169,
        column: 16,
        span: 6239..6245,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 169,
        column: 17,
        span: 6245..6246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 169,
        column: 23,
        span: 6246..6252,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 24,
        span: 6252..6253,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%8x\"",
        ),
        line: 169,
        column: 29,
        span: 6253..6258,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 169,
        column: 30,
        span: 6258..6259,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x7fffffff",
            ),
        ),
        line: 169,
        column: 41,
        span: 6259..6270,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 42,
        span: 6270..6271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 45,
        span: 6272..6274,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"7fffffff\"",
        ),
        line: 169,
        column: 56,
        span: 6275..6285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 57,
        span: 6285..6286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
        column: 9,
        span: 6289..6295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 10,
        span: 6295..6296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 170,
        column: 16,
        span: 6296..6302,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 170,
        column: 17,
        span: 6302..6303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 170,
        column: 23,
        span: 6303..6309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 24,
        span: 6309..6310,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 170,
        column: 28,
        span: 6310..6314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 170,
        column: 29,
        span: 6314..6315,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 31,
        span: 6315..6317,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 170,
        column: 32,
        span: 6317..6318,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "53",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 34,
        span: 6317..6320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 35,
        span: 6320..6321,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
        column: 38,
        span: 6322..6324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"9007199254740992\"",
        ),
        line: 170,
        column: 57,
        span: 6325..6343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 58,
        span: 6343..6344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 9,
        span: 6347..6353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 10,
        span: 6353..6354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 171,
        column: 16,
        span: 6354..6360,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 171,
        column: 17,
        span: 6360..6361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 171,
        column: 23,
        span: 6361..6367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 24,
        span: 6367..6368,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 171,
        column: 28,
        span: 6368..6372,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 171,
        column: 29,
        span: 6372..6373,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 171,
        column: 31,
        span: 6374..6375,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 32,
        span: 6374..6376,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 171,
        column: 33,
        span: 6376..6377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "53",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 35,
        span: 6376..6379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 36,
        span: 6379..6380,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
        column: 39,
        span: 6381..6383,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-9007199254740992\"",
        ),
        line: 171,
        column: 59,
        span: 6384..6403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 60,
        span: 6403..6404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 172,
        column: 9,
        span: 6407..6413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 10,
        span: 6413..6414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 172,
        column: 16,
        span: 6414..6420,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 172,
        column: 17,
        span: 6420..6421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 172,
        column: 23,
        span: 6421..6427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 24,
        span: 6427..6428,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x%8X\"",
        ),
        line: 172,
        column: 31,
        span: 6428..6435,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 172,
        column: 32,
        span: 6435..6436,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x8f000003",
            ),
        ),
        line: 172,
        column: 43,
        span: 6436..6447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 44,
        span: 6447..6448,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 172,
        column: 47,
        span: 6449..6451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x8F000003\"",
        ),
        line: 172,
        column: 60,
        span: 6452..6464,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 61,
        span: 6464..6465,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 174,
        column: 8,
        span: 6533..6538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 174,
        column: 10,
        span: 6539..6540,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 12,
        span: 6541..6542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 14,
        span: 6542..6544,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 174,
        column: 15,
        span: 6544..6545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 17,
        span: 6544..6547,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 174,
        column: 19,
        span: 6548..6549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 21,
        span: 6549..6551,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 174,
        column: 22,
        span: 6551..6552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 23,
        span: 6552..6553,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 25,
        span: 6552..6555,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 174,
        column: 26,
        span: 6555..6556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "53",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 28,
        span: 6555..6558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 29,
        span: 6558..6559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 9,
        span: 6562..6568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 10,
        span: 6568..6569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 175,
        column: 11,
        span: 6569..6570,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 14,
        span: 6571..6573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfffffffffffff800",
            ),
        ),
        line: 175,
        column: 33,
        span: 6573..6592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 34,
        span: 6592..6593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
        column: 9,
        span: 6596..6602,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 10,
        span: 6602..6603,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 176,
        column: 18,
        span: 6603..6611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 19,
        span: 6611..6612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 176,
        column: 25,
        span: 6612..6618,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 26,
        span: 6618..6619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 176,
        column: 32,
        span: 6619..6625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 33,
        span: 6625..6626,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%u\"",
        ),
        line: 176,
        column: 37,
        span: 6626..6630,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 38,
        span: 6630..6631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 176,
        column: 40,
        span: 6632..6633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 41,
        span: 6633..6634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 42,
        span: 6634..6635,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 176,
        column: 45,
        span: 6636..6638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 176,
        column: 47,
        span: 6639..6640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 48,
        span: 6640..6641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
        column: 9,
        span: 6644..6650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 10,
        span: 6650..6651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 177,
        column: 18,
        span: 6651..6659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 19,
        span: 6659..6660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 177,
        column: 25,
        span: 6660..6666,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 177,
        column: 26,
        span: 6666..6667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 177,
        column: 32,
        span: 6667..6673,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 33,
        span: 6673..6674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0X%x\"",
        ),
        line: 177,
        column: 39,
        span: 6674..6680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 177,
        column: 40,
        span: 6680..6681,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 177,
        column: 42,
        span: 6682..6683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 43,
        span: 6683..6684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 44,
        span: 6684..6685,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 177,
        column: 47,
        span: 6686..6688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 177,
        column: 49,
        span: 6689..6690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 50,
        span: 6690..6691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 178,
        column: 9,
        span: 6694..6700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 10,
        span: 6700..6701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 178,
        column: 16,
        span: 6701..6707,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 178,
        column: 17,
        span: 6707..6708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 178,
        column: 23,
        span: 6708..6714,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 24,
        span: 6714..6715,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 178,
        column: 28,
        span: 6715..6719,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 178,
        column: 29,
        span: 6719..6720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 178,
        column: 31,
        span: 6721..6722,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 32,
        span: 6722..6723,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 178,
        column: 35,
        span: 6724..6726,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"fffffffffffff800\"",
        ),
        line: 178,
        column: 54,
        span: 6727..6745,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 55,
        span: 6745..6746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 179,
        column: 9,
        span: 6749..6755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 10,
        span: 6755..6756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 179,
        column: 16,
        span: 6756..6762,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 179,
        column: 17,
        span: 6762..6763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 179,
        column: 23,
        span: 6763..6769,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 24,
        span: 6769..6770,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 179,
        column: 28,
        span: 6770..6774,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 29,
        span: 6774..6775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 179,
        column: 31,
        span: 6776..6777,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 179,
        column: 32,
        span: 6777..6778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 33,
        span: 6777..6779,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 34,
        span: 6779..6780,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 179,
        column: 37,
        span: 6781..6783,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"9223372036854774784\"",
        ),
        line: 179,
        column: 59,
        span: 6784..6805,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 60,
        span: 6805..6806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 180,
        column: 9,
        span: 6809..6815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 10,
        span: 6815..6816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 180,
        column: 16,
        span: 6816..6822,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 180,
        column: 17,
        span: 6822..6823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 180,
        column: 23,
        span: 6823..6829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 24,
        span: 6829..6830,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 180,
        column: 28,
        span: 6830..6834,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 29,
        span: 6834..6835,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 180,
        column: 31,
        span: 6836..6837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 180,
        column: 32,
        span: 6837..6838,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 180,
        column: 33,
        span: 6838..6839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 34,
        span: 6838..6840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 35,
        span: 6840..6841,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 180,
        column: 38,
        span: 6842..6844,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-9223372036854774784\"",
        ),
        line: 180,
        column: 61,
        span: 6845..6867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 62,
        span: 6867..6868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 181,
        column: 9,
        span: 6871..6877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 10,
        span: 6877..6878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 181,
        column: 16,
        span: 6878..6884,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 181,
        column: 17,
        span: 6884..6885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 181,
        column: 23,
        span: 6885..6891,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 24,
        span: 6891..6892,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 181,
        column: 28,
        span: 6892..6896,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 181,
        column: 29,
        span: 6896..6897,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 181,
        column: 31,
        span: 6898..6899,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 32,
        span: 6898..6900,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 181,
        column: 33,
        span: 6900..6901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "63",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 35,
        span: 6900..6903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 36,
        span: 6903..6904,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 39,
        span: 6905..6907,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-9223372036854775808\"",
        ),
        line: 181,
        column: 62,
        span: 6908..6930,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 63,
        span: 6930..6931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 182,
        column: 9,
        span: 6934..6940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 10,
        span: 6940..6941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 182,
        column: 16,
        span: 6941..6947,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 182,
        column: 17,
        span: 6947..6948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 182,
        column: 23,
        span: 6948..6954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 182,
        column: 24,
        span: 6954..6955,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 182,
        column: 28,
        span: 6955..6959,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 182,
        column: 29,
        span: 6959..6960,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 31,
        span: 6960..6962,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 182,
        column: 32,
        span: 6962..6963,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "63",
                    after_decimal: "",
                },
            ),
        ),
        line: 182,
        column: 34,
        span: 6962..6965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 35,
        span: 6965..6966,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 182,
        column: 38,
        span: 6967..6969,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"8000000000000000\"",
        ),
        line: 182,
        column: 57,
        span: 6970..6988,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 182,
        column: 58,
        span: 6988..6989,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 183,
        column: 0,
        span: 6990..6993,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 185,
        column: 3,
        span: 6995..6997,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 185,
        column: 7,
        span: 6998..7001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_noformatA",
        ),
        line: 185,
        column: 18,
        span: 7002..7012,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 185,
        column: 0,
        span: 7013..7017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 186,
        column: 8,
        span: 7020..7025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 9,
        span: 7025..7026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing 'format %a %A'\"",
        ),
        line: 186,
        column: 33,
        span: 7026..7050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 34,
        span: 7050..7051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 9,
        span: 7054..7060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 10,
        span: 7060..7061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 187,
        column: 16,
        span: 7061..7067,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 187,
        column: 17,
        span: 7067..7068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 187,
        column: 23,
        span: 7068..7074,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 24,
        span: 7074..7075,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.2a\"",
        ),
        line: 187,
        column: 30,
        span: 7075..7081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 31,
        span: 7081..7082,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 187,
        column: 35,
        span: 7082..7086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 36,
        span: 7086..7087,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 39,
        span: 7088..7090,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x1.00p-1\"",
        ),
        line: 187,
        column: 51,
        span: 7091..7102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 52,
        span: 7102..7103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 188,
        column: 9,
        span: 7106..7112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 10,
        span: 7112..7113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 188,
        column: 16,
        span: 7113..7119,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 188,
        column: 17,
        span: 7119..7120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 188,
        column: 23,
        span: 7120..7126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 24,
        span: 7126..7127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%A\"",
        ),
        line: 188,
        column: 28,
        span: 7127..7131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
        column: 29,
        span: 7131..7132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x1fffffffffffff",
            ),
        ),
        line: 188,
        column: 46,
        span: 7132..7149,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 47,
        span: 7149..7150,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 188,
        column: 50,
        span: 7151..7153,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0X1.FFFFFFFFFFFFFP+52\"",
        ),
        line: 188,
        column: 74,
        span: 7154..7177,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 75,
        span: 7177..7178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 189,
        column: 9,
        span: 7181..7187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 10,
        span: 7187..7188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 189,
        column: 16,
        span: 7188..7194,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
        column: 17,
        span: 7194..7195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 189,
        column: 23,
        span: 7195..7201,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 24,
        span: 7201..7202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.4a\"",
        ),
        line: 189,
        column: 30,
        span: 7202..7208,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 31,
        span: 7208..7209,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 189,
        column: 33,
        span: 7210..7211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 34,
        span: 7210..7212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 35,
        span: 7212..7213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 189,
        column: 38,
        span: 7214..7216,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-0x1.8000p+1\"",
        ),
        line: 189,
        column: 53,
        span: 7217..7231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 54,
        span: 7231..7232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
        column: 9,
        span: 7235..7241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 10,
        span: 7241..7242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 190,
        column: 18,
        span: 7242..7250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 19,
        span: 7250..7251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 190,
        column: 25,
        span: 7251..7257,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 190,
        column: 26,
        span: 7257..7258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 190,
        column: 32,
        span: 7258..7264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 33,
        span: 7264..7265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%a\"",
        ),
        line: 190,
        column: 37,
        span: 7265..7269,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 38,
        span: 7269..7270,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 190,
        column: 40,
        span: 7271..7272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 190,
        column: 43,
        span: 7271..7275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 44,
        span: 7275..7276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 45,
        span: 7276..7277,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
        column: 48,
        span: 7278..7280,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 190,
        column: 50,
        span: 7281..7282,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 190,
        column: 53,
        span: 7281..7285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 54,
        span: 7285..7286,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 191,
        column: 0,
        span: 7287..7290,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 195,
        column: 6,
        span: 7313..7318,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 195,
        column: 15,
        span: 7319..7327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 195,
        column: 21,
        span: 7328..7333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 23,
        span: 7334..7335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmt",
        ),
        line: 195,
        column: 26,
        span: 7335..7338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 27,
        span: 7338..7339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 195,
        column: 31,
        span: 7340..7343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 32,
        span: 7343..7344,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 196,
        column: 8,
        span: 7347..7352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 196,
        column: 10,
        span: 7353..7354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 11,
        span: 7354..7355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 196,
        column: 15,
        span: 7356..7359,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 196,
        column: 17,
        span: 7360..7361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 196,
        column: 23,
        span: 7362..7367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 24,
        span: 7367..7368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 196,
        column: 30,
        span: 7368..7374,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 196,
        column: 31,
        span: 7374..7375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 196,
        column: 37,
        span: 7375..7381,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 38,
        span: 7381..7382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmt",
        ),
        line: 196,
        column: 42,
        span: 7383..7386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 43,
        span: 7386..7387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 46,
        span: 7387..7390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 47,
        span: 7390..7391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 197,
        column: 9,
        span: 7394..7400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 10,
        span: 7400..7401,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 197,
        column: 13,
        span: 7401..7404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 197,
        column: 15,
        span: 7405..7406,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 197,
        column: 19,
        span: 7407..7410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 197,
        column: 26,
        span: 7411..7417,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 197,
        column: 27,
        span: 7417..7418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 197,
        column: 31,
        span: 7418..7422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 32,
        span: 7422..7423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 197,
        column: 35,
        span: 7423..7426,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 197,
        column: 36,
        span: 7426..7427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 197,
        column: 40,
        span: 7428..7431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 41,
        span: 7431..7432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 42,
        span: 7432..7433,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 198,
        column: 0,
        span: 7434..7437,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 200,
        column: 6,
        span: 7439..7444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 200,
        column: 10,
        span: 7445..7448,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 200,
        column: 12,
        span: 7449..7450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 200,
        column: 19,
        span: 7451..7457,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 20,
        span: 7457..7458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 200,
        column: 23,
        span: 7458..7461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 24,
        span: 7461..7462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 200,
        column: 27,
        span: 7462..7465,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 28,
        span: 7465..7466,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "600",
                    after_decimal: "",
                },
            ),
        ),
        line: 200,
        column: 32,
        span: 7466..7470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 33,
        span: 7470..7471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 201,
        column: 6,
        span: 7472..7477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 7,
        span: 7477..7478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%100.3d\"",
        ),
        line: 201,
        column: 16,
        span: 7478..7487,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 17,
        span: 7487..7488,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too long\"",
        ),
        line: 201,
        column: 28,
        span: 7489..7499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 29,
        span: 7499..7500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 202,
        column: 6,
        span: 7501..7506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 7,
        span: 7506..7507,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1\"",
        ),
        line: 202,
        column: 11,
        span: 7507..7511,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 202,
        column: 13,
        span: 7511..7513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 202,
        column: 16,
        span: 7513..7516,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 202,
        column: 18,
        span: 7516..7518,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".3d\"",
        ),
        line: 202,
        column: 23,
        span: 7518..7523,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 24,
        span: 7523..7524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too long\"",
        ),
        line: 202,
        column: 35,
        span: 7525..7535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 36,
        span: 7535..7536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 203,
        column: 6,
        span: 7537..7542,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 7,
        span: 7542..7543,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%1.100d\"",
        ),
        line: 203,
        column: 16,
        span: 7543..7552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 17,
        span: 7552..7553,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too long\"",
        ),
        line: 203,
        column: 28,
        span: 7554..7564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 29,
        span: 7564..7565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 204,
        column: 6,
        span: 7566..7571,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 204,
        column: 7,
        span: 7571..7572,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%10.1\"",
        ),
        line: 204,
        column: 14,
        span: 7572..7579,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 204,
        column: 16,
        span: 7579..7581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 204,
        column: 19,
        span: 7581..7584,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 204,
        column: 21,
        span: 7584..7586,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"004d\"",
        ),
        line: 204,
        column: 27,
        span: 7586..7592,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 204,
        column: 28,
        span: 7592..7593,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"too long\"",
        ),
        line: 204,
        column: 39,
        span: 7594..7604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 204,
        column: 40,
        span: 7604..7605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 205,
        column: 6,
        span: 7606..7611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 7,
        span: 7611..7612,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%t\"",
        ),
        line: 205,
        column: 11,
        span: 7612..7616,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 12,
        span: 7616..7617,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"invalid option\"",
        ),
        line: 205,
        column: 29,
        span: 7618..7634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 30,
        span: 7634..7635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 206,
        column: 6,
        span: 7636..7641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 7,
        span: 7641..7642,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%\"",
        ),
        line: 206,
        column: 10,
        span: 7642..7645,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 206,
        column: 12,
        span: 7645..7647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 206,
        column: 15,
        span: 7647..7650,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 206,
        column: 17,
        span: 7650..7652,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"d\"",
        ),
        line: 206,
        column: 20,
        span: 7652..7655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 206,
        column: 21,
        span: 7655..7656,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"repeated flags\"",
        ),
        line: 206,
        column: 38,
        span: 7657..7673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 39,
        span: 7673..7674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check",
        ),
        line: 207,
        column: 6,
        span: 7675..7680,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 7,
        span: 7680..7681,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d %d\"",
        ),
        line: 207,
        column: 14,
        span: 7681..7688,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 207,
        column: 15,
        span: 7688..7689,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no value\"",
        ),
        line: 207,
        column: 26,
        span: 7690..7700,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 27,
        span: 7700..7701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 211,
        column: 7,
        span: 7729..7735,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 8,
        span: 7735..7736,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 211,
        column: 11,
        span: 7736..7739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 211,
        column: 17,
        span: 7740..7745,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 18,
        span: 7745..7746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 211,
        column: 24,
        span: 7746..7752,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 211,
        column: 25,
        span: 7752..7753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 211,
        column: 31,
        span: 7753..7759,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 211,
        column: 32,
        span: 7759..7760,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%d\"",
        ),
        line: 211,
        column: 37,
        span: 7761..7765,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 211,
        column: 38,
        span: 7765..7766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 40,
        span: 7766..7768,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 211,
        column: 41,
        span: 7768..7769,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "63",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 43,
        span: 7768..7771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 44,
        span: 7771..7772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 45,
        span: 7772..7773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 212,
        column: 7,
        span: 7774..7780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 8,
        span: 7780..7781,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 212,
        column: 11,
        span: 7781..7784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 212,
        column: 17,
        span: 7785..7790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 18,
        span: 7790..7791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 212,
        column: 24,
        span: 7791..7797,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
        column: 25,
        span: 7797..7798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 212,
        column: 31,
        span: 7798..7804,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 32,
        span: 7804..7805,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 212,
        column: 37,
        span: 7806..7810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 38,
        span: 7810..7811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 40,
        span: 7811..7813,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 212,
        column: 41,
        span: 7813..7814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 43,
        span: 7813..7816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 44,
        span: 7816..7817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 45,
        span: 7817..7818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 213,
        column: 7,
        span: 7819..7825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 8,
        span: 7825..7826,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 213,
        column: 11,
        span: 7826..7829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 213,
        column: 17,
        span: 7830..7835,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 18,
        span: 7835..7836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 213,
        column: 24,
        span: 7836..7842,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 213,
        column: 25,
        span: 7842..7843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 213,
        column: 31,
        span: 7843..7849,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 32,
        span: 7849..7850,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 213,
        column: 37,
        span: 7851..7855,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 38,
        span: 7855..7856,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 213,
        column: 40,
        span: 7857..7858,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 213,
        column: 41,
        span: 7857..7859,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 213,
        column: 42,
        span: 7859..7860,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "64",
                    after_decimal: "",
                },
            ),
        ),
        line: 213,
        column: 44,
        span: 7859..7862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 45,
        span: 7862..7863,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 46,
        span: 7863..7864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 214,
        column: 7,
        span: 7865..7871,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 8,
        span: 7871..7872,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 214,
        column: 11,
        span: 7872..7875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 214,
        column: 17,
        span: 7876..7881,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 18,
        span: 7881..7882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 214,
        column: 24,
        span: 7882..7888,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 214,
        column: 25,
        span: 7888..7889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 214,
        column: 31,
        span: 7889..7895,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 32,
        span: 7895..7896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%x\"",
        ),
        line: 214,
        column: 37,
        span: 7897..7901,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 38,
        span: 7901..7902,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 214,
        column: 40,
        span: 7903..7904,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 41,
        span: 7903..7905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 42,
        span: 7905..7906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 43,
        span: 7906..7907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
        column: 7,
        span: 7910..7916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 8,
        span: 7916..7917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 217,
        column: 12,
        span: 7917..7921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 13,
        span: 7921..7922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 1\\n--comentário sem EOL no final\"",
        ),
        line: 217,
        column: 54,
        span: 7922..7963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 55,
        span: 7963..7964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 56,
        span: 7964..7965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 57,
        span: 7965..7966,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 60,
        span: 7967..7969,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 62,
        span: 7969..7971,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 63,
        span: 7971..7972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 220,
        column: 7,
        span: 7975..7981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 8,
        span: 7981..7982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 220,
        column: 13,
        span: 7982..7987,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 220,
        column: 14,
        span: 7987..7988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 220,
        column: 20,
        span: 7988..7994,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 220,
        column: 21,
        span: 7994..7995,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 220,
        column: 22,
        span: 7995..7996,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 220,
        column: 25,
        span: 7997..7999,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 220,
        column: 28,
        span: 8000..8002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 29,
        span: 8002..8003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 7,
        span: 8004..8010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 8,
        span: 8010..8011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 221,
        column: 13,
        span: 8011..8016,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 14,
        span: 8016..8017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 221,
        column: 20,
        span: 8017..8023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 21,
        span: 8023..8024,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 221,
        column: 22,
        span: 8024..8025,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 221,
        column: 23,
        span: 8025..8026,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 24,
        span: 8026..8027,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 221,
        column: 28,
        span: 8028..8031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 29,
        span: 8031..8032,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
        column: 32,
        span: 8033..8035,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 221,
        column: 35,
        span: 8036..8038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 36,
        span: 8038..8039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 222,
        column: 7,
        span: 8040..8046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 8,
        span: 8046..8047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 222,
        column: 13,
        span: 8047..8052,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 14,
        span: 8052..8053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 222,
        column: 20,
        span: 8053..8059,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 21,
        span: 8059..8060,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 222,
        column: 22,
        span: 8060..8061,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        line: 222,
        column: 26,
        span: 8061..8065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 27,
        span: 8065..8066,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\1'",
        ),
        line: 222,
        column: 34,
        span: 8067..8073,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 35,
        span: 8073..8074,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\1\\2'",
        ),
        line: 222,
        column: 44,
        span: 8075..8083,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 222,
        column: 45,
        span: 8083..8084,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 222,
        column: 46,
        span: 8084..8085,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.\\0.'",
        ),
        line: 222,
        column: 53,
        span: 8086..8092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 54,
        span: 8092..8093,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 222,
        column: 57,
        span: 8094..8096,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0.\\0.\\0\\1.\\0.\\0\\1\\2\"",
        ),
        line: 222,
        column: 80,
        span: 8097..8119,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 81,
        span: 8119..8120,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 223,
        column: 6,
        span: 8121..8126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 8,
        span: 8127..8128,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 10,
        span: 8129..8130,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 223,
        column: 12,
        span: 8131..8132,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 223,
        column: 13,
        span: 8132..8133,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 223,
        column: 14,
        span: 8133..8134,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 223,
        column: 18,
        span: 8135..8138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 223,
        column: 20,
        span: 8139..8140,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 21,
        span: 8140..8141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 22,
        span: 8140..8142,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 23,
        span: 8142..8143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 27,
        span: 8142..8147,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 223,
        column: 30,
        span: 8148..8150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 223,
        column: 32,
        span: 8151..8152,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 223,
        column: 33,
        span: 8152..8153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 223,
        column: 34,
        span: 8153..8154,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 223,
        column: 35,
        span: 8154..8155,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 37,
        span: 8156..8157,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 223,
        column: 44,
        span: 8158..8164,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 223,
        column: 0,
        span: 8165..8168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 224,
        column: 7,
        span: 8169..8175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 8,
        span: 8175..8176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 224,
        column: 13,
        span: 8176..8181,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 224,
        column: 14,
        span: 8181..8182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 224,
        column: 20,
        span: 8182..8188,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 21,
        span: 8188..8189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 224,
        column: 22,
        span: 8189..8190,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 23,
        span: 8190..8191,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123\"",
        ),
        line: 224,
        column: 29,
        span: 8192..8197,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 30,
        span: 8197..8198,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 224,
        column: 32,
        span: 8198..8200,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"123\"",
        ),
        line: 224,
        column: 37,
        span: 8200..8205,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 224,
        column: 40,
        span: 8206..8208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 224,
        column: 47,
        span: 8209..8215,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 224,
        column: 48,
        span: 8215..8216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 224,
        column: 51,
        span: 8216..8219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 52,
        span: 8219..8220,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu123\"",
        ),
        line: 224,
        column: 61,
        span: 8220..8229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 62,
        span: 8229..8230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 224,
        column: 67,
        span: 8230..8235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 68,
        span: 8235..8236,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 69,
        span: 8236..8237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
        column: 7,
        span: 8238..8244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 8,
        span: 8244..8245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 225,
        column: 13,
        span: 8245..8250,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 225,
        column: 14,
        span: 8250..8251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 225,
        column: 20,
        span: 8251..8257,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 21,
        span: 8257..8258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 225,
        column: 22,
        span: 8258..8259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
        column: 23,
        span: 8259..8260,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 225,
        column: 27,
        span: 8261..8264,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
        column: 28,
        span: 8264..8265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 31,
        span: 8265..8268,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 225,
        column: 32,
        span: 8268..8269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 35,
        span: 8269..8272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 36,
        span: 8272..8273,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 225,
        column: 39,
        span: 8274..8276,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 225,
        column: 46,
        span: 8277..8283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 47,
        span: 8283..8284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 226,
        column: 7,
        span: 8285..8291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 8,
        span: 8291..8292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 226,
        column: 13,
        span: 8292..8297,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 226,
        column: 14,
        span: 8297..8298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 226,
        column: 20,
        span: 8298..8304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 21,
        span: 8304..8305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 226,
        column: 22,
        span: 8305..8306,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 23,
        span: 8306..8307,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 226,
        column: 26,
        span: 8308..8310,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 27,
        span: 8310..8311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 30,
        span: 8311..8314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 31,
        span: 8314..8315,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "21",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 34,
        span: 8315..8318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 35,
        span: 8318..8319,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 38,
        span: 8320..8322,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxuxuxu\"",
        ),
        line: 226,
        column: 49,
        span: 8323..8333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 50,
        span: 8333..8334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
        column: 7,
        span: 8335..8341,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 8,
        span: 8341..8342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 227,
        column: 13,
        span: 8342..8347,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 227,
        column: 14,
        span: 8347..8348,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 227,
        column: 20,
        span: 8348..8354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 21,
        span: 8354..8355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 227,
        column: 22,
        span: 8355..8356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 23,
        span: 8356..8357,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 227,
        column: 27,
        span: 8358..8361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 28,
        span: 8361..8362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "22",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 31,
        span: 8362..8365,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 32,
        span: 8365..8366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "21",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 35,
        span: 8366..8369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 36,
        span: 8369..8370,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 227,
        column: 39,
        span: 8371..8373,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 227,
        column: 42,
        span: 8374..8376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 43,
        span: 8376..8377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 228,
        column: 7,
        span: 8378..8384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 8,
        span: 8384..8385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 228,
        column: 13,
        span: 8385..8390,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 228,
        column: 14,
        span: 8390..8391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 228,
        column: 20,
        span: 8391..8397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 21,
        span: 8397..8398,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 228,
        column: 22,
        span: 8398..8399,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 23,
        span: 8399..8400,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 228,
        column: 27,
        span: 8401..8404,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 28,
        span: 8404..8405,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2999",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 33,
        span: 8405..8410,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 34,
        span: 8410..8411,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 228,
        column: 37,
        span: 8412..8414,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu3xuxu\"",
        ),
        line: 228,
        column: 49,
        span: 8415..8426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 50,
        span: 8426..8427,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 229,
        column: 3,
        span: 8428..8430,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 229,
        column: 7,
        span: 8431..8434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_no32",
        ),
        line: 229,
        column: 13,
        span: 8435..8440,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 229,
        column: 0,
        span: 8441..8445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 230,
        column: 9,
        span: 8448..8454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 10,
        span: 8454..8455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 230,
        column: 15,
        span: 8455..8460,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 230,
        column: 16,
        span: 8460..8461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 230,
        column: 22,
        span: 8461..8467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 23,
        span: 8467..8468,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 230,
        column: 24,
        span: 8468..8469,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 230,
        column: 25,
        span: 8469..8470,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 26,
        span: 8470..8471,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 230,
        column: 30,
        span: 8472..8475,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 31,
        span: 8475..8476,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 33,
        span: 8476..8478,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 230,
        column: 34,
        span: 8478..8479,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 36,
        span: 8478..8481,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 230,
        column: 37,
        span: 8481..8482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 38,
        span: 8481..8483,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 39,
        span: 8483..8484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 41,
        span: 8484..8486,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 230,
        column: 42,
        span: 8486..8487,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 44,
        span: 8486..8489,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 230,
        column: 45,
        span: 8489..8490,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 230,
        column: 46,
        span: 8489..8491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 47,
        span: 8491..8492,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 230,
        column: 50,
        span: 8493..8495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 230,
        column: 53,
        span: 8496..8498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 54,
        span: 8498..8499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 9,
        span: 8502..8508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 10,
        span: 8508..8509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 231,
        column: 15,
        span: 8509..8514,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 231,
        column: 16,
        span: 8514..8515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 231,
        column: 22,
        span: 8515..8521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 23,
        span: 8521..8522,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 231,
        column: 24,
        span: 8522..8523,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 231,
        column: 25,
        span: 8523..8524,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
        column: 26,
        span: 8524..8525,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 231,
        column: 30,
        span: 8526..8529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
        column: 31,
        span: 8529..8530,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 231,
        column: 33,
        span: 8531..8532,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 34,
        span: 8531..8533,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 231,
        column: 35,
        span: 8533..8534,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 37,
        span: 8533..8536,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 231,
        column: 38,
        span: 8536..8537,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 39,
        span: 8536..8538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
        column: 40,
        span: 8538..8539,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 231,
        column: 42,
        span: 8540..8541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 43,
        span: 8540..8542,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 231,
        column: 44,
        span: 8542..8543,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 46,
        span: 8542..8545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 47,
        span: 8545..8546,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 231,
        column: 50,
        span: 8547..8549,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 231,
        column: 53,
        span: 8550..8552,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 54,
        span: 8552..8553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 232,
        column: 9,
        span: 8556..8562,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 10,
        span: 8562..8563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 232,
        column: 15,
        span: 8563..8568,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 232,
        column: 16,
        span: 8568..8569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 232,
        column: 22,
        span: 8569..8575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 23,
        span: 8575..8576,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 232,
        column: 24,
        span: 8576..8577,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 232,
        column: 25,
        span: 8577..8578,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 26,
        span: 8578..8579,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 232,
        column: 30,
        span: 8580..8583,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 31,
        span: 8583..8584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 232,
        column: 33,
        span: 8584..8586,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 232,
        column: 34,
        span: 8586..8587,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 232,
        column: 36,
        span: 8586..8589,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 232,
        column: 37,
        span: 8589..8590,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 232,
        column: 38,
        span: 8589..8591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 232,
        column: 39,
        span: 8591..8592,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 232,
        column: 41,
        span: 8593..8594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 232,
        column: 42,
        span: 8593..8595,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 232,
        column: 43,
        span: 8595..8596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 232,
        column: 45,
        span: 8595..8598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 46,
        span: 8598..8599,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 232,
        column: 49,
        span: 8600..8602,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 232,
        column: 52,
        span: 8603..8605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 53,
        span: 8605..8606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 233,
        column: 9,
        span: 8609..8615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 10,
        span: 8615..8616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 233,
        column: 15,
        span: 8616..8621,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 233,
        column: 16,
        span: 8621..8622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 233,
        column: 22,
        span: 8622..8628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 23,
        span: 8628..8629,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 233,
        column: 24,
        span: 8629..8630,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 233,
        column: 25,
        span: 8630..8631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 26,
        span: 8630..8632,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 233,
        column: 27,
        span: 8632..8633,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 29,
        span: 8632..8635,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 233,
        column: 30,
        span: 8635..8636,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 31,
        span: 8635..8637,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 233,
        column: 32,
        span: 8637..8638,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 233,
        column: 34,
        span: 8639..8640,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 233,
        column: 40,
        span: 8641..8646,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 233,
        column: 41,
        span: 8646..8647,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 42,
        span: 8647..8648,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 233,
        column: 46,
        span: 8649..8652,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 47,
        span: 8652..8653,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 49,
        span: 8653..8655,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 233,
        column: 50,
        span: 8655..8656,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 52,
        span: 8655..8658,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 233,
        column: 53,
        span: 8658..8659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 54,
        span: 8658..8660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 55,
        span: 8660..8661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 57,
        span: 8661..8663,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 233,
        column: 58,
        span: 8663..8664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 60,
        span: 8663..8666,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 233,
        column: 61,
        span: 8666..8667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 233,
        column: 62,
        span: 8666..8668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 63,
        span: 8668..8669,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 233,
        column: 66,
        span: 8670..8672,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 233,
        column: 72,
        span: 8673..8678,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 73,
        span: 8678..8679,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 234,
        column: 0,
        span: 8680..8683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 7,
        span: 8685..8691,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 8,
        span: 8691..8692,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 236,
        column: 11,
        span: 8692..8695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 236,
        column: 17,
        span: 8696..8701,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 18,
        span: 8701..8702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 236,
        column: 23,
        span: 8702..8707,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 236,
        column: 24,
        span: 8707..8708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 236,
        column: 30,
        span: 8708..8714,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 31,
        span: 8714..8715,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 236,
        column: 33,
        span: 8716..8717,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 236,
        column: 36,
        span: 8717..8720,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 37,
        span: 8720..8721,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 236,
        column: 41,
        span: 8722..8725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 42,
        span: 8725..8726,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 236,
        column: 44,
        span: 8727..8728,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 236,
        column: 45,
        span: 8728..8729,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 236,
        column: 46,
        span: 8729..8730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 47,
        span: 8730..8731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 48,
        span: 8731..8732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 238,
        column: 2,
        span: 8734..8735,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 238,
        column: 4,
        span: 8736..8737,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 238,
        column: 6,
        span: 8738..8739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 238,
        column: 9,
        span: 8739..8742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 10,
        span: 8742..8743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 238,
        column: 13,
        span: 8743..8746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 14,
        span: 8746..8747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 238,
        column: 17,
        span: 8747..8750,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 238,
        column: 18,
        span: 8750..8751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 7,
        span: 8752..8758,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 8,
        span: 8758..8759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 239,
        column: 13,
        span: 8759..8764,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 239,
        column: 14,
        span: 8764..8765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 239,
        column: 20,
        span: 8765..8771,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 21,
        span: 8771..8772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 239,
        column: 22,
        span: 8772..8773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 23,
        span: 8773..8774,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 239,
        column: 27,
        span: 8775..8778,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 28,
        span: 8778..8779,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 30,
        span: 8779..8781,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 31,
        span: 8781..8782,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 33,
        span: 8782..8784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 34,
        span: 8784..8785,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 239,
        column: 37,
        span: 8786..8788,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 239,
        column: 40,
        span: 8789..8791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 41,
        span: 8791..8792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 7,
        span: 8793..8799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 8,
        span: 8799..8800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 240,
        column: 13,
        span: 8800..8805,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 240,
        column: 14,
        span: 8805..8806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 240,
        column: 20,
        span: 8806..8812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 21,
        span: 8812..8813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 240,
        column: 22,
        span: 8813..8814,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 23,
        span: 8814..8815,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 240,
        column: 27,
        span: 8816..8819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 28,
        span: 8819..8820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 30,
        span: 8820..8822,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 31,
        span: 8822..8823,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 240,
        column: 33,
        span: 8823..8825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 34,
        span: 8825..8826,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 240,
        column: 37,
        span: 8827..8829,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 240,
        column: 41,
        span: 8830..8833,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 42,
        span: 8833..8834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 241,
        column: 7,
        span: 8835..8841,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 8,
        span: 8841..8842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 241,
        column: 13,
        span: 8842..8847,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 241,
        column: 14,
        span: 8847..8848,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 241,
        column: 20,
        span: 8848..8854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 21,
        span: 8854..8855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 241,
        column: 22,
        span: 8855..8856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
        column: 23,
        span: 8856..8857,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 241,
        column: 27,
        span: 8858..8861,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
        column: 28,
        span: 8861..8862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
        column: 30,
        span: 8862..8864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 241,
        column: 31,
        span: 8864..8865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 241,
        column: 33,
        span: 8865..8867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 34,
        span: 8867..8868,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 241,
        column: 37,
        span: 8869..8871,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a,b\"",
        ),
        line: 241,
        column: 43,
        span: 8872..8877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 44,
        span: 8877..8878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 242,
        column: 7,
        span: 8879..8885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 8,
        span: 8885..8886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 242,
        column: 13,
        span: 8886..8891,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 242,
        column: 14,
        span: 8891..8892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 242,
        column: 20,
        span: 8892..8898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 21,
        span: 8898..8899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 242,
        column: 22,
        span: 8899..8900,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 23,
        span: 8900..8901,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 242,
        column: 27,
        span: 8902..8905,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 242,
        column: 28,
        span: 8905..8906,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 30,
        span: 8906..8908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 31,
        span: 8908..8909,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 242,
        column: 34,
        span: 8910..8912,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b,c\"",
        ),
        line: 242,
        column: 40,
        span: 8913..8918,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 41,
        span: 8918..8919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
        column: 7,
        span: 8920..8926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 8,
        span: 8926..8927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 243,
        column: 13,
        span: 8927..8932,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 243,
        column: 14,
        span: 8932..8933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 243,
        column: 20,
        span: 8933..8939,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 21,
        span: 8939..8940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 243,
        column: 22,
        span: 8940..8941,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 23,
        span: 8941..8942,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 243,
        column: 27,
        span: 8943..8946,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 28,
        span: 8946..8947,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 243,
        column: 30,
        span: 8947..8949,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 31,
        span: 8949..8950,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 243,
        column: 34,
        span: 8951..8953,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 243,
        column: 38,
        span: 8954..8957,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 39,
        span: 8957..8958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 244,
        column: 7,
        span: 8959..8965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 8,
        span: 8965..8966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 244,
        column: 13,
        span: 8966..8971,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 244,
        column: 14,
        span: 8971..8972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 244,
        column: 20,
        span: 8972..8978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 244,
        column: 21,
        span: 8978..8979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 244,
        column: 22,
        span: 8979..8980,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 23,
        span: 8980..8981,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        line: 244,
        column: 27,
        span: 8982..8985,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 244,
        column: 28,
        span: 8985..8986,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 30,
        span: 8986..8988,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 31,
        span: 8988..8989,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 244,
        column: 34,
        span: 8990..8992,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 244,
        column: 37,
        span: 8993..8995,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 244,
        column: 38,
        span: 8995..8996,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 246,
        column: 3,
        span: 8998..9000,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 246,
        column: 7,
        span: 9001..9004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 246,
        column: 13,
        span: 9005..9010,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 246,
        column: 0,
        span: 9011..9015,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 248,
        column: 6,
        span: 9017..9022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "locales",
        ),
        line: 248,
        column: 14,
        span: 9023..9030,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 248,
        column: 16,
        span: 9031..9032,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 248,
        column: 18,
        span: 9033..9034,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ptb\"",
        ),
        line: 248,
        column: 24,
        span: 9035..9040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 25,
        span: 9040..9041,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ISO-8859-1\"",
        ),
        line: 248,
        column: 38,
        span: 9042..9054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 39,
        span: 9054..9055,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pt_BR\"",
        ),
        line: 248,
        column: 47,
        span: 9056..9063,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 248,
        column: 49,
        span: 9064..9065,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 249,
        column: 6,
        span: 9066..9071,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 249,
        column: 15,
        span: 9072..9080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trylocale",
        ),
        line: 249,
        column: 25,
        span: 9081..9090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 27,
        span: 9091..9092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 249,
        column: 28,
        span: 9092..9093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 29,
        span: 9093..9094,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 250,
        column: 6,
        span: 9097..9100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 250,
        column: 8,
        span: 9101..9102,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 250,
        column: 10,
        span: 9103..9104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 250,
        column: 12,
        span: 9104..9106,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 250,
        column: 13,
        span: 9106..9107,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 250,
        column: 15,
        span: 9108..9109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "locales",
        ),
        line: 250,
        column: 22,
        span: 9109..9116,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 250,
        column: 0,
        span: 9117..9119,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 251,
        column: 7,
        span: 9124..9126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 251,
        column: 10,
        span: 9127..9129,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 251,
        column: 11,
        span: 9129..9130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 251,
        column: 20,
        span: 9130..9139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 21,
        span: 9139..9140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "locales",
        ),
        line: 251,
        column: 28,
        span: 9140..9147,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 251,
        column: 29,
        span: 9147..9148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 251,
        column: 30,
        span: 9148..9149,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 251,
        column: 31,
        span: 9149..9150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 32,
        span: 9150..9151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "w",
        ),
        line: 251,
        column: 34,
        span: 9152..9153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 35,
        span: 9153..9154,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 251,
        column: 40,
        span: 9155..9159,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 251,
        column: 47,
        span: 9160..9166,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 251,
        column: 52,
        span: 9167..9171,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 251,
        column: 0,
        span: 9172..9175,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 252,
        column: 0,
        span: 9178..9181,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 253,
        column: 9,
        span: 9184..9190,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 253,
        column: 0,
        span: 9191..9196,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 254,
        column: 0,
        span: 9197..9200,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 256,
        column: 3,
        span: 9202..9204,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 256,
        column: 7,
        span: 9205..9208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trylocale",
        ),
        line: 256,
        column: 17,
        span: 9209..9218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 18,
        span: 9218..9219,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"collate\"",
        ),
        line: 256,
        column: 27,
        span: 9219..9228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 28,
        span: 9228..9229,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 256,
        column: 0,
        span: 9231..9235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 257,
        column: 8,
        span: 9238..9243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 9,
        span: 9243..9244,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"locale not supported\"",
        ),
        line: 257,
        column: 31,
        span: 9244..9266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 32,
        span: 9266..9267,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 258,
        column: 0,
        span: 9268..9272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
        column: 9,
        span: 9275..9281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 10,
        span: 9281..9282,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 259,
        column: 15,
        span: 9282..9287,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 259,
        column: 17,
        span: 9288..9289,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"álo\"",
        ),
        line: 259,
        column: 23,
        span: 9290..9295,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 259,
        column: 27,
        span: 9296..9299,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"álo\"",
        ),
        line: 259,
        column: 33,
        span: 9300..9305,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 259,
        column: 35,
        span: 9306..9307,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"amo\"",
        ),
        line: 259,
        column: 41,
        span: 9308..9313,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 42,
        span: 9313..9314,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 260,
        column: 0,
        span: 9315..9318,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 262,
        column: 3,
        span: 9320..9322,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 262,
        column: 7,
        span: 9323..9326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "trylocale",
        ),
        line: 262,
        column: 17,
        span: 9327..9336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 18,
        span: 9336..9337,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ctype\"",
        ),
        line: 262,
        column: 25,
        span: 9337..9344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 26,
        span: 9344..9345,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 262,
        column: 0,
        span: 9346..9350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 263,
        column: 8,
        span: 9353..9358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 9,
        span: 9358..9359,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"locale not supported\"",
        ),
        line: 263,
        column: 31,
        span: 9359..9381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 32,
        span: 9381..9382,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 264,
        column: 0,
        span: 9383..9387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
        column: 9,
        span: 9390..9396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 10,
        span: 9396..9397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 265,
        column: 14,
        span: 9397..9401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 15,
        span: 9401..9402,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 3.4\"",
        ),
        line: 265,
        column: 24,
        span: 9402..9411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 25,
        span: 9411..9412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 26,
        span: 9412..9413,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 265,
        column: 27,
        span: 9413..9414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 266,
        column: 9,
        span: 9461..9467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 10,
        span: 9467..9468,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 266,
        column: 13,
        span: 9468..9471,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 266,
        column: 18,
        span: 9472..9476,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 19,
        span: 9476..9477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"á = 3.4\"",
        ),
        line: 266,
        column: 28,
        span: 9477..9486,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 29,
        span: 9486..9487,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 30,
        span: 9487..9488,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 266,
        column: 31,
        span: 9488..9489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 267,
        column: 9,
        span: 9513..9519,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 10,
        span: 9519..9520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 267,
        column: 16,
        span: 9520..9526,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 267,
        column: 17,
        span: 9526..9527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 267,
        column: 21,
        span: 9527..9531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 22,
        span: 9531..9532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áéíóú\"",
        ),
        line: 267,
        column: 29,
        span: 9532..9539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 30,
        span: 9539..9540,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%a\"",
        ),
        line: 267,
        column: 35,
        span: 9541..9545,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 267,
        column: 36,
        span: 9545..9546,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 267,
        column: 40,
        span: 9547..9550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 41,
        span: 9550..9551,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 267,
        column: 44,
        span: 9552..9554,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxxxx\"",
        ),
        line: 267,
        column: 52,
        span: 9555..9562,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 53,
        span: 9562..9563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 268,
        column: 9,
        span: 9566..9572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 10,
        span: 9572..9573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 268,
        column: 16,
        span: 9573..9579,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 268,
        column: 17,
        span: 9579..9580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 268,
        column: 21,
        span: 9580..9584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 268,
        column: 22,
        span: 9584..9585,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áÁéÉ\"",
        ),
        line: 268,
        column: 28,
        span: 9585..9591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 29,
        span: 9591..9592,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%l\"",
        ),
        line: 268,
        column: 34,
        span: 9593..9597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 268,
        column: 35,
        span: 9597..9598,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 268,
        column: 39,
        span: 9599..9602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 40,
        span: 9602..9603,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 268,
        column: 43,
        span: 9604..9606,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xÁxÉ\"",
        ),
        line: 268,
        column: 50,
        span: 9607..9613,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 268,
        column: 51,
        span: 9613..9614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
        column: 9,
        span: 9617..9623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 10,
        span: 9623..9624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 269,
        column: 16,
        span: 9624..9630,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 17,
        span: 9630..9631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 269,
        column: 21,
        span: 9631..9635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 22,
        span: 9635..9636,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áÁéÉ\"",
        ),
        line: 269,
        column: 28,
        span: 9636..9642,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 29,
        span: 9642..9643,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%u\"",
        ),
        line: 269,
        column: 34,
        span: 9644..9648,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 35,
        span: 9648..9649,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 269,
        column: 39,
        span: 9650..9653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 40,
        span: 9653..9654,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 269,
        column: 43,
        span: 9655..9657,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áxéx\"",
        ),
        line: 269,
        column: 50,
        span: 9658..9664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 51,
        span: 9664..9665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 270,
        column: 9,
        span: 9668..9674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 10,
        span: 9674..9675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 270,
        column: 16,
        span: 9675..9681,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 270,
        column: 17,
        span: 9681..9682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        line: 270,
        column: 22,
        span: 9682..9687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"áÁé{xuxu}ção\"",
        ),
        line: 270,
        column: 36,
        span: 9687..9701,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 270,
        column: 39,
        span: 9702..9704,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ÁÁÉ{XUXU}ÇÃO\"",
        ),
        line: 270,
        column: 54,
        span: 9705..9719,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 55,
        span: 9719..9720,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 271,
        column: 0,
        span: 9721..9724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 273,
        column: 3,
        span: 9726..9728,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
        column: 4,
        span: 9728..9729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 273,
        column: 13,
        span: 9729..9738,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 14,
        span: 9738..9739,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 273,
        column: 17,
        span: 9739..9742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 18,
        span: 9742..9743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 274,
        column: 7,
        span: 9744..9750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 8,
        span: 9750..9751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 274,
        column: 10,
        span: 9751..9753,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 274,
        column: 11,
        span: 9753..9754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 274,
        column: 20,
        span: 9754..9763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 21,
        span: 9763..9764,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 22,
        span: 9764..9765,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 274,
        column: 25,
        span: 9766..9768,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'C'",
        ),
        line: 274,
        column: 29,
        span: 9769..9772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 30,
        span: 9772..9773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 275,
        column: 7,
        span: 9774..9780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 8,
        span: 9780..9781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 275,
        column: 10,
        span: 9781..9783,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 275,
        column: 11,
        span: 9783..9784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 275,
        column: 20,
        span: 9784..9793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 21,
        span: 9793..9794,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 275,
        column: 24,
        span: 9794..9797,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 25,
        span: 9797..9798,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"numeric\"",
        ),
        line: 275,
        column: 35,
        span: 9799..9808,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 36,
        span: 9808..9809,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 275,
        column: 39,
        span: 9810..9812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'C'",
        ),
        line: 275,
        column: 43,
        span: 9813..9816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 44,
        span: 9816..9817,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 277,
        column: 0,
        span: 9819..9822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 279,
        column: 6,
        span: 9824..9829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 7,
        span: 9829..9830,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 279,
        column: 11,
        span: 9830..9834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 12,
        span: 9834..9835,
    },
]
