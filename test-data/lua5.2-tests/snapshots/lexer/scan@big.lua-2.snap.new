---
source: src/main.rs
assertion_line: 91
expression: scanned
input_file: test-data/lua5.2-tests/big.lua
---
[
    Token {
        kind: If,
        lexeme: "if",
        line: 1,
    },
    Token {
        kind: Identifier,
        lexeme: "_soft",
        line: 1,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 1,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 2,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 2,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 3,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 5,
    },
    Token {
        kind: String,
        lexeme: "\"testing large tables\"",
        line: 5,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 7,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 7,
    },
    Token {
        kind: Identifier,
        lexeme: "require",
        line: 7,
    },
    Token {
        kind: String,
        lexeme: "\"debug\"",
        line: 7,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 9,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 9,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 9,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: "18",
        line: 9,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 9,
    },
    Token {
        kind: Number,
        lexeme: "1000",
        line: 9,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 10,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 10,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 10,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 10,
    },
    Token {
        kind: String,
        lexeme: "\"local y = {0\"",
        line: 10,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 10,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 11,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 11,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 11,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 11,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 11,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 11,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 11,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 11,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 11,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "i",
        line: 11,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 11,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 12,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 12,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 12,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 12,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 12,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 12,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 12,
    },
    Token {
        kind: String,
        lexeme: "\"}\\n\"",
        line: 12,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 13,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 13,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 13,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 13,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 13,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 13,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 13,
    },
    Token {
        kind: String,
        lexeme: "\"X = y\\n\"",
        line: 13,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 14,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 14,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 14,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 14,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 14,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 14,
    },
    Token {
        kind: String,
        lexeme: "\"assert(X[%d] == %d)\"",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "format",
        line: 14,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 14,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 14,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 14,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 14,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 14,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 14,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 15,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 15,
    },
    Token {
        kind: Hash,
        lexeme: "#",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 15,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 15,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 15,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 15,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 15,
    },
    Token {
        kind: String,
        lexeme: "\"return 0\"",
        line: 15,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 16,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "table",
        line: 16,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "concat",
        line: 16,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 16,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 16,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 16,
    },
    Token {
        kind: String,
        lexeme: "\";\"",
        line: 16,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 16,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "env",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 18,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 18,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 18,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 18,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 18,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 19,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 19,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "prog",
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 19,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 19,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 19,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "env",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 19,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 21,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 21,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 21,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 22,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "env",
        line: 22,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 22,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 22,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 22,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 22,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "env",
        line: 22,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 22,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 22,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 22,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 22,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 22,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 22,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 22,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 22,
    },
    Token {
        kind: For,
        lexeme: "for",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 23,
    },
    Token {
        kind: In,
        lexeme: "in",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "pairs",
        line: 23,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "env",
        line: 23,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 23,
    },
    Token {
        kind: Do,
        lexeme: "do",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "env",
        line: 23,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "k",
        line: 23,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 23,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 23,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 23,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 23,
    },
    Token {
        kind: Identifier,
        lexeme: "setmetatable",
        line: 26,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "env",
        line: 26,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 26,
    },
    Token {
        kind: LeftBrace,
        lexeme: "{",
        line: 26,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 27,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 27,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 27,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "yield",
        line: 27,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 27,
    },
    Token {
        kind: String,
        lexeme: "'g'",
        line: 27,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 27,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 27,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 27,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 27,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 27,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 27,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 27,
    },
    Token {
        kind: Identifier,
        lexeme: "__newindex",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "t",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 28,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "yield",
        line: 28,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 28,
    },
    Token {
        kind: String,
        lexeme: "'s'",
        line: 28,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 28,
    },
    Token {
        kind: Semicolon,
        lexeme: ";",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "_G",
        line: 28,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "n",
        line: 28,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 28,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 28,
    },
    Token {
        kind: Identifier,
        lexeme: "v",
        line: 28,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 28,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 28,
    },
    Token {
        kind: RightBrace,
        lexeme: "}",
        line: 29,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 29,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 31,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 31,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 31,
    },
    Token {
        kind: Identifier,
        lexeme: "co",
        line: 32,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 32,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "wrap",
        line: 32,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 32,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 32,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "co",
        line: 33,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 33,
    },
    Token {
        kind: String,
        lexeme: "'s'",
        line: 33,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 33,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "co",
        line: 34,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 34,
    },
    Token {
        kind: String,
        lexeme: "'g'",
        line: 34,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 34,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "co",
        line: 35,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 35,
    },
    Token {
        kind: String,
        lexeme: "'g'",
        line: 35,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 35,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "co",
        line: 36,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 36,
    },
    Token {
        kind: Number,
        lexeme: "0",
        line: 36,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 36,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 38,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 38,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 38,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 38,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 38,
    },
    Token {
        kind: Minus,
        lexeme: "-",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 38,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 38,
    },
    Token {
        kind: LeftBracket,
        lexeme: "[",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 38,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 38,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 38,
    },
    Token {
        kind: RightBracket,
        lexeme: "]",
        line: 38,
    },
    Token {
        kind: DoubleEquals,
        lexeme: "==",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "lim",
        line: 38,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 38,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "env",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "__index",
        line: 41,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 41,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 41,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 41,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 41,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 41,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "env",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 42,
    },
    Token {
        kind: Identifier,
        lexeme: "__newindex",
        line: 42,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 42,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 42,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 42,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 42,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 42,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 43,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 43,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 43,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 43,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 43,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 44,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 44,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 44,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 44,
    },
    Token {
        kind: String,
        lexeme: "\"global 'X'\"",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 44,
    },
    Token {
        kind: Identifier,
        lexeme: "getmetatable",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "env",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "__newindex",
        line: 47,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 47,
    },
    Token {
        kind: Function,
        lexeme: "function",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: Identifier,
        lexeme: "error",
        line: 47,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 47,
    },
    Token {
        kind: String,
        lexeme: "\"hi\"",
        line: 47,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 47,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 47,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 48,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 48,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "xpcall",
        line: 48,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 48,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "debug",
        line: 48,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "traceback",
        line: 48,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 48,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 49,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "e",
        line: 49,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "m",
        line: 49,
    },
    Token {
        kind: Colon,
        lexeme: ":",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 49,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 49,
    },
    Token {
        kind: String,
        lexeme: "\"'__newindex'\"",
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 49,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 49,
    },
    Token {
        kind: Identifier,
        lexeme: "f",
        line: 51,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "X",
        line: 51,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 51,
    },
    Token {
        kind: Nil,
        lexeme: "nil",
        line: 51,
    },
    Token {
        kind: Identifier,
        lexeme: "coroutine",
        line: 53,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 53,
    },
    Token {
        kind: Identifier,
        lexeme: "yield",
        line: 53,
    },
    Token {
        kind: String,
        lexeme: "'b'",
        line: 53,
    },
    Token {
        kind: If,
        lexeme: "if",
        line: 55,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "_no32",
        line: 55,
    },
    Token {
        kind: Then,
        lexeme: "then",
        line: 55,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 57,
    },
    Token {
        kind: String,
        lexeme: "\"testing string length overflow\"",
        line: 57,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 59,
    },
    Token {
        kind: Identifier,
        lexeme: "repstrings",
        line: 59,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 59,
    },
    Token {
        kind: Number,
        lexeme: "192",
        line: 59,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "ssize",
        line: 60,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "math",
        line: 60,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "ceil",
        line: 60,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 60,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "32",
        line: 60,
    },
    Token {
        kind: Slash,
        lexeme: "/",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "repstrings",
        line: 60,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 60,
    },
    Token {
        kind: Plus,
        lexeme: "+",
        line: 60,
    },
    Token {
        kind: Number,
        lexeme: "1",
        line: 60,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 62,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "repstrings",
        line: 62,
    },
    Token {
        kind: Star,
        lexeme: "*",
        line: 62,
    },
    Token {
        kind: Identifier,
        lexeme: "ssize",
        line: 62,
    },
    Token {
        kind: GreaterThan,
        lexeme: ">",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "2",
        line: 62,
    },
    Token {
        kind: Caret,
        lexeme: "^",
        line: 62,
    },
    Token {
        kind: Number,
        lexeme: "32",
        line: 62,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 62,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "longs",
        line: 64,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 64,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 64,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 64,
    },
    Token {
        kind: String,
        lexeme: "\"\\0\"",
        line: 64,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 64,
    },
    Token {
        kind: Identifier,
        lexeme: "ssize",
        line: 64,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 64,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 67,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: Identifier,
        lexeme: "load",
        line: 67,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 67,
    },
    Token {
        kind: String,
        lexeme: "\"local a = ...; return \"",
        line: 68,
    },
    Token {
        kind: DoubleDot,
        lexeme: "..",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 68,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 68,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "\"a\"",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: Identifier,
        lexeme: "repstrings",
        line: 68,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 68,
    },
    Token {
        kind: String,
        lexeme: "\"..\"",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 68,
    },
    Token {
        kind: Local,
        lexeme: "local",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 70,
    },
    Token {
        kind: Equals,
        lexeme: "=",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "pcall",
        line: 70,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "rep",
        line: 70,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "longs",
        line: 70,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 70,
    },
    Token {
        kind: Identifier,
        lexeme: "assert",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: Not,
        lexeme: "not",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "a",
        line: 73,
    },
    Token {
        kind: And,
        lexeme: "and",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "string",
        line: 73,
    },
    Token {
        kind: Dot,
        lexeme: ".",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "find",
        line: 73,
    },
    Token {
        kind: LeftParen,
        lexeme: "(",
        line: 73,
    },
    Token {
        kind: Identifier,
        lexeme: "b",
        line: 73,
    },
    Token {
        kind: Comma,
        lexeme: ",",
        line: 73,
    },
    Token {
        kind: String,
        lexeme: "\"overflow\"",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: RightParen,
        lexeme: ")",
        line: 73,
    },
    Token {
        kind: End,
        lexeme: "end",
        line: 75,
    },
    Token {
        kind: Identifier,
        lexeme: "print",
        line: 77,
    },
    Token {
        kind: String,
        lexeme: "'OK'",
        line: 77,
    },
    Token {
        kind: Return,
        lexeme: "return",
        line: 79,
    },
    Token {
        kind: String,
        lexeme: "'a'",
        line: 79,
    },
]
