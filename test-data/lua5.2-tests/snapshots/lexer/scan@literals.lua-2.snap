---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/literals.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
        column: 6,
        span: 5..6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing scanner'",
        ),
        line: 1,
        column: 23,
        span: 6..23,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
        column: 24,
        span: 23..24,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 3,
        column: 6,
        span: 26..31,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 3,
        column: 8,
        span: 32..33,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 3,
        column: 16,
        span: 34..41,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        line: 3,
        column: 24,
        span: 42..49,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 52..57,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 6,
        column: 15,
        span: 58..66,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 6,
        column: 24,
        span: 67..75,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 26,
        span: 76..77,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 6,
        column: 27,
        span: 77..78,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 28,
        span: 78..79,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 6,
        column: 35,
        span: 80..86,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 6,
        column: 42,
        span: 87..93,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 43,
        span: 93..94,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 6,
        column: 47,
        span: 94..98,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 48,
        span: 98..99,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 6,
        column: 49,
        span: 99..100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 50,
        span: 100..101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 51,
        span: 101..102,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 52,
        span: 102..103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 53,
        span: 103..104,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 6,
        column: 0,
        span: 105..108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 8,
        column: 9,
        span: 110..118,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 10,
        span: 118..119,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x \\v\\f = \\t\\r 'a\\0a' \\v\\f\\f\"",
        ),
        line: 8,
        column: 39,
        span: 119..148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 40,
        span: 148..149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 9,
        column: 7,
        span: 150..156,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 8,
        span: 156..157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 9,
        column: 9,
        span: 157..158,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 9,
        column: 12,
        span: 159..161,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a\\0a'",
        ),
        line: 9,
        column: 19,
        span: 162..168,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 9,
        column: 23,
        span: 169..172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 9,
        column: 30,
        span: 173..179,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 9,
        column: 31,
        span: 179..180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 9,
        column: 34,
        span: 180..183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 35,
        span: 183..184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 9,
        column: 36,
        span: 184..185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 37,
        span: 185..186,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 9,
        column: 40,
        span: 187..189,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 42,
        span: 189..191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 43,
        span: 191..192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
        column: 7,
        span: 214..220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 220..221,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n\\\"\\'\\\\'",
        ),
        line: 12,
        column: 18,
        span: 221..231,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
        column: 21,
        span: 232..234,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n\"'\\]]",
        ),
        line: 14,
        column: 6,
        span: 235..244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 7,
        span: 244..245,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 7,
        span: 247..253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 253..254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 16,
        column: 14,
        span: 254..260,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 15,
        span: 260..261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 16,
        column: 19,
        span: 261..265,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 20,
        span: 265..266,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\a\\b\\f\\n\\r\\t\\v\"",
        ),
        line: 16,
        column: 36,
        span: 266..282,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 16,
        column: 37,
        span: 282..283,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^%c%c%c%c%c%c%c$\"",
        ),
        line: 16,
        column: 56,
        span: 284..302,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 57,
        span: 302..303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 58,
        span: 303..304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 19,
        column: 7,
        span: 338..344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 8,
        span: 344..345,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\09912\"",
        ),
        line: 19,
        column: 16,
        span: 345..353,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 19,
        column: 19,
        span: 354..356,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c12'",
        ),
        line: 19,
        column: 25,
        span: 357..362,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 26,
        span: 362..363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
        column: 7,
        span: 364..370,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 8,
        span: 370..371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\99ab\"",
        ),
        line: 20,
        column: 15,
        span: 371..378,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 20,
        column: 18,
        span: 379..381,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cab'",
        ),
        line: 20,
        column: 24,
        span: 382..387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 25,
        span: 387..388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 7,
        span: 389..395,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 8,
        span: 395..396,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\099\"",
        ),
        line: 21,
        column: 14,
        span: 396..402,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
        column: 17,
        span: 403..405,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\99'",
        ),
        line: 21,
        column: 23,
        span: 406..411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 24,
        span: 411..412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 7,
        span: 413..419,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 8,
        span: 419..420,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\099\\n\"",
        ),
        line: 22,
        column: 16,
        span: 420..428,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 19,
        span: 429..431,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'c\\10'",
        ),
        line: 22,
        column: 26,
        span: 432..438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 27,
        span: 438..439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 23,
        column: 7,
        span: 440..446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 8,
        span: 446..447,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0\\0alo'",
        ),
        line: 23,
        column: 19,
        span: 447..458,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 23,
        column: 22,
        span: 459..461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0'",
        ),
        line: 23,
        column: 27,
        span: 462..466,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 23,
        column: 30,
        span: 467..469,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\0\\0'",
        ),
        line: 23,
        column: 37,
        span: 470..476,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 23,
        column: 40,
        span: 477..479,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 23,
        column: 46,
        span: 480..485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 47,
        span: 485..486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 25,
        column: 7,
        span: 488..494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 494..495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "010",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 11,
        span: 494..498,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 25,
        column: 14,
        span: 499..501,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "020",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 18,
        span: 501..505,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 25,
        column: 21,
        span: 506..508,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 25,
        column: 23,
        span: 509..510,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "030",
                    after_decimal: "",
                },
            ),
        ),
        line: 25,
        column: 26,
        span: 509..513,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 25,
        column: 29,
        span: 514..516,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1020-30\"",
        ),
        line: 25,
        column: 39,
        span: 517..526,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 40,
        span: 526..527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 7,
        span: 552..558,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 8,
        span: 558..559,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\x00\\x05\\x10\\x1f\\x3C\\xfF\\xe8\"",
        ),
        line: 28,
        column: 38,
        span: 559..589,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 28,
        column: 41,
        span: 590..592,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\5\\16\\31\\60\\255\\232\"",
        ),
        line: 28,
        column: 65,
        span: 593..616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 66,
        span: 616..617,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 30,
        column: 6,
        span: 619..624,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 30,
        column: 15,
        span: 625..633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 30,
        column: 25,
        span: 634..643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 27,
        span: 644..645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 30,
        column: 28,
        span: 645..646,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 29,
        span: 646..647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 30,
        column: 31,
        span: 648..649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 32,
        span: 649..650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 30,
        column: 34,
        span: 651..652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 35,
        span: 652..653,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 31,
        column: 8,
        span: 656..661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 31,
        column: 10,
        span: 662..663,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 31,
        column: 12,
        span: 664..665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 19,
        span: 666..672,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 20,
        span: 672..673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 31,
        column: 24,
        span: 673..677,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 25,
        span: 677..678,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return '",
        ),
        line: 31,
        column: 34,
        span: 678..687,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 31,
        column: 36,
        span: 687..689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 31,
        column: 37,
        span: 689..690,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 31,
        column: 39,
        span: 690..692,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "', debug.getinfo(1).currentline'",
        ),
        line: 31,
        column: 71,
        span: 692..724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 72,
        span: 724..725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 73,
        span: 725..726,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 32,
        column: 8,
        span: 729..734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 32,
        column: 10,
        span: 735..736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 11,
        span: 736..737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 32,
        column: 13,
        span: 738..739,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
        column: 15,
        span: 740..741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 32,
        column: 17,
        span: 742..743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 18,
        span: 743..744,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 19,
        span: 744..745,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 9,
        span: 748..754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 10,
        span: 754..755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 33,
        column: 11,
        span: 755..756,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
        column: 14,
        span: 757..759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 33,
        column: 16,
        span: 760..761,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 33,
        column: 20,
        span: 762..765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "l",
        ),
        line: 33,
        column: 22,
        span: 766..767,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 33,
        column: 25,
        span: 768..770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 33,
        column: 27,
        span: 771..772,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 28,
        span: 772..773,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 34,
        column: 0,
        span: 774..777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 36,
        column: 10,
        span: 779..788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 11,
        span: 788..789,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'abc\\\\z  \\n   efg'\"",
        ),
        line: 36,
        column: 31,
        span: 789..809,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 32,
        span: 809..810,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abcefg\"",
        ),
        line: 36,
        column: 41,
        span: 811..819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 42,
        span: 819..820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 44,
        span: 820..822,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 45,
        span: 822..823,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 37,
        column: 10,
        span: 824..833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 11,
        span: 833..834,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'abc\\\\z  \\n\\n\\n'\"",
        ),
        line: 37,
        column: 29,
        span: 834..852,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 30,
        span: 852..853,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 37,
        column: 36,
        span: 854..859,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 37,
        span: 859..860,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 37,
        column: 39,
        span: 860..862,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 40,
        span: 862..863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 38,
        column: 10,
        span: 864..873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 11,
        span: 873..874,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\\\\z  \\n\\t\\f\\v\\n'\"",
        ),
        line: 38,
        column: 30,
        span: 874..893,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 31,
        span: 893..894,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 38,
        column: 35,
        span: 896..898,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 36,
        span: 898..899,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 38,
        column: 38,
        span: 899..901,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 39,
        span: 901..902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 39,
        column: 10,
        span: 903..912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 11,
        span: 912..913,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\nalo\\nalo\\n\\n]]\"",
        ),
        line: 39,
        column: 31,
        span: 913..933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 32,
        span: 933..934,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\\n\"",
        ),
        line: 39,
        column: 47,
        span: 935..949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 48,
        span: 949..950,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 39,
        column: 50,
        span: 950..952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 51,
        span: 952..953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 40,
        column: 10,
        span: 954..963,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 11,
        span: 963..964,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\nalo\\ralo\\n\\n]]\"",
        ),
        line: 40,
        column: 31,
        span: 964..984,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 32,
        span: 984..985,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\\n\"",
        ),
        line: 40,
        column: 47,
        span: 986..1000,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 48,
        span: 1000..1001,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 50,
        span: 1001..1003,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 51,
        span: 1003..1004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 41,
        column: 10,
        span: 1005..1014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 11,
        span: 1014..1015,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\nalo\\ralo\\r\\n]]\"",
        ),
        line: 41,
        column: 31,
        span: 1015..1035,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 32,
        span: 1035..1036,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\"",
        ),
        line: 41,
        column: 45,
        span: 1037..1049,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 46,
        span: 1049..1050,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 48,
        span: 1050..1052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 49,
        span: 1052..1053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 42,
        column: 10,
        span: 1054..1063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 11,
        span: 1063..1064,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[\\ralo\\n\\ralo\\r\\n]]\"",
        ),
        line: 42,
        column: 33,
        span: 1064..1086,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 34,
        span: 1086..1087,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\nalo\\n\"",
        ),
        line: 42,
        column: 47,
        span: 1088..1100,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 42,
        column: 48,
        span: 1100..1101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 50,
        span: 1101..1103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 51,
        span: 1103..1104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexstring",
        ),
        line: 43,
        column: 10,
        span: 1105..1114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 11,
        span: 1114..1115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[[alo]\\n]alo]]\"",
        ),
        line: 43,
        column: 27,
        span: 1115..1131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 28,
        span: 1131..1132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo]\\n]alo\"",
        ),
        line: 43,
        column: 41,
        span: 1133..1145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 42,
        span: 1145..1146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 44,
        span: 1146..1148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 45,
        span: 1148..1149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 45,
        column: 7,
        span: 1151..1157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 8,
        span: 1157..1158,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\\z\n        def\\z\n        ghi\\z\n       \"",
        ),
        line: 48,
        column: 9,
        span: 1158..1201,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 48,
        column: 12,
        span: 1202..1204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'abcdefghi'",
        ),
        line: 48,
        column: 24,
        span: 1205..1216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 25,
        span: 1216..1217,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 51,
        column: 6,
        span: 1248..1253,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 51,
        column: 15,
        span: 1254..1262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 51,
        column: 24,
        span: 1263..1271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 51,
        column: 26,
        span: 1272..1273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 51,
        column: 27,
        span: 1273..1274,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 51,
        column: 28,
        span: 1274..1275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 51,
        column: 32,
        span: 1276..1279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 33,
        span: 1279..1280,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 52,
        column: 8,
        span: 1283..1288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 52,
        column: 11,
        span: 1289..1291,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 52,
        column: 12,
        span: 1291..1292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 52,
        column: 16,
        span: 1293..1296,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 52,
        column: 18,
        span: 1297..1298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 52,
        column: 23,
        span: 1299..1303,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 24,
        span: 1303..1304,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'return '",
        ),
        line: 52,
        column: 33,
        span: 1304..1313,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 52,
        column: 35,
        span: 1313..1315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 52,
        column: 36,
        span: 1315..1316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 37,
        span: 1316..1317,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 53,
        column: 5,
        span: 1320..1322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 53,
        column: 9,
        span: 1323..1326,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 53,
        column: 12,
        span: 1327..1329,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'<eof>'",
        ),
        line: 53,
        column: 20,
        span: 1330..1337,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 53,
        column: 25,
        span: 1338..1342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 53,
        column: 29,
        span: 1343..1346,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 53,
        column: 31,
        span: 1347..1348,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 53,
        column: 35,
        span: 1349..1352,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 53,
        column: 37,
        span: 1352..1354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 53,
        column: 40,
        span: 1354..1357,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 53,
        column: 42,
        span: 1357..1359,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'\"",
        ),
        line: 53,
        column: 45,
        span: 1359..1362,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 53,
        column: 0,
        span: 1363..1366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 54,
        column: 9,
        span: 1369..1375,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 10,
        span: 1375..1376,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 54,
        column: 13,
        span: 1376..1379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 54,
        column: 16,
        span: 1380..1382,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 54,
        column: 20,
        span: 1383..1386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 54,
        column: 27,
        span: 1387..1393,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 54,
        column: 28,
        span: 1393..1394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 54,
        column: 32,
        span: 1394..1398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 33,
        span: 1398..1399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 54,
        column: 36,
        span: 1399..1402,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 37,
        span: 1402..1403,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"near \"",
        ),
        line: 54,
        column: 45,
        span: 1404..1411,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 54,
        column: 47,
        span: 1411..1413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 54,
        column: 50,
        span: 1413..1416,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 51,
        span: 1416..1417,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 54,
        column: 53,
        span: 1417..1419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 54,
        span: 1419..1420,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 54,
        column: 59,
        span: 1421..1425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 60,
        span: 1425..1426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 61,
        span: 1426..1427,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 55,
        column: 0,
        span: 1428..1431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 56,
        column: 9,
        span: 1432..1440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 10,
        span: 1440..1441,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\x\"]]",
        ),
        line: 56,
        column: 21,
        span: 1441..1452,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 22,
        span: 1452..1453,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x\"]]",
        ),
        line: 56,
        column: 30,
        span: 1454..1461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 31,
        span: 1461..1462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 57,
        column: 9,
        span: 1463..1471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 57,
        column: 10,
        span: 1471..1472,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"abc\\x]]",
        ),
        line: 57,
        column: 20,
        span: 1472..1482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 57,
        column: 21,
        span: 1482..1483,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x]]",
        ),
        line: 57,
        column: 28,
        span: 1484..1490,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 57,
        column: 29,
        span: 1490..1491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 58,
        column: 9,
        span: 1492..1500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 10,
        span: 1500..1501,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x]]",
        ),
        line: 58,
        column: 17,
        span: 1501..1508,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 18,
        span: 1508..1509,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x]]",
        ),
        line: 58,
        column: 25,
        span: 1510..1516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 26,
        span: 1516..1517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 59,
        column: 9,
        span: 1518..1526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 10,
        span: 1526..1527,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x5\"]]",
        ),
        line: 59,
        column: 19,
        span: 1527..1536,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 20,
        span: 1536..1537,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x5\"]]",
        ),
        line: 59,
        column: 29,
        span: 1538..1546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 30,
        span: 1546..1547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 60,
        column: 9,
        span: 1548..1556,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 10,
        span: 1556..1557,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x5]]",
        ),
        line: 60,
        column: 18,
        span: 1557..1565,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 19,
        span: 1565..1566,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x5]]",
        ),
        line: 60,
        column: 27,
        span: 1567..1574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 28,
        span: 1574..1575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 61,
        column: 9,
        span: 1576..1584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 10,
        span: 1584..1585,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\xr\"]]",
        ),
        line: 61,
        column: 19,
        span: 1585..1594,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 20,
        span: 1594..1595,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\xr]]",
        ),
        line: 61,
        column: 28,
        span: 1596..1603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 29,
        span: 1603..1604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 62,
        column: 9,
        span: 1605..1613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 10,
        span: 1613..1614,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\xr]]",
        ),
        line: 62,
        column: 18,
        span: 1614..1622,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 19,
        span: 1622..1623,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\xr]]",
        ),
        line: 62,
        column: 27,
        span: 1624..1631,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 28,
        span: 1631..1632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 63,
        column: 9,
        span: 1633..1641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 10,
        span: 1641..1642,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x.]]",
        ),
        line: 63,
        column: 18,
        span: 1642..1650,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 63,
        column: 19,
        span: 1650..1651,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x.]]",
        ),
        line: 63,
        column: 27,
        span: 1652..1659,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 28,
        span: 1659..1660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 64,
        column: 9,
        span: 1661..1669,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 10,
        span: 1669..1670,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\x8%\"]]",
        ),
        line: 64,
        column: 20,
        span: 1670..1680,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 21,
        span: 1680..1681,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\x8%]]",
        ),
        line: 64,
        column: 30,
        span: 1682..1690,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 31,
        span: 1690..1691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 65,
        column: 9,
        span: 1692..1700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 10,
        span: 1700..1701,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\xAG]]",
        ),
        line: 65,
        column: 19,
        span: 1701..1710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 20,
        span: 1710..1711,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\xAG]]",
        ),
        line: 65,
        column: 29,
        span: 1712..1720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 30,
        span: 1720..1721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 66,
        column: 9,
        span: 1722..1730,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 10,
        span: 1730..1731,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\g\"]]",
        ),
        line: 66,
        column: 18,
        span: 1731..1739,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 19,
        span: 1739..1740,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\g]]",
        ),
        line: 66,
        column: 26,
        span: 1741..1747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 27,
        span: 1747..1748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 67,
        column: 9,
        span: 1749..1757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 10,
        span: 1757..1758,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\g]]",
        ),
        line: 67,
        column: 17,
        span: 1758..1765,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 18,
        span: 1765..1766,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\g]]",
        ),
        line: 67,
        column: 25,
        span: 1767..1773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 26,
        span: 1773..1774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 68,
        column: 9,
        span: 1775..1783,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 10,
        span: 1783..1784,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\.\"]]",
        ),
        line: 68,
        column: 18,
        span: 1784..1792,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 19,
        span: 1792..1793,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\.]]",
        ),
        line: 68,
        column: 26,
        span: 1794..1800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 27,
        span: 1800..1801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 70,
        column: 9,
        span: 1803..1811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 10,
        span: 1811..1812,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"\\999\"]]",
        ),
        line: 70,
        column: 20,
        span: 1812..1822,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 21,
        span: 1822..1823,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\999]]",
        ),
        line: 70,
        column: 30,
        span: 1824..1832,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 31,
        span: 1832..1833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 71,
        column: 9,
        span: 1834..1842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 10,
        span: 1842..1843,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"xyz\\300\"]]",
        ),
        line: 71,
        column: 23,
        span: 1843..1856,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 24,
        span: 1856..1857,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\300]]",
        ),
        line: 71,
        column: 33,
        span: 1858..1866,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 34,
        span: 1866..1867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 72,
        column: 9,
        span: 1868..1876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 10,
        span: 1876..1877,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\"   \\256\"]]",
        ),
        line: 72,
        column: 23,
        span: 1877..1890,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 24,
        span: 1890..1891,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\\256]]",
        ),
        line: 72,
        column: 33,
        span: 1892..1900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 34,
        span: 1900..1901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 76,
        column: 9,
        span: 1926..1934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 10,
        span: 1934..1935,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[=[alo]]\"",
        ),
        line: 76,
        column: 20,
        span: 1935..1945,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 21,
        span: 1945..1946,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 76,
        column: 29,
        span: 1947..1954,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 30,
        span: 1954..1955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 77,
        column: 9,
        span: 1956..1964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 10,
        span: 1964..1965,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[=[alo]=\"",
        ),
        line: 77,
        column: 20,
        span: 1965..1975,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 21,
        span: 1975..1976,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 77,
        column: 29,
        span: 1977..1984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 30,
        span: 1984..1985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 78,
        column: 9,
        span: 1986..1994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 10,
        span: 1994..1995,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[=[alo]\"",
        ),
        line: 78,
        column: 19,
        span: 1995..2004,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 20,
        span: 2004..2005,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 78,
        column: 28,
        span: 2006..2013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 29,
        span: 2013..2014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 79,
        column: 9,
        span: 2015..2023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 10,
        span: 2023..2024,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'alo\"",
        ),
        line: 79,
        column: 16,
        span: 2024..2030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 17,
        span: 2030..2031,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 79,
        column: 25,
        span: 2032..2039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 26,
        span: 2039..2040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 80,
        column: 9,
        span: 2041..2049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 10,
        span: 2049..2050,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'alo \\\\z  \\n\\n\"",
        ),
        line: 80,
        column: 26,
        span: 2050..2066,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 27,
        span: 2066..2067,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 80,
        column: 35,
        span: 2068..2075,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 36,
        span: 2075..2076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 81,
        column: 9,
        span: 2077..2085,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 10,
        span: 2085..2086,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'alo \\\\z\"",
        ),
        line: 81,
        column: 20,
        span: 2086..2096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 21,
        span: 2096..2097,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 81,
        column: 29,
        span: 2098..2105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 30,
        span: 2105..2106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lexerror",
        ),
        line: 82,
        column: 9,
        span: 2107..2115,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 10,
        span: 2115..2116,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[['alo \\98]]",
        ),
        line: 82,
        column: 22,
        span: 2116..2128,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 23,
        span: 2128..2129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"<eof>\"",
        ),
        line: 82,
        column: 31,
        span: 2130..2137,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 32,
        span: 2137..2138,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 85,
        column: 4,
        span: 2178..2181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 85,
        column: 6,
        span: 2182..2183,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 8,
        span: 2184..2185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 10,
        span: 2185..2187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 11,
        span: 2187..2188,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 15,
        span: 2188..2192,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 85,
        column: 0,
        span: 2193..2195,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 86,
        column: 8,
        span: 2198..2203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 86,
        column: 10,
        span: 2204..2205,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 12,
        span: 2206..2207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 86,
        column: 19,
        span: 2208..2214,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 86,
        column: 20,
        span: 2214..2215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "char",
        ),
        line: 86,
        column: 24,
        span: 2215..2219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 25,
        span: 2219..2220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 86,
        column: 26,
        span: 2220..2221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 27,
        span: 2221..2222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
        column: 9,
        span: 2225..2231,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 10,
        span: 2231..2232,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 87,
        column: 13,
        span: 2232..2235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 87,
        column: 20,
        span: 2236..2242,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 87,
        column: 21,
        span: 2242..2243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 87,
        column: 25,
        span: 2243..2247,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 26,
        span: 2247..2248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 87,
        column: 27,
        span: 2248..2249,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 28,
        span: 2249..2250,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a-zA-Z_]\"",
        ),
        line: 87,
        column: 40,
        span: 2251..2262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 41,
        span: 2262..2263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 44,
        span: 2264..2266,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 87,
        column: 48,
        span: 2267..2270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 87,
        column: 53,
        span: 2271..2275,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 54,
        span: 2275..2276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 87,
        column: 55,
        span: 2276..2277,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 87,
        column: 58,
        span: 2278..2280,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=1\"",
        ),
        line: 87,
        column: 63,
        span: 2281..2285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 64,
        span: 2285..2286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 65,
        span: 2286..2287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 9,
        span: 2290..2296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 10,
        span: 2296..2297,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 88,
        column: 13,
        span: 2297..2300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 88,
        column: 20,
        span: 2301..2307,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 21,
        span: 2307..2308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 88,
        column: 25,
        span: 2308..2312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 26,
        span: 2312..2313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 88,
        column: 27,
        span: 2313..2314,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 28,
        span: 2314..2315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[a-zA-Z_0-9]\"",
        ),
        line: 88,
        column: 43,
        span: 2316..2330,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 44,
        span: 2330..2331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 47,
        span: 2332..2334,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 89,
        column: 13,
        span: 2344..2347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 89,
        column: 18,
        span: 2348..2352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 89,
        column: 19,
        span: 2352..2353,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 89,
        column: 22,
        span: 2353..2356,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 89,
        column: 25,
        span: 2357..2359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 89,
        column: 27,
        span: 2360..2361,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 89,
        column: 30,
        span: 2362..2364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1 = 1\"",
        ),
        line: 89,
        column: 38,
        span: 2365..2372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 39,
        span: 2372..2373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 89,
        column: 40,
        span: 2373..2374,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 90,
        column: 0,
        span: 2375..2378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var",
        ),
        line: 95,
        column: 4,
        span: 2405..2408,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 6,
        span: 2409..2410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 95,
        column: 13,
        span: 2411..2417,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 95,
        column: 14,
        span: 2417..2418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 95,
        column: 17,
        span: 2418..2421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 18,
        span: 2421..2422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 95,
        column: 21,
        span: 2422..2425,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 22,
        span: 2425..2426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15000",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 28,
        span: 2426..2432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 29,
        span: 2432..2433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 96,
        column: 5,
        span: 2434..2438,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 96,
        column: 7,
        span: 2439..2440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 96,
        column: 14,
        span: 2441..2447,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 96,
        column: 15,
        span: 2447..2448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 96,
        column: 21,
        span: 2448..2454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 22,
        span: 2454..2455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s = 5\"",
        ),
        line: 96,
        column: 30,
        span: 2455..2463,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 31,
        span: 2463..2464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var",
        ),
        line: 96,
        column: 35,
        span: 2465..2468,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 36,
        span: 2468..2469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 97,
        column: 9,
        span: 2470..2478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 10,
        span: 2478..2479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 97,
        column: 14,
        span: 2479..2483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 15,
        span: 2483..2484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
        column: 7,
        span: 2485..2491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 8,
        span: 2491..2492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 98,
        column: 10,
        span: 2492..2494,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 98,
        column: 11,
        span: 2494..2495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var",
        ),
        line: 98,
        column: 14,
        span: 2495..2498,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 98,
        column: 15,
        span: 2498..2499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 18,
        span: 2500..2502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 20,
        span: 2502..2504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 21,
        span: 2504..2505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "var",
        ),
        line: 99,
        column: 4,
        span: 2506..2509,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 6,
        span: 2510..2511,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 99,
        column: 0,
        span: 2512..2515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 100,
        column: 6,
        span: 2516..2521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 7,
        span: 2521..2522,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 100,
        column: 10,
        span: 2522..2525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 11,
        span: 2525..2526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 103,
        column: 7,
        span: 2542..2548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 8,
        span: 2548..2549,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\t\"",
        ),
        line: 103,
        column: 14,
        span: 2549..2555,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 103,
        column: 17,
        span: 2556..2558,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n\t]]",
        ),
        line: 105,
        column: 4,
        span: 2559..2566,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 105,
        column: 5,
        span: 2566..2567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 106,
        column: 7,
        span: 2568..2574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 106,
        column: 8,
        span: 2574..2575,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n\n $debug]]",
        ),
        line: 108,
        column: 10,
        span: 2575..2588,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 108,
        column: 13,
        span: 2589..2591,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n $debug\"",
        ),
        line: 108,
        column: 25,
        span: 2592..2603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 26,
        span: 2603..2604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 109,
        column: 7,
        span: 2605..2611,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 8,
        span: 2611..2612,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ [ ]]",
        ),
        line: 109,
        column: 15,
        span: 2612..2619,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 109,
        column: 18,
        span: 2620..2622,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ ] ]]",
        ),
        line: 109,
        column: 26,
        span: 2623..2630,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 27,
        span: 2630..2631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 111,
        column: 2,
        span: 2651..2652,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 4,
        span: 2653..2654,
    },
    Token {
        kind: String,
        lexeme: Symbol(

        ),
        line: 111,
        column: 967,
        span: 2655..3617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 7,
        span: 3618..3624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 8,
        span: 3624..3625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 112,
        column: 14,
        span: 3625..3631,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 112,
        column: 15,
        span: 3631..3632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 112,
        column: 18,
        span: 3632..3635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 19,
        span: 3635..3636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 112,
        column: 20,
        span: 3636..3637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 21,
        span: 3637..3638,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 112,
        column: 24,
        span: 3639..3641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "960",
                    after_decimal: "",
                },
            ),
        ),
        line: 112,
        column: 28,
        span: 3641..3645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 29,
        span: 3645..3646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 113,
        column: 5,
        span: 3647..3651,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 113,
        column: 7,
        span: 3652..3653,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[\nprint('+')\n\na1 = [[\"isto e' um string com várias 'aspas'\"]]\na2 = \"'aspas'\"\n\nassert(string.find(a1, a2) == 31)\nprint('+')\n\na1 = [==[temp = [[um valor qualquer]]; ]==]\nassert(load(a1))()\nassert(temp == 'um valor qualquer')\n-- long strings --\nb = \"001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789\"\nassert(string.len(b) == 960)\nprint('+')\n\na = [[00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n00123456789012345678901234567890123456789123456789012345678901234567890123456789\n]]\nassert(string.len(a) == 1863)\nassert(string.sub(a, 1, 40) == string.sub(b, 1, 40))\nx = 1\n]=]",
        ),
        line: 157,
        column: 4,
        span: 3654..6870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 159,
        column: 6,
        span: 6872..6877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 7,
        span: 6877..6878,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 159,
        column: 10,
        span: 6878..6881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 11,
        span: 6881..6882,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 160,
        column: 2,
        span: 6883..6884,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 160,
        column: 4,
        span: 6885..6886,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 160,
        column: 0,
        span: 6887..6890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 161,
        column: 9,
        span: 6891..6899,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 10,
        span: 6899..6900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 161,
        column: 14,
        span: 6900..6904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 15,
        span: 6904..6905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 162,
        column: 7,
        span: 6906..6912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 8,
        span: 6912..6913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 162,
        column: 9,
        span: 6913..6914,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 10,
        span: 6914..6915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 164,
        column: 5,
        span: 6917..6921,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 164,
        column: 7,
        span: 6922..6923,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 164,
        column: 0,
        span: 6924..6927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 165,
        column: 2,
        span: 6928..6929,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 4,
        span: 6930..6931,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 165,
        column: 0,
        span: 6932..6935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 166,
        column: 2,
        span: 6936..6937,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 166,
        column: 4,
        span: 6938..6939,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 166,
        column: 0,
        span: 6940..6943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 170,
        column: 5,
        span: 6967..6971,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 170,
        column: 7,
        span: 6972..6973,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\na = 1        -- a comment\nb = 2\n\n\nx = [=[\nhi\n]=]\ny = \"\\\nhello\\r\\n\\\n\"\nreturn debug.getinfo(1).currentline\n]]",
        ),
        line: 182,
        column: 3,
        span: 6974..7084,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 184,
        column: 4,
        span: 7086..7089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 184,
        column: 6,
        span: 7090..7091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 7,
        span: 7091..7092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 184,
        column: 9,
        span: 7093..7094,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 184,
        column: 12,
        span: 7095..7097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 184,
        column: 18,
        span: 7098..7103,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 184,
        column: 19,
        span: 7103..7104,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 184,
        column: 23,
        span: 7104..7108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 24,
        span: 7108..7109,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\r\"",
        ),
        line: 184,
        column: 29,
        span: 7110..7114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 30,
        span: 7114..7115,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\\r\"",
        ),
        line: 184,
        column: 37,
        span: 7116..7122,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 38,
        span: 7122..7123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\r\\n\"",
        ),
        line: 184,
        column: 45,
        span: 7124..7130,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 184,
        column: 46,
        span: 7130..7131,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 184,
        column: 0,
        span: 7132..7134,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 185,
        column: 8,
        span: 7137..7142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 185,
        column: 13,
        span: 7143..7147,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 14,
        span: 7147..7148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        line: 185,
        column: 17,
        span: 7149..7151,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 19,
        span: 7152..7153,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 185,
        column: 26,
        span: 7154..7160,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 27,
        span: 7160..7161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 185,
        column: 31,
        span: 7161..7165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 32,
        span: 7165..7166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 185,
        column: 36,
        span: 7166..7170,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 37,
        span: 7170..7171,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 185,
        column: 42,
        span: 7172..7176,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 43,
        span: 7176..7177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 185,
        column: 45,
        span: 7178..7179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 46,
        span: 7179..7180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 9,
        span: 7183..7189,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 10,
        span: 7189..7190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dostring",
        ),
        line: 186,
        column: 18,
        span: 7190..7198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 19,
        span: 7198..7199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 186,
        column: 23,
        span: 7199..7203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 24,
        span: 7203..7204,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 186,
        column: 27,
        span: 7205..7207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nn",
        ),
        line: 186,
        column: 30,
        span: 7208..7210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 31,
        span: 7210..7211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 9,
        span: 7214..7220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 10,
        span: 7220..7221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 187,
        column: 12,
        span: 7221..7223,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 187,
        column: 13,
        span: 7223..7224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 187,
        column: 14,
        span: 7224..7225,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 17,
        span: 7226..7228,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\\n\"",
        ),
        line: 187,
        column: 24,
        span: 7229..7235,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 187,
        column: 28,
        span: 7236..7239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 187,
        column: 31,
        span: 7240..7242,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 187,
        column: 32,
        span: 7242..7243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 187,
        column: 33,
        span: 7243..7244,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 36,
        span: 7245..7247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nhello\\r\\n\\n\"",
        ),
        line: 187,
        column: 52,
        span: 7248..7263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 53,
        span: 7263..7264,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 188,
        column: 0,
        span: 7265..7268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 192,
        column: 2,
        span: 7322..7323,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 192,
        column: 4,
        span: 7324..7325,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[==[]=]==]",
        ),
        line: 192,
        column: 15,
        span: 7326..7336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 7,
        span: 7337..7343,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 8,
        span: 7343..7344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 193,
        column: 9,
        span: 7344..7345,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 193,
        column: 12,
        span: 7346..7348,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]=\"",
        ),
        line: 193,
        column: 17,
        span: 7349..7353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 18,
        span: 7353..7354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 195,
        column: 2,
        span: 7356..7357,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
        column: 4,
        span: 7358..7359,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[==[[===[[=[]]=][====[]]===]===]==]",
        ),
        line: 195,
        column: 40,
        span: 7360..7395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 7,
        span: 7396..7402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 8,
        span: 7402..7403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 196,
        column: 9,
        span: 7403..7404,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 12,
        span: 7405..7407,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[===[[=[]]=][====[]]===]===\"",
        ),
        line: 196,
        column: 42,
        span: 7408..7437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 43,
        span: 7437..7438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 198,
        column: 2,
        span: 7440..7441,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 198,
        column: 4,
        span: 7442..7443,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[====[[===[[=[]]=][====[]]===]===]====]",
        ),
        line: 198,
        column: 44,
        span: 7444..7483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 199,
        column: 7,
        span: 7484..7490,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 8,
        span: 7490..7491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 199,
        column: 9,
        span: 7491..7492,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 199,
        column: 12,
        span: 7493..7495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[===[[=[]]=][====[]]===]===\"",
        ),
        line: 199,
        column: 42,
        span: 7496..7525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 43,
        span: 7525..7526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 201,
        column: 2,
        span: 7528..7529,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 201,
        column: 4,
        span: 7530..7531,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[=[]]]]]]]]]=]",
        ),
        line: 201,
        column: 19,
        span: 7532..7546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 202,
        column: 7,
        span: 7547..7553,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 8,
        span: 7553..7554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 202,
        column: 9,
        span: 7554..7555,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 202,
        column: 12,
        span: 7556..7558,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]]]]]]]]\"",
        ),
        line: 202,
        column: 23,
        span: 7559..7569,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 24,
        span: 7569..7570,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 213,
        column: 6,
        span: 7680..7685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 213,
        column: 8,
        span: 7686..7687,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 213,
        column: 10,
        span: 7688..7689,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 213,
        column: 12,
        span: 7690..7691,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        line: 213,
        column: 15,
        span: 7691..7694,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 16,
        span: 7694..7695,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[\"",
        ),
        line: 213,
        column: 20,
        span: 7696..7699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 21,
        span: 7699..7700,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]\"",
        ),
        line: 213,
        column: 25,
        span: 7701..7704,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 26,
        span: 7704..7705,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 213,
        column: 31,
        span: 7706..7710,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 213,
        column: 32,
        span: 7710..7711,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 214,
        column: 6,
        span: 7712..7717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 214,
        column: 10,
        span: 7718..7721,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 214,
        column: 12,
        span: 7722..7723,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 0,
        span: 7723..7725,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 215,
        column: 6,
        span: 7726..7731,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 215,
        column: 15,
        span: 7732..7740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        line: 215,
        column: 19,
        span: 7741..7744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 21,
        span: 7745..7746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 215,
        column: 22,
        span: 7746..7747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 215,
        column: 23,
        span: 7747..7748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 215,
        column: 25,
        span: 7749..7750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 26,
        span: 7750..7751,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 216,
        column: 5,
        span: 7754..7756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 216,
        column: 7,
        span: 7757..7758,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 216,
        column: 9,
        span: 7758..7760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 10,
        span: 7759..7761,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 216,
        column: 15,
        span: 7762..7766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 216,
        column: 25,
        span: 7767..7776,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 216,
        column: 26,
        span: 7776..7777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        line: 216,
        column: 31,
        span: 7777..7782,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 32,
        span: 7782..7783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 216,
        column: 33,
        span: 7783..7784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 34,
        span: 7784..7785,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 217,
        column: 0,
        span: 7788..7792,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 218,
        column: 8,
        span: 7797..7800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 218,
        column: 10,
        span: 7801..7802,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
        column: 11,
        span: 7802..7803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 218,
        column: 13,
        span: 7804..7805,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 218,
        column: 16,
        span: 7806..7808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 218,
        column: 22,
        span: 7809..7814,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 23,
        span: 7814..7815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 218,
        column: 24,
        span: 7815..7816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 25,
        span: 7816..7817,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 218,
        column: 0,
        span: 7818..7820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        line: 219,
        column: 10,
        span: 7827..7830,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 11,
        span: 7830..7831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 219,
        column: 12,
        span: 7831..7832,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 219,
        column: 14,
        span: 7832..7834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 219,
        column: 15,
        span: 7834..7835,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 219,
        column: 16,
        span: 7835..7836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 219,
        column: 18,
        span: 7837..7838,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 219,
        column: 19,
        span: 7838..7839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
        column: 20,
        span: 7838..7840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 21,
        span: 7840..7841,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 220,
        column: 0,
        span: 7846..7849,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 221,
        column: 0,
        span: 7852..7855,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 222,
        column: 0,
        span: 7856..7859,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 224,
        column: 4,
        span: 7861..7864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 224,
        column: 6,
        span: 7865..7866,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 224,
        column: 9,
        span: 7867..7869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 224,
        column: 19,
        span: 7870..7879,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 224,
        column: 20,
        span: 7879..7880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        line: 224,
        column: 24,
        span: 7880..7884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 25,
        span: 7884..7885,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 224,
        column: 33,
        span: 7885..7893,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 35,
        span: 7894..7895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 36,
        span: 7895..7896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gen",
        ),
        line: 224,
        column: 40,
        span: 7897..7900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 41,
        span: 7900..7901,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 224,
        column: 43,
        span: 7901..7903,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 44,
        span: 7903..7904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        line: 224,
        column: 48,
        span: 7905..7908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 49,
        span: 7908..7909,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 224,
        column: 53,
        span: 7910..7913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 54,
        span: 7913..7914,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 224,
        column: 0,
        span: 7915..7917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
        column: 9,
        span: 7920..7926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 10,
        span: 7926..7927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 225,
        column: 11,
        span: 7927..7928,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 225,
        column: 14,
        span: 7929..7931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 225,
        column: 19,
        span: 7932..7936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 20,
        span: 7936..7937,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return [====[\\n\"",
        ),
        line: 225,
        column: 37,
        span: 7937..7954,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 225,
        column: 39,
        span: 7954..7956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 225,
        column: 40,
        span: 7956..7957,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 225,
        column: 42,
        span: 7957..7959,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"]====]\"",
        ),
        line: 225,
        column: 50,
        span: 7959..7967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 51,
        span: 7967..7968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 52,
        span: 7968..7969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 53,
        span: 7969..7970,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 54,
        span: 7970..7971,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 226,
        column: 0,
        span: 7972..7975,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 230,
        column: 3,
        span: 8010..8012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 230,
        column: 6,
        span: 8013..8015,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 230,
        column: 7,
        span: 8015..8016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 230,
        column: 16,
        span: 8016..8025,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 17,
        span: 8025..8026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pt_BR\"",
        ),
        line: 230,
        column: 24,
        span: 8026..8033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 25,
        span: 8033..8034,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 230,
        column: 28,
        span: 8035..8037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 230,
        column: 31,
        span: 8038..8040,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 230,
        column: 32,
        span: 8040..8041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 230,
        column: 41,
        span: 8041..8050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 42,
        span: 8050..8051,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ptb\"",
        ),
        line: 230,
        column: 47,
        span: 8051..8056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 48,
        span: 8056..8057,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 230,
        column: 0,
        span: 8058..8062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 9,
        span: 8065..8071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 10,
        span: 8071..8072,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 231,
        column: 13,
        span: 8072..8075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 231,
        column: 18,
        span: 8076..8080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 19,
        span: 8080..8081,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"á = 3\"",
        ),
        line: 231,
        column: 26,
        span: 8081..8088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 27,
        span: 8088..8089,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 28,
        span: 8089..8090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 232,
        column: 9,
        span: 8130..8136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 10,
        span: 8136..8137,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 232,
        column: 13,
        span: 8137..8140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 232,
        column: 18,
        span: 8141..8145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 232,
        column: 19,
        span: 8145..8146,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = (3,4)\"",
        ),
        line: 232,
        column: 30,
        span: 8146..8157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 31,
        span: 8157..8158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 232,
        column: 32,
        span: 8158..8159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 233,
        column: 9,
        span: 8162..8168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 10,
        span: 8168..8169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 233,
        column: 18,
        span: 8169..8177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 19,
        span: 8177..8178,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3,4\"",
        ),
        line: 233,
        column: 24,
        span: 8178..8183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 25,
        span: 8183..8184,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 233,
        column: 28,
        span: 8185..8187,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 233,
        column: 32,
        span: 8187..8191,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 233,
        column: 36,
        span: 8192..8195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 233,
        column: 45,
        span: 8196..8204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3.4\"",
        ),
        line: 233,
        column: 50,
        span: 8204..8209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 233,
        column: 53,
        span: 8210..8212,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 233,
        column: 57,
        span: 8213..8216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 58,
        span: 8216..8217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
        column: 9,
        span: 8220..8226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 10,
        span: 8226..8227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
        column: 16,
        span: 8227..8233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 17,
        span: 8233..8234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 234,
        column: 21,
        span: 8234..8238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 22,
        span: 8238..8239,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 3.4\"",
        ),
        line: 234,
        column: 34,
        span: 8239..8251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 35,
        span: 8251..8252,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 36,
        span: 8252..8253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 37,
        span: 8253..8254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 38,
        span: 8254..8255,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 234,
        column: 41,
        span: 8256..8258,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 234,
        column: 45,
        span: 8258..8262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 46,
        span: 8262..8263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
        column: 9,
        span: 8266..8272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 10,
        span: 8272..8273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
        column: 16,
        span: 8273..8279,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 17,
        span: 8279..8280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 235,
        column: 21,
        span: 8280..8284,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 22,
        span: 8284..8285,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return .4,3\"",
        ),
        line: 235,
        column: 35,
        span: 8285..8298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 36,
        span: 8298..8299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 37,
        span: 8299..8300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 38,
        span: 8300..8301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 39,
        span: 8301..8302,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 235,
        column: 42,
        span: 8303..8305,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".4",
                },
            ),
        ),
        line: 235,
        column: 46,
        span: 8305..8308,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 47,
        span: 8308..8309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 9,
        span: 8312..8318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 10,
        span: 8318..8319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 16,
        span: 8319..8325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 17,
        span: 8325..8326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 236,
        column: 21,
        span: 8326..8330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 22,
        span: 8330..8331,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.\"",
        ),
        line: 236,
        column: 33,
        span: 8331..8342,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 34,
        span: 8342..8343,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 35,
        span: 8343..8344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 36,
        span: 8344..8345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 37,
        span: 8345..8346,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 236,
        column: 40,
        span: 8347..8349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 236,
        column: 43,
        span: 8349..8352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 44,
        span: 8352..8353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 9,
        span: 8356..8362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 10,
        span: 8362..8363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 16,
        span: 8363..8369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 17,
        span: 8369..8370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 237,
        column: 21,
        span: 8370..8374,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 22,
        span: 8374..8375,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.+.5\"",
        ),
        line: 237,
        column: 36,
        span: 8375..8389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 37,
        span: 8389..8390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 38,
        span: 8390..8391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 39,
        span: 8391..8392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 40,
        span: 8392..8393,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 237,
        column: 43,
        span: 8394..8396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 237,
        column: 47,
        span: 8396..8400,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 48,
        span: 8400..8401,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 238,
        column: 8,
        span: 8404..8409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 238,
        column: 10,
        span: 8410..8411,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 11,
        span: 8411..8412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 238,
        column: 12,
        span: 8412..8413,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 238,
        column: 14,
        span: 8414..8415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 238,
        column: 19,
        span: 8416..8420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 20,
        span: 8420..8421,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 4.5.\"",
        ),
        line: 238,
        column: 33,
        span: 8421..8434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 34,
        span: 8434..8435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 239,
        column: 9,
        span: 8438..8444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 10,
        span: 8444..8445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 239,
        column: 16,
        span: 8445..8451,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 239,
        column: 17,
        span: 8451..8452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 239,
        column: 21,
        span: 8452..8456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 239,
        column: 22,
        span: 8456..8457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 239,
        column: 23,
        span: 8457..8458,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 239,
        column: 24,
        span: 8458..8459,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"'4%.5%.'\"",
        ),
        line: 239,
        column: 35,
        span: 8460..8470,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 36,
        span: 8470..8471,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 239,
        column: 37,
        span: 8471..8472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 9,
        span: 8475..8481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 10,
        span: 8481..8482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 240,
        column: 12,
        span: 8482..8484,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 240,
        column: 13,
        span: 8484..8485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setlocale",
        ),
        line: 240,
        column: 22,
        span: 8485..8494,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 23,
        span: 8494..8495,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 240,
        column: 26,
        span: 8495..8498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 27,
        span: 8498..8499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 28,
        span: 8499..8500,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 241,
        column: 0,
        span: 8501..8505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 4,
        span: 8508..8509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 242,
        column: 11,
        span: 8509..8516,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 242,
        column: 14,
        span: 8517..8519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 242,
        column: 20,
        span: 8520..8525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 21,
        span: 8525..8526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 22,
        span: 8526..8527,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\a\\n >>> pt_BR locale not available: skipping decimal point tests <<<\\n\\a'",
        ),
        line: 243,
        column: 79,
        span: 8531..8606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 80,
        span: 8606..8607,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 244,
        column: 0,
        span: 8608..8611,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 248,
        column: 6,
        span: 8640..8645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 248,
        column: 8,
        span: 8646..8647,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 248,
        column: 10,
        span: 8648..8649,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a string with \\r and \\n and \\r\\n and \\n\\r\"",
        ),
        line: 248,
        column: 54,
        span: 8650..8693,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 249,
        column: 6,
        span: 8694..8699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 249,
        column: 8,
        span: 8700..8701,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 10,
        span: 8702..8703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 249,
        column: 17,
        span: 8704..8710,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 249,
        column: 18,
        span: 8710..8711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 249,
        column: 24,
        span: 8711..8717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 25,
        span: 8717..8718,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return %q\"",
        ),
        line: 249,
        column: 36,
        span: 8718..8729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 37,
        span: 8729..8730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 249,
        column: 39,
        span: 8731..8732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 40,
        span: 8732..8733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 7,
        span: 8734..8740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 8,
        span: 8740..8741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 14,
        span: 8741..8747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 15,
        span: 8747..8748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 250,
        column: 19,
        span: 8748..8752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 20,
        span: 8752..8753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 250,
        column: 21,
        span: 8753..8754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 22,
        span: 8754..8755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 23,
        span: 8755..8756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 24,
        span: 8756..8757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 25,
        span: 8757..8758,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 250,
        column: 28,
        span: 8759..8761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 250,
        column: 30,
        span: 8762..8763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 31,
        span: 8763..8764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 7,
        span: 8784..8790,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 8,
        span: 8790..8791,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 253,
        column: 11,
        span: 8791..8794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 253,
        column: 16,
        span: 8795..8799,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 'non-ending string\"",
        ),
        line: 253,
        column: 40,
        span: 8799..8823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 41,
        span: 8823..8824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 7,
        span: 8825..8831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 8,
        span: 8831..8832,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 254,
        column: 11,
        span: 8832..8835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 254,
        column: 16,
        span: 8836..8840,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = 'non-ending string\\n'\"",
        ),
        line: 254,
        column: 43,
        span: 8840..8867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 44,
        span: 8867..8868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
        column: 7,
        span: 8869..8875,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 8,
        span: 8875..8876,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 255,
        column: 11,
        span: 8876..8879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 255,
        column: 16,
        span: 8880..8884,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = '\\\\345'\"",
        ),
        line: 255,
        column: 29,
        span: 8884..8897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 30,
        span: 8897..8898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
        column: 7,
        span: 8899..8905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 8,
        span: 8905..8906,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 256,
        column: 11,
        span: 8906..8909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 256,
        column: 16,
        span: 8910..8914,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = [=x]\"",
        ),
        line: 256,
        column: 26,
        span: 8914..8924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 27,
        span: 8924..8925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 258,
        column: 6,
        span: 8927..8932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 7,
        span: 8932..8933,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 258,
        column: 11,
        span: 8933..8937,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 12,
        span: 8937..8938,
    },
]
