---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/math.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
        column: 6,
        span: 5..6,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing numbers and math lib\"",
        ),
        line: 1,
        column: 36,
        span: 6..36,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
        column: 37,
        span: 36..37,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 5,
        column: 7,
        span: 64..70,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 5,
        column: 8,
        span: 70..71,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
                exponent: "12",
            },
        ),
        line: 5,
        column: 12,
        span: 70..75,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
        column: 15,
        span: 76..78,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 5,
        column: 17,
        span: 78..80,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 5,
        column: 21,
        span: 81..84,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 5,
        column: 25,
        span: 84..87,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
        column: 28,
        span: 88..90,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 5,
        column: 30,
        span: 90..92,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 5,
        column: 34,
        span: 93..96,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 5,
        column: 37,
        span: 96..99,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
        column: 40,
        span: 100..102,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 5,
        column: 42,
        span: 102..104,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 5,
        column: 46,
        span: 105..108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".2",
                },
                exponent: "2",
            },
        ),
        line: 5,
        column: 52,
        span: 108..113,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
        column: 55,
        span: 114..116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 5,
        column: 58,
        span: 116..119,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 5,
        column: 62,
        span: 120..123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
                exponent: "-1",
            },
        ),
        line: 5,
        column: 68,
        span: 123..129,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 5,
        column: 71,
        span: 130..132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".2",
                },
            ),
        ),
        line: 5,
        column: 75,
        span: 132..136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 5,
        column: 76,
        span: 136..137,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 7,
        column: 0,
        span: 139..141,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 8,
        column: 8,
        span: 144..149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 8,
        column: 10,
        span: 150..151,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 11,
        span: 151..152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 8,
        column: 13,
        span: 153..154,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 14,
        span: 154..155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 8,
        column: 16,
        span: 156..157,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 8,
        column: 18,
        span: 158..159,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 8,
        column: 22,
        span: 160..163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 23,
        span: 163..164,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 3e0 \"",
        ),
        line: 8,
        column: 31,
        span: 165..172,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 32,
        span: 172..173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 10  \"",
        ),
        line: 8,
        column: 40,
        span: 174..181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 9,
        column: 9,
        span: 184..190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 10,
        span: 190..191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 9,
        column: 11,
        span: 191..192,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
        column: 13,
        span: 193..194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 9,
        column: 15,
        span: 195..196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 9,
        column: 18,
        span: 197..199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 20,
        span: 199..201,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 9,
        column: 24,
        span: 202..205,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 9,
        column: 26,
        span: 206..207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 9,
        column: 27,
        span: 207..208,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 9,
        column: 30,
        span: 209..211,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 9,
        column: 32,
        span: 212..213,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 33,
        span: 212..214,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 9,
        column: 37,
        span: 215..218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 9,
        column: 39,
        span: 219..220,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 9,
        column: 41,
        span: 221..222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 9,
        column: 45,
        span: 223..226,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 9,
        column: 48,
        span: 227..229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 50,
        span: 229..231,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 9,
        column: 54,
        span: 232..235,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 9,
        column: 59,
        span: 236..240,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 9,
        column: 61,
        span: 241..242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 9,
        column: 63,
        span: 243..244,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 9,
        column: 66,
        span: 245..247,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 9,
        column: 68,
        span: 247..249,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 69,
        span: 249..250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 9,
        span: 253..259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 10,
        span: 259..260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 10,
        column: 14,
        span: 260..264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 15,
        span: 264..265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 10,
        column: 16,
        span: 265..266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 17,
        span: 266..267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 20,
        span: 268..270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 10,
        column: 29,
        span: 271..279,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 10,
        column: 33,
        span: 280..283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 10,
        column: 38,
        span: 284..288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 39,
        span: 288..289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 10,
        column: 40,
        span: 289..290,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 41,
        span: 290..291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 44,
        span: 292..294,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 10,
        column: 53,
        span: 295..303,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 10,
        column: 57,
        span: 304..307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 10,
        column: 62,
        span: 308..312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 63,
        span: 312..313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 10,
        column: 64,
        span: 313..314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 65,
        span: 314..315,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 68,
        span: 316..318,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        line: 10,
        column: 77,
        span: 319..327,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 78,
        span: 327..328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 11,
        column: 9,
        span: 331..337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 10,
        span: 337..338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 11,
        column: 11,
        span: 338..339,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
        column: 14,
        span: 340..342,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 11,
        column: 18,
        span: 343..346,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 11,
        column: 22,
        span: 347..350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 11,
        column: 24,
        span: 351..352,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
        column: 27,
        span: 353..355,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 3e0 \"",
        ),
        line: 11,
        column: 35,
        span: 356..363,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 11,
        column: 39,
        span: 364..367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 11,
        column: 41,
        span: 368..369,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
        column: 44,
        span: 370..372,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" 10  \"",
        ),
        line: 11,
        column: 52,
        span: 373..380,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 11,
        column: 56,
        span: 381..384,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 11,
        column: 58,
        span: 385..386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 11,
        column: 59,
        span: 386..387,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
        column: 62,
        span: 388..390,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 11,
        column: 64,
        span: 391..392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  10 \"",
        ),
        line: 11,
        column: 71,
        span: 392..399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 72,
        span: 399..400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
        column: 9,
        span: 403..409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 10,
        span: 409..410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 12,
        column: 11,
        span: 410..411,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 12,
        column: 13,
        span: 412..413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 12,
        column: 15,
        span: 414..415,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
        column: 18,
        span: 416..418,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 20,
        span: 418..420,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 12,
        column: 24,
        span: 421..424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 12,
        column: 26,
        span: 425..426,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 12,
        column: 28,
        span: 427..428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 12,
        column: 30,
        span: 429..430,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
        column: 33,
        span: 431..433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "08",
                    after_decimal: "",
                },
            ),
        ),
        line: 12,
        column: 36,
        span: 433..436,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 37,
        span: 436..437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 13,
        column: 4,
        span: 440..441,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 13,
        column: 6,
        span: 442..443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 13,
        column: 0,
        span: 443..445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 14,
        column: 9,
        span: 448..454,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 10,
        span: 454..455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 14,
        column: 11,
        span: 455..456,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 14,
        column: 14,
        span: 457..459,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 14,
        column: 16,
        span: 460..461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 14,
        column: 17,
        span: 461..462,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 14,
        column: 21,
        span: 463..466,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
        column: 23,
        span: 466..468,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 14,
        column: 26,
        span: 469..471,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 14,
        column: 28,
        span: 472..473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
        column: 29,
        span: 472..474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 30,
        span: 474..475,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 15,
        column: 0,
        span: 476..479,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 17,
        column: 0,
        span: 481..483,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 18,
        column: 8,
        span: 486..491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 18,
        column: 10,
        span: 492..493,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 12,
        span: 494..495,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 18,
        column: 14,
        span: 496..497,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 18,
        column: 0,
        span: 496..498,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 19,
        column: 8,
        span: 501..506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 19,
        column: 11,
        span: 507..509,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 19,
        column: 13,
        span: 510..511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 15,
        span: 511..513,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 19,
        column: 17,
        span: 514..515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 19,
        column: 19,
        span: 516..517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 20,
        column: 4,
        span: 534..535,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 6,
        span: 536..537,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 20,
        column: 8,
        span: 538..539,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 20,
        column: 10,
        span: 540..541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 11,
        span: 540..542,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 20,
        column: 12,
        span: 542..543,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 20,
        column: 14,
        span: 544..545,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 17,
        span: 545..548,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 18,
        span: 548..549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 21,
        span: 549..552,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 22,
        span: 552..553,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 25,
        span: 553..556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 26,
        span: 556..557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 29,
        span: 557..560,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 20,
        column: 30,
        span: 560..561,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        line: 20,
        column: 33,
        span: 561..564,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 20,
        column: 35,
        span: 565..566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 9,
        span: 569..575,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 10,
        span: 575..576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 21,
        column: 11,
        span: 576..577,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 21,
        column: 12,
        span: 577..578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 21,
        column: 14,
        span: 578..580,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 21,
        column: 15,
        span: 580..581,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
        column: 18,
        span: 582..584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 21,
        column: 20,
        span: 585..586,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 21,
        column: 21,
        span: 586..587,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 22,
        span: 586..588,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 21,
        column: 23,
        span: 588..589,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 21,
        column: 27,
        span: 590..593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 21,
        column: 29,
        span: 594..595,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 21,
        column: 30,
        span: 595..596,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 21,
        column: 31,
        span: 596..597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 32,
        span: 596..598,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 21,
        column: 33,
        span: 598..599,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
        column: 36,
        span: 600..602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 21,
        column: 38,
        span: 603..604,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 21,
        column: 39,
        span: 604..605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 21,
        column: 40,
        span: 604..606,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 21,
        column: 41,
        span: 606..607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 42,
        span: 607..608,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 22,
        column: 0,
        span: 609..612,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 24,
        column: 0,
        span: 614..616,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 25,
        column: 8,
        span: 619..624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 25,
        column: 10,
        span: 625..626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 11,
        span: 626..627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 25,
        column: 13,
        span: 628..629,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 15,
        span: 630..631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 25,
        column: 20,
        span: 632..636,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
        column: 21,
        span: 636..637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "modf",
        ),
        line: 25,
        column: 25,
        span: 637..641,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 26,
        span: 641..642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 25,
        column: 29,
        span: 641..645,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 30,
        span: 645..646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 9,
        span: 649..655,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 10,
        span: 655..656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 26,
        column: 11,
        span: 656..657,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 14,
        span: 658..660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 16,
        span: 660..662,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 26,
        column: 20,
        span: 663..666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 26,
        column: 22,
        span: 667..668,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 25,
        span: 669..671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 26,
        column: 29,
        span: 671..675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 30,
        span: 675..676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 27,
        column: 9,
        span: 679..685,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 10,
        span: 685..686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 27,
        column: 14,
        span: 686..690,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 27,
        column: 15,
        span: 690..691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 27,
        column: 19,
        span: 691..695,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 27,
        column: 21,
        span: 696..697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 27,
        column: 27,
        span: 697..703,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 28,
        span: 703..704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 28,
        column: 9,
        span: 707..713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 10,
        span: 713..714,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 28,
        column: 11,
        span: 714..715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 28,
        column: 15,
        span: 715..719,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 16,
        span: 719..720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 28,
        column: 20,
        span: 720..724,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 28,
        column: 22,
        span: 725..726,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 28,
        column: 24,
        span: 727..728,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 28,
        column: 29,
        span: 727..733,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 30,
        span: 733..734,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 29,
        column: 0,
        span: 735..738,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 31,
        column: 9,
        span: 740..748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 31,
        column: 11,
        span: 749..750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 12,
        span: 750..751,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 31,
        column: 15,
        span: 751..754,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 16,
        span: 754..755,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 32,
        column: 5,
        span: 758..760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "select",
        ),
        line: 32,
        column: 12,
        span: 761..767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 13,
        span: 767..768,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'#'",
        ),
        line: 32,
        column: 16,
        span: 768..771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 17,
        span: 771..772,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 32,
        column: 21,
        span: 773..776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 22,
        span: 776..777,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 32,
        column: 25,
        span: 778..780,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 32,
        column: 27,
        span: 780..782,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 32,
        column: 0,
        span: 783..787,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 33,
        column: 11,
        span: 792..798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 13,
        span: 799..800,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 33,
        column: 16,
        span: 800..803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 33,
        column: 17,
        span: 803..804,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 34,
        column: 0,
        span: 807..811,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 35,
        column: 11,
        span: 816..822,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"***\"",
        ),
        line: 35,
        column: 17,
        span: 823..828,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 36,
        column: 0,
        span: 831..834,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 37,
        column: 0,
        span: 835..838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 7,
        span: 868..874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 8,
        span: 874..875,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 41,
        column: 11,
        span: 875..878,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 41,
        column: 13,
        span: 879..880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 15,
        span: 880..882,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 41,
        column: 18,
        span: 883..885,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 41,
        column: 20,
        span: 885..887,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 21,
        span: 887..888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 7,
        span: 889..895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 8,
        span: 895..896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2 \"",
        ),
        line: 42,
        column: 12,
        span: 896..900,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 42,
        column: 14,
        span: 901..902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 16,
        span: 902..904,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 42,
        column: 19,
        span: 905..907,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 42,
        column: 21,
        span: 907..909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 22,
        span: 909..910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 43,
        column: 7,
        span: 911..917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 8,
        span: 917..918,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" -2 \"",
        ),
        line: 43,
        column: 14,
        span: 918..924,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 43,
        column: 16,
        span: 925..926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 18,
        span: 926..928,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 43,
        column: 21,
        span: 929..931,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 43,
        column: 23,
        span: 932..933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 24,
        span: 932..934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 25,
        span: 934..935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 44,
        column: 7,
        span: 936..942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 8,
        span: 942..943,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\" -0xa \"",
        ),
        line: 44,
        column: 16,
        span: 943..951,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 44,
        column: 18,
        span: 952..953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 20,
        span: 953..955,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 44,
        column: 23,
        span: 956..958,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 44,
        column: 25,
        span: 959..960,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 26,
        span: 959..961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 27,
        span: 961..962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
        column: 7,
        span: 987..993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 8,
        span: 993..994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 48,
        column: 16,
        span: 994..1002,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 48,
        column: 18,
        span: 1003..1004,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 48,
        column: 19,
        span: 1004..1005,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 48,
        column: 22,
        span: 1006..1008,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 48,
        column: 26,
        span: 1009..1012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 27,
        span: 1012..1013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 1014..1020,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 1020..1021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 49,
        column: 16,
        span: 1021..1029,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0.01'",
        ),
        line: 49,
        column: 24,
        span: 1030..1037,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 27,
        span: 1038..1040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 29,
        span: 1040..1042,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 49,
        column: 31,
        span: 1043..1044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 35,
        span: 1044..1048,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 49,
        column: 39,
        span: 1049..1052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 49,
        column: 48,
        span: 1053..1061,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+.01'",
        ),
        line: 49,
        column: 55,
        span: 1062..1068,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 58,
        span: 1069..1071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 49,
        column: 63,
        span: 1071..1076,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 49,
        column: 0,
        span: 1077..1080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 50,
        column: 11,
        span: 1083..1091,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.01'",
        ),
        line: 50,
        column: 17,
        span: 1092..1097,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 20,
        span: 1098..1100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 50,
        column: 25,
        span: 1100..1105,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 50,
        column: 29,
        span: 1106..1109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 50,
        column: 38,
        span: 1110..1118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-1.'",
        ),
        line: 50,
        column: 44,
        span: 1119..1124,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 47,
        span: 1125..1127,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 50,
        column: 49,
        span: 1128..1129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 50,
        span: 1128..1130,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 50,
        column: 0,
        span: 1131..1134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 51,
        column: 11,
        span: 1137..1145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+1.'",
        ),
        line: 51,
        column: 17,
        span: 1146..1151,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 51,
        column: 20,
        span: 1152..1154,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 51,
        column: 22,
        span: 1154..1156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 51,
        column: 23,
        span: 1156..1157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 52,
        column: 7,
        span: 1158..1164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 8,
        span: 1164..1165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 52,
        column: 16,
        span: 1165..1173,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+ 0.01'",
        ),
        line: 52,
        column: 25,
        span: 1174..1182,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 52,
        column: 28,
        span: 1183..1185,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 52,
        column: 32,
        span: 1186..1189,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 52,
        column: 36,
        span: 1190..1193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 52,
        column: 45,
        span: 1194..1202,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+.e1'",
        ),
        line: 52,
        column: 52,
        span: 1203..1209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 52,
        column: 55,
        span: 1210..1212,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 52,
        column: 59,
        span: 1213..1216,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 52,
        column: 0,
        span: 1217..1220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 53,
        column: 11,
        span: 1223..1231,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1e'",
        ),
        line: 53,
        column: 16,
        span: 1232..1236,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
        column: 19,
        span: 1237..1239,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 53,
        column: 23,
        span: 1240..1243,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 53,
        column: 27,
        span: 1244..1247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 53,
        column: 36,
        span: 1248..1256,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1.0e+'",
        ),
        line: 53,
        column: 44,
        span: 1257..1264,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 53,
        column: 47,
        span: 1265..1267,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 53,
        column: 51,
        span: 1268..1271,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 53,
        column: 0,
        span: 1272..1275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 54,
        column: 11,
        span: 1278..1286,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        line: 54,
        column: 15,
        span: 1287..1290,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 54,
        column: 18,
        span: 1291..1293,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 54,
        column: 22,
        span: 1294..1297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 23,
        span: 1297..1298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 55,
        column: 7,
        span: 1299..1305,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 8,
        span: 1305..1306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 55,
        column: 16,
        span: 1306..1314,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 17,
        span: 1314..1315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-012'",
        ),
        line: 55,
        column: 23,
        span: 1315..1321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 24,
        span: 1321..1322,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 55,
        column: 27,
        span: 1323..1325,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 55,
        column: 29,
        span: 1326..1327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "010",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 32,
        span: 1326..1330,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 55,
        column: 34,
        span: 1331..1332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 36,
        span: 1332..1334,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 37,
        span: 1334..1335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 56,
        column: 7,
        span: 1336..1342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 8,
        span: 1342..1343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 56,
        column: 16,
        span: 1343..1351,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 17,
        span: 1351..1352,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-1.2e2'",
        ),
        line: 56,
        column: 25,
        span: 1352..1360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 26,
        span: 1360..1361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 56,
        column: 29,
        span: 1362..1364,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 56,
        column: 31,
        span: 1365..1366,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 56,
        column: 33,
        span: 1367..1368,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 56,
        column: 35,
        span: 1369..1370,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "120",
                    after_decimal: "",
                },
            ),
        ),
        line: 56,
        column: 38,
        span: 1369..1373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 39,
        span: 1373..1374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 58,
        column: 7,
        span: 1376..1382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 8,
        span: 1382..1383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 58,
        column: 16,
        span: 1383..1391,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 17,
        span: 1391..1392,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0xffffffffffff\"",
        ),
        line: 58,
        column: 33,
        span: 1392..1408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 34,
        span: 1408..1409,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 58,
        column: 37,
        span: 1410..1412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 39,
        span: 1412..1414,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 58,
        column: 41,
        span: 1415..1416,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 43,
        span: 1417..1418,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 44,
        span: 1417..1419,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 58,
        column: 46,
        span: 1420..1421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 49,
        span: 1421..1424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 50,
        span: 1424..1425,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 58,
        column: 52,
        span: 1426..1427,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 54,
        span: 1427..1429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 55,
        span: 1429..1430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 7,
        span: 1431..1437,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 8,
        span: 1437..1438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 59,
        column: 16,
        span: 1438..1446,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 17,
        span: 1446..1447,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0x\"",
        ),
        line: 59,
        column: 21,
        span: 1447..1451,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 59,
        column: 24,
        span: 1452..1454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 59,
        column: 31,
        span: 1455..1461,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 32,
        span: 1461..1462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 59,
        column: 35,
        span: 1462..1465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 36,
        span: 1465..1466,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 59,
        column: 39,
        span: 1466..1469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 59,
        column: 40,
        span: 1469..1470,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 44,
        span: 1470..1474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 45,
        span: 1474..1475,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 46,
        span: 1475..1476,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 49,
        span: 1477..1479,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 51,
        span: 1479..1481,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 59,
        column: 53,
        span: 1482..1483,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 55,
        span: 1484..1485,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 56,
        span: 1484..1486,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 59,
        column: 58,
        span: 1487..1488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 62,
        span: 1488..1492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 63,
        span: 1492..1493,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 59,
        column: 65,
        span: 1494..1495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 67,
        span: 1495..1497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 68,
        span: 1497..1498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 60,
        column: 7,
        span: 1499..1505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 8,
        span: 1505..1506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 60,
        column: 16,
        span: 1506..1514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 17,
        span: 1514..1515,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x3.'",
        ),
        line: 60,
        column: 23,
        span: 1515..1521,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 60,
        column: 26,
        span: 1522..1524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 60,
        column: 33,
        span: 1525..1531,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 60,
        column: 34,
        span: 1531..1532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 60,
        column: 37,
        span: 1532..1535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 60,
        column: 38,
        span: 1535..1536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 60,
        column: 41,
        span: 1536..1539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 60,
        column: 42,
        span: 1539..1540,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 46,
        span: 1540..1544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 47,
        span: 1544..1545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 48,
        span: 1545..1546,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 60,
        column: 51,
        span: 1547..1549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 60,
        column: 53,
        span: 1549..1551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 60,
        column: 54,
        span: 1551..1552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 61,
        column: 7,
        span: 1553..1559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 8,
        span: 1559..1560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 61,
        column: 16,
        span: 1560..1568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 17,
        span: 1568..1569,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.'",
        ),
        line: 61,
        column: 23,
        span: 1569..1575,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 61,
        column: 26,
        span: 1576..1578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 61,
        column: 33,
        span: 1579..1585,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 61,
        column: 34,
        span: 1585..1586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 61,
        column: 37,
        span: 1586..1589,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 38,
        span: 1589..1590,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0'",
        ),
        line: 61,
        column: 41,
        span: 1590..1593,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 42,
        span: 1593..1594,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 46,
        span: 1594..1598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 47,
        span: 1598..1599,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 61,
        column: 50,
        span: 1600..1602,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 61,
        column: 54,
        span: 1603..1606,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 55,
        span: 1606..1607,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 61,
        column: 58,
        span: 1608..1610,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 60,
        span: 1610..1612,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 61,
        column: 62,
        span: 1613..1614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 64,
        span: 1615..1616,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 61,
        column: 65,
        span: 1616..1617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 66,
        span: 1616..1618,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 61,
        column: 68,
        span: 1619..1620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "151",
                    after_decimal: "",
                },
            ),
        ),
        line: 61,
        column: 72,
        span: 1620..1624,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 73,
        span: 1624..1625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 74,
        span: 1625..1626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 64,
        column: 7,
        span: 1660..1666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 8,
        span: 1666..1667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 64,
        column: 16,
        span: 1667..1675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 17,
        span: 1675..1676,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  001010  '",
        ),
        line: 64,
        column: 29,
        span: 1676..1688,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 30,
        span: 1688..1689,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 32,
        span: 1689..1691,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 33,
        span: 1691..1692,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 64,
        column: 36,
        span: 1693..1695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 39,
        span: 1695..1698,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 40,
        span: 1698..1699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 65,
        column: 7,
        span: 1700..1706,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 8,
        span: 1706..1707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 65,
        column: 16,
        span: 1707..1715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 17,
        span: 1715..1716,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  001010  '",
        ),
        line: 65,
        column: 29,
        span: 1716..1728,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 30,
        span: 1728..1729,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 33,
        span: 1729..1732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 34,
        span: 1732..1733,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 65,
        column: 37,
        span: 1734..1736,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "001010",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 44,
        span: 1736..1743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 45,
        span: 1743..1744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
        column: 7,
        span: 1745..1751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 8,
        span: 1751..1752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 66,
        column: 16,
        span: 1752..1760,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 17,
        span: 1760..1761,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -1010  '",
        ),
        line: 66,
        column: 28,
        span: 1761..1772,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 29,
        span: 1772..1773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 31,
        span: 1773..1775,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 32,
        span: 1775..1776,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 66,
        column: 35,
        span: 1777..1779,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 66,
        column: 37,
        span: 1780..1781,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 39,
        span: 1780..1783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 40,
        span: 1783..1784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 67,
        column: 7,
        span: 1785..1791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 8,
        span: 1791..1792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 67,
        column: 16,
        span: 1792..1800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 17,
        span: 1800..1801,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 67,
        column: 21,
        span: 1801..1805,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 67,
        column: 22,
        span: 1805..1806,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 25,
        span: 1806..1809,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 26,
        span: 1809..1810,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 67,
        column: 29,
        span: 1811..1813,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 67,
        column: 32,
        span: 1813..1816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 33,
        span: 1816..1817,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 68,
        column: 7,
        span: 1818..1824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 8,
        span: 1824..1825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 68,
        column: 16,
        span: 1825..1833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 68,
        column: 17,
        span: 1833..1834,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -10  '",
        ),
        line: 68,
        column: 26,
        span: 1834..1843,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 68,
        column: 27,
        span: 1843..1844,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 30,
        span: 1844..1847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 31,
        span: 1847..1848,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 68,
        column: 34,
        span: 1849..1851,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 68,
        column: 36,
        span: 1852..1853,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 68,
        column: 38,
        span: 1852..1855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 68,
        column: 39,
        span: 1855..1856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 69,
        column: 7,
        span: 1857..1863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 8,
        span: 1863..1864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 69,
        column: 16,
        span: 1864..1872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 69,
        column: 17,
        span: 1872..1873,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  +1Z  '",
        ),
        line: 69,
        column: 26,
        span: 1873..1882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 69,
        column: 27,
        span: 1882..1883,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 30,
        span: 1883..1886,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 31,
        span: 1886..1887,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 69,
        column: 34,
        span: 1888..1890,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 37,
        span: 1890..1893,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 69,
        column: 39,
        span: 1894..1895,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 69,
        column: 42,
        span: 1895..1898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 69,
        column: 43,
        span: 1898..1899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 70,
        column: 7,
        span: 1900..1906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 8,
        span: 1906..1907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 70,
        column: 16,
        span: 1907..1915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 17,
        span: 1915..1916,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -1z  '",
        ),
        line: 70,
        column: 26,
        span: 1916..1925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 70,
        column: 27,
        span: 1925..1926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 30,
        span: 1926..1929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 31,
        span: 1929..1930,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 70,
        column: 34,
        span: 1931..1933,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 70,
        column: 36,
        span: 1934..1935,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 38,
        span: 1934..1937,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 70,
        column: 40,
        span: 1938..1939,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 70,
        column: 42,
        span: 1940..1941,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        line: 70,
        column: 44,
        span: 1940..1943,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 45,
        span: 1943..1944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 71,
        column: 7,
        span: 1945..1951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 8,
        span: 1951..1952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 71,
        column: 16,
        span: 1952..1960,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 17,
        span: 1960..1961,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-fFfa'",
        ),
        line: 71,
        column: 24,
        span: 1961..1968,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 25,
        span: 1968..1969,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 28,
        span: 1969..1972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 29,
        span: 1972..1973,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 32,
        span: 1974..1976,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 71,
        column: 34,
        span: 1977..1978,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 35,
        span: 1978..1979,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 37,
        span: 1978..1981,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 71,
        column: 39,
        span: 1982..1983,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 41,
        span: 1984..1985,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 43,
        span: 1984..1987,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 71,
        column: 45,
        span: 1988..1989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 47,
        span: 1990..1991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 49,
        span: 1990..1993,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 71,
        column: 51,
        span: 1994..1995,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 53,
        span: 1996..1997,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 55,
        span: 1996..1999,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 71,
        column: 57,
        span: 2000..2001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 59,
        span: 2002..2003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 61,
        span: 2002..2005,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 71,
        column: 63,
        span: 2006..2007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 65,
        span: 2008..2009,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 67,
        span: 2008..2011,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 71,
        column: 69,
        span: 2012..2013,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 71,
        column: 72,
        span: 2013..2016,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 73,
        span: 2016..2017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 74,
        span: 2017..2018,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 75,
        span: 2018..2019,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 76,
        span: 2019..2020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 77,
        span: 2020..2021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 78,
        span: 2021..2022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 79,
        span: 2022..2023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 72,
        column: 7,
        span: 2024..2030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 8,
        span: 2030..2031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 72,
        column: 16,
        span: 2031..2039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 17,
        span: 2039..2040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 72,
        column: 23,
        span: 2040..2046,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 24,
        span: 2046..2047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 72,
        column: 27,
        span: 2047..2050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 28,
        span: 2050..2051,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1'",
        ),
        line: 72,
        column: 31,
        span: 2051..2054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 32,
        span: 2054..2055,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "42",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 35,
        span: 2055..2058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 36,
        span: 2058..2059,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 72,
        column: 37,
        span: 2059..2060,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 39,
        span: 2060..2062,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 40,
        span: 2062..2063,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 72,
        column: 42,
        span: 2064..2065,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 44,
        span: 2065..2067,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 72,
        column: 47,
        span: 2068..2070,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 49,
        span: 2070..2072,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 72,
        column: 51,
        span: 2073..2074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "42",
                    after_decimal: "",
                },
            ),
        ),
        line: 72,
        column: 54,
        span: 2074..2077,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 55,
        span: 2077..2078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 73,
        column: 7,
        span: 2079..2085,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 8,
        span: 2085..2086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 73,
        column: 16,
        span: 2086..2094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 17,
        span: 2094..2095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 73,
        column: 23,
        span: 2095..2101,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 24,
        span: 2101..2102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 73,
        column: 27,
        span: 2102..2105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 28,
        span: 2105..2106,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1'",
        ),
        line: 73,
        column: 31,
        span: 2106..2109,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 32,
        span: 2109..2110,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 35,
        span: 2110..2113,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 36,
        span: 2113..2114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 73,
        column: 37,
        span: 2114..2115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 39,
        span: 2115..2117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 40,
        span: 2117..2118,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 73,
        column: 42,
        span: 2119..2120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 44,
        span: 2120..2122,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 73,
        column: 47,
        span: 2123..2125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 49,
        span: 2125..2127,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 73,
        column: 51,
        span: 2128..2129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 54,
        span: 2129..2132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 55,
        span: 2132..2133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
        column: 7,
        span: 2134..2140,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 8,
        span: 2140..2141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 74,
        column: 16,
        span: 2141..2149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 17,
        span: 2149..2150,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ffffFFFF'",
        ),
        line: 74,
        column: 27,
        span: 2150..2160,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 74,
        column: 28,
        span: 2160..2161,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 31,
        span: 2161..2164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 32,
        span: 2164..2165,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 74,
        column: 34,
        span: 2166..2167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 36,
        span: 2167..2169,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 39,
        span: 2170..2172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 41,
        span: 2172..2174,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 74,
        column: 43,
        span: 2175..2176,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 46,
        span: 2176..2179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 47,
        span: 2179..2180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 75,
        column: 7,
        span: 2181..2187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 8,
        span: 2187..2188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 75,
        column: 16,
        span: 2188..2196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 75,
        column: 17,
        span: 2196..2197,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0ffffFFFF'",
        ),
        line: 75,
        column: 28,
        span: 2197..2208,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 75,
        column: 29,
        span: 2208..2209,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 32,
        span: 2209..2212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 33,
        span: 2212..2213,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 75,
        column: 35,
        span: 2214..2215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 37,
        span: 2215..2217,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 75,
        column: 40,
        span: 2218..2220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 42,
        span: 2220..2222,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 75,
        column: 44,
        span: 2223..2224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 75,
        column: 47,
        span: 2224..2227,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 75,
        column: 48,
        span: 2227..2228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 76,
        column: 7,
        span: 2229..2235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 8,
        span: 2235..2236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 76,
        column: 16,
        span: 2236..2244,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 17,
        span: 2244..2245,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0ffffffFFFF'",
        ),
        line: 76,
        column: 31,
        span: 2245..2259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 32,
        span: 2259..2260,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 35,
        span: 2260..2263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 36,
        span: 2263..2264,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 76,
        column: 38,
        span: 2265..2266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 40,
        span: 2266..2268,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 76,
        column: 43,
        span: 2269..2271,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 76,
        column: 45,
        span: 2272..2273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 46,
        span: 2272..2274,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 76,
        column: 48,
        span: 2275..2276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 51,
        span: 2276..2279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 52,
        span: 2279..2280,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 77,
        column: 4,
        span: 2281..2284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 77,
        column: 6,
        span: 2285..2286,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 77,
        column: 8,
        span: 2287..2288,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 10,
        span: 2288..2290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 11,
        span: 2290..2291,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "36",
                    after_decimal: "",
                },
            ),
        ),
        line: 77,
        column: 14,
        span: 2291..2294,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 77,
        column: 0,
        span: 2295..2297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 78,
        column: 9,
        span: 2300..2306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 10,
        span: 2306..2307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 78,
        column: 18,
        span: 2307..2315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 19,
        span: 2315..2316,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\t10000000000\\t'",
        ),
        line: 78,
        column: 36,
        span: 2316..2333,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 37,
        span: 2333..2334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 78,
        column: 39,
        span: 2335..2336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 40,
        span: 2336..2337,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 78,
        column: 43,
        span: 2338..2340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 78,
        column: 45,
        span: 2341..2342,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 78,
        column: 47,
        span: 2343..2344,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 78,
        column: 50,
        span: 2344..2347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 51,
        span: 2347..2348,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 79,
        column: 0,
        span: 2349..2352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 82,
        column: 7,
        span: 2395..2401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 8,
        span: 2401..2402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 82,
        column: 9,
        span: 2402..2403,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 10,
        span: 2403..2404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 82,
        column: 18,
        span: 2404..2412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 19,
        span: 2412..2413,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'fFfa'",
        ),
        line: 82,
        column: 25,
        span: 2413..2419,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 26,
        span: 2419..2420,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 29,
        span: 2420..2423,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 30,
        span: 2423..2424,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 31,
        span: 2424..2425,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 82,
        column: 34,
        span: 2426..2428,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 82,
        column: 38,
        span: 2429..2432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 39,
        span: 2432..2433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 83,
        column: 7,
        span: 2434..2440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 8,
        span: 2440..2441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 83,
        column: 9,
        span: 2441..2442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 10,
        span: 2442..2443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 83,
        column: 18,
        span: 2443..2451,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 83,
        column: 19,
        span: 2451..2452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'099'",
        ),
        line: 83,
        column: 24,
        span: 2452..2457,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 25,
        span: 2457..2458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 27,
        span: 2458..2460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 28,
        span: 2460..2461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 29,
        span: 2461..2462,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 83,
        column: 32,
        span: 2463..2465,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 83,
        column: 36,
        span: 2466..2469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 83,
        column: 37,
        span: 2469..2470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
        column: 7,
        span: 2471..2477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 8,
        span: 2477..2478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 84,
        column: 9,
        span: 2478..2479,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 10,
        span: 2479..2480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 84,
        column: 18,
        span: 2480..2488,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 19,
        span: 2488..2489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0'",
        ),
        line: 84,
        column: 24,
        span: 2489..2494,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 25,
        span: 2494..2495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 27,
        span: 2495..2497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 28,
        span: 2497..2498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 29,
        span: 2498..2499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
        column: 32,
        span: 2500..2502,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 84,
        column: 36,
        span: 2503..2506,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 37,
        span: 2506..2507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 85,
        column: 7,
        span: 2508..2514,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 8,
        span: 2514..2515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 85,
        column: 9,
        span: 2515..2516,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 10,
        span: 2516..2517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 85,
        column: 18,
        span: 2517..2525,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 85,
        column: 19,
        span: 2525..2526,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 85,
        column: 21,
        span: 2526..2528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 22,
        span: 2528..2529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 24,
        span: 2529..2531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 25,
        span: 2531..2532,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 26,
        span: 2532..2533,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 85,
        column: 29,
        span: 2534..2536,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 85,
        column: 33,
        span: 2537..2540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 85,
        column: 34,
        span: 2540..2541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 86,
        column: 7,
        span: 2542..2548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 8,
        span: 2548..2549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 86,
        column: 9,
        span: 2549..2550,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 10,
        span: 2550..2551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 86,
        column: 18,
        span: 2551..2559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 19,
        span: 2559..2560,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 86,
        column: 23,
        span: 2560..2564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 86,
        column: 24,
        span: 2564..2565,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 86,
        column: 26,
        span: 2565..2567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 27,
        span: 2567..2568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 28,
        span: 2568..2569,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 86,
        column: 31,
        span: 2570..2572,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 86,
        column: 35,
        span: 2573..2576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 36,
        span: 2576..2577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 87,
        column: 7,
        span: 2578..2584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 8,
        span: 2584..2585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 87,
        column: 9,
        span: 2585..2586,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 10,
        span: 2586..2587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 87,
        column: 18,
        span: 2587..2595,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 19,
        span: 2595..2596,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 87,
        column: 23,
        span: 2596..2600,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 87,
        column: 24,
        span: 2600..2601,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 87,
        column: 26,
        span: 2601..2603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 27,
        span: 2603..2604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 28,
        span: 2604..2605,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 87,
        column: 31,
        span: 2606..2608,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 87,
        column: 35,
        span: 2609..2612,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 36,
        span: 2612..2613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 88,
        column: 7,
        span: 2614..2620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 8,
        span: 2620..2621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 88,
        column: 9,
        span: 2621..2622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 10,
        span: 2622..2623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 88,
        column: 18,
        span: 2623..2631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 19,
        span: 2631..2632,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0xf'",
        ),
        line: 88,
        column: 24,
        span: 2632..2637,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 88,
        column: 25,
        span: 2637..2638,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 88,
        column: 28,
        span: 2638..2641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 29,
        span: 2641..2642,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 30,
        span: 2642..2643,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 88,
        column: 33,
        span: 2644..2646,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 88,
        column: 37,
        span: 2647..2650,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 38,
        span: 2650..2651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 90,
        column: 7,
        span: 2653..2659,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 8,
        span: 2659..2660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 90,
        column: 9,
        span: 2660..2661,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 10,
        span: 2661..2662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 90,
        column: 18,
        span: 2662..2670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 19,
        span: 2670..2671,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'inf'",
        ),
        line: 90,
        column: 24,
        span: 2671..2676,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 25,
        span: 2676..2677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 26,
        span: 2677..2678,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 90,
        column: 29,
        span: 2679..2681,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 90,
        column: 33,
        span: 2682..2685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 34,
        span: 2685..2686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 91,
        column: 7,
        span: 2687..2693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 8,
        span: 2693..2694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 91,
        column: 9,
        span: 2694..2695,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 10,
        span: 2695..2696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 91,
        column: 18,
        span: 2696..2704,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 91,
        column: 19,
        span: 2704..2705,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' INF '",
        ),
        line: 91,
        column: 26,
        span: 2705..2712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 27,
        span: 2712..2713,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 28,
        span: 2713..2714,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 91,
        column: 31,
        span: 2715..2717,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 91,
        column: 35,
        span: 2718..2721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 91,
        column: 36,
        span: 2721..2722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 92,
        column: 7,
        span: 2723..2729,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 8,
        span: 2729..2730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 92,
        column: 9,
        span: 2730..2731,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 10,
        span: 2731..2732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 92,
        column: 18,
        span: 2732..2740,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 92,
        column: 19,
        span: 2740..2741,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'Nan'",
        ),
        line: 92,
        column: 24,
        span: 2741..2746,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 25,
        span: 2746..2747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 26,
        span: 2747..2748,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 92,
        column: 29,
        span: 2749..2751,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 92,
        column: 33,
        span: 2752..2755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 92,
        column: 34,
        span: 2755..2756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 93,
        column: 7,
        span: 2757..2763,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 8,
        span: 2763..2764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 93,
        column: 9,
        span: 2764..2765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 10,
        span: 2765..2766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 93,
        column: 18,
        span: 2766..2774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 19,
        span: 2774..2775,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nan'",
        ),
        line: 93,
        column: 24,
        span: 2775..2780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 25,
        span: 2780..2781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 26,
        span: 2781..2782,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 93,
        column: 29,
        span: 2783..2785,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 93,
        column: 33,
        span: 2786..2789,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 34,
        span: 2789..2790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 95,
        column: 7,
        span: 2792..2798,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 8,
        span: 2798..2799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 95,
        column: 9,
        span: 2799..2800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 10,
        span: 2800..2801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 95,
        column: 18,
        span: 2801..2809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 19,
        span: 2809..2810,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  '",
        ),
        line: 95,
        column: 23,
        span: 2810..2814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 24,
        span: 2814..2815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 25,
        span: 2815..2816,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 95,
        column: 28,
        span: 2817..2819,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 95,
        column: 32,
        span: 2820..2823,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 33,
        span: 2823..2824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
        column: 7,
        span: 2825..2831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 8,
        span: 2831..2832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 96,
        column: 9,
        span: 2832..2833,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 10,
        span: 2833..2834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 96,
        column: 18,
        span: 2834..2842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 19,
        span: 2842..2843,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "''",
        ),
        line: 96,
        column: 21,
        span: 2843..2845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 22,
        span: 2845..2846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 23,
        span: 2846..2847,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 96,
        column: 26,
        span: 2848..2850,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 96,
        column: 30,
        span: 2851..2854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 31,
        span: 2854..2855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 97,
        column: 7,
        span: 2856..2862,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 8,
        span: 2862..2863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 97,
        column: 9,
        span: 2863..2864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 10,
        span: 2864..2865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 97,
        column: 18,
        span: 2865..2873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 19,
        span: 2873..2874,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1  a'",
        ),
        line: 97,
        column: 25,
        span: 2874..2880,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 26,
        span: 2880..2881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 27,
        span: 2881..2882,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 97,
        column: 30,
        span: 2883..2885,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 97,
        column: 34,
        span: 2886..2889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 35,
        span: 2889..2890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
        column: 7,
        span: 2891..2897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 8,
        span: 2897..2898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 98,
        column: 9,
        span: 2898..2899,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 10,
        span: 2899..2900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 98,
        column: 18,
        span: 2900..2908,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 19,
        span: 2908..2909,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0'",
        ),
        line: 98,
        column: 24,
        span: 2909..2914,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 25,
        span: 2914..2915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 26,
        span: 2915..2916,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 29,
        span: 2917..2919,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 98,
        column: 33,
        span: 2920..2923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 34,
        span: 2923..2924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 99,
        column: 7,
        span: 2925..2931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 8,
        span: 2931..2932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 99,
        column: 9,
        span: 2932..2933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 10,
        span: 2933..2934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 99,
        column: 18,
        span: 2934..2942,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 19,
        span: 2942..2943,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1 \\0'",
        ),
        line: 99,
        column: 25,
        span: 2943..2949,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 26,
        span: 2949..2950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 27,
        span: 2950..2951,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 99,
        column: 30,
        span: 2952..2954,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 99,
        column: 34,
        span: 2955..2958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 35,
        span: 2958..2959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 100,
        column: 7,
        span: 2960..2966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 8,
        span: 2966..2967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 100,
        column: 9,
        span: 2967..2968,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 10,
        span: 2968..2969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 100,
        column: 18,
        span: 2969..2977,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 19,
        span: 2977..2978,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1\\0 '",
        ),
        line: 100,
        column: 25,
        span: 2978..2984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 26,
        span: 2984..2985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 27,
        span: 2985..2986,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
        column: 30,
        span: 2987..2989,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 100,
        column: 34,
        span: 2990..2993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 35,
        span: 2993..2994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 101,
        column: 7,
        span: 2995..3001,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 8,
        span: 3001..3002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 101,
        column: 9,
        span: 3002..3003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 10,
        span: 3003..3004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 101,
        column: 18,
        span: 3004..3012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 19,
        span: 3012..3013,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'e1'",
        ),
        line: 101,
        column: 23,
        span: 3013..3017,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 24,
        span: 3017..3018,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 25,
        span: 3018..3019,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 28,
        span: 3020..3022,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 101,
        column: 32,
        span: 3023..3026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 33,
        span: 3026..3027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 102,
        column: 7,
        span: 3028..3034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 8,
        span: 3034..3035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 102,
        column: 9,
        span: 3035..3036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 10,
        span: 3036..3037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 102,
        column: 18,
        span: 3037..3045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 19,
        span: 3045..3046,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'e  1'",
        ),
        line: 102,
        column: 25,
        span: 3046..3052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 26,
        span: 3052..3053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 27,
        span: 3053..3054,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 102,
        column: 30,
        span: 3055..3057,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 102,
        column: 34,
        span: 3058..3061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 35,
        span: 3061..3062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 103,
        column: 7,
        span: 3063..3069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 8,
        span: 3069..3070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 103,
        column: 9,
        span: 3070..3071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 10,
        span: 3071..3072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 103,
        column: 18,
        span: 3072..3080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 19,
        span: 3080..3081,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' 3.4.5 '",
        ),
        line: 103,
        column: 28,
        span: 3081..3090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 29,
        span: 3090..3091,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 30,
        span: 3091..3092,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 103,
        column: 33,
        span: 3093..3095,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 103,
        column: 37,
        span: 3096..3099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 38,
        span: 3099..3100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 108,
        column: 7,
        span: 3158..3164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 8,
        span: 3164..3165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 108,
        column: 16,
        span: 3165..3173,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 17,
        span: 3173..3174,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x'",
        ),
        line: 108,
        column: 21,
        span: 3174..3178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 22,
        span: 3178..3179,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 108,
        column: 25,
        span: 3180..3182,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 108,
        column: 29,
        span: 3183..3186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 30,
        span: 3186..3187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 109,
        column: 7,
        span: 3188..3194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 8,
        span: 3194..3195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 109,
        column: 16,
        span: 3195..3203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 17,
        span: 3203..3204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 109,
        column: 20,
        span: 3204..3207,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 21,
        span: 3207..3208,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
        column: 24,
        span: 3209..3211,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 109,
        column: 28,
        span: 3212..3215,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 29,
        span: 3215..3216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 110,
        column: 7,
        span: 3217..3223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 8,
        span: 3223..3224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 110,
        column: 16,
        span: 3224..3232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 17,
        span: 3232..3233,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x3'",
        ),
        line: 110,
        column: 21,
        span: 3233..3237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 22,
        span: 3237..3238,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 110,
        column: 25,
        span: 3239..3241,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 110,
        column: 29,
        span: 3242..3245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 30,
        span: 3245..3246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 7,
        span: 3247..3253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 8,
        span: 3253..3254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 111,
        column: 16,
        span: 3254..3262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 17,
        span: 3262..3263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'00x2'",
        ),
        line: 111,
        column: 23,
        span: 3263..3269,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 24,
        span: 3269..3270,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 111,
        column: 27,
        span: 3271..3273,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 111,
        column: 31,
        span: 3274..3277,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 32,
        span: 3277..3278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 7,
        span: 3279..3285,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 8,
        span: 3285..3286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 112,
        column: 16,
        span: 3286..3294,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 17,
        span: 3294..3295,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x 2'",
        ),
        line: 112,
        column: 23,
        span: 3295..3301,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 24,
        span: 3301..3302,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 112,
        column: 27,
        span: 3303..3305,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 112,
        column: 31,
        span: 3306..3309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 32,
        span: 3309..3310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 113,
        column: 7,
        span: 3311..3317,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 8,
        span: 3317..3318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 113,
        column: 16,
        span: 3318..3326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 17,
        span: 3326..3327,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0 x2'",
        ),
        line: 113,
        column: 23,
        span: 3327..3333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 24,
        span: 3333..3334,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 113,
        column: 27,
        span: 3335..3337,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 113,
        column: 31,
        span: 3338..3341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 32,
        span: 3341..3342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
        column: 7,
        span: 3343..3349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 8,
        span: 3349..3350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 114,
        column: 16,
        span: 3350..3358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 17,
        span: 3358..3359,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'23x'",
        ),
        line: 114,
        column: 22,
        span: 3359..3364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 23,
        span: 3364..3365,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 114,
        column: 26,
        span: 3366..3368,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 114,
        column: 30,
        span: 3369..3372,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 31,
        span: 3372..3373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 115,
        column: 7,
        span: 3374..3380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 8,
        span: 3380..3381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 115,
        column: 16,
        span: 3381..3389,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 17,
        span: 3389..3390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'- 0xaa'",
        ),
        line: 115,
        column: 25,
        span: 3390..3398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 26,
        span: 3398..3399,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 29,
        span: 3400..3402,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 115,
        column: 33,
        span: 3403..3406,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 34,
        span: 3406..3407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 120,
        column: 7,
        span: 3443..3449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 120,
        column: 8,
        span: 3449..3450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x10",
            ),
        ),
        line: 120,
        column: 12,
        span: 3449..3454,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 15,
        span: 3455..3457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 18,
        span: 3457..3460,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 120,
        column: 22,
        span: 3461..3464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xfff",
            ),
        ),
        line: 120,
        column: 28,
        span: 3464..3470,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 31,
        span: 3471..3473,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 33,
        span: 3473..3475,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 120,
        column: 35,
        span: 3476..3477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 38,
        span: 3477..3480,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 120,
        column: 40,
        span: 3481..3482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 42,
        span: 3482..3484,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 120,
        column: 46,
        span: 3485..3488,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0XFB",
            ),
        ),
        line: 120,
        column: 51,
        span: 3488..3493,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 54,
        span: 3494..3496,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "251",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 58,
        span: 3496..3500,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 59,
        span: 3500..3501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 121,
        column: 7,
        span: 3502..3508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 8,
        span: 3508..3509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "00",
                    after_decimal: "",
                },
                exponent: "12",
            },
        ),
        line: 121,
        column: 14,
        span: 3508..3515,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 17,
        span: 3516..3518,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 19,
        span: 3518..3520,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 121,
        column: 23,
        span: 3521..3524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
                exponent: "-3",
            },
        ),
        line: 121,
        column: 31,
        span: 3524..3532,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 121,
        column: 34,
        span: 3533..3535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 36,
        span: 3535..3537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 37,
        span: 3537..3538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 122,
        column: 7,
        span: 3539..3545,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 8,
        span: 3545..3546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xFFFFFFFF",
            ),
        ),
        line: 122,
        column: 18,
        span: 3545..3556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
        column: 21,
        span: 3557..3559,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 23,
        span: 3559..3561,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 122,
        column: 25,
        span: 3562..3563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 28,
        span: 3563..3566,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 122,
        column: 30,
        span: 3567..3568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 32,
        span: 3568..3570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 33,
        span: 3570..3571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 123,
        column: 7,
        span: 3572..3578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 8,
        span: 3578..3579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 123,
        column: 16,
        span: 3579..3587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 17,
        span: 3587..3588,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0x2'",
        ),
        line: 123,
        column: 23,
        span: 3588..3594,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 24,
        span: 3594..3595,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 123,
        column: 27,
        span: 3596..3598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 123,
        column: 29,
        span: 3598..3600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 30,
        span: 3600..3601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 124,
        column: 7,
        span: 3602..3608,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 8,
        span: 3608..3609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 124,
        column: 16,
        span: 3609..3617,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 17,
        span: 3617..3618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0xaA'",
        ),
        line: 124,
        column: 24,
        span: 3618..3625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 25,
        span: 3625..3626,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 28,
        span: 3627..3629,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 124,
        column: 30,
        span: 3630..3631,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "170",
                    after_decimal: "",
                },
            ),
        ),
        line: 124,
        column: 33,
        span: 3630..3634,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 34,
        span: 3634..3635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
        column: 7,
        span: 3636..3642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 8,
        span: 3642..3643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 125,
        column: 16,
        span: 3643..3651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 17,
        span: 3651..3652,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'-0xffFFFfff'",
        ),
        line: 125,
        column: 30,
        span: 3652..3665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 31,
        span: 3665..3666,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 34,
        span: 3667..3669,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 125,
        column: 36,
        span: 3670..3671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 37,
        span: 3670..3672,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 125,
        column: 39,
        span: 3673..3674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 42,
        span: 3674..3677,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 125,
        column: 44,
        span: 3678..3679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 46,
        span: 3679..3681,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 47,
        span: 3681..3682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 128,
        column: 7,
        span: 3728..3734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 8,
        span: 3734..3735,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
                exponent: "+1",
            },
        ),
        line: 128,
        column: 12,
        span: 3734..3739,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
        column: 15,
        span: 3740..3742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 17,
        span: 3742..3744,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 128,
        column: 21,
        span: 3745..3748,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xE",
            ),
        ),
        line: 128,
        column: 25,
        span: 3748..3752,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 128,
        column: 27,
        span: 3753..3754,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 29,
        span: 3754..3756,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
        column: 32,
        span: 3757..3759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 35,
        span: 3759..3762,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 128,
        column: 39,
        span: 3763..3766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0xe",
            ),
        ),
        line: 128,
        column: 43,
        span: 3766..3770,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 128,
        column: 45,
        span: 3771..3772,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 47,
        span: 3772..3774,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
        column: 50,
        span: 3775..3777,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 128,
        column: 53,
        span: 3777..3780,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 54,
        span: 3780..3781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 133,
        column: 7,
        span: 3803..3809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 8,
        span: 3809..3810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 133,
        column: 16,
        span: 3810..3818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 17,
        span: 3818..3819,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  0x2.5  '",
        ),
        line: 133,
        column: 28,
        span: 3819..3830,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 29,
        span: 3830..3831,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 133,
        column: 32,
        span: 3832..3834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x25",
            ),
        ),
        line: 133,
        column: 37,
        span: 3834..3839,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 133,
        column: 39,
        span: 3840..3841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 133,
        column: 42,
        span: 3841..3844,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 43,
        span: 3844..3845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
        column: 7,
        span: 3846..3852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 8,
        span: 3852..3853,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 134,
        column: 16,
        span: 3853..3861,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 17,
        span: 3861..3862,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  -0x2.5  '",
        ),
        line: 134,
        column: 29,
        span: 3862..3874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 30,
        span: 3874..3875,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 33,
        span: 3876..3878,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 134,
        column: 35,
        span: 3879..3880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x25",
            ),
        ),
        line: 134,
        column: 39,
        span: 3879..3884,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 134,
        column: 41,
        span: 3885..3886,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 44,
        span: 3886..3889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 45,
        span: 3889..3890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 135,
        column: 7,
        span: 3891..3897,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 8,
        span: 3897..3898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 135,
        column: 16,
        span: 3898..3906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 17,
        span: 3906..3907,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'  +0x0.51p+8  '",
        ),
        line: 135,
        column: 33,
        span: 3907..3923,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 34,
        span: 3923..3924,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 135,
        column: 37,
        span: 3925..3927,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0x51",
            ),
        ),
        line: 135,
        column: 42,
        span: 3927..3932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 43,
        span: 3932..3933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 136,
        column: 7,
        span: 3934..3940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 8,
        span: 3940..3941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 136,
        column: 16,
        span: 3941..3949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 136,
        column: 17,
        span: 3949..3950,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x0.51p'",
        ),
        line: 136,
        column: 26,
        span: 3950..3959,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 27,
        span: 3959..3960,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 136,
        column: 30,
        span: 3961..3963,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 136,
        column: 34,
        span: 3964..3967,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 136,
        column: 35,
        span: 3967..3968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
        column: 7,
        span: 3969..3975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 8,
        span: 3975..3976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 137,
        column: 16,
        span: 3976..3984,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 17,
        span: 3984..3985,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x5p+-2'",
        ),
        line: 137,
        column: 26,
        span: 3985..3994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 27,
        span: 3994..3995,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 30,
        span: 3996..3998,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 137,
        column: 34,
        span: 3999..4002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 35,
        span: 4002..4003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 4004..4010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 4010..4011,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "",
                    after_decimal: ".FfffFFFF",
                },
            ),
        ),
        line: 138,
        column: 19,
        span: 4010..4022,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 22,
        span: 4023..4025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 24,
        span: 4025..4027,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 138,
        column: 26,
        span: 4028..4029,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x.00000001'",
        ),
        line: 138,
        column: 40,
        span: 4030..4043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 41,
        span: 4043..4044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
        column: 7,
        span: 4045..4051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 8,
        span: 4051..4052,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0xA.a'",
        ),
        line: 139,
        column: 15,
        span: 4052..4059,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 139,
        column: 17,
        span: 4060..4061,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 19,
        span: 4061..4063,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
        column: 22,
        span: 4064..4066,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 25,
        span: 4066..4069,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 139,
        column: 27,
        span: 4070..4071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 30,
        span: 4071..4074,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 139,
        column: 32,
        span: 4075..4076,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 35,
        span: 4076..4079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 36,
        span: 4079..4080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 4081..4087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 4087..4088,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "0a",
                    after_decimal: ".a",
                },
                exponent: "4",
            },
        ),
        line: 140,
        column: 15,
        span: 4087..4095,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 18,
        span: 4096..4098,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Hex(
                "0XAA",
            ),
        ),
        line: 140,
        column: 23,
        span: 4098..4103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 24,
        span: 4103..4104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
        column: 7,
        span: 4105..4111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 8,
        span: 4111..4112,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexScientific {
                mantissa: HexDecimal {
                    before_decimal: "04",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        line: 141,
        column: 14,
        span: 4111..4118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 17,
        span: 4119..4121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 19,
        span: 4121..4123,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 20,
        span: 4123..4124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 142,
        column: 7,
        span: 4125..4131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 8,
        span: 4131..4132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            HexDecimal(
                HexDecimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 142,
        column: 13,
        span: 4131..4137,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 16,
        span: 4138..4140,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'0x1.'",
        ),
        line: 142,
        column: 23,
        span: 4141..4147,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 142,
        column: 25,
        span: 4148..4149,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+0x.1'",
        ),
        line: 142,
        column: 33,
        span: 4150..4157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 34,
        span: 4157..4158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 145,
        column: 7,
        span: 4161..4167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 8,
        span: 4167..4168,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 145,
        column: 11,
        span: 4167..4171,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
        column: 14,
        span: 4172..4174,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 145,
        column: 17,
        span: 4174..4177,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 145,
        column: 19,
        span: 4178..4179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 145,
        column: 23,
        span: 4179..4182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 24,
        span: 4182..4183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 7,
        span: 4184..4190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 8,
        span: 4190..4191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 146,
        column: 13,
        span: 4190..4196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 16,
        span: 4197..4199,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "2",
            },
        ),
        line: 146,
        column: 20,
        span: 4199..4203,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 146,
        column: 24,
        span: 4204..4207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".01",
                },
            ),
        ),
        line: 146,
        column: 29,
        span: 4207..4211,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 32,
        span: 4212..4214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
                exponent: "-2",
            },
        ),
        line: 146,
        column: 37,
        span: 4214..4219,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 38,
        span: 4219..4220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 7,
        span: 4221..4227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 8,
        span: 4227..4228,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1111111111111111",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 24,
        span: 4227..4244,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 147,
        column: 26,
        span: 4245..4246,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1111111111111110",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 43,
        span: 4246..4263,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 46,
        span: 4264..4266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1000",
                    after_decimal: ".00",
                },
                exponent: "-03",
            },
        ),
        line: 147,
        column: 58,
        span: 4266..4278,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 59,
        span: 4278..4279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 7,
        span: 4304..4310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 8,
        span: 4310..4311,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".1",
                },
            ),
        ),
        line: 149,
        column: 11,
        span: 4310..4314,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 14,
        span: 4315..4317,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1.'",
        ),
        line: 149,
        column: 19,
        span: 4318..4322,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 149,
        column: 21,
        span: 4323..4324,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.1'",
        ),
        line: 149,
        column: 26,
        span: 4325..4329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 27,
        span: 4329..4330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
        column: 7,
        span: 4331..4337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 8,
        span: 4337..4338,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1111111111111111'",
        ),
        line: 150,
        column: 26,
        span: 4338..4356,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 150,
        column: 28,
        span: 4357..4358,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'1111111111111110'",
        ),
        line: 150,
        column: 47,
        span: 4359..4377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 50,
        span: 4378..4380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 150,
        column: 59,
        span: 4381..4389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"  +0.001e+3 \\n\\t\"",
        ),
        line: 150,
        column: 78,
        span: 4390..4408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 79,
        span: 4408..4409,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 152,
        column: 9,
        span: 4411..4419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 152,
        column: 12,
        span: 4420..4422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 13,
        span: 4422..4423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 152,
        column: 14,
        span: 4423..4424,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 15,
        span: 4424..4425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 152,
        column: 17,
        span: 4426..4427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 18,
        span: 4427..4428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 152,
        column: 24,
        span: 4429..4434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 25,
        span: 4434..4435,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 153,
        column: 5,
        span: 4438..4440,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 153,
        column: 9,
        span: 4441..4444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 153,
        column: 15,
        span: 4445..4450,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 153,
        column: 20,
        span: 4451..4455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 153,
        column: 26,
        span: 4456..4461,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 153,
        column: 28,
        span: 4462..4463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "-10",
            },
        ),
        line: 153,
        column: 35,
        span: 4463..4470,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 153,
        column: 0,
        span: 4471..4474,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 154,
        column: 9,
        span: 4477..4483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 154,
        column: 14,
        span: 4484..4488,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 15,
        span: 4488..4489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 154,
        column: 18,
        span: 4489..4492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 19,
        span: 4492..4493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 154,
        column: 20,
        span: 4493..4494,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 154,
        column: 22,
        span: 4495..4496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 154,
        column: 24,
        span: 4497..4498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 25,
        span: 4498..4499,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 154,
        column: 28,
        span: 4500..4502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "limit",
        ),
        line: 154,
        column: 0,
        span: 4503..4508,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 155,
        column: 0,
        span: 4509..4512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 157,
        column: 7,
        span: 4514..4520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 8,
        span: 4520..4521,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
                exponent: "-30",
            },
        ),
        line: 157,
        column: 15,
        span: 4520..4528,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 157,
        column: 17,
        span: 4529..4530,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
                exponent: "-31",
            },
        ),
        line: 157,
        column: 25,
        span: 4530..4538,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 157,
        column: 29,
        span: 4539..4542,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".9",
                },
                exponent: "30",
            },
        ),
        line: 157,
        column: 36,
        span: 4542..4549,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 157,
        column: 38,
        span: 4550..4551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "0",
                    after_decimal: ".1",
                },
                exponent: "31",
            },
        ),
        line: 157,
        column: 45,
        span: 4551..4558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 46,
        span: 4558..4559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 159,
        column: 7,
        span: 4561..4567,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 8,
        span: 4567..4568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".123456",
                },
            ),
        ),
        line: 159,
        column: 16,
        span: 4567..4576,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 159,
        column: 18,
        span: 4577..4578,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".123455",
                },
            ),
        ),
        line: 159,
        column: 27,
        span: 4578..4587,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 28,
        span: 4587..4588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
        column: 7,
        span: 4590..4596,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 8,
        span: 4596..4597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 161,
        column: 16,
        span: 4597..4605,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 17,
        span: 4605..4606,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+1.23E18'",
        ),
        line: 161,
        column: 27,
        span: 4606..4616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 28,
        span: 4616..4617,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
        column: 31,
        span: 4618..4620,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".23",
                },
            ),
        ),
        line: 161,
        column: 36,
        span: 4620..4625,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 161,
        column: 38,
        span: 4626..4627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 41,
        span: 4627..4630,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 161,
        column: 43,
        span: 4631..4632,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "18",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 46,
        span: 4632..4635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 47,
        span: 4635..4636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 164,
        column: 7,
        span: 4665..4671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 8,
        span: 4671..4672,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 164,
        column: 11,
        span: 4672..4675,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 13,
        span: 4676..4677,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 14,
        span: 4676..4678,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 164,
        column: 16,
        span: 4679..4680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 18,
        span: 4680..4682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 19,
        span: 4682..4683,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 164,
        column: 23,
        span: 4684..4687,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 25,
        span: 4688..4689,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 26,
        span: 4688..4690,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 164,
        column: 28,
        span: 4691..4692,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 30,
        span: 4692..4694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 31,
        span: 4694..4695,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 164,
        column: 35,
        span: 4696..4699,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 164,
        column: 39,
        span: 4700..4703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 41,
        span: 4704..4705,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 42,
        span: 4704..4706,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 164,
        column: 44,
        span: 4707..4708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 46,
        span: 4708..4710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 47,
        span: 4710..4711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 48,
        span: 4711..4712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 165,
        column: 7,
        span: 4713..4719,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 8,
        span: 4719..4720,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 165,
        column: 11,
        span: 4720..4723,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 13,
        span: 4724..4725,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 165,
        column: 16,
        span: 4725..4728,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 165,
        column: 18,
        span: 4729..4730,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 165,
        column: 22,
        span: 4731..4734,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 23,
        span: 4734..4735,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 165,
        column: 27,
        span: 4736..4739,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 29,
        span: 4740..4741,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 165,
        column: 32,
        span: 4741..4744,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 165,
        column: 34,
        span: 4745..4746,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 165,
        column: 38,
        span: 4747..4750,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 39,
        span: 4750..4751,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 165,
        column: 43,
        span: 4752..4755,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 165,
        column: 47,
        span: 4756..4759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 49,
        span: 4760..4761,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 165,
        column: 52,
        span: 4761..4764,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 165,
        column: 54,
        span: 4765..4766,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 165,
        column: 58,
        span: 4767..4770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 59,
        span: 4770..4771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 60,
        span: 4771..4772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 166,
        column: 7,
        span: 4773..4779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 8,
        span: 4779..4780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 9,
        span: 4780..4781,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 10,
        span: 4780..4782,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 166,
        column: 13,
        span: 4783..4785,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 15,
        span: 4785..4787,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 16,
        span: 4787..4788,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 166,
        column: 20,
        span: 4789..4792,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 22,
        span: 4793..4794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 23,
        span: 4793..4795,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 166,
        column: 26,
        span: 4796..4798,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 28,
        span: 4798..4800,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 29,
        span: 4800..4801,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 166,
        column: 33,
        span: 4802..4805,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 166,
        column: 37,
        span: 4806..4809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 39,
        span: 4810..4811,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 40,
        span: 4810..4812,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 166,
        column: 43,
        span: 4813..4815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 45,
        span: 4815..4817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 46,
        span: 4817..4818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 47,
        span: 4818..4819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
        column: 7,
        span: 4820..4826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 8,
        span: 4826..4827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 9,
        span: 4827..4828,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 167,
        column: 12,
        span: 4828..4831,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 167,
        column: 15,
        span: 4832..4834,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 167,
        column: 19,
        span: 4835..4838,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 20,
        span: 4838..4839,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 167,
        column: 24,
        span: 4840..4843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 26,
        span: 4844..4845,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 167,
        column: 29,
        span: 4845..4848,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 167,
        column: 32,
        span: 4849..4851,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 167,
        column: 36,
        span: 4852..4855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 37,
        span: 4855..4856,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 167,
        column: 41,
        span: 4857..4860,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 167,
        column: 45,
        span: 4861..4864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 47,
        span: 4865..4866,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 167,
        column: 50,
        span: 4866..4869,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 167,
        column: 53,
        span: 4870..4872,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 167,
        column: 57,
        span: 4873..4876,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 58,
        span: 4876..4877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 59,
        span: 4877..4878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
        column: 7,
        span: 4879..4885,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 8,
        span: 4885..4886,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 168,
        column: 11,
        span: 4886..4889,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 13,
        span: 4890..4891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 14,
        span: 4890..4892,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 168,
        column: 16,
        span: 4893..4894,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 18,
        span: 4894..4896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 19,
        span: 4896..4897,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 168,
        column: 23,
        span: 4898..4901,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 168,
        column: 27,
        span: 4902..4905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 29,
        span: 4906..4907,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 30,
        span: 4906..4908,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 168,
        column: 32,
        span: 4909..4910,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 34,
        span: 4910..4912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 35,
        span: 4912..4913,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 168,
        column: 39,
        span: 4914..4917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 41,
        span: 4918..4919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 42,
        span: 4918..4920,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 168,
        column: 44,
        span: 4921..4922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 46,
        span: 4922..4924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 47,
        span: 4924..4925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 48,
        span: 4925..4926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 7,
        span: 4927..4933,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 8,
        span: 4933..4934,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 169,
        column: 11,
        span: 4934..4937,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 13,
        span: 4938..4939,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 169,
        column: 16,
        span: 4939..4942,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 169,
        column: 18,
        span: 4943..4944,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 169,
        column: 22,
        span: 4945..4948,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 23,
        span: 4948..4949,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 27,
        span: 4950..4953,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 169,
        column: 31,
        span: 4954..4957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 33,
        span: 4958..4959,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 169,
        column: 36,
        span: 4959..4962,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 169,
        column: 38,
        span: 4963..4964,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 169,
        column: 42,
        span: 4965..4968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 43,
        span: 4968..4969,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 47,
        span: 4970..4973,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 49,
        span: 4974..4975,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 169,
        column: 52,
        span: 4975..4978,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 169,
        column: 54,
        span: 4979..4980,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 169,
        column: 58,
        span: 4981..4984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 59,
        span: 4984..4985,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 60,
        span: 4985..4986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
        column: 7,
        span: 4987..4993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 8,
        span: 4993..4994,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 9,
        span: 4994..4995,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 10,
        span: 4994..4996,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 170,
        column: 13,
        span: 4997..4999,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 15,
        span: 4999..5001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 16,
        span: 5001..5002,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 170,
        column: 20,
        span: 5003..5006,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 170,
        column: 24,
        span: 5007..5010,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 26,
        span: 5011..5012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 27,
        span: 5011..5013,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 170,
        column: 30,
        span: 5014..5016,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 32,
        span: 5016..5018,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 33,
        span: 5018..5019,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 170,
        column: 37,
        span: 5020..5023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 39,
        span: 5024..5025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 40,
        span: 5024..5026,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 170,
        column: 43,
        span: 5027..5029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 45,
        span: 5029..5031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 46,
        span: 5031..5032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 47,
        span: 5032..5033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 7,
        span: 5034..5040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 8,
        span: 5040..5041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 9,
        span: 5041..5042,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 171,
        column: 12,
        span: 5042..5045,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 171,
        column: 15,
        span: 5046..5048,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 171,
        column: 19,
        span: 5049..5052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 20,
        span: 5052..5053,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 171,
        column: 24,
        span: 5054..5057,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 171,
        column: 28,
        span: 5058..5061,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 30,
        span: 5062..5063,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 171,
        column: 33,
        span: 5063..5066,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 171,
        column: 36,
        span: 5067..5069,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 171,
        column: 40,
        span: 5070..5073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 41,
        span: 5073..5074,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 171,
        column: 45,
        span: 5075..5078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 47,
        span: 5079..5080,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 171,
        column: 50,
        span: 5080..5083,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 171,
        column: 53,
        span: 5084..5086,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 171,
        column: 57,
        span: 5087..5090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 58,
        span: 5090..5091,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 59,
        span: 5091..5092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 174,
        column: 7,
        span: 5118..5124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 8,
        span: 5124..5125,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 174,
        column: 9,
        span: 5125..5126,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 10,
        span: 5125..5127,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 174,
        column: 12,
        span: 5128..5129,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 14,
        span: 5129..5131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 174,
        column: 17,
        span: 5132..5134,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 19,
        span: 5134..5136,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 20,
        span: 5136..5137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 7,
        span: 5138..5144,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 8,
        span: 5144..5145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 9,
        span: 5144..5146,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 175,
        column: 11,
        span: 5147..5148,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 175,
        column: 13,
        span: 5149..5150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 14,
        span: 5149..5151,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 17,
        span: 5152..5154,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 175,
        column: 19,
        span: 5155..5156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 20,
        span: 5155..5157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 21,
        span: 5157..5158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
        column: 7,
        span: 5159..5165,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 8,
        span: 5165..5166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 176,
        column: 12,
        span: 5166..5170,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 13,
        span: 5170..5171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 176,
        column: 15,
        span: 5171..5173,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 176,
        column: 17,
        span: 5174..5175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 176,
        column: 22,
        span: 5176..5180,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 23,
        span: 5180..5181,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 176,
        column: 25,
        span: 5181..5183,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 176,
        column: 27,
        span: 5184..5185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 29,
        span: 5185..5187,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 176,
        column: 32,
        span: 5188..5190,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 176,
        column: 34,
        span: 5190..5192,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 35,
        span: 5192..5193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
        column: 7,
        span: 5194..5200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 8,
        span: 5200..5201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 177,
        column: 12,
        span: 5201..5205,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 177,
        column: 13,
        span: 5205..5206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 177,
        column: 15,
        span: 5206..5208,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 177,
        column: 17,
        span: 5209..5210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 177,
        column: 22,
        span: 5211..5215,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 177,
        column: 23,
        span: 5215..5216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 177,
        column: 25,
        span: 5216..5218,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 177,
        column: 27,
        span: 5219..5220,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 177,
        column: 33,
        span: 5220..5226,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 177,
        column: 36,
        span: 5227..5229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".141",
                },
            ),
        ),
        line: 177,
        column: 42,
        span: 5229..5235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 43,
        span: 5235..5236,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 179,
        column: 6,
        span: 5238..5243,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 179,
        column: 15,
        span: 5244..5252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testbit",
        ),
        line: 179,
        column: 23,
        span: 5253..5260,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 24,
        span: 5260..5261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 179,
        column: 25,
        span: 5261..5262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 26,
        span: 5262..5263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 179,
        column: 28,
        span: 5264..5265,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 29,
        span: 5265..5266,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 180,
        column: 9,
        span: 5269..5275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 180,
        column: 11,
        span: 5276..5277,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 180,
        column: 13,
        span: 5278..5279,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 15,
        span: 5279..5281,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 180,
        column: 17,
        span: 5282..5283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 180,
        column: 19,
        span: 5284..5285,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 180,
        column: 21,
        span: 5286..5287,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 23,
        span: 5287..5289,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 180,
        column: 26,
        span: 5290..5292,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 180,
        column: 0,
        span: 5292..5294,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 181,
        column: 0,
        span: 5295..5298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 183,
        column: 7,
        span: 5300..5306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 8,
        span: 5306..5307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 183,
        column: 10,
        span: 5307..5309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 11,
        span: 5309..5310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 183,
        column: 15,
        span: 5310..5314,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 183,
        column: 16,
        span: 5314..5315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 183,
        column: 19,
        span: 5315..5318,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 20,
        span: 5318..5319,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 183,
        column: 21,
        span: 5319..5320,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 183,
        column: 24,
        span: 5319..5323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 25,
        span: 5323..5324,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 183,
        column: 27,
        span: 5325..5326,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 29,
        span: 5326..5328,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 183,
        column: 31,
        span: 5329..5330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 183,
        column: 36,
        span: 5331..5335,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 183,
        column: 37,
        span: 5335..5336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 183,
        column: 40,
        span: 5336..5339,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 41,
        span: 5339..5340,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 183,
        column: 42,
        span: 5340..5341,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: ".8",
                },
            ),
        ),
        line: 183,
        column: 45,
        span: 5340..5344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 46,
        span: 5344..5345,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 183,
        column: 48,
        span: 5346..5347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 50,
        span: 5347..5349,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 51,
        span: 5349..5350,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 183,
        column: 53,
        span: 5350..5352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 54,
        span: 5352..5353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 55,
        span: 5353..5354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 184,
        column: 7,
        span: 5355..5361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 8,
        span: 5361..5362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 184,
        column: 10,
        span: 5362..5364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 11,
        span: 5364..5365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 184,
        column: 15,
        span: 5365..5369,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 184,
        column: 16,
        span: 5369..5370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tan",
        ),
        line: 184,
        column: 19,
        span: 5370..5373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 184,
        column: 20,
        span: 5373..5374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 184,
        column: 24,
        span: 5374..5378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 184,
        column: 25,
        span: 5378..5379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 184,
        column: 27,
        span: 5379..5381,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 184,
        column: 29,
        span: 5382..5383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 31,
        span: 5383..5385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 32,
        span: 5385..5386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 184,
        column: 33,
        span: 5386..5387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 35,
        span: 5387..5389,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 36,
        span: 5389..5390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 184,
        column: 37,
        span: 5390..5391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
        column: 7,
        span: 5392..5398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 8,
        span: 5398..5399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 185,
        column: 10,
        span: 5399..5401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 11,
        span: 5401..5402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 185,
        column: 15,
        span: 5402..5406,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 16,
        span: 5406..5407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 185,
        column: 19,
        span: 5407..5410,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 20,
        span: 5410..5411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 185,
        column: 24,
        span: 5411..5415,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 25,
        span: 5415..5416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 185,
        column: 27,
        span: 5416..5418,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 185,
        column: 29,
        span: 5419..5420,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 31,
        span: 5420..5422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 32,
        span: 5422..5423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 33,
        span: 5423..5424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 35,
        span: 5424..5426,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 36,
        span: 5426..5427,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 185,
        column: 40,
        span: 5428..5431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 185,
        column: 43,
        span: 5432..5434,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 44,
        span: 5434..5435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 185,
        column: 48,
        span: 5435..5439,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 49,
        span: 5439..5440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cos",
        ),
        line: 185,
        column: 52,
        span: 5440..5443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 53,
        span: 5443..5444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 185,
        column: 57,
        span: 5444..5448,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 185,
        column: 58,
        span: 5448..5449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 185,
        column: 60,
        span: 5449..5451,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 185,
        column: 62,
        span: 5452..5453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 64,
        span: 5453..5455,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 65,
        span: 5455..5456,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 66,
        span: 5456..5457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 68,
        span: 5457..5459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 69,
        span: 5459..5460,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 70,
        span: 5460..5461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 7,
        span: 5462..5468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 8,
        span: 5468..5469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 186,
        column: 10,
        span: 5469..5471,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 11,
        span: 5471..5472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 186,
        column: 15,
        span: 5472..5476,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 16,
        span: 5476..5477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "atan",
        ),
        line: 186,
        column: 20,
        span: 5477..5481,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 21,
        span: 5481..5482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 22,
        span: 5481..5483,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 23,
        span: 5483..5484,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 24,
        span: 5484..5485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 186,
        column: 29,
        span: 5486..5490,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 30,
        span: 5490..5491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 186,
        column: 32,
        span: 5491..5493,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 186,
        column: 34,
        span: 5494..5495,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 36,
        span: 5495..5497,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 37,
        span: 5497..5498,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 186,
        column: 41,
        span: 5499..5502,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 186,
        column: 44,
        span: 5503..5505,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 45,
        span: 5505..5506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 186,
        column: 49,
        span: 5506..5510,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 50,
        span: 5510..5511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "acos",
        ),
        line: 186,
        column: 54,
        span: 5511..5515,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 55,
        span: 5515..5516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 56,
        span: 5515..5517,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 57,
        span: 5517..5518,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 186,
        column: 58,
        span: 5518..5519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 186,
        column: 63,
        span: 5520..5524,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 64,
        span: 5524..5525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 186,
        column: 66,
        span: 5525..5527,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 186,
        column: 68,
        span: 5528..5529,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 70,
        span: 5529..5531,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 71,
        span: 5531..5532,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 186,
        column: 0,
        span: 5533..5536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 187,
        column: 5,
        span: 5539..5541,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 6,
        span: 5541..5542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 187,
        column: 10,
        span: 5542..5546,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 187,
        column: 11,
        span: 5546..5547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "asin",
        ),
        line: 187,
        column: 15,
        span: 5547..5551,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 16,
        span: 5551..5552,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 17,
        span: 5551..5553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 18,
        span: 5553..5554,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 19,
        span: 5554..5555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 187,
        column: 24,
        span: 5556..5560,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 187,
        column: 25,
        span: 5560..5561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 187,
        column: 27,
        span: 5561..5563,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 187,
        column: 29,
        span: 5564..5565,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 31,
        span: 5565..5567,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 32,
        span: 5567..5568,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 33,
        span: 5568..5569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 188,
        column: 7,
        span: 5570..5576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 8,
        span: 5576..5577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 188,
        column: 10,
        span: 5577..5579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 11,
        span: 5579..5580,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 188,
        column: 15,
        span: 5580..5584,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 188,
        column: 16,
        span: 5584..5585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        line: 188,
        column: 19,
        span: 5585..5588,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 20,
        span: 5588..5589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 188,
        column: 24,
        span: 5589..5593,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 188,
        column: 25,
        span: 5593..5594,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 188,
        column: 27,
        span: 5594..5596,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 188,
        column: 29,
        span: 5597..5598,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 31,
        span: 5598..5600,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 32,
        span: 5600..5601,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
        column: 33,
        span: 5601..5602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 36,
        span: 5602..5605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 37,
        span: 5605..5606,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 188,
        column: 41,
        span: 5607..5610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 188,
        column: 44,
        span: 5611..5613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 45,
        span: 5613..5614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 188,
        column: 49,
        span: 5614..5618,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 188,
        column: 50,
        span: 5618..5619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rad",
        ),
        line: 188,
        column: 53,
        span: 5619..5622,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 54,
        span: 5622..5623,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 56,
        span: 5622..5625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 57,
        span: 5625..5626,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
        column: 58,
        span: 5626..5627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 188,
        column: 63,
        span: 5628..5632,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 188,
        column: 64,
        span: 5632..5633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 188,
        column: 66,
        span: 5633..5635,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 188,
        column: 68,
        span: 5636..5637,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 188,
        column: 70,
        span: 5637..5639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 71,
        span: 5639..5640,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 72,
        span: 5640..5641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 189,
        column: 7,
        span: 5642..5648,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 8,
        span: 5648..5649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 189,
        column: 12,
        span: 5649..5653,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
        column: 13,
        span: 5653..5654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "abs",
        ),
        line: 189,
        column: 16,
        span: 5654..5657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 17,
        span: 5657..5658,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 189,
        column: 18,
        span: 5658..5659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 20,
        span: 5658..5661,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 21,
        span: 5661..5662,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 189,
        column: 24,
        span: 5663..5665,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 27,
        span: 5665..5668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 28,
        span: 5668..5669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
        column: 7,
        span: 5670..5676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 8,
        span: 5676..5677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 190,
        column: 10,
        span: 5677..5679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 11,
        span: 5679..5680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 190,
        column: 15,
        span: 5680..5684,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 190,
        column: 16,
        span: 5684..5685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "atan2",
        ),
        line: 190,
        column: 21,
        span: 5685..5690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 22,
        span: 5690..5691,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 23,
        span: 5690..5692,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 24,
        span: 5692..5693,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 26,
        span: 5693..5695,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 27,
        span: 5695..5696,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 190,
        column: 28,
        span: 5696..5697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 190,
        column: 33,
        span: 5698..5702,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 190,
        column: 34,
        span: 5702..5703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 190,
        column: 36,
        span: 5703..5705,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 190,
        column: 38,
        span: 5706..5707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 40,
        span: 5707..5709,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 41,
        span: 5709..5710,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 42,
        span: 5710..5711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 7,
        span: 5712..5718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 8,
        span: 5718..5719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 191,
        column: 12,
        span: 5719..5723,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 13,
        span: 5723..5724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ceil",
        ),
        line: 191,
        column: 17,
        span: 5724..5728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 18,
        span: 5728..5729,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 191,
        column: 21,
        span: 5728..5732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 22,
        span: 5732..5733,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
        column: 25,
        span: 5734..5736,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 191,
        column: 29,
        span: 5736..5740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 30,
        span: 5740..5741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 7,
        span: 5742..5748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 8,
        span: 5748..5749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 192,
        column: 12,
        span: 5749..5753,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
        column: 13,
        span: 5753..5754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 192,
        column: 18,
        span: 5754..5759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 19,
        span: 5759..5760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 192,
        column: 22,
        span: 5759..5763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 23,
        span: 5763..5764,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 192,
        column: 26,
        span: 5765..5767,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 192,
        column: 30,
        span: 5767..5771,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 31,
        span: 5771..5772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 7,
        span: 5773..5779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 8,
        span: 5779..5780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 193,
        column: 12,
        span: 5780..5784,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 193,
        column: 13,
        span: 5784..5785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fmod",
        ),
        line: 193,
        column: 17,
        span: 5785..5789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 18,
        span: 5789..5790,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 20,
        span: 5789..5792,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 21,
        span: 5792..5793,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 23,
        span: 5793..5795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 24,
        span: 5795..5796,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 193,
        column: 27,
        span: 5797..5799,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 29,
        span: 5799..5801,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 30,
        span: 5801..5802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
        column: 7,
        span: 5803..5809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 8,
        span: 5809..5810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 194,
        column: 10,
        span: 5810..5812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 11,
        span: 5812..5813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 194,
        column: 15,
        span: 5813..5817,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 16,
        span: 5817..5818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sqrt",
        ),
        line: 194,
        column: 20,
        span: 5818..5822,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 21,
        span: 5822..5823,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 23,
        span: 5822..5825,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 24,
        span: 5825..5826,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 194,
        column: 26,
        span: 5827..5828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 28,
        span: 5828..5830,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 29,
        span: 5830..5831,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 194,
        column: 32,
        span: 5831..5834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 33,
        span: 5834..5835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 34,
        span: 5835..5836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
        column: 7,
        span: 5837..5843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 8,
        span: 5843..5844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 195,
        column: 10,
        span: 5844..5846,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 11,
        span: 5846..5847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 195,
        column: 15,
        span: 5847..5851,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 16,
        span: 5851..5852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 195,
        column: 19,
        span: 5852..5855,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 20,
        span: 5855..5856,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 21,
        span: 5855..5857,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 22,
        span: 5857..5858,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 25,
        span: 5858..5861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 26,
        span: 5861..5862,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 27,
        span: 5862..5863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 195,
        column: 32,
        span: 5864..5868,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 33,
        span: 5868..5869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 195,
        column: 36,
        span: 5869..5872,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 37,
        span: 5872..5873,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 38,
        span: 5872..5874,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 39,
        span: 5874..5875,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 195,
        column: 41,
        span: 5876..5877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 195,
        column: 46,
        span: 5878..5882,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 47,
        span: 5882..5883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 195,
        column: 50,
        span: 5883..5886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 51,
        span: 5886..5887,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 195,
        column: 53,
        span: 5886..5889,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 54,
        span: 5889..5890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 55,
        span: 5890..5891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 56,
        span: 5891..5892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 7,
        span: 5893..5899,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 8,
        span: 5899..5900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 196,
        column: 10,
        span: 5900..5902,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 11,
        span: 5902..5903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 196,
        column: 15,
        span: 5903..5907,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 196,
        column: 16,
        span: 5907..5908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 196,
        column: 19,
        span: 5908..5911,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 20,
        span: 5911..5912,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 21,
        span: 5911..5913,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 22,
        span: 5913..5914,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 24,
        span: 5914..5916,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 25,
        span: 5916..5917,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 26,
        span: 5917..5918,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 28,
        span: 5918..5920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 29,
        span: 5920..5921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 30,
        span: 5921..5922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 197,
        column: 7,
        span: 5923..5929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 8,
        span: 5929..5930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 197,
        column: 10,
        span: 5930..5932,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 11,
        span: 5932..5933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 197,
        column: 15,
        span: 5933..5937,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 197,
        column: 16,
        span: 5937..5938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "log",
        ),
        line: 197,
        column: 19,
        span: 5938..5941,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 20,
        span: 5941..5942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
        column: 21,
        span: 5941..5943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 197,
        column: 22,
        span: 5943..5944,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
        column: 24,
        span: 5944..5946,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 25,
        span: 5946..5947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 197,
        column: 26,
        span: 5947..5948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 197,
        column: 28,
        span: 5948..5950,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 29,
        span: 5950..5951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 30,
        span: 5951..5952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 198,
        column: 7,
        span: 5953..5959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 8,
        span: 5959..5960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 198,
        column: 10,
        span: 5960..5962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 11,
        span: 5962..5963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 198,
        column: 15,
        span: 5963..5967,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 198,
        column: 16,
        span: 5967..5968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "exp",
        ),
        line: 198,
        column: 19,
        span: 5968..5971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 20,
        span: 5971..5972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 21,
        span: 5971..5973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 22,
        span: 5973..5974,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 198,
        column: 23,
        span: 5974..5975,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 198,
        column: 25,
        span: 5975..5977,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 26,
        span: 5977..5978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 27,
        span: 5978..5979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 199,
        column: 7,
        span: 5980..5986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 8,
        span: 5986..5987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 199,
        column: 10,
        span: 5987..5989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 11,
        span: 5989..5990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 199,
        column: 15,
        span: 5990..5994,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 199,
        column: 16,
        span: 5994..5995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 199,
        column: 19,
        span: 5995..5998,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 20,
        span: 5998..5999,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 22,
        span: 5998..6001,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 23,
        span: 6001..6002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 199,
        column: 24,
        span: 6002..6003,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 199,
        column: 29,
        span: 6004..6008,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 199,
        column: 30,
        span: 6008..6009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sin",
        ),
        line: 199,
        column: 33,
        span: 6009..6012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 34,
        span: 6012..6013,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 36,
        span: 6012..6015,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 199,
        column: 38,
        span: 6016..6017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 40,
        span: 6018..6019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 199,
        column: 41,
        span: 6018..6020,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 199,
        column: 43,
        span: 6021..6022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 199,
        column: 48,
        span: 6023..6027,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 199,
        column: 49,
        span: 6027..6028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 199,
        column: 51,
        span: 6028..6030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 52,
        span: 6030..6031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 53,
        span: 6031..6032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 54,
        span: 6032..6033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 55,
        span: 6033..6034,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 200,
        column: 6,
        span: 6035..6040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 200,
        column: 8,
        span: 6041..6042,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 200,
        column: 9,
        span: 6042..6043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 200,
        column: 11,
        span: 6044..6045,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 200,
        column: 13,
        span: 6046..6047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 200,
        column: 18,
        span: 6048..6052,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 19,
        span: 6052..6053,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "frexp",
        ),
        line: 200,
        column: 24,
        span: 6053..6058,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 25,
        span: 6058..6059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 200,
        column: 29,
        span: 6059..6063,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 30,
        span: 6063..6064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 200,
        column: 32,
        span: 6064..6066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 33,
        span: 6066..6067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 201,
        column: 7,
        span: 6068..6074,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 8,
        span: 6074..6075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 201,
        column: 10,
        span: 6075..6077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 11,
        span: 6077..6078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 201,
        column: 15,
        span: 6078..6082,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 16,
        span: 6082..6083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ldexp",
        ),
        line: 201,
        column: 21,
        span: 6083..6088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 22,
        span: 6088..6089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 201,
        column: 23,
        span: 6089..6090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 24,
        span: 6090..6091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 201,
        column: 26,
        span: 6092..6093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 27,
        span: 6093..6094,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 201,
        column: 28,
        span: 6094..6095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 201,
        column: 33,
        span: 6096..6100,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 34,
        span: 6100..6101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pi",
        ),
        line: 201,
        column: 36,
        span: 6101..6103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 37,
        span: 6103..6104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 38,
        span: 6104..6105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 7,
        span: 6107..6113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 8,
        span: 6113..6114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 203,
        column: 10,
        span: 6114..6116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 11,
        span: 6116..6117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 203,
        column: 15,
        span: 6117..6121,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 203,
        column: 16,
        span: 6121..6122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tanh",
        ),
        line: 203,
        column: 20,
        span: 6122..6126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 21,
        span: 6126..6127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 203,
        column: 24,
        span: 6126..6130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 25,
        span: 6130..6131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 26,
        span: 6131..6132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 203,
        column: 31,
        span: 6133..6137,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 203,
        column: 32,
        span: 6137..6138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sinh",
        ),
        line: 203,
        column: 36,
        span: 6138..6142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 37,
        span: 6142..6143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 203,
        column: 40,
        span: 6142..6146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 41,
        span: 6146..6147,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 203,
        column: 43,
        span: 6148..6149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 203,
        column: 48,
        span: 6150..6154,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 203,
        column: 49,
        span: 6154..6155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cosh",
        ),
        line: 203,
        column: 53,
        span: 6155..6159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 54,
        span: 6159..6160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 203,
        column: 57,
        span: 6159..6163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 58,
        span: 6163..6164,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 59,
        span: 6164..6165,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 60,
        span: 6165..6166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 7,
        span: 6168..6174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 8,
        span: 6174..6175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 205,
        column: 16,
        span: 6175..6183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 17,
        span: 6183..6184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' 1.3e-2 '",
        ),
        line: 205,
        column: 27,
        span: 6184..6194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 28,
        span: 6194..6195,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 205,
        column: 31,
        span: 6196..6198,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "1",
                    after_decimal: ".3",
                },
                exponent: "-2",
            },
        ),
        line: 205,
        column: 38,
        span: 6198..6205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 39,
        span: 6205..6206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 206,
        column: 7,
        span: 6207..6213,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 8,
        span: 6213..6214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tonumber",
        ),
        line: 206,
        column: 16,
        span: 6214..6222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 206,
        column: 17,
        span: 6222..6223,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "' -1.00000000000001 '",
        ),
        line: 206,
        column: 38,
        span: 6223..6244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 39,
        span: 6244..6245,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 206,
        column: 42,
        span: 6246..6248,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 206,
        column: 44,
        span: 6249..6250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".00000000000001",
                },
            ),
        ),
        line: 206,
        column: 60,
        span: 6249..6266,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 206,
        column: 61,
        span: 6266..6267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 210,
        column: 7,
        span: 6314..6320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 8,
        span: 6320..6321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388609",
                    after_decimal: "",
                },
            ),
        ),
        line: 210,
        column: 15,
        span: 6320..6328,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 210,
        column: 17,
        span: 6329..6330,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 210,
        column: 19,
        span: 6331..6332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388609",
                    after_decimal: "",
                },
            ),
        ),
        line: 210,
        column: 26,
        span: 6331..6339,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 210,
        column: 29,
        span: 6340..6342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 210,
        column: 31,
        span: 6342..6344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 32,
        span: 6344..6345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 211,
        column: 7,
        span: 6346..6352,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 8,
        span: 6352..6353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388608",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 15,
        span: 6352..6360,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 211,
        column: 17,
        span: 6361..6362,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 211,
        column: 19,
        span: 6363..6364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388608",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 26,
        span: 6363..6371,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 211,
        column: 29,
        span: 6372..6374,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 211,
        column: 31,
        span: 6374..6376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 32,
        span: 6376..6377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 212,
        column: 7,
        span: 6378..6384,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 8,
        span: 6384..6385,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388607",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 15,
        span: 6384..6392,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 212,
        column: 17,
        span: 6393..6394,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 212,
        column: 19,
        span: 6395..6396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8388607",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 26,
        span: 6395..6403,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 212,
        column: 29,
        span: 6404..6406,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 31,
        span: 6406..6408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 32,
        span: 6408..6409,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 216,
        column: 6,
        span: 6444..6449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 216,
        column: 8,
        span: 6450..6451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 9,
        span: 6451..6452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 216,
        column: 11,
        span: 6453..6454,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 216,
        column: 13,
        span: 6455..6456,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 216,
        column: 18,
        span: 6457..6461,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 216,
        column: 19,
        span: 6461..6462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'20'",
        ),
        line: 216,
        column: 24,
        span: 6463..6467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
        column: 7,
        span: 6468..6474,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 8,
        span: 6474..6475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 217,
        column: 9,
        span: 6475..6476,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 217,
        column: 11,
        span: 6477..6478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 217,
        column: 13,
        span: 6479..6480,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 16,
        span: 6481..6483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 20,
        span: 6483..6487,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 217,
        column: 24,
        span: 6488..6491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 217,
        column: 26,
        span: 6492..6493,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 217,
        column: 28,
        span: 6494..6495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 217,
        column: 30,
        span: 6496..6497,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 33,
        span: 6498..6500,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 36,
        span: 6500..6503,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 217,
        column: 40,
        span: 6504..6507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 217,
        column: 42,
        span: 6508..6509,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 217,
        column: 44,
        span: 6510..6511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 217,
        column: 46,
        span: 6512..6513,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 49,
        span: 6514..6516,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 217,
        column: 51,
        span: 6517..6518,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 53,
        span: 6517..6520,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 217,
        column: 57,
        span: 6521..6524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 217,
        column: 59,
        span: 6525..6526,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 217,
        column: 61,
        span: 6527..6528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 217,
        column: 63,
        span: 6529..6530,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 66,
        span: 6531..6533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 217,
        column: 70,
        span: 6533..6537,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 217,
        column: 74,
        span: 6538..6541,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 217,
        column: 76,
        span: 6542..6543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 217,
        column: 77,
        span: 6543..6544,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 217,
        column: 80,
        span: 6545..6547,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 217,
        column: 82,
        span: 6548..6549,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 84,
        span: 6548..6551,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 85,
        span: 6551..6552,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 218,
        column: 7,
        span: 6553..6559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 8,
        span: 6559..6560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 218,
        column: 9,
        span: 6560..6561,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 218,
        column: 12,
        span: 6562..6564,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'10'",
        ),
        line: 218,
        column: 17,
        span: 6565..6569,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 218,
        column: 21,
        span: 6570..6573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 218,
        column: 23,
        span: 6574..6575,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 218,
        column: 26,
        span: 6576..6578,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'20'",
        ),
        line: 218,
        column: 31,
        span: 6579..6583,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 32,
        span: 6583..6584,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 221,
        column: 3,
        span: 6587..6589,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 221,
        column: 7,
        span: 6590..6593,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 221,
        column: 13,
        span: 6594..6599,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 221,
        column: 0,
        span: 6600..6604,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 222,
        column: 8,
        span: 6607..6612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 9,
        span: 6612..6613,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing -0 and NaN\"",
        ),
        line: 222,
        column: 29,
        span: 6613..6633,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 30,
        span: 6633..6634,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 223,
        column: 8,
        span: 6637..6642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 223,
        column: 11,
        span: 6643..6645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 12,
        span: 6645..6646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 223,
        column: 14,
        span: 6647..6648,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 223,
        column: 16,
        span: 6649..6650,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 223,
        column: 18,
        span: 6651..6652,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 19,
        span: 6651..6653,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 20,
        span: 6653..6654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 223,
        column: 0,
        span: 6654..6656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 224,
        column: 9,
        span: 6659..6665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 10,
        span: 6665..6666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 224,
        column: 12,
        span: 6666..6668,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 224,
        column: 15,
        span: 6669..6671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 224,
        column: 17,
        span: 6672..6673,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 18,
        span: 6673..6674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
        column: 9,
        span: 6677..6683,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 10,
        span: 6683..6684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 11,
        span: 6683..6685,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 225,
        column: 13,
        span: 6686..6687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 225,
        column: 16,
        span: 6688..6690,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 225,
        column: 18,
        span: 6691..6692,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 20,
        span: 6692..6694,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 225,
        column: 24,
        span: 6695..6698,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 26,
        span: 6698..6700,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 225,
        column: 28,
        span: 6701..6702,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 225,
        column: 30,
        span: 6702..6704,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 225,
        column: 32,
        span: 6705..6706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 225,
        column: 34,
        span: 6707..6708,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 35,
        span: 6708..6709,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 226,
        column: 8,
        span: 6712..6717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 226,
        column: 10,
        span: 6718..6719,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
        column: 12,
        span: 6720..6721,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 226,
        column: 14,
        span: 6722..6723,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 226,
        column: 16,
        span: 6724..6725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 226,
        column: 18,
        span: 6725..6727,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 226,
        column: 19,
        span: 6727..6728,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
        column: 21,
        span: 6729..6730,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 226,
        column: 23,
        span: 6730..6732,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 226,
        column: 25,
        span: 6733..6734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 227,
        column: 9,
        span: 6737..6743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 10,
        span: 6743..6744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 227,
        column: 11,
        span: 6744..6745,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 227,
        column: 12,
        span: 6745..6746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 227,
        column: 13,
        span: 6746..6747,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 227,
        column: 14,
        span: 6747..6748,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 227,
        column: 17,
        span: 6749..6751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 19,
        span: 6751..6753,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 227,
        column: 23,
        span: 6754..6757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 227,
        column: 25,
        span: 6758..6759,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 227,
        column: 26,
        span: 6759..6760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 227,
        column: 28,
        span: 6760..6762,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 227,
        column: 29,
        span: 6762..6763,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 227,
        column: 32,
        span: 6764..6766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 34,
        span: 6766..6768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 35,
        span: 6768..6769,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 228,
        column: 8,
        span: 6772..6777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 228,
        column: 12,
        span: 6778..6781,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 14,
        span: 6782..6783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 228,
        column: 19,
        span: 6784..6788,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 228,
        column: 20,
        span: 6788..6789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 228,
        column: 24,
        span: 6789..6793,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 228,
        column: 26,
        span: 6794..6795,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 28,
        span: 6795..6797,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 228,
        column: 30,
        span: 6798..6799,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 0,
        span: 6799..6801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 229,
        column: 5,
        span: 6804..6806,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 229,
        column: 6,
        span: 6806..6807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 229,
        column: 8,
        span: 6808..6809,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 229,
        column: 10,
        span: 6810..6811,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 229,
        column: 12,
        span: 6812..6813,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 229,
        column: 13,
        span: 6812..6814,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 229,
        column: 15,
        span: 6815..6816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 229,
        column: 19,
        span: 6817..6820,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 229,
        column: 20,
        span: 6820..6821,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 229,
        column: 22,
        span: 6821..6823,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 229,
        column: 24,
        span: 6824..6825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 229,
        column: 0,
        span: 6826..6829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 230,
        column: 9,
        span: 6832..6838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 10,
        span: 6838..6839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 230,
        column: 12,
        span: 6839..6841,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 230,
        column: 15,
        span: 6842..6844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 230,
        column: 17,
        span: 6845..6846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 18,
        span: 6846..6847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 9,
        span: 6850..6856,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 10,
        span: 6856..6857,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 11,
        span: 6856..6858,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 231,
        column: 13,
        span: 6859..6860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mz",
        ),
        line: 231,
        column: 16,
        span: 6861..6863,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 231,
        column: 18,
        span: 6864..6865,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 20,
        span: 6865..6867,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 231,
        column: 24,
        span: 6868..6871,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 26,
        span: 6871..6873,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 231,
        column: 28,
        span: 6874..6875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 30,
        span: 6875..6877,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 231,
        column: 32,
        span: 6878..6879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 231,
        column: 34,
        span: 6880..6881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 35,
        span: 6881..6882,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 232,
        column: 8,
        span: 6885..6890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 232,
        column: 12,
        span: 6891..6894,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 232,
        column: 14,
        span: 6895..6896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 232,
        column: 18,
        span: 6897..6900,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 232,
        column: 20,
        span: 6901..6902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "inf",
        ),
        line: 232,
        column: 0,
        span: 6903..6906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 233,
        column: 9,
        span: 6909..6915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 10,
        span: 6915..6916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 233,
        column: 13,
        span: 6916..6919,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 233,
        column: 16,
        span: 6920..6922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 233,
        column: 20,
        span: 6923..6926,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 21,
        span: 6926..6927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 234,
        column: 9,
        span: 6930..6936,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 10,
        span: 6936..6937,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 234,
        column: 13,
        span: 6937..6940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 15,
        span: 6941..6942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 234,
        column: 18,
        span: 6942..6945,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 234,
        column: 20,
        span: 6946..6947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 234,
        column: 24,
        span: 6948..6951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 25,
        span: 6951..6952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 26,
        span: 6952..6953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
        column: 9,
        span: 6956..6962,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 10,
        span: 6962..6963,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 235,
        column: 13,
        span: 6963..6966,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 15,
        span: 6967..6968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 235,
        column: 18,
        span: 6968..6971,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 235,
        column: 21,
        span: 6972..6974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 235,
        column: 25,
        span: 6975..6978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 26,
        span: 6978..6979,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 27,
        span: 6979..6980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 236,
        column: 9,
        span: 6983..6989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 10,
        span: 6989..6990,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 236,
        column: 13,
        span: 6990..6993,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 15,
        span: 6994..6995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 236,
        column: 18,
        span: 6995..6998,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 236,
        column: 20,
        span: 6999..7000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 236,
        column: 24,
        span: 7001..7004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 25,
        span: 7004..7005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 26,
        span: 7005..7006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 9,
        span: 7009..7015,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 10,
        span: 7015..7016,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 237,
        column: 13,
        span: 7016..7019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 15,
        span: 7020..7021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 237,
        column: 18,
        span: 7021..7024,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 237,
        column: 21,
        span: 7025..7027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 237,
        column: 25,
        span: 7028..7031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 26,
        span: 7031..7032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 27,
        span: 7032..7033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 238,
        column: 9,
        span: 7036..7042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 10,
        span: 7042..7043,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 238,
        column: 13,
        span: 7043..7046,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 15,
        span: 7047..7048,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
        column: 16,
        span: 7047..7049,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 238,
        column: 18,
        span: 7050..7051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 238,
        column: 22,
        span: 7052..7055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 23,
        span: 7055..7056,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 238,
        column: 27,
        span: 7057..7060,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 238,
        column: 31,
        span: 7061..7064,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 33,
        span: 7065..7066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 238,
        column: 36,
        span: 7066..7069,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 238,
        column: 38,
        span: 7070..7071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
        column: 40,
        span: 7071..7073,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 41,
        span: 7073..7074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 42,
        span: 7074..7075,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 239,
        column: 8,
        span: 7078..7083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 239,
        column: 13,
        span: 7084..7088,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 239,
        column: 15,
        span: 7089..7090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 17,
        span: 7090..7092,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 239,
        column: 19,
        span: 7093..7094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 239,
        column: 0,
        span: 7094..7096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 9,
        span: 7099..7105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 10,
        span: 7105..7106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 240,
        column: 13,
        span: 7106..7109,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 240,
        column: 16,
        span: 7110..7112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 240,
        column: 21,
        span: 7113..7117,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 240,
        column: 25,
        span: 7118..7121,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 240,
        column: 29,
        span: 7122..7125,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 31,
        span: 7126..7127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 240,
        column: 34,
        span: 7127..7130,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 240,
        column: 37,
        span: 7131..7133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 240,
        column: 42,
        span: 7134..7138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 43,
        span: 7138..7139,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 240,
        column: 47,
        span: 7140..7143,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 240,
        column: 51,
        span: 7144..7147,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 53,
        span: 7148..7149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN1",
        ),
        line: 240,
        column: 57,
        span: 7149..7153,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 240,
        column: 60,
        span: 7154..7156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 240,
        column: 64,
        span: 7157..7160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 65,
        span: 7160..7161,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 66,
        span: 7161..7162,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 241,
        column: 8,
        span: 7165..7170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 241,
        column: 10,
        span: 7171..7172,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 241,
        column: 12,
        span: 7173..7174,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 241,
        column: 14,
        span: 7175..7176,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 241,
        column: 15,
        span: 7176..7177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 242,
        column: 9,
        span: 7180..7186,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 10,
        span: 7186..7187,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 242,
        column: 13,
        span: 7187..7190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 242,
        column: 19,
        span: 7191..7196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 20,
        span: 7196..7197,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 242,
        column: 28,
        span: 7197..7205,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 29,
        span: 7205..7206,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 30,
        span: 7206..7207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 242,
        column: 32,
        span: 7208..7209,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 242,
        column: 33,
        span: 7209..7210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 242,
        column: 36,
        span: 7210..7213,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 242,
        column: 37,
        span: 7213..7214,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 242,
        column: 39,
        span: 7215..7216,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 242,
        column: 41,
        span: 7216..7218,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 242,
        column: 45,
        span: 7219..7222,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 46,
        span: 7222..7223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 47,
        span: 7223..7224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 243,
        column: 9,
        span: 7227..7233,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 10,
        span: 7233..7234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 243,
        column: 11,
        span: 7234..7235,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 243,
        column: 12,
        span: 7235..7236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 243,
        column: 15,
        span: 7236..7239,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 243,
        column: 16,
        span: 7239..7240,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 243,
        column: 19,
        span: 7241..7243,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 243,
        column: 23,
        span: 7244..7247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 24,
        span: 7247..7248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 244,
        column: 4,
        span: 7251..7252,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 244,
        column: 5,
        span: 7252..7253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 6,
        span: 7252..7254,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 244,
        column: 7,
        span: 7254..7255,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 244,
        column: 9,
        span: 7256..7257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 244,
        column: 0,
        span: 7257..7259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 245,
        column: 9,
        span: 7262..7268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 10,
        span: 7268..7269,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 245,
        column: 13,
        span: 7269..7272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 245,
        column: 19,
        span: 7273..7278,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 20,
        span: 7278..7279,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 245,
        column: 28,
        span: 7279..7287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 29,
        span: 7287..7288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 30,
        span: 7288..7289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 245,
        column: 32,
        span: 7290..7291,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 245,
        column: 33,
        span: 7291..7292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 245,
        column: 36,
        span: 7292..7295,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 245,
        column: 37,
        span: 7295..7296,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
        column: 39,
        span: 7297..7298,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 245,
        column: 41,
        span: 7298..7300,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 245,
        column: 45,
        span: 7301..7304,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 46,
        span: 7304..7305,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 47,
        span: 7305..7306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
        column: 9,
        span: 7309..7315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 10,
        span: 7315..7316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 246,
        column: 11,
        span: 7316..7317,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 246,
        column: 12,
        span: 7317..7318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NaN",
        ),
        line: 246,
        column: 15,
        span: 7318..7321,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 246,
        column: 16,
        span: 7321..7322,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 19,
        span: 7323..7325,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 246,
        column: 23,
        span: 7326..7329,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 24,
        span: 7329..7330,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 249,
        column: 8,
        span: 7457..7462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 249,
        column: 11,
        span: 7463..7465,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 12,
        span: 7465..7466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 249,
        column: 15,
        span: 7467..7469,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 16,
        span: 7469..7470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 249,
        column: 19,
        span: 7471..7473,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 20,
        span: 7473..7474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 249,
        column: 23,
        span: 7475..7477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 24,
        span: 7477..7478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a5",
        ),
        line: 249,
        column: 27,
        span: 7479..7481,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 29,
        span: 7482..7483,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 31,
        span: 7483..7485,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 32,
        span: 7485..7486,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 34,
        span: 7486..7488,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 35,
        span: 7488..7489,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\\0\"",
        ),
        line: 249,
        column: 54,
        span: 7490..7508,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 55,
        span: 7508..7509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 249,
        column: 57,
        span: 7509..7511,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 249,
        column: 58,
        span: 7511..7512,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\0\\0\\0\\0\\0\\0\\0\\0\"",
        ),
        line: 249,
        column: 77,
        span: 7513..7531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 250,
        column: 9,
        span: 7534..7540,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 250,
        column: 10,
        span: 7540..7541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 250,
        column: 12,
        span: 7541..7543,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 250,
        column: 15,
        span: 7544..7546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 250,
        column: 18,
        span: 7547..7549,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 250,
        column: 22,
        span: 7550..7553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a2",
        ),
        line: 250,
        column: 25,
        span: 7554..7556,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 250,
        column: 28,
        span: 7557..7559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        line: 250,
        column: 31,
        span: 7560..7562,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 250,
        column: 35,
        span: 7563..7566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        line: 250,
        column: 38,
        span: 7567..7569,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 250,
        column: 41,
        span: 7570..7572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 250,
        column: 44,
        span: 7573..7575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 250,
        column: 45,
        span: 7575..7576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 251,
        column: 9,
        span: 7579..7585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 10,
        span: 7585..7586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        line: 251,
        column: 12,
        span: 7586..7588,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 251,
        column: 15,
        span: 7589..7591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a5",
        ),
        line: 251,
        column: 18,
        span: 7592..7594,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 19,
        span: 7594..7595,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 252,
        column: 0,
        span: 7596..7599,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 255,
        column: 3,
        span: 7602..7604,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 255,
        column: 7,
        span: 7605..7608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 255,
        column: 13,
        span: 7609..7614,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 255,
        column: 0,
        span: 7615..7619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 256,
        column: 8,
        span: 7622..7627,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 9,
        span: 7627..7628,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing 'math.random'\"",
        ),
        line: 256,
        column: 32,
        span: 7628..7651,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 33,
        span: 7651..7652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 257,
        column: 7,
        span: 7655..7659,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 257,
        column: 8,
        span: 7659..7660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "randomseed",
        ),
        line: 257,
        column: 18,
        span: 7660..7670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 19,
        span: 7670..7671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 20,
        span: 7670..7672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 21,
        span: 7672..7673,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 259,
        column: 8,
        span: 7677..7682,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 259,
        column: 17,
        span: 7683..7691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 259,
        column: 21,
        span: 7692..7695,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 22,
        span: 7695..7696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 259,
        column: 24,
        span: 7696..7698,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 25,
        span: 7698..7699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 259,
        column: 28,
        span: 7700..7702,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 29,
        span: 7702..7703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 259,
        column: 31,
        span: 7704..7705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 32,
        span: 7705..7706,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 260,
        column: 10,
        span: 7711..7716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 260,
        column: 14,
        span: 7717..7720,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 260,
        column: 16,
        span: 7721..7722,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 260,
        column: 18,
        span: 7723..7724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 260,
        column: 22,
        span: 7724..7728,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 260,
        column: 23,
        span: 7728..7729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 260,
        column: 0,
        span: 7729..7733,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 261,
        column: 10,
        span: 7738..7743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 261,
        column: 14,
        span: 7744..7747,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 16,
        span: 7748..7749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 261,
        column: 21,
        span: 7750..7754,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 261,
        column: 22,
        span: 7754..7755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "huge",
        ),
        line: 261,
        column: 0,
        span: 7755..7759,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 262,
        column: 8,
        span: 7764..7767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 262,
        column: 10,
        span: 7768..7769,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 12,
        span: 7770..7771,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 14,
        span: 7771..7773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 15,
        span: 7773..7774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20000",
                    after_decimal: "",
                },
            ),
        ),
        line: 262,
        column: 21,
        span: 7774..7780,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 262,
        column: 0,
        span: 7781..7783,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 263,
        column: 12,
        span: 7790..7795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 263,
        column: 14,
        span: 7796..7797,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 263,
        column: 16,
        span: 7798..7799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 263,
        column: 21,
        span: 7800..7804,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 263,
        column: 22,
        span: 7804..7805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 263,
        column: 28,
        span: 7805..7811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 29,
        span: 7811..7812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 263,
        column: 34,
        span: 7812..7817,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 263,
        column: 35,
        span: 7817..7818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 263,
        column: 41,
        span: 7818..7824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 42,
        span: 7824..7825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 263,
        column: 43,
        span: 7825..7826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 44,
        span: 7826..7827,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 45,
        span: 7827..7828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 264,
        column: 10,
        span: 7835..7838,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 12,
        span: 7839..7840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 264,
        column: 17,
        span: 7841..7845,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 264,
        column: 18,
        span: 7845..7846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 264,
        column: 21,
        span: 7846..7849,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 264,
        column: 22,
        span: 7849..7850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 264,
        column: 25,
        span: 7850..7853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 264,
        column: 26,
        span: 7853..7854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 264,
        column: 28,
        span: 7855..7856,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 264,
        column: 29,
        span: 7856..7857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 265,
        column: 10,
        span: 7864..7867,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 12,
        span: 7868..7869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 265,
        column: 17,
        span: 7870..7874,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 18,
        span: 7874..7875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "min",
        ),
        line: 265,
        column: 21,
        span: 7875..7878,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 22,
        span: 7878..7879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 265,
        column: 25,
        span: 7879..7882,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 26,
        span: 7882..7883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 265,
        column: 28,
        span: 7884..7885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 29,
        span: 7885..7886,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 266,
        column: 9,
        span: 7893..7895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 266,
        column: 12,
        span: 7896..7898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 13,
        span: 7898..7899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 266,
        column: 16,
        span: 7899..7902,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 17,
        span: 7902..7903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 266,
        column: 20,
        span: 7904..7906,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 21,
        span: 7906..7907,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 266,
        column: 27,
        span: 7907..7913,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 28,
        span: 7913..7914,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 266,
        column: 32,
        span: 7915..7918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "eq",
        ),
        line: 266,
        column: 35,
        span: 7919..7921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 36,
        span: 7921..7922,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 266,
        column: 39,
        span: 7922..7925,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 40,
        span: 7925..7926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 266,
        column: 43,
        span: 7927..7929,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 266,
        column: 44,
        span: 7929..7930,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".001",
                },
            ),
        ),
        line: 266,
        column: 50,
        span: 7930..7936,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 51,
        span: 7936..7937,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 266,
        column: 0,
        span: 7938..7942,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 267,
        column: 0,
        span: 7949..7952,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 268,
        column: 0,
        span: 7957..7960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 270,
        column: 11,
        span: 8011..8017,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 12,
        span: 8017..8018,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 270,
        column: 17,
        span: 8018..8023,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 18,
        span: 8023..8024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
        column: 11,
        span: 8029..8035,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 12,
        span: 8035..8036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x1",
        ),
        line: 271,
        column: 14,
        span: 8036..8038,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 271,
        column: 17,
        span: 8039..8041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Min",
        ),
        line: 271,
        column: 21,
        span: 8042..8045,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 271,
        column: 25,
        span: 8046..8049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Max",
        ),
        line: 271,
        column: 29,
        span: 8050..8053,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 271,
        column: 32,
        span: 8054..8056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x2",
        ),
        line: 271,
        column: 35,
        span: 8057..8059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 36,
        span: 8059..8060,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 272,
        column: 0,
        span: 8063..8066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 274,
        column: 6,
        span: 8070..8073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 7,
        span: 8073..8074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 8,
        span: 8073..8075,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 9,
        span: 8075..8076,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 11,
        span: 8076..8078,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 274,
        column: 12,
        span: 8078..8079,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 274,
        column: 14,
        span: 8080..8081,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 274,
        column: 15,
        span: 8081..8082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 16,
        span: 8082..8083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "aux",
        ),
        line: 275,
        column: 6,
        span: 8086..8089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 275,
        column: 7,
        span: 8089..8090,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 275,
        column: 8,
        span: 8090..8091,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 10,
        span: 8090..8093,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 11,
        span: 8093..8094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 13,
        span: 8094..8096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 14,
        span: 8096..8097,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 275,
        column: 16,
        span: 8098..8099,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 275,
        column: 18,
        span: 8100..8101,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 20,
        span: 8100..8103,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 275,
        column: 21,
        span: 8103..8104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 275,
        column: 23,
        span: 8104..8106,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 275,
        column: 25,
        span: 8107..8108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 275,
        column: 26,
        span: 8108..8109,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 276,
        column: 0,
        span: 8110..8113,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 278,
        column: 4,
        span: 8115..8118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 278,
        column: 6,
        span: 8119..8120,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 278,
        column: 8,
        span: 8121..8122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 10,
        span: 8122..8124,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 278,
        column: 11,
        span: 8124..8125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 278,
        column: 14,
        span: 8125..8128,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 278,
        column: 0,
        span: 8129..8131,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 279,
        column: 8,
        span: 8134..8139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 279,
        column: 10,
        span: 8140..8141,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 279,
        column: 12,
        span: 8142..8143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 279,
        column: 17,
        span: 8144..8148,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 279,
        column: 18,
        span: 8148..8149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "random",
        ),
        line: 279,
        column: 24,
        span: 8149..8155,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 25,
        span: 8155..8156,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 26,
        span: 8155..8157,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 27,
        span: 8157..8158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 280,
        column: 9,
        span: 8161..8167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 10,
        span: 8167..8168,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 11,
        span: 8167..8169,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 280,
        column: 14,
        span: 8170..8172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 280,
        column: 16,
        span: 8173..8174,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 280,
        column: 20,
        span: 8175..8178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 280,
        column: 22,
        span: 8179..8180,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 280,
        column: 25,
        span: 8181..8183,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 280,
        column: 27,
        span: 8183..8185,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 28,
        span: 8185..8186,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 281,
        column: 0,
        span: 8187..8190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 284,
        column: 6,
        span: 8193..8198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 7,
        span: 8198..8199,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 284,
        column: 11,
        span: 8199..8203,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 12,
        span: 8203..8204,
    },
]
