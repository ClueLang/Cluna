---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/goto.lua
---
[
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 1,
        column: 5,
        span: 0..5,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 1,
        column: 14,
        span: 6..14,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 1,
        column: 21,
        span: 15..21,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 1,
        column: 22,
        span: 21..22,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 1,
        column: 26,
        span: 22..26,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 1,
        column: 27,
        span: 26..27,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 1,
        column: 29,
        span: 28..29,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 1,
        column: 30,
        span: 29..30,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 2,
        column: 8,
        span: 33..38,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 2,
        column: 11,
        span: 39..41,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 2,
        column: 12,
        span: 41..42,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 2,
        column: 16,
        span: 43..46,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 2,
        column: 18,
        span: 47..48,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 2,
        column: 23,
        span: 49..53,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 2,
        column: 24,
        span: 53..54,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        line: 2,
        column: 28,
        span: 54..58,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 2,
        column: 29,
        span: 58..59,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 3,
        column: 9,
        span: 62..68,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 3,
        column: 10,
        span: 68..69,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 3,
        column: 13,
        span: 69..72,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 3,
        column: 16,
        span: 73..75,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 3,
        column: 20,
        span: 76..79,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 3,
        column: 27,
        span: 80..86,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 3,
        column: 28,
        span: 86..87,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 3,
        column: 32,
        span: 87..91,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 3,
        column: 33,
        span: 91..92,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 3,
        column: 36,
        span: 92..95,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 3,
        column: 37,
        span: 95..96,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 3,
        column: 39,
        span: 97..98,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 3,
        column: 40,
        span: 98..99,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 3,
        column: 41,
        span: 99..100,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 4,
        column: 0,
        span: 101..104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 7,
        column: 7,
        span: 139..145,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 8,
        span: 145..146,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ goto l1; do ::l1:: end ]]",
        ),
        line: 7,
        column: 36,
        span: 146..174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 7,
        column: 37,
        span: 174..175,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 7,
        column: 50,
        span: 176..188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 51,
        span: 188..189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 8,
        column: 7,
        span: 190..196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 8,
        span: 196..197,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ do ::l1:: end goto l1; ]]",
        ),
        line: 8,
        column: 36,
        span: 197..225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 8,
        column: 37,
        span: 225..226,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 8,
        column: 50,
        span: 227..239,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 51,
        span: 239..240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 11,
        column: 7,
        span: 260..266,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 8,
        span: 266..267,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ ::l1:: ::l1:: ]]",
        ),
        line: 11,
        column: 27,
        span: 267..286,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 11,
        column: 28,
        span: 286..287,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 11,
        column: 41,
        span: 288..300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 42,
        span: 300..301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 15,
        column: 7,
        span: 323..329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 8,
        span: 329..330,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ goto l1; local aa ::l1:: ::l2:: print(3) ]]",
        ),
        line: 15,
        column: 54,
        span: 330..376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 15,
        column: 55,
        span: 376..377,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aa'\"",
        ),
        line: 15,
        column: 68,
        span: 378..390,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 69,
        span: 390..391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 18,
        column: 7,
        span: 429..435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 8,
        span: 435..436,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\ndo local bb, cc;  end\nlocal aa\n print(3)\n]]",
        ),
        line: 22,
        column: 3,
        span: 436..482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 22,
        column: 4,
        span: 482..483,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'aa'\"",
        ),
        line: 22,
        column: 17,
        span: 484..496,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 18,
        span: 496..497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 25,
        column: 7,
        span: 523..529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 8,
        span: 529..530,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ do ::l1:: end goto l1 ]]",
        ),
        line: 25,
        column: 35,
        span: 530..557,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 25,
        column: 36,
        span: 557..558,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 25,
        column: 49,
        span: 559..571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 50,
        span: 571..572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 26,
        column: 7,
        span: 573..579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 579..580,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ goto l1 do ::l1:: end ]]",
        ),
        line: 26,
        column: 35,
        span: 580..607,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 36,
        span: 607..608,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"label 'l1'\"",
        ),
        line: 26,
        column: 49,
        span: 609..621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 50,
        span: 621..622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "errmsg",
        ),
        line: 29,
        column: 7,
        span: 673..679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 8,
        span: 679..680,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  repeat\n    if x then  end\n    local xuxu = 10\n\n  until xuxu < x\n]]",
        ),
        line: 35,
        column: 3,
        span: 680..751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 4,
        span: 751..752,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local 'xuxu'\"",
        ),
        line: 35,
        column: 19,
        span: 753..767,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 20,
        span: 767..768,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 38,
        column: 6,
        span: 786..791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 38,
        column: 0,
        span: 792..793,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 39,
        column: 0,
        span: 794..796,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 40,
        column: 8,
        span: 799..804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 40,
        column: 10,
        span: 805..806,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 40,
        column: 12,
        span: 807..808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 40,
        column: 0,
        span: 808..811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 43,
        column: 4,
        span: 816..817,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 6,
        span: 818..819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 43,
        column: 8,
        span: 820..821,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 43,
        column: 10,
        span: 822..823,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 43,
        column: 12,
        span: 823..825,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 43,
        column: 13,
        span: 825..826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 45,
        column: 4,
        span: 830..831,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 6,
        span: 832..833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 45,
        column: 8,
        span: 834..835,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 45,
        column: 9,
        span: 835..836,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 46,
        column: 0,
        span: 837..840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 49,
        column: 7,
        span: 843..849,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 49,
        column: 8,
        span: 849..850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 49,
        column: 9,
        span: 850..851,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 49,
        column: 12,
        span: 852..854,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 15,
        span: 854..857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 49,
        column: 16,
        span: 857..858,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 53,
        column: 0,
        span: 876..878,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 54,
        column: 8,
        span: 881..886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 54,
        column: 13,
        span: 887..891,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 15,
        span: 892..893,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  do\n    local a = 1\n     a = a + 1\n    a = a + 10\n     a = a + 2\n    a = a + 20\n    return a\n  end\n  ]]",
        ),
        line: 63,
        column: 5,
        span: 894..1001,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 64,
        column: 8,
        span: 1004..1009,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 64,
        column: 14,
        span: 1010..1015,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 16,
        span: 1016..1017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 64,
        column: 23,
        span: 1018..1024,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
        column: 24,
        span: 1024..1025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 64,
        column: 27,
        span: 1025..1028,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 28,
        span: 1028..1029,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0123456789\"",
        ),
        line: 64,
        column: 40,
        span: 1029..1041,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 41,
        span: 1041..1042,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        line: 64,
        column: 44,
        span: 1042..1045,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 45,
        span: 1045..1046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 65,
        column: 7,
        span: 1049..1053,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 65,
        column: 9,
        span: 1054..1055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 65,
        column: 16,
        span: 1056..1062,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 17,
        span: 1062..1063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 65,
        column: 23,
        span: 1063..1069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 24,
        span: 1069..1070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 65,
        column: 28,
        span: 1070..1074,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 29,
        span: 1074..1075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 65,
        column: 35,
        span: 1076..1081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 36,
        span: 1081..1082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 65,
        column: 42,
        span: 1083..1088,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 43,
        span: 1088..1089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 65,
        column: 49,
        span: 1090..1095,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 50,
        span: 1095..1096,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "label",
        ),
        line: 65,
        column: 56,
        span: 1097..1102,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 57,
        span: 1102..1103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
        column: 9,
        span: 1106..1112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 10,
        span: 1112..1113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
        column: 16,
        span: 1113..1119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 17,
        span: 1119..1120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        line: 66,
        column: 21,
        span: 1120..1124,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 22,
        span: 1124..1125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        line: 66,
        column: 26,
        span: 1125..1129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 27,
        span: 1129..1130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 28,
        span: 1130..1131,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 29,
        span: 1131..1132,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 30,
        span: 1132..1133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 66,
        column: 33,
        span: 1134..1136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 36,
        span: 1136..1139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 37,
        span: 1139..1140,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 67,
        column: 0,
        span: 1141..1144,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 70,
        column: 0,
        span: 1176..1178,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 72,
        column: 4,
        span: 1180..1183,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 75,
        column: 0,
        span: 1279..1281,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 76,
        column: 8,
        span: 1284..1289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 76,
        column: 10,
        span: 1290..1291,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 76,
        column: 12,
        span: 1292..1293,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 76,
        column: 0,
        span: 1293..1296,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 77,
        column: 4,
        span: 1299..1300,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 77,
        column: 6,
        span: 1301..1302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 77,
        column: 0,
        span: 1303..1304,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 79,
        column: 4,
        span: 1308..1309,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 80,
        column: 0,
        span: 1310..1313,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 82,
        column: 6,
        span: 1315..1320,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 82,
        column: 11,
        span: 1321..1325,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 82,
        column: 0,
        span: 1326..1328,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 85,
        column: 8,
        span: 1412..1417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 85,
        column: 10,
        span: 1418..1419,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 12,
        span: 1420..1421,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 85,
        column: 0,
        span: 1421..1424,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 87,
        column: 4,
        span: 1428..1429,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 87,
        column: 5,
        span: 1429..1430,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 87,
        column: 6,
        span: 1430..1431,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 88,
        column: 0,
        span: 1432..1435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 90,
        column: 7,
        span: 1437..1443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 90,
        column: 8,
        span: 1443..1444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 90,
        column: 9,
        span: 1444..1445,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 90,
        column: 12,
        span: 1446..1448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 90,
        column: 15,
        span: 1448..1451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 90,
        column: 16,
        span: 1451..1452,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 92,
        column: 3,
        span: 1454..1456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 92,
        column: 9,
        span: 1457..1462,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 92,
        column: 0,
        span: 1463..1467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 94,
        column: 8,
        span: 1518..1523,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 9,
        span: 1523..1524,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should not be here\"",
        ),
        line: 94,
        column: 29,
        span: 1524..1544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 30,
        span: 1544..1545,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 96,
        column: 8,
        span: 1596..1601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 96,
        column: 0,
        span: 1602..1603,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 98,
        column: 4,
        span: 1607..1608,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 99,
        column: 4,
        span: 1611..1612,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 99,
        column: 5,
        span: 1612..1613,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 100,
        column: 0,
        span: 1614..1618,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 101,
        column: 0,
        span: 1619..1622,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 104,
        column: 6,
        span: 1675..1680,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 104,
        column: 15,
        span: 1681..1689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 104,
        column: 19,
        span: 1690..1693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 20,
        span: 1693..1694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 21,
        span: 1694..1695,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 105,
        column: 8,
        span: 1698..1703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 105,
        column: 10,
        span: 1704..1705,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 12,
        span: 1706..1707,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 105,
        column: 14,
        span: 1708..1709,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 105,
        column: 15,
        span: 1709..1710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
        column: 4,
        span: 1715..1716,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 108,
        column: 5,
        span: 1716..1717,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 108,
        column: 6,
        span: 1717..1718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
        column: 7,
        span: 1718..1719,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 108,
        column: 9,
        span: 1720..1721,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 11,
        span: 1721..1723,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 108,
        column: 12,
        span: 1723..1724,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
        column: 14,
        span: 1725..1726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 16,
        span: 1726..1728,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 108,
        column: 17,
        span: 1728..1729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 110,
        column: 4,
        span: 1733..1734,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 110,
        column: 5,
        span: 1734..1735,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 110,
        column: 6,
        span: 1735..1736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 110,
        column: 7,
        span: 1736..1737,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 110,
        column: 9,
        span: 1738..1739,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 11,
        span: 1739..1741,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 110,
        column: 12,
        span: 1741..1742,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 14,
        span: 1743..1744,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 110,
        column: 16,
        span: 1744..1746,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 110,
        column: 17,
        span: 1746..1747,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 113,
        column: 4,
        span: 1752..1753,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 113,
        column: 5,
        span: 1753..1754,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 113,
        column: 6,
        span: 1754..1755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 113,
        column: 7,
        span: 1755..1756,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 113,
        column: 9,
        span: 1757..1758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 11,
        span: 1758..1760,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 113,
        column: 12,
        span: 1760..1761,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 113,
        column: 14,
        span: 1762..1763,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 113,
        column: 16,
        span: 1763..1765,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 113,
        column: 17,
        span: 1765..1766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 4,
        span: 1770..1771,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 115,
        column: 5,
        span: 1771..1772,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 115,
        column: 6,
        span: 1772..1773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 115,
        column: 7,
        span: 1773..1774,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 115,
        column: 9,
        span: 1775..1776,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 11,
        span: 1776..1778,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 115,
        column: 12,
        span: 1778..1779,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 115,
        column: 14,
        span: 1780..1781,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 115,
        column: 16,
        span: 1781..1783,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 115,
        column: 17,
        span: 1783..1784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 4,
        span: 1788..1789,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 117,
        column: 5,
        span: 1789..1790,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 117,
        column: 6,
        span: 1790..1791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 7,
        span: 1791..1792,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 117,
        column: 9,
        span: 1793..1794,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 11,
        span: 1794..1796,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 117,
        column: 12,
        span: 1796..1797,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 117,
        column: 14,
        span: 1798..1799,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 117,
        column: 16,
        span: 1799..1801,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 117,
        column: 17,
        span: 1801..1802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
        column: 9,
        span: 1806..1812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 10,
        span: 1812..1813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 11,
        span: 1813..1814,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 12,
        span: 1814..1815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 13,
        span: 1814..1816,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 14,
        span: 1816..1817,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 17,
        span: 1818..1820,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 19,
        span: 1820..1822,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 119,
        column: 23,
        span: 1823..1826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 25,
        span: 1827..1828,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 26,
        span: 1828..1829,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 27,
        span: 1828..1830,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 28,
        span: 1830..1831,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 31,
        span: 1832..1834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 33,
        span: 1834..1836,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 119,
        column: 37,
        span: 1837..1840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 119,
        column: 39,
        span: 1841..1842,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 40,
        span: 1842..1843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 41,
        span: 1842..1844,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 42,
        span: 1844..1845,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 45,
        span: 1846..1848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 47,
        span: 1848..1850,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 119,
        column: 0,
        span: 1851..1854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 6,
        span: 1859..1860,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
        column: 7,
        span: 1860..1861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 8,
        span: 1860..1862,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
        column: 9,
        span: 1862..1863,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 12,
        span: 1864..1866,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 14,
        span: 1866..1868,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 120,
        column: 18,
        span: 1869..1872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 20,
        span: 1873..1874,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 120,
        column: 21,
        span: 1874..1875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 22,
        span: 1874..1876,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 120,
        column: 23,
        span: 1876..1877,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 120,
        column: 26,
        span: 1878..1880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 120,
        column: 28,
        span: 1880..1882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 120,
        column: 29,
        span: 1882..1883,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 121,
        column: 5,
        span: 1886..1888,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 121,
        column: 9,
        span: 1889..1892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 121,
        column: 11,
        span: 1893..1894,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 121,
        column: 12,
        span: 1894..1895,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 121,
        column: 13,
        span: 1894..1896,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 121,
        column: 14,
        span: 1896..1897,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 121,
        column: 0,
        span: 1898..1902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 122,
        column: 6,
        span: 1907..1908,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 122,
        column: 7,
        span: 1908..1909,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 8,
        span: 1908..1910,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 122,
        column: 9,
        span: 1910..1911,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 122,
        column: 11,
        span: 1912..1913,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 122,
        column: 16,
        span: 1914..1918,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 122,
        column: 17,
        span: 1918..1919,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 123,
        column: 6,
        span: 1922..1925,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 124,
        column: 0,
        span: 1941..1944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 127,
        column: 4,
        span: 1947..1950,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 5,
        span: 1950..1951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 6,
        span: 1951..1952,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 134,
        column: 6,
        span: 2069..2074,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 134,
        column: 15,
        span: 2075..2083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 134,
        column: 19,
        span: 2084..2087,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 20,
        span: 2087..2088,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 21,
        span: 2088..2089,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 135,
        column: 8,
        span: 2092..2097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 135,
        column: 10,
        span: 2098..2099,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 135,
        column: 12,
        span: 2100..2101,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 135,
        column: 14,
        span: 2102..2103,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 135,
        column: 15,
        span: 2103..2104,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 136,
        column: 0,
        span: 2107..2109,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 137,
        column: 10,
        span: 2114..2119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 137,
        column: 12,
        span: 2120..2121,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 14,
        span: 2122..2123,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 0,
        span: 2123..2125,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 138,
        column: 10,
        span: 2130..2135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 138,
        column: 12,
        span: 2136..2137,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 14,
        span: 2138..2139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 0,
        span: 2139..2141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 139,
        column: 6,
        span: 2146..2147,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 139,
        column: 7,
        span: 2147..2148,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 139,
        column: 8,
        span: 2147..2149,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 139,
        column: 9,
        span: 2149..2150,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 139,
        column: 11,
        span: 2151..2152,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 139,
        column: 20,
        span: 2153..2161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 21,
        span: 2161..2162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 139,
        column: 22,
        span: 2162..2163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 23,
        span: 2163..2164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 139,
        column: 25,
        span: 2165..2166,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 139,
        column: 27,
        span: 2167..2168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 139,
        column: 29,
        span: 2169..2170,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 139,
        column: 0,
        span: 2171..2174,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 141,
        column: 0,
        span: 2180..2182,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 142,
        column: 12,
        span: 2189..2194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 142,
        column: 0,
        span: 2195..2196,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 143,
        column: 9,
        span: 2203..2205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 143,
        column: 11,
        span: 2206..2207,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 143,
        column: 13,
        span: 2208..2209,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 15,
        span: 2209..2211,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 143,
        column: 20,
        span: 2212..2216,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 143,
        column: 0,
        span: 2217..2220,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 144,
        column: 8,
        span: 2227..2228,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 144,
        column: 9,
        span: 2228..2229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 144,
        column: 10,
        span: 2229..2230,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 144,
        column: 11,
        span: 2230..2231,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 144,
        column: 13,
        span: 2232..2233,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 144,
        column: 22,
        span: 2234..2242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 23,
        span: 2242..2243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 144,
        column: 24,
        span: 2243..2244,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 25,
        span: 2244..2245,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 144,
        column: 28,
        span: 2246..2248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 144,
        column: 30,
        span: 2249..2250,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 144,
        column: 35,
        span: 2251..2255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 144,
        column: 37,
        span: 2256..2257,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 144,
        column: 39,
        span: 2258..2259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 144,
        column: 41,
        span: 2260..2261,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 144,
        column: 46,
        span: 2262..2266,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 144,
        column: 53,
        span: 2267..2273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 144,
        column: 55,
        span: 2274..2275,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 144,
        column: 57,
        span: 2276..2277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 144,
        column: 59,
        span: 2278..2279,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 144,
        column: 63,
        span: 2280..2283,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 144,
        column: 0,
        span: 2284..2287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 145,
        column: 8,
        span: 2294..2295,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 10,
        span: 2296..2297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 145,
        column: 12,
        span: 2298..2299,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 145,
        column: 14,
        span: 2300..2301,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 0,
        span: 2301..2303,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 146,
        column: 0,
        span: 2308..2311,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 147,
        column: 0,
        span: 2314..2317,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 149,
        column: 9,
        span: 2321..2327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 149,
        column: 0,
        span: 2328..2329,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 150,
        column: 0,
        span: 2330..2333,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 152,
        column: 6,
        span: 2335..2340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 152,
        column: 8,
        span: 2341..2342,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 152,
        column: 10,
        span: 2343..2344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 152,
        column: 14,
        span: 2345..2348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 15,
        span: 2348..2349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 16,
        span: 2349..2350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 153,
        column: 2,
        span: 2351..2352,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 153,
        column: 3,
        span: 2352..2353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 4,
        span: 2352..2354,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 153,
        column: 5,
        span: 2354..2355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 6,
        span: 2355..2356,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 8,
        span: 2355..2358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 9,
        span: 2358..2359,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 153,
        column: 10,
        span: 2359..2360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 153,
        column: 12,
        span: 2361..2362,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 153,
        column: 13,
        span: 2362..2363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 14,
        span: 2362..2364,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 153,
        column: 15,
        span: 2364..2365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 16,
        span: 2365..2366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 18,
        span: 2365..2368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 19,
        span: 2368..2369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 7,
        span: 2370..2376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 8,
        span: 2376..2377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 154,
        column: 9,
        span: 2377..2378,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 154,
        column: 10,
        span: 2378..2379,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 11,
        span: 2378..2380,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 154,
        column: 12,
        span: 2380..2381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 13,
        span: 2381..2382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 14,
        span: 2382..2383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 17,
        span: 2384..2386,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 20,
        span: 2386..2389,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 154,
        column: 24,
        span: 2390..2393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 154,
        column: 26,
        span: 2394..2395,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 154,
        column: 27,
        span: 2395..2396,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 28,
        span: 2395..2397,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 154,
        column: 29,
        span: 2397..2398,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 30,
        span: 2398..2399,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 31,
        span: 2399..2400,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 34,
        span: 2401..2403,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 37,
        span: 2403..2406,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 154,
        column: 41,
        span: 2407..2410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 154,
        column: 43,
        span: 2411..2412,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 154,
        column: 44,
        span: 2412..2413,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 45,
        span: 2412..2414,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 154,
        column: 46,
        span: 2414..2415,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 49,
        span: 2416..2418,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 154,
        column: 53,
        span: 2419..2422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 54,
        span: 2422..2423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 155,
        column: 2,
        span: 2424..2425,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 155,
        column: 3,
        span: 2425..2426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 4,
        span: 2425..2427,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 155,
        column: 5,
        span: 2427..2428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 6,
        span: 2428..2429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 8,
        span: 2428..2431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 9,
        span: 2431..2432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
        column: 7,
        span: 2433..2439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 8,
        span: 2439..2440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 156,
        column: 9,
        span: 2440..2441,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 156,
        column: 10,
        span: 2441..2442,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 11,
        span: 2441..2443,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 156,
        column: 12,
        span: 2443..2444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 13,
        span: 2444..2445,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 14,
        span: 2445..2446,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 156,
        column: 17,
        span: 2447..2449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 20,
        span: 2449..2452,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 156,
        column: 24,
        span: 2453..2456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 156,
        column: 26,
        span: 2457..2458,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 156,
        column: 27,
        span: 2458..2459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 28,
        span: 2458..2460,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 156,
        column: 29,
        span: 2460..2461,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 30,
        span: 2461..2462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 31,
        span: 2462..2463,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 156,
        column: 34,
        span: 2464..2466,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 37,
        span: 2466..2469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 38,
        span: 2469..2470,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 161,
        column: 6,
        span: 2570..2575,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 161,
        column: 15,
        span: 2576..2584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 161,
        column: 21,
        span: 2585..2590,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 22,
        span: 2590..2591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 161,
        column: 23,
        span: 2591..2592,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 24,
        span: 2592..2593,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 162,
        column: 5,
        span: 2596..2598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 162,
        column: 7,
        span: 2599..2600,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 162,
        column: 10,
        span: 2601..2603,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 162,
        column: 12,
        span: 2603..2605,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 162,
        column: 0,
        span: 2606..2610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 163,
        column: 10,
        span: 2615..2620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 11,
        span: 2620..2621,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 163,
        column: 34,
        span: 2621..2644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 35,
        span: 2644..2645,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 164,
        column: 9,
        span: 2648..2654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 164,
        column: 11,
        span: 2655..2656,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 164,
        column: 14,
        span: 2657..2659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 164,
        column: 16,
        span: 2659..2661,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 164,
        column: 0,
        span: 2662..2666,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 166,
        column: 9,
        span: 2670..2676,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 166,
        column: 11,
        span: 2677..2678,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 166,
        column: 14,
        span: 2679..2681,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 16,
        span: 2681..2683,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 166,
        column: 0,
        span: 2684..2688,
    },
    Token {
        kind: ElseIf,
        lexeme: Symbol(
            "elseif",
        ),
        line: 168,
        column: 9,
        span: 2692..2698,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 168,
        column: 11,
        span: 2699..2700,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 168,
        column: 14,
        span: 2701..2703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 168,
        column: 16,
        span: 2703..2705,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 168,
        column: 0,
        span: 2706..2710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 170,
        column: 10,
        span: 2745..2750,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 11,
        span: 2750..2751,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 170,
        column: 34,
        span: 2751..2774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 35,
        span: 2774..2775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 172,
        column: 6,
        span: 2781..2782,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 172,
        column: 8,
        span: 2783..2784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 172,
        column: 10,
        span: 2785..2786,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 172,
        column: 12,
        span: 2787..2788,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 172,
        column: 14,
        span: 2788..2790,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 173,
        column: 0,
        span: 2816..2820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 174,
        column: 6,
        span: 2825..2826,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 8,
        span: 2827..2828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 174,
        column: 10,
        span: 2829..2830,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 174,
        column: 12,
        span: 2831..2832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 174,
        column: 14,
        span: 2832..2834,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 174,
        column: 15,
        span: 2834..2835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 175,
        column: 10,
        span: 2840..2845,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 11,
        span: 2845..2846,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 175,
        column: 34,
        span: 2846..2869,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 35,
        span: 2869..2870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        line: 178,
        column: 10,
        span: 2877..2882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 11,
        span: 2882..2883,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"should never be here!\"",
        ),
        line: 178,
        column: 34,
        span: 2883..2906,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 35,
        span: 2906..2907,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 179,
        column: 0,
        span: 2910..2913,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 180,
        column: 5,
        span: 2916..2918,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 180,
        column: 12,
        span: 2919..2925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 180,
        column: 14,
        span: 2926..2927,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 180,
        column: 0,
        span: 2928..2931,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 182,
        column: 5,
        span: 2935..2937,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 182,
        column: 12,
        span: 2938..2944,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 182,
        column: 16,
        span: 2945..2948,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 182,
        column: 0,
        span: 2949..2952,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 184,
        column: 5,
        span: 2956..2958,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 184,
        column: 12,
        span: 2959..2965,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 184,
        column: 16,
        span: 2966..2969,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 184,
        column: 0,
        span: 2970..2973,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 186,
        column: 9,
        span: 2977..2983,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 186,
        column: 13,
        span: 2984..2987,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 187,
        column: 0,
        span: 2988..2991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 189,
        column: 7,
        span: 2993..2999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 8,
        span: 2999..3000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 189,
        column: 13,
        span: 3000..3005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 14,
        span: 3005..3006,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 15,
        span: 3005..3007,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 16,
        span: 3007..3008,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 189,
        column: 19,
        span: 3009..3011,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        line: 189,
        column: 23,
        span: 3012..3015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 24,
        span: 3015..3016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
        column: 7,
        span: 3017..3023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 8,
        span: 3023..3024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 190,
        column: 13,
        span: 3024..3029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 14,
        span: 3029..3030,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 190,
        column: 15,
        span: 3029..3031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 16,
        span: 3031..3032,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 190,
        column: 19,
        span: 3033..3035,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        line: 190,
        column: 23,
        span: 3036..3039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 24,
        span: 3039..3040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 7,
        span: 3041..3047,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 8,
        span: 3047..3048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 191,
        column: 13,
        span: 3048..3053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 14,
        span: 3053..3054,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 191,
        column: 15,
        span: 3053..3055,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 16,
        span: 3055..3056,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
        column: 19,
        span: 3057..3059,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 191,
        column: 23,
        span: 3060..3063,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 24,
        span: 3063..3064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 7,
        span: 3065..3071,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 8,
        span: 3071..3072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 192,
        column: 13,
        span: 3072..3077,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 14,
        span: 3077..3078,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 15,
        span: 3077..3079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 16,
        span: 3079..3080,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 192,
        column: 19,
        span: 3081..3083,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 192,
        column: 21,
        span: 3083..3085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 22,
        span: 3085..3086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 7,
        span: 3087..3093,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 8,
        span: 3093..3094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testG",
        ),
        line: 193,
        column: 13,
        span: 3094..3099,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 14,
        span: 3099..3100,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 15,
        span: 3099..3101,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 16,
        span: 3101..3102,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 193,
        column: 19,
        span: 3103..3105,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 22,
        span: 3105..3108,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 23,
        span: 3108..3109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 197,
        column: 6,
        span: 3193..3198,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 197,
        column: 11,
        span: 3199..3203,
    },
]
