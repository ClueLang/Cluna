---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.2-tests/attrib.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 4,
        column: 3,
        span: 120..122,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 4,
        column: 7,
        span: 123..126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 4,
        column: 13,
        span: 127..132,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 4,
        column: 18,
        span: 133..137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 6,
        column: 6,
        span: 143..148,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing require\"",
        ),
        line: 6,
        column: 24,
        span: 149..166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 7,
        span: 168..174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 8,
        span: 174..175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 8,
        column: 15,
        span: 175..182,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 8,
        column: 23,
        span: 182..190,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
        column: 26,
        span: 191..193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 8,
        column: 33,
        span: 194..200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 34,
        span: 200..201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 9,
        column: 7,
        span: 202..208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 8,
        span: 208..209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 9,
        column: 15,
        span: 209..216,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"math\"",
        ),
        line: 9,
        column: 21,
        span: 216..222,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 9,
        column: 24,
        span: 223..225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 9,
        column: 29,
        span: 226..230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 30,
        span: 230..231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 232..238,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 238..239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 10,
        column: 15,
        span: 239..246,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 10,
        column: 22,
        span: 246..253,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 25,
        span: 254..256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 10,
        column: 31,
        span: 257..262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 32,
        span: 262..263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 11,
        column: 7,
        span: 264..270,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 8,
        span: 270..271,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 11,
        column: 15,
        span: 271..278,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io\"",
        ),
        line: 11,
        column: 19,
        span: 278..282,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
        column: 22,
        span: 283..285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 11,
        column: 25,
        span: 286..288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 26,
        span: 288..289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 12,
        column: 7,
        span: 290..296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 8,
        span: 296..297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 12,
        column: 15,
        span: 297..304,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os\"",
        ),
        line: 12,
        column: 19,
        span: 304..308,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 12,
        column: 22,
        span: 309..311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 12,
        column: 25,
        span: 312..314,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 26,
        span: 314..315,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
        column: 7,
        span: 316..322,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 8,
        span: 322..323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 13,
        column: 15,
        span: 323..330,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutine\"",
        ),
        line: 13,
        column: 26,
        span: 330..341,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
        column: 29,
        span: 342..344,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 13,
        column: 39,
        span: 345..354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 40,
        span: 354..355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
        column: 7,
        span: 357..363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 8,
        span: 363..364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 15,
        column: 12,
        span: 364..368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 13,
        span: 368..369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 15,
        column: 20,
        span: 369..376,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 21,
        span: 376..377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 15,
        column: 25,
        span: 377..381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 26,
        span: 381..382,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 29,
        span: 383..385,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 15,
        column: 38,
        span: 386..394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 39,
        span: 394..395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 7,
        span: 396..402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 402..403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 16,
        column: 12,
        span: 403..407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 13,
        span: 407..408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 16,
        column: 20,
        span: 408..415,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 21,
        span: 415..416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 16,
        column: 26,
        span: 416..421,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 27,
        span: 421..422,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 30,
        span: 423..425,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 16,
        column: 39,
        span: 426..434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 40,
        span: 434..435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 17,
        column: 7,
        span: 436..442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 8,
        span: 442..443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 17,
        column: 12,
        span: 443..447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 13,
        span: 447..448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 17,
        column: 20,
        span: 448..455,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 17,
        column: 21,
        span: 455..456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 17,
        column: 27,
        span: 456..462,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 28,
        span: 462..463,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 17,
        column: 31,
        span: 464..466,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 17,
        column: 39,
        span: 467..474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 40,
        span: 474..475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 7,
        span: 476..482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 8,
        span: 482..483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 18,
        column: 12,
        span: 483..487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 13,
        span: 487..488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 18,
        column: 20,
        span: 488..495,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 18,
        column: 21,
        span: 495..496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preload",
        ),
        line: 18,
        column: 28,
        span: 496..503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 29,
        span: 503..504,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 32,
        span: 505..507,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 18,
        column: 40,
        span: 508..515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 41,
        span: 515..516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 20,
        column: 7,
        span: 518..524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 8,
        span: 524..525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 20,
        column: 12,
        span: 525..529,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 20,
        column: 13,
        span: 529..530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 20,
        column: 20,
        span: 530..537,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 20,
        column: 21,
        span: 537..538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "config",
        ),
        line: 20,
        column: 27,
        span: 538..544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 28,
        span: 544..545,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 20,
        column: 31,
        span: 546..548,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 20,
        column: 40,
        span: 549..557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 20,
        column: 41,
        span: 557..558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 21,
        column: 6,
        span: 559..564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 7,
        span: 564..565,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"package config: \"",
        ),
        line: 21,
        column: 25,
        span: 565..583,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 21,
        column: 27,
        span: 583..585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 21,
        column: 33,
        span: 585..591,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 21,
        column: 34,
        span: 591..592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 21,
        column: 38,
        span: 592..596,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 39,
        span: 596..597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 21,
        column: 46,
        span: 597..604,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 21,
        column: 47,
        span: 604..605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "config",
        ),
        line: 21,
        column: 53,
        span: 605..611,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 54,
        span: 611..612,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 21,
        column: 59,
        span: 613..617,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 21,
        column: 60,
        span: 617..618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"|\"",
        ),
        line: 21,
        column: 64,
        span: 619..622,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 65,
        span: 622..623,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 66,
        span: 623..624,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 23,
        column: 0,
        span: 626..628,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 26,
        column: 8,
        span: 711..716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 26,
        column: 12,
        span: 717..720,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 14,
        span: 721..722,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 0,
        span: 722..727,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 27,
        column: 8,
        span: 730..735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 27,
        column: 10,
        span: 736..737,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 12,
        span: 738..739,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 27,
        column: 14,
        span: 740..741,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 27,
        column: 15,
        span: 741..742,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 28,
        column: 6,
        span: 745..748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 28,
        column: 8,
        span: 749..750,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 10,
        span: 751..752,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 12,
        span: 752..754,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 13,
        span: 754..755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 28,
        column: 16,
        span: 755..758,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 28,
        column: 19,
        span: 759..761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 28,
        column: 21,
        span: 762..763,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 28,
        column: 22,
        span: 763..764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 28,
        column: 23,
        span: 764..765,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 28,
        column: 24,
        span: 765..766,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 26,
        span: 767..768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 28,
        column: 33,
        span: 769..775,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 34,
        span: 775..776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 28,
        column: 37,
        span: 776..779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 38,
        span: 779..780,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 28,
        column: 41,
        span: 780..783,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 42,
        span: 783..784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 28,
        column: 44,
        span: 785..786,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 28,
        column: 45,
        span: 786..787,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 47,
        span: 786..789,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 28,
        column: 49,
        span: 790..791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 28,
        column: 51,
        span: 791..793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 52,
        span: 793..794,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 28,
        column: 0,
        span: 795..798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 29,
        column: 4,
        span: 801..802,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 29,
        column: 5,
        span: 802..803,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 29,
        column: 6,
        span: 803..804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 29,
        column: 7,
        span: 804..805,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 29,
        column: 9,
        span: 806..807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 29,
        column: 11,
        span: 807..809,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 29,
        column: 12,
        span: 809..810,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 29,
        column: 14,
        span: 811..812,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 29,
        column: 18,
        span: 813..816,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 30,
        column: 8,
        span: 840..845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 30,
        column: 13,
        span: 846..850,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 15,
        span: 851..852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 30,
        column: 21,
        span: 853..858,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 30,
        column: 22,
        span: 858..859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 30,
        column: 28,
        span: 859..865,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 29,
        span: 865..866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 30,
        column: 30,
        span: 866..867,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 31,
        span: 867..868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 30,
        column: 35,
        span: 869..872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 36,
        span: 872..873,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 32,
        column: 8,
        span: 907..912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 32,
        column: 10,
        span: 913..914,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 11,
        span: 914..915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 32,
        column: 15,
        span: 916..919,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 32,
        column: 17,
        span: 920..921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 32,
        column: 25,
        span: 922..929,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 32,
        column: 26,
        span: 929..930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 32,
        column: 36,
        span: 930..940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 32,
        column: 37,
        span: 940..941,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 32,
        column: 43,
        span: 941..947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 32,
        column: 44,
        span: 947..948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 32,
        column: 49,
        span: 949..953,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 32,
        column: 50,
        span: 953..954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 9,
        span: 1082..1088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 10,
        span: 1088..1089,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 35,
        column: 13,
        span: 1089..1092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 35,
        column: 15,
        span: 1093..1094,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 35,
        column: 0,
        span: 1095..1098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 36,
        column: 16,
        span: 1108..1114,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 17,
        span: 1114..1115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 36,
        column: 21,
        span: 1115..1119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 22,
        span: 1119..1120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 36,
        column: 25,
        span: 1120..1123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 26,
        span: 1123..1124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 36,
        column: 33,
        span: 1125..1131,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 36,
        column: 34,
        span: 1131..1132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 36,
        column: 37,
        span: 1132..1135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 38,
        span: 1135..1136,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 36,
        column: 44,
        span: 1136..1142,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 45,
        span: 1142..1143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 36,
        column: 48,
        span: 1143..1146,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 49,
        span: 1146..1147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 50,
        span: 1147..1148,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 36,
        column: 0,
        span: 1149..1152,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 37,
        column: 11,
        span: 1162..1163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
        column: 17,
        span: 1163..1169,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 18,
        span: 1169..1170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 37,
        column: 22,
        span: 1170..1174,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 23,
        span: 1174..1175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 37,
        column: 26,
        span: 1175..1178,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 27,
        span: 1178..1179,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]\"",
        ),
        line: 37,
        column: 35,
        span: 1180..1187,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 36,
        span: 1187..1188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 37,
        column: 39,
        span: 1189..1191,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 40,
        span: 1191..1192,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 37,
        column: 43,
        span: 1193..1195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 37,
        column: 47,
        span: 1196..1199,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 48,
        span: 1199..1200,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 39,
        column: 8,
        span: 1241..1246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 39,
        column: 13,
        span: 1247..1251,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 39,
        column: 15,
        span: 1252..1253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
        column: 22,
        span: 1254..1260,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 23,
        span: 1260..1261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 39,
        column: 26,
        span: 1261..1264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 27,
        span: 1264..1265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 39,
        column: 30,
        span: 1265..1268,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 31,
        span: 1268..1269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 39,
        column: 35,
        span: 1270..1273,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 36,
        span: 1273..1274,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 40,
        column: 8,
        span: 1277..1282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 40,
        column: 10,
        span: 1283..1284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 11,
        span: 1284..1285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 40,
        column: 15,
        span: 1286..1289,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 40,
        column: 17,
        span: 1290..1291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 40,
        column: 25,
        span: 1292..1299,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 40,
        column: 26,
        span: 1299..1300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 40,
        column: 36,
        span: 1300..1310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 40,
        column: 37,
        span: 1310..1311,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 40,
        column: 43,
        span: 1311..1317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 40,
        column: 44,
        span: 1317..1318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 40,
        column: 49,
        span: 1319..1323,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 40,
        column: 50,
        span: 1323..1324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 41,
        column: 9,
        span: 1327..1333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 10,
        span: 1333..1334,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 41,
        column: 13,
        span: 1334..1337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 41,
        column: 15,
        span: 1338..1339,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 41,
        column: 19,
        span: 1340..1343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 41,
        column: 26,
        span: 1344..1350,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 27,
        span: 1350..1351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 41,
        column: 31,
        span: 1351..1355,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 32,
        span: 1355..1356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 41,
        column: 35,
        span: 1356..1359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 36,
        span: 1359..1360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 41,
        column: 43,
        span: 1361..1367,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 41,
        column: 44,
        span: 1367..1368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 41,
        column: 47,
        span: 1368..1371,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 48,
        span: 1371..1372,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 41,
        column: 54,
        span: 1372..1378,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 55,
        span: 1378..1379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 41,
        column: 59,
        span: 1380..1383,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 60,
        span: 1383..1384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 61,
        span: 1384..1385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 62,
        span: 1385..1386,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 42,
        column: 0,
        span: 1387..1390,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 44,
        column: 0,
        span: 1392..1394,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 8,
        span: 1397..1402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 45,
        column: 16,
        span: 1403..1410,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 18,
        span: 1411..1412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 45,
        column: 26,
        span: 1413..1420,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 45,
        column: 27,
        span: 1420..1421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 45,
        column: 0,
        span: 1421..1425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 46,
        column: 10,
        span: 1428..1435,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 11,
        span: 1435..1436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 46,
        column: 15,
        span: 1436..1440,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 46,
        column: 17,
        span: 1441..1442,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 46,
        column: 19,
        span: 1443..1444,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 46,
        column: 20,
        span: 1444..1445,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 47,
        column: 8,
        span: 1448..1453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 47,
        column: 10,
        span: 1454..1455,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 11,
        span: 1455..1456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 47,
        column: 15,
        span: 1457..1460,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 17,
        span: 1461..1462,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 47,
        column: 23,
        span: 1463..1468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 47,
        column: 24,
        span: 1468..1469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 47,
        column: 31,
        span: 1469..1476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 47,
        column: 32,
        span: 1476..1477,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no-such-file\"",
        ),
        line: 47,
        column: 47,
        span: 1478..1492,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 47,
        column: 48,
        span: 1492..1493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 48,
        column: 9,
        span: 1496..1502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 10,
        span: 1502..1503,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 48,
        column: 13,
        span: 1503..1506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 48,
        column: 15,
        span: 1507..1508,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 48,
        column: 19,
        span: 1509..1512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 48,
        column: 26,
        span: 1513..1519,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 48,
        column: 27,
        span: 1519..1520,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 48,
        column: 31,
        span: 1520..1524,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 48,
        column: 32,
        span: 1524..1525,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 48,
        column: 35,
        span: 1525..1528,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 48,
        column: 36,
        span: 1528..1529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"package.path\"",
        ),
        line: 48,
        column: 51,
        span: 1530..1544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 52,
        span: 1544..1545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 48,
        column: 53,
        span: 1545..1546,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 49,
        column: 10,
        span: 1549..1556,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 49,
        column: 11,
        span: 1556..1557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 49,
        column: 15,
        span: 1557..1561,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 17,
        span: 1562..1563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 49,
        column: 0,
        span: 1564..1571,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 50,
        column: 0,
        span: 1572..1575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 52,
        column: 6,
        span: 1577..1582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 7,
        span: 1582..1583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 52,
        column: 10,
        span: 1583..1586,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 11,
        span: 1586..1587,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 55,
        column: 6,
        span: 1647..1652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 55,
        column: 10,
        span: 1653..1656,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 55,
        column: 12,
        span: 1657..1658,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs/\"",
        ),
        line: 55,
        column: 20,
        span: 1659..1666,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 58,
        column: 6,
        span: 1693..1698,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 58,
        column: 15,
        span: 1699..1707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 58,
        column: 17,
        span: 1708..1709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 19,
        span: 1710..1711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 58,
        column: 20,
        span: 1711..1712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 21,
        span: 1712..1713,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 58,
        column: 28,
        span: 1714..1720,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 58,
        column: 32,
        span: 1721..1724,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 58,
        column: 35,
        span: 1725..1727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 58,
        column: 37,
        span: 1728..1729,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 58,
        column: 0,
        span: 1730..1733,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 61,
        column: 6,
        span: 1736..1741,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 61,
        column: 15,
        span: 1742..1750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        line: 61,
        column: 27,
        span: 1751..1762,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 61,
        column: 29,
        span: 1763..1764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 61,
        column: 34,
        span: 1764..1769,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 35,
        span: 1769..1770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preextras",
        ),
        line: 61,
        column: 45,
        span: 1771..1780,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 61,
        column: 46,
        span: 1780..1781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "posextras",
        ),
        line: 61,
        column: 56,
        span: 1782..1791,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 61,
        column: 57,
        span: 1791..1792,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 62,
        column: 6,
        span: 1795..1798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 62,
        column: 8,
        span: 1799..1800,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 62,
        column: 9,
        span: 1800..1801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 62,
        column: 10,
        span: 1801..1802,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 62,
        column: 13,
        span: 1803..1805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 62,
        column: 19,
        span: 1806..1811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 62,
        column: 20,
        span: 1811..1812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 62,
        column: 25,
        span: 1812..1817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 62,
        column: 26,
        span: 1817..1818,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 62,
        column: 0,
        span: 1819..1821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 63,
        column: 7,
        span: 1826..1828,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 8,
        span: 1828..1829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 63,
        column: 14,
        span: 1829..1835,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 15,
        span: 1835..1836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 63,
        column: 16,
        span: 1836..1837,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 63,
        column: 17,
        span: 1837..1838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 63,
        column: 18,
        span: 1838..1839,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 19,
        span: 1839..1840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 63,
        column: 20,
        span: 1840..1841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 64,
        column: 7,
        span: 1846..1848,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
        column: 8,
        span: 1848..1849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 64,
        column: 13,
        span: 1849..1854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 14,
        span: 1854..1855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 64,
        column: 20,
        span: 1855..1861,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 64,
        column: 21,
        span: 1861..1862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 64,
        column: 27,
        span: 1862..1868,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 28,
        span: 1868..1869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preextras",
        ),
        line: 64,
        column: 37,
        span: 1869..1878,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 38,
        span: 1878..1879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 64,
        column: 40,
        span: 1880..1881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 41,
        span: 1881..1882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 42,
        span: 1882..1883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 65,
        column: 7,
        span: 1888..1890,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 8,
        span: 1890..1891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 65,
        column: 13,
        span: 1891..1896,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 14,
        span: 1896..1897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 65,
        column: 15,
        span: 1897..1898,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 16,
        span: 1898..1899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 66,
        column: 7,
        span: 1904..1906,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
        column: 8,
        span: 1906..1907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 66,
        column: 13,
        span: 1907..1912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 14,
        span: 1912..1913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 66,
        column: 20,
        span: 1913..1919,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 66,
        column: 21,
        span: 1919..1920,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 66,
        column: 27,
        span: 1920..1926,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 28,
        span: 1926..1927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "posextras",
        ),
        line: 66,
        column: 37,
        span: 1927..1936,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 66,
        column: 38,
        span: 1936..1937,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 66,
        column: 40,
        span: 1938..1939,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 41,
        span: 1939..1940,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 42,
        span: 1940..1941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 67,
        column: 7,
        span: 1946..1948,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 8,
        span: 1948..1949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 67,
        column: 13,
        span: 1949..1954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 14,
        span: 1954..1955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 67,
        column: 16,
        span: 1955..1957,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 67,
        column: 17,
        span: 1957..1958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 67,
        column: 23,
        span: 1958..1964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 67,
        column: 24,
        span: 1964..1965,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 25,
        span: 1965..1966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 67,
        column: 26,
        span: 1966..1967,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 68,
        column: 0,
        span: 1970..1973,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 69,
        column: 0,
        span: 1974..1977,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 71,
        column: 9,
        span: 1979..1987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        line: 71,
        column: 21,
        span: 1988..1999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 23,
        span: 2000..2001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 71,
        column: 28,
        span: 2001..2006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 29,
        span: 2006..2007,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 72,
        column: 6,
        span: 2010..2013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 72,
        column: 8,
        span: 2014..2015,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 72,
        column: 11,
        span: 2016..2018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 72,
        column: 17,
        span: 2019..2024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 18,
        span: 2024..2025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 72,
        column: 23,
        span: 2025..2030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 24,
        span: 2030..2031,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 72,
        column: 0,
        span: 2032..2034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 73,
        column: 7,
        span: 2039..2041,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 73,
        column: 8,
        span: 2041..2042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 73,
        column: 14,
        span: 2042..2048,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 15,
        span: 2048..2049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 73,
        column: 16,
        span: 2049..2050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 73,
        column: 17,
        span: 2050..2051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 73,
        column: 18,
        span: 2051..2052,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 19,
        span: 2052..2053,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 73,
        column: 20,
        span: 2053..2054,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 74,
        column: 0,
        span: 2057..2060,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 75,
        column: 0,
        span: 2061..2064,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 77,
        column: 6,
        span: 2066..2071,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 77,
        column: 12,
        span: 2072..2077,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 77,
        column: 14,
        span: 2078..2079,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 77,
        column: 16,
        span: 2080..2081,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 78,
        column: 4,
        span: 2084..2085,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names.lua\"",
        ),
        line: 78,
        column: 15,
        span: 2085..2096,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 78,
        column: 16,
        span: 2096..2097,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 78,
        column: 18,
        span: 2098..2099,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"do return {...} end\\n\"",
        ),
        line: 78,
        column: 42,
        span: 2100..2123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 78,
        column: 43,
        span: 2123..2124,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 79,
        column: 4,
        span: 2127..2128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"err.lua\"",
        ),
        line: 79,
        column: 13,
        span: 2128..2137,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 79,
        column: 14,
        span: 2137..2138,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 16,
        span: 2139..2140,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B = 15; a = a + 1;\"",
        ),
        line: 79,
        column: 37,
        span: 2141..2161,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 38,
        span: 2161..2162,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 80,
        column: 4,
        span: 2165..2166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A.lua\"",
        ),
        line: 80,
        column: 11,
        span: 2166..2173,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 80,
        column: 12,
        span: 2173..2174,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
        column: 14,
        span: 2175..2176,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 80,
        column: 17,
        span: 2177..2179,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 18,
        span: 2179..2180,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 81,
        column: 4,
        span: 2183..2184,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B.lua\"",
        ),
        line: 81,
        column: 11,
        span: 2184..2191,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 81,
        column: 12,
        span: 2191..2192,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
        column: 14,
        span: 2193..2194,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(...=='B');require 'A'\"",
        ),
        line: 81,
        column: 45,
        span: 2195..2225,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 46,
        span: 2225..2226,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 82,
        column: 4,
        span: 2229..2230,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A.lc\"",
        ),
        line: 82,
        column: 10,
        span: 2230..2236,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 82,
        column: 11,
        span: 2236..2237,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
        column: 13,
        span: 2238..2239,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 82,
        column: 16,
        span: 2240..2242,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 82,
        column: 17,
        span: 2242..2243,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 83,
        column: 4,
        span: 2246..2247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 83,
        column: 7,
        span: 2247..2250,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 83,
        column: 8,
        span: 2250..2251,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
        column: 10,
        span: 2252..2253,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 83,
        column: 13,
        span: 2254..2256,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 14,
        span: 2256..2257,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 84,
        column: 4,
        span: 2260..2261,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 84,
        column: 7,
        span: 2261..2264,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 84,
        column: 8,
        span: 2264..2265,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 84,
        column: 10,
        span: 2266..2267,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 84,
        column: 13,
        span: 2268..2270,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 84,
        column: 14,
        span: 2270..2271,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 85,
        column: 4,
        span: 2274..2275,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 85,
        column: 10,
        span: 2275..2281,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 85,
        column: 11,
        span: 2281..2282,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 85,
        column: 13,
        span: 2283..2284,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 85,
        column: 16,
        span: 2285..2287,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 85,
        column: 17,
        span: 2287..2288,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 86,
        column: 4,
        span: 2291..2292,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 86,
        column: 11,
        span: 2292..2299,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 86,
        column: 12,
        span: 2299..2300,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 86,
        column: 14,
        span: 2301..2302,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"package.loaded[...] = 25; require'C'\"",
        ),
        line: 86,
        column: 53,
        span: 2303..2341,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 87,
        column: 2,
        span: 2342..2343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 89,
        column: 3,
        span: 2345..2347,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 89,
        column: 5,
        span: 2348..2349,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 89,
        column: 0,
        span: 2350..2353,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 90,
        column: 6,
        span: 2354..2359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extras",
        ),
        line: 90,
        column: 13,
        span: 2360..2366,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 90,
        column: 15,
        span: 2367..2368,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nNAME = '%s'\nREQUIRED = ...\nreturn AA]]",
        ),
        line: 93,
        column: 12,
        span: 2369..2410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        line: 95,
        column: 12,
        span: 2412..2423,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 13,
        span: 2423..2424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 95,
        column: 18,
        span: 2424..2429,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 19,
        span: 2429..2430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 95,
        column: 22,
        span: 2431..2433,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 23,
        span: 2433..2434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extras",
        ),
        line: 95,
        column: 30,
        span: 2435..2441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 31,
        span: 2441..2442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
        column: 7,
        span: 2496..2502,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 8,
        span: 2502..2503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 98,
        column: 15,
        span: 2503..2510,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 98,
        column: 16,
        span: 2510..2511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 98,
        column: 26,
        span: 2511..2521,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 27,
        span: 2521..2522,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 98,
        column: 34,
        span: 2522..2529,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 35,
        span: 2529..2530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 98,
        column: 37,
        span: 2531..2532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 98,
        column: 40,
        span: 2532..2535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 41,
        span: 2535..2536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 98,
        column: 44,
        span: 2537..2539,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 45,
        span: 2539..2540,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 98,
        column: 48,
        span: 2541..2543,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 49,
        span: 2543..2544,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 98,
        column: 52,
        span: 2545..2547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 98,
        column: 54,
        span: 2548..2549,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 98,
        column: 61,
        span: 2549..2556,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 62,
        span: 2556..2557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 99,
        column: 7,
        span: 2558..2564,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 8,
        span: 2564..2565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 99,
        column: 15,
        span: 2565..2572,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 99,
        column: 16,
        span: 2572..2573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 99,
        column: 26,
        span: 2573..2583,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 27,
        span: 2583..2584,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 99,
        column: 34,
        span: 2584..2591,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 35,
        span: 2591..2592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 99,
        column: 37,
        span: 2593..2594,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 99,
        column: 40,
        span: 2594..2597,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 41,
        span: 2597..2598,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 99,
        column: 45,
        span: 2599..2602,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 46,
        span: 2602..2603,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 99,
        column: 50,
        span: 2604..2607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 51,
        span: 2607..2608,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 99,
        column: 54,
        span: 2609..2611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 99,
        column: 56,
        span: 2612..2613,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 99,
        column: 63,
        span: 2613..2620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 64,
        span: 2620..2621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 100,
        column: 7,
        span: 2622..2628,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 8,
        span: 2628..2629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 100,
        column: 15,
        span: 2629..2636,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 100,
        column: 16,
        span: 2636..2637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 100,
        column: 26,
        span: 2637..2647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 100,
        column: 27,
        span: 2647..2648,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"--x-\"",
        ),
        line: 100,
        column: 33,
        span: 2648..2654,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 34,
        span: 2654..2655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 100,
        column: 36,
        span: 2656..2657,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 100,
        column: 39,
        span: 2657..2660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 40,
        span: 2660..2661,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 100,
        column: 44,
        span: 2662..2665,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 45,
        span: 2665..2666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 100,
        column: 49,
        span: 2667..2670,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 50,
        span: 2670..2671,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 100,
        column: 53,
        span: 2672..2674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 100,
        column: 55,
        span: 2675..2676,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 100,
        column: 61,
        span: 2676..2682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 100,
        column: 62,
        span: 2682..2683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 101,
        column: 7,
        span: 2684..2690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 8,
        span: 2690..2691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 101,
        column: 15,
        span: 2691..2698,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 101,
        column: 16,
        span: 2698..2699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 101,
        column: 26,
        span: 2699..2709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 101,
        column: 27,
        span: 2709..2710,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"---xX\"",
        ),
        line: 101,
        column: 34,
        span: 2710..2717,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 35,
        span: 2717..2718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 101,
        column: 37,
        span: 2719..2720,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 101,
        column: 40,
        span: 2720..2723,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 41,
        span: 2723..2724,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"---\"",
        ),
        line: 101,
        column: 47,
        span: 2725..2730,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 48,
        span: 2730..2731,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XX\"",
        ),
        line: 101,
        column: 53,
        span: 2732..2736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 54,
        span: 2736..2737,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 101,
        column: 57,
        span: 2738..2740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 101,
        column: 59,
        span: 2741..2742,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 101,
        column: 65,
        span: 2742..2748,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 101,
        column: 66,
        span: 2748..2749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 102,
        column: 7,
        span: 2750..2756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 8,
        span: 2756..2757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 102,
        column: 15,
        span: 2757..2764,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 102,
        column: 16,
        span: 2764..2765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 102,
        column: 26,
        span: 2765..2775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 102,
        column: 27,
        span: 2775..2776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 102,
        column: 28,
        span: 2776..2777,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 102,
        column: 35,
        span: 2777..2784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 36,
        span: 2784..2785,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 102,
        column: 40,
        span: 2786..2789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 41,
        span: 2789..2790,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"/\"",
        ),
        line: 102,
        column: 45,
        span: 2791..2794,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 46,
        span: 2794..2795,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 102,
        column: 49,
        span: 2796..2798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 102,
        column: 51,
        span: 2799..2800,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 102,
        column: 58,
        span: 2800..2807,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 102,
        column: 59,
        span: 2807..2808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 103,
        column: 7,
        span: 2809..2815,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 8,
        span: 2815..2816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 103,
        column: 15,
        span: 2816..2823,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 103,
        column: 16,
        span: 2823..2824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 103,
        column: 26,
        span: 2824..2834,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 27,
        span: 2834..2835,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\\\\C.lua\"",
        ),
        line: 103,
        column: 37,
        span: 2835..2845,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 38,
        span: 2845..2846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 103,
        column: 40,
        span: 2847..2848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 103,
        column: 43,
        span: 2848..2851,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 44,
        span: 2851..2852,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\\\\"",
        ),
        line: 103,
        column: 49,
        span: 2853..2857,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 50,
        span: 2857..2858,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 103,
        column: 53,
        span: 2859..2861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 103,
        column: 55,
        span: 2862..2863,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"./C.lua\"",
        ),
        line: 103,
        column: 64,
        span: 2863..2872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 65,
        span: 2872..2873,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 105,
        column: 6,
        span: 2875..2880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 105,
        column: 14,
        span: 2881..2888,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 16,
        span: 2889..2890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 105,
        column: 24,
        span: 2891..2898,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
        column: 25,
        span: 2898..2899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 105,
        column: 0,
        span: 2899..2903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 107,
        column: 8,
        span: 2905..2912,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
        column: 9,
        span: 2912..2913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 107,
        column: 13,
        span: 2913..2917,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 107,
        column: 15,
        span: 2918..2919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 107,
        column: 22,
        span: 2920..2926,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 107,
        column: 23,
        span: 2926..2927,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 107,
        column: 27,
        span: 2927..2931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 107,
        column: 28,
        span: 2931..2932,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/?.lua;D/?.lc;D/?;D/??x?;D/L\"",
        ),
        line: 107,
        column: 59,
        span: 2932..2963,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
        column: 60,
        span: 2963..2964,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/\"",
        ),
        line: 107,
        column: 65,
        span: 2965..2969,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 107,
        column: 66,
        span: 2969..2970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 107,
        column: 70,
        span: 2971..2974,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 107,
        column: 71,
        span: 2974..2975,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 109,
        column: 6,
        span: 2977..2982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 109,
        column: 10,
        span: 2983..2986,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 109,
        column: 12,
        span: 2987..2988,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 109,
        column: 21,
        span: 2989..2997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 23,
        span: 2998..2999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 109,
        column: 24,
        span: 2999..3000,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 25,
        span: 3000..3001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 109,
        column: 27,
        span: 3002..3003,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 109,
        column: 28,
        span: 3003..3004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 109,
        column: 30,
        span: 3005..3006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 31,
        span: 3006..3007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NAME",
        ),
        line: 110,
        column: 7,
        span: 3010..3014,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 9,
        span: 3015..3016,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 110,
        column: 0,
        span: 3017..3020,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 111,
        column: 8,
        span: 3023..3028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rr",
        ),
        line: 111,
        column: 11,
        span: 3029..3031,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 111,
        column: 13,
        span: 3032..3033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 111,
        column: 21,
        span: 3034..3041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 22,
        span: 3041..3042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 111,
        column: 23,
        span: 3042..3043,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 24,
        span: 3043..3044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 112,
        column: 9,
        span: 3047..3053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 112,
        column: 10,
        span: 3053..3054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NAME",
        ),
        line: 112,
        column: 14,
        span: 3054..3058,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 112,
        column: 17,
        span: 3059..3061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 112,
        column: 19,
        span: 3062..3063,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 112,
        column: 20,
        span: 3063..3064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 113,
        column: 9,
        span: 3067..3073,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 113,
        column: 10,
        span: 3073..3074,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "REQUIRED",
        ),
        line: 113,
        column: 18,
        span: 3074..3082,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 113,
        column: 21,
        span: 3083..3085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 113,
        column: 23,
        span: 3086..3087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 113,
        column: 24,
        span: 3087..3088,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
        column: 9,
        span: 3091..3097,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 10,
        span: 3097..3098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rr",
        ),
        line: 114,
        column: 12,
        span: 3098..3100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 114,
        column: 15,
        span: 3101..3103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 114,
        column: 17,
        span: 3104..3105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 18,
        span: 3105..3106,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 115,
        column: 0,
        span: 3107..3110,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 117,
        column: 2,
        span: 3112..3113,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 117,
        column: 4,
        span: 3114..3115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 117,
        column: 12,
        span: 3116..3123,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names\"",
        ),
        line: 117,
        column: 19,
        span: 3123..3130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
        column: 7,
        span: 3131..3137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 8,
        span: 3137..3138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 9,
        span: 3138..3139,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
        column: 10,
        span: 3139..3140,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 11,
        span: 3139..3141,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
        column: 12,
        span: 3141..3142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 15,
        span: 3143..3145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names\"",
        ),
        line: 118,
        column: 23,
        span: 3146..3153,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 118,
        column: 27,
        span: 3154..3157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 118,
        column: 29,
        span: 3158..3159,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 118,
        column: 30,
        span: 3159..3160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 118,
        column: 31,
        span: 3159..3161,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 118,
        column: 32,
        span: 3161..3162,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 35,
        span: 3163..3165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 118,
        column: 37,
        span: 3166..3167,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names.lua\"",
        ),
        line: 118,
        column: 48,
        span: 3167..3178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 49,
        span: 3178..3179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 120,
        column: 3,
        span: 3181..3183,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 120,
        column: 4,
        span: 3183..3184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 120,
        column: 5,
        span: 3184..3185,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 120,
        column: 7,
        span: 3186..3187,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 120,
        column: 0,
        span: 3188..3191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 121,
        column: 7,
        span: 3192..3198,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 8,
        span: 3198..3199,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 121,
        column: 11,
        span: 3199..3202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 121,
        column: 17,
        span: 3203..3208,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 18,
        span: 3208..3209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 121,
        column: 25,
        span: 3209..3216,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 121,
        column: 26,
        span: 3216..3217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"err\"",
        ),
        line: 121,
        column: 32,
        span: 3218..3223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 33,
        span: 3223..3224,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 34,
        span: 3224..3225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 122,
        column: 7,
        span: 3226..3232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 8,
        span: 3232..3233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 122,
        column: 9,
        span: 3233..3234,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 122,
        column: 12,
        span: 3235..3237,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 122,
        column: 15,
        span: 3237..3240,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 16,
        span: 3240..3241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 124,
        column: 7,
        span: 3243..3249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 8,
        span: 3249..3250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 124,
        column: 15,
        span: 3250..3257,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 124,
        column: 16,
        span: 3257..3258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 124,
        column: 26,
        span: 3258..3268,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 27,
        span: 3268..3269,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 124,
        column: 30,
        span: 3269..3272,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 124,
        column: 31,
        span: 3272..3273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 124,
        column: 39,
        span: 3274..3281,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 124,
        column: 40,
        span: 3281..3282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 124,
        column: 44,
        span: 3282..3286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 45,
        span: 3286..3287,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 124,
        column: 48,
        span: 3288..3290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 124,
        column: 50,
        span: 3291..3292,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 124,
        column: 57,
        span: 3292..3299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 58,
        span: 3299..3300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 125,
        column: 7,
        span: 3301..3307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 8,
        span: 3307..3308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 125,
        column: 15,
        span: 3308..3315,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 125,
        column: 18,
        span: 3315..3318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 125,
        column: 21,
        span: 3319..3321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 125,
        column: 24,
        span: 3321..3324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 25,
        span: 3324..3325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 126,
        column: 7,
        span: 3326..3332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 8,
        span: 3332..3333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 126,
        column: 15,
        span: 3333..3340,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 126,
        column: 18,
        span: 3340..3343,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 126,
        column: 21,
        span: 3344..3346,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 126,
        column: 24,
        span: 3346..3349,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 25,
        span: 3349..3350,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 127,
        column: 3,
        span: 3351..3353,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 127,
        column: 5,
        span: 3354..3355,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 127,
        column: 0,
        span: 3356..3359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 128,
        column: 4,
        span: 3360..3363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 5,
        span: 3363..3364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        line: 128,
        column: 8,
        span: 3364..3367,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 9,
        span: 3367..3368,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B.lua'",
        ),
        line: 128,
        column: 17,
        span: 3369..3376,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 128,
        column: 18,
        span: 3376..3377,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 128,
        column: 23,
        span: 3378..3382,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 24,
        span: 3382..3383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 129,
        column: 7,
        span: 3384..3390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 8,
        span: 3390..3391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 129,
        column: 15,
        span: 3391..3398,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 16,
        span: 3398..3399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 129,
        column: 22,
        span: 3399..3405,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 23,
        span: 3405..3406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 129,
        column: 24,
        span: 3406..3407,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 25,
        span: 3407..3408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 130,
        column: 7,
        span: 3409..3415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 8,
        span: 3415..3416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 130,
        column: 15,
        span: 3416..3423,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        line: 130,
        column: 18,
        span: 3423..3426,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 130,
        column: 21,
        span: 3427..3429,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 130,
        column: 26,
        span: 3430..3434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 27,
        span: 3434..3435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 131,
        column: 7,
        span: 3436..3442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 8,
        span: 3442..3443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 131,
        column: 15,
        span: 3443..3450,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
        column: 16,
        span: 3450..3451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 131,
        column: 22,
        span: 3451..3457,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
        column: 23,
        span: 3457..3458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 131,
        column: 24,
        span: 3458..3459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 25,
        span: 3459..3460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 132,
        column: 7,
        span: 3461..3467,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 8,
        span: 3467..3468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 132,
        column: 15,
        span: 3468..3475,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 132,
        column: 18,
        span: 3475..3478,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 132,
        column: 21,
        span: 3479..3481,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 132,
        column: 24,
        span: 3481..3484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 25,
        span: 3484..3485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 133,
        column: 8,
        span: 3486..3493,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 133,
        column: 9,
        span: 3493..3494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 133,
        column: 15,
        span: 3494..3500,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 133,
        column: 16,
        span: 3500..3501,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 133,
        column: 17,
        span: 3501..3502,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 133,
        column: 19,
        span: 3503..3504,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 133,
        column: 0,
        span: 3505..3508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 134,
        column: 4,
        span: 3509..3512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 5,
        span: 3512..3513,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        line: 134,
        column: 8,
        span: 3513..3516,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 9,
        span: 3516..3517,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 134,
        column: 13,
        span: 3518..3521,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 134,
        column: 14,
        span: 3521..3522,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 134,
        column: 19,
        span: 3523..3527,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 20,
        span: 3527..3528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 135,
        column: 4,
        span: 3560..3563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 5,
        span: 3563..3564,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A'",
        ),
        line: 135,
        column: 8,
        span: 3564..3567,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 9,
        span: 3567..3568,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lua'",
        ),
        line: 135,
        column: 17,
        span: 3569..3576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 135,
        column: 18,
        span: 3576..3577,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 135,
        column: 23,
        span: 3578..3582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 24,
        span: 3582..3583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 136,
        column: 8,
        span: 3584..3591,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 136,
        column: 9,
        span: 3591..3592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 136,
        column: 15,
        span: 3592..3598,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 136,
        column: 16,
        span: 3598..3599,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 136,
        column: 17,
        span: 3599..3600,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 136,
        column: 19,
        span: 3601..3602,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 136,
        column: 0,
        span: 3603..3606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 137,
        column: 3,
        span: 3607..3609,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 137,
        column: 4,
        span: 3609..3610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 137,
        column: 10,
        span: 3610..3616,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 11,
        span: 3616..3617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 137,
        column: 12,
        span: 3617..3618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lua'",
        ),
        line: 137,
        column: 19,
        span: 3618..3625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 20,
        span: 3625..3626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 138,
        column: 3,
        span: 3627..3629,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 138,
        column: 5,
        span: 3630..3631,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 138,
        column: 7,
        span: 3632..3633,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 138,
        column: 8,
        span: 3633..3634,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 139,
        column: 4,
        span: 3635..3638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 5,
        span: 3638..3639,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A'",
        ),
        line: 139,
        column: 8,
        span: 3639..3642,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 9,
        span: 3642..3643,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lc'",
        ),
        line: 139,
        column: 16,
        span: 3644..3650,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 17,
        span: 3650..3651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 139,
        column: 20,
        span: 3652..3654,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 21,
        span: 3654..3655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 3688..3694,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 3694..3695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 140,
        column: 15,
        span: 3695..3702,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 16,
        span: 3702..3703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 140,
        column: 26,
        span: 3703..3713,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 27,
        span: 3713..3714,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 140,
        column: 30,
        span: 3714..3717,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 31,
        span: 3717..3718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 140,
        column: 39,
        span: 3719..3726,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 40,
        span: 3726..3727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 140,
        column: 44,
        span: 3727..3731,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 45,
        span: 3731..3732,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 48,
        span: 3733..3735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 140,
        column: 50,
        span: 3736..3737,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A.lc\"",
        ),
        line: 140,
        column: 56,
        span: 3737..3743,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 57,
        span: 3743..3744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
        column: 7,
        span: 3745..3751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 8,
        span: 3751..3752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 141,
        column: 15,
        span: 3752..3759,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 16,
        span: 3759..3760,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 141,
        column: 19,
        span: 3760..3763,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 20,
        span: 3763..3764,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 23,
        span: 3765..3767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 141,
        column: 26,
        span: 3768..3770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 27,
        span: 3770..3771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 142,
        column: 3,
        span: 3772..3774,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 142,
        column: 5,
        span: 3775..3776,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 142,
        column: 0,
        span: 3777..3782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 143,
        column: 4,
        span: 3783..3786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 5,
        span: 3786..3787,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'K'",
        ),
        line: 143,
        column: 8,
        span: 3787..3790,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 9,
        span: 3790..3791,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'L'",
        ),
        line: 143,
        column: 13,
        span: 3792..3795,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 143,
        column: 14,
        span: 3795..3796,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 143,
        column: 20,
        span: 3797..3802,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 21,
        span: 3802..3803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 144,
        column: 4,
        span: 3826..3829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 5,
        span: 3829..3830,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'K'",
        ),
        line: 144,
        column: 8,
        span: 3830..3833,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 9,
        span: 3833..3834,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'L'",
        ),
        line: 144,
        column: 13,
        span: 3835..3838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 144,
        column: 14,
        span: 3838..3839,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 144,
        column: 20,
        span: 3840..3845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 21,
        span: 3845..3846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 145,
        column: 7,
        span: 3888..3894,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 8,
        span: 3894..3895,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 145,
        column: 14,
        span: 3895..3901,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 15,
        span: 3901..3902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 145,
        column: 17,
        span: 3902..3904,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 145,
        column: 18,
        span: 3904..3905,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_REQUIREDNAME\"",
        ),
        line: 145,
        column: 34,
        span: 3906..3921,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 35,
        span: 3921..3922,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
        column: 38,
        span: 3923..3925,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 145,
        column: 42,
        span: 3926..3929,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 43,
        span: 3929..3930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 147,
        column: 3,
        span: 3932..3934,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 147,
        column: 5,
        span: 3935..3936,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 147,
        column: 9,
        span: 3937..3940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 148,
        column: 4,
        span: 3941..3944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 5,
        span: 3944..3945,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 148,
        column: 8,
        span: 3945..3948,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 9,
        span: 3948..3949,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 148,
        column: 16,
        span: 3950..3956,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 148,
        column: 17,
        span: 3956..3957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 148,
        column: 20,
        span: 3958..3960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 21,
        span: 3960..3961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        line: 151,
        column: 12,
        span: 3964..3975,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 13,
        span: 3975..3976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 151,
        column: 18,
        span: 3976..3981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 19,
        span: 3981..3982,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 156,
        column: 6,
        span: 4021..4026,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 156,
        column: 9,
        span: 4027..4029,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 156,
        column: 11,
        span: 4030..4031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 156,
        column: 0,
        span: 4032..4034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 158,
        column: 8,
        span: 4036..4043,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
        column: 9,
        span: 4043..4044,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 158,
        column: 13,
        span: 4044..4048,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 158,
        column: 15,
        span: 4049..4050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 158,
        column: 22,
        span: 4051..4057,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
        column: 23,
        span: 4057..4058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 158,
        column: 27,
        span: 4058..4062,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 28,
        span: 4062..4063,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/?.lua;D/?/init.lua\"",
        ),
        line: 158,
        column: 50,
        span: 4063..4085,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 51,
        span: 4085..4086,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/\"",
        ),
        line: 158,
        column: 56,
        span: 4087..4091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 57,
        span: 4091..4092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 158,
        column: 61,
        span: 4093..4096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 62,
        span: 4096..4097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 160,
        column: 6,
        span: 4099..4104,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 160,
        column: 8,
        span: 4105..4106,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 160,
        column: 10,
        span: 4107..4108,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 161,
        column: 4,
        span: 4111..4112,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1/init.lua\"",
        ),
        line: 161,
        column: 17,
        span: 4112..4125,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 161,
        column: 18,
        span: 4125..4126,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 161,
        column: 20,
        span: 4127..4128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA = 10\"",
        ),
        line: 161,
        column: 30,
        span: 4129..4138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 31,
        span: 4138..4139,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 162,
        column: 4,
        span: 4142..4143,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1/xuxu.lua\"",
        ),
        line: 162,
        column: 17,
        span: 4143..4156,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 162,
        column: 18,
        span: 4156..4157,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 162,
        column: 20,
        span: 4158..4159,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA = 20\"",
        ),
        line: 162,
        column: 30,
        span: 4160..4169,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 31,
        span: 4169..4170,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 163,
        column: 2,
        span: 4171..4172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        line: 165,
        column: 12,
        span: 4174..4185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 13,
        span: 4185..4186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 165,
        column: 18,
        span: 4186..4191,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 19,
        span: 4191..4192,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_ENV = {}\\n\"",
        ),
        line: 165,
        column: 33,
        span: 4193..4206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 165,
        column: 34,
        span: 4206..4207,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nreturn _ENV\\n\"",
        ),
        line: 165,
        column: 52,
        span: 4208..4225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 53,
        span: 4225..4226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 166,
        column: 3,
        span: 4227..4229,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 166,
        column: 5,
        span: 4230..4231,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 0,
        span: 4231..4233,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 168,
        column: 6,
        span: 4235..4240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 168,
        column: 8,
        span: 4241..4242,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 168,
        column: 10,
        span: 4243..4244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
        column: 17,
        span: 4245..4251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 18,
        span: 4251..4252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 168,
        column: 25,
        span: 4252..4259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 168,
        column: 29,
        span: 4259..4263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 30,
        span: 4263..4264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 7,
        span: 4265..4271,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 8,
        span: 4271..4272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 169,
        column: 10,
        span: 4272..4274,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 13,
        span: 4275..4277,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 15,
        span: 4277..4279,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 19,
        span: 4280..4283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 169,
        column: 21,
        span: 4284..4285,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 169,
        column: 22,
        span: 4285..4286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 169,
        column: 24,
        span: 4286..4288,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 27,
        span: 4289..4291,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 30,
        span: 4291..4294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 31,
        span: 4294..4295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
        column: 7,
        span: 4296..4302,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 8,
        span: 4302..4303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 170,
        column: 15,
        span: 4303..4310,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 170,
        column: 19,
        span: 4310..4314,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
        column: 22,
        span: 4315..4317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 170,
        column: 24,
        span: 4318..4319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 25,
        span: 4319..4320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 7,
        span: 4321..4327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 8,
        span: 4327..4328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 171,
        column: 15,
        span: 4328..4335,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 171,
        column: 19,
        span: 4335..4339,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
        column: 22,
        span: 4340..4342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 171,
        column: 24,
        span: 4343..4344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 25,
        span: 4344..4345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 173,
        column: 7,
        span: 4347..4353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 8,
        span: 4353..4354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 173,
        column: 15,
        span: 4354..4361,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 16,
        span: 4361..4362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 173,
        column: 26,
        span: 4362..4372,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 27,
        span: 4372..4373,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 173,
        column: 36,
        span: 4373..4382,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 173,
        column: 37,
        span: 4382..4383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 173,
        column: 45,
        span: 4384..4391,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 173,
        column: 46,
        span: 4391..4392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 173,
        column: 50,
        span: 4392..4396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 51,
        span: 4396..4397,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 54,
        span: 4398..4400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 173,
        column: 56,
        span: 4401..4402,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1/xuxu.lua\"",
        ),
        line: 173,
        column: 69,
        span: 4402..4415,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 70,
        span: 4415..4416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 174,
        column: 2,
        span: 4417..4418,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 174,
        column: 3,
        span: 4418..4419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 174,
        column: 7,
        span: 4419..4423,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 9,
        span: 4424..4425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 174,
        column: 16,
        span: 4426..4432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 17,
        span: 4432..4433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 174,
        column: 24,
        span: 4433..4440,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 174,
        column: 33,
        span: 4440..4449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 34,
        span: 4449..4450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 7,
        span: 4451..4457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 8,
        span: 4457..4458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 175,
        column: 10,
        span: 4458..4460,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 13,
        span: 4461..4463,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 15,
        span: 4463..4465,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 175,
        column: 19,
        span: 4466..4469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 175,
        column: 21,
        span: 4470..4471,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 175,
        column: 22,
        span: 4471..4472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 175,
        column: 26,
        span: 4472..4476,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 175,
        column: 27,
        span: 4476..4477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 175,
        column: 29,
        span: 4477..4479,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 32,
        span: 4480..4482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 35,
        span: 4482..4485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 36,
        span: 4485..4486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
        column: 7,
        span: 4487..4493,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 8,
        span: 4493..4494,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 176,
        column: 15,
        span: 4494..4501,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 176,
        column: 24,
        span: 4501..4510,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 176,
        column: 27,
        span: 4511..4513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 176,
        column: 29,
        span: 4514..4515,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 30,
        span: 4515..4516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 176,
        column: 34,
        span: 4516..4520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 35,
        span: 4520..4521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
        column: 7,
        span: 4522..4528,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 8,
        span: 4528..4529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 177,
        column: 15,
        span: 4529..4536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 177,
        column: 24,
        span: 4536..4545,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 177,
        column: 27,
        span: 4546..4548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 177,
        column: 29,
        span: 4549..4550,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 177,
        column: 30,
        span: 4550..4551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 177,
        column: 34,
        span: 4551..4555,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 35,
        span: 4555..4556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 178,
        column: 7,
        span: 4557..4563,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 8,
        span: 4563..4564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 178,
        column: 15,
        span: 4564..4571,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 178,
        column: 19,
        span: 4571..4575,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 178,
        column: 22,
        span: 4576..4578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 178,
        column: 24,
        span: 4579..4580,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 178,
        column: 28,
        span: 4581..4584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 178,
        column: 30,
        span: 4585..4586,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 178,
        column: 31,
        span: 4586..4587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 178,
        column: 33,
        span: 4587..4589,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 178,
        column: 36,
        span: 4590..4592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 39,
        span: 4592..4595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 40,
        span: 4595..4596,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        line: 181,
        column: 12,
        span: 4599..4610,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 13,
        span: 4610..4611,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 181,
        column: 18,
        span: 4611..4616,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 19,
        span: 4616..4617,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 184,
        column: 8,
        span: 4620..4627,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 184,
        column: 9,
        span: 4627..4628,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 184,
        column: 13,
        span: 4628..4632,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
        column: 15,
        span: 4633..4634,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 184,
        column: 18,
        span: 4635..4637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 185,
        column: 7,
        span: 4638..4644,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 8,
        span: 4644..4645,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 185,
        column: 11,
        span: 4645..4648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 185,
        column: 17,
        span: 4649..4654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 18,
        span: 4654..4655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 185,
        column: 25,
        span: 4655..4662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 26,
        span: 4662..4663,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist\"",
        ),
        line: 185,
        column: 48,
        span: 4664..4685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 49,
        span: 4685..4686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 50,
        span: 4686..4687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 186,
        column: 8,
        span: 4688..4695,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 186,
        column: 9,
        span: 4695..4696,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 186,
        column: 13,
        span: 4696..4700,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 15,
        span: 4701..4702,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"??\\0?\"",
        ),
        line: 186,
        column: 23,
        span: 4703..4710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 7,
        span: 4711..4717,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 8,
        span: 4717..4718,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 187,
        column: 11,
        span: 4718..4721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 187,
        column: 17,
        span: 4722..4727,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 18,
        span: 4727..4728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 187,
        column: 25,
        span: 4728..4735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 187,
        column: 26,
        span: 4735..4736,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist1\"",
        ),
        line: 187,
        column: 49,
        span: 4737..4759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 50,
        span: 4759..4760,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 51,
        span: 4760..4761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 189,
        column: 8,
        span: 4763..4770,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 189,
        column: 9,
        span: 4770..4771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 189,
        column: 13,
        span: 4771..4775,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 189,
        column: 15,
        span: 4776..4777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 189,
        column: 0,
        span: 4778..4785,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 192,
        column: 6,
        span: 4820..4825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 192,
        column: 12,
        span: 4826..4831,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 192,
        column: 14,
        span: 4832..4833,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist2\"",
        ),
        line: 192,
        column: 37,
        span: 4834..4856,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 193,
        column: 6,
        span: 4857..4862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 193,
        column: 8,
        span: 4863..4864,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 9,
        span: 4864..4865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 193,
        column: 13,
        span: 4866..4869,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 193,
        column: 15,
        span: 4870..4871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 193,
        column: 21,
        span: 4872..4877,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 22,
        span: 4877..4878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 193,
        column: 29,
        span: 4878..4885,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 30,
        span: 4885..4886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 193,
        column: 36,
        span: 4887..4892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 37,
        span: 4892..4893,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 194,
        column: 4,
        span: 4894..4897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 194,
        column: 6,
        span: 4898..4899,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 194,
        column: 9,
        span: 4900..4902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 194,
        column: 16,
        span: 4903..4909,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 17,
        span: 4909..4910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 194,
        column: 23,
        span: 4910..4916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 24,
        span: 4916..4917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 194,
        column: 31,
        span: 4917..4924,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 32,
        span: 4924..4925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 194,
        column: 36,
        span: 4925..4929,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 194,
        column: 38,
        span: 4929..4931,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 194,
        column: 41,
        span: 4931..4934,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 194,
        column: 43,
        span: 4934..4936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 194,
        column: 50,
        span: 4936..4943,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 51,
        span: 4943..4944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 194,
        column: 56,
        span: 4944..4949,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 194,
        column: 57,
        span: 4949..4950,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^;]+\"",
        ),
        line: 194,
        column: 65,
        span: 4951..4958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 66,
        span: 4958..4959,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 194,
        column: 0,
        span: 4960..4962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 195,
        column: 4,
        span: 4965..4966,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 195,
        column: 6,
        span: 4967..4968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 195,
        column: 13,
        span: 4969..4975,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 14,
        span: 4975..4976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 195,
        column: 18,
        span: 4976..4980,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 19,
        span: 4980..4981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 195,
        column: 20,
        span: 4981..4982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 21,
        span: 4982..4983,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 195,
        column: 25,
        span: 4984..4987,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 195,
        column: 26,
        span: 4987..4988,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 195,
        column: 32,
        span: 4989..4994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 33,
        span: 4994..4995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 9,
        span: 4998..5004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 10,
        span: 5004..5005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 196,
        column: 16,
        span: 5005..5011,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 196,
        column: 17,
        span: 5011..5012,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 196,
        column: 21,
        span: 5012..5016,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 22,
        span: 5016..5017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 196,
        column: 25,
        span: 5017..5020,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 26,
        span: 5020..5021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 196,
        column: 28,
        span: 5022..5023,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 29,
        span: 5023..5024,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 31,
        span: 5024..5026,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 196,
        column: 32,
        span: 5026..5027,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 196,
        column: 37,
        span: 5028..5032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 38,
        span: 5032..5033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 39,
        span: 5033..5034,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 197,
        column: 0,
        span: 5035..5038,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 200,
        column: 6,
        span: 5041..5046,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 200,
        column: 15,
        span: 5047..5055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "import",
        ),
        line: 200,
        column: 22,
        span: 5056..5062,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 23,
        span: 5062..5063,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 200,
        column: 26,
        span: 5063..5066,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 27,
        span: 5066..5067,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 201,
        column: 8,
        span: 5070..5075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 201,
        column: 10,
        span: 5076..5077,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 201,
        column: 12,
        span: 5078..5079,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 201,
        column: 14,
        span: 5080..5081,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 201,
        column: 17,
        span: 5081..5084,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 201,
        column: 18,
        span: 5084..5085,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 202,
        column: 9,
        span: 5088..5094,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 202,
        column: 18,
        span: 5095..5103,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 202,
        column: 20,
        span: 5104..5105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 202,
        column: 21,
        span: 5105..5106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 202,
        column: 22,
        span: 5106..5107,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 203,
        column: 8,
        span: 5112..5115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 203,
        column: 10,
        span: 5116..5117,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
        column: 11,
        span: 5117..5118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 203,
        column: 12,
        span: 5117..5119,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 13,
        span: 5119..5120,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 203,
        column: 15,
        span: 5121..5122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 203,
        column: 16,
        span: 5122..5123,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 203,
        column: 19,
        span: 5124..5126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 203,
        column: 21,
        span: 5127..5128,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 203,
        column: 22,
        span: 5128..5129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 203,
        column: 23,
        span: 5129..5130,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 203,
        column: 24,
        span: 5130..5131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 203,
        column: 25,
        span: 5131..5132,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 203,
        column: 26,
        span: 5132..5133,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 203,
        column: 27,
        span: 5133..5134,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 203,
        column: 29,
        span: 5135..5136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 203,
        column: 32,
        span: 5137..5139,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 203,
        column: 33,
        span: 5139..5140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 203,
        column: 34,
        span: 5140..5141,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 203,
        column: 35,
        span: 5141..5142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 203,
        column: 36,
        span: 5142..5143,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 203,
        column: 37,
        span: 5143..5144,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 203,
        column: 38,
        span: 5144..5145,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 203,
        column: 0,
        span: 5146..5149,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 204,
        column: 0,
        span: 5152..5155,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 205,
        column: 0,
        span: 5156..5159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 7,
        span: 5206..5212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 8,
        span: 5212..5213,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 208,
        column: 11,
        span: 5213..5216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 208,
        column: 17,
        span: 5217..5222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 18,
        span: 5222..5223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        line: 208,
        column: 24,
        span: 5223..5229,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 208,
        column: 25,
        span: 5229..5230,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'XUXU'",
        ),
        line: 208,
        column: 32,
        span: 5231..5237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 33,
        span: 5237..5238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 34,
        span: 5238..5239,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 215,
        column: 6,
        span: 5279..5284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 215,
        column: 8,
        span: 5285..5286,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 215,
        column: 10,
        span: 5287..5288,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 215,
        column: 13,
        span: 5289..5291,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 218,
        column: 6,
        span: 5378..5383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 218,
        column: 9,
        span: 5384..5386,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
        column: 10,
        span: 5386..5387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 218,
        column: 14,
        span: 5388..5391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
        column: 15,
        span: 5391..5392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 218,
        column: 20,
        span: 5393..5397,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 218,
        column: 22,
        span: 5398..5399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 218,
        column: 30,
        span: 5400..5407,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 218,
        column: 31,
        span: 5407..5408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 218,
        column: 38,
        span: 5408..5415,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 39,
        span: 5415..5416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 218,
        column: 40,
        span: 5416..5417,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.so\"",
        ),
        line: 218,
        column: 49,
        span: 5417..5426,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 218,
        column: 50,
        span: 5426..5427,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*\"",
        ),
        line: 218,
        column: 54,
        span: 5428..5431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 55,
        span: 5431..5432,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 219,
        column: 3,
        span: 5433..5435,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 219,
        column: 7,
        span: 5436..5439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 219,
        column: 10,
        span: 5440..5442,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 219,
        column: 0,
        span: 5443..5447,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 220,
        column: 8,
        span: 5450..5455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 220,
        column: 10,
        span: 5456..5457,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 11,
        span: 5457..5458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 220,
        column: 15,
        span: 5459..5462,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 16,
        span: 5462..5463,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 220,
        column: 21,
        span: 5464..5468,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 220,
        column: 23,
        span: 5469..5470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 220,
        column: 31,
        span: 5471..5478,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 220,
        column: 32,
        span: 5478..5479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 220,
        column: 39,
        span: 5479..5486,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 40,
        span: 5486..5487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"donotexist\"",
        ),
        line: 220,
        column: 52,
        span: 5487..5499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 53,
        span: 5499..5500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 220,
        column: 55,
        span: 5501..5502,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 220,
        column: 57,
        span: 5502..5504,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 220,
        column: 63,
        span: 5504..5510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 64,
        span: 5510..5511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 9,
        span: 5514..5520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 10,
        span: 5520..5521,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 221,
        column: 13,
        span: 5521..5524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 221,
        column: 15,
        span: 5525..5526,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 221,
        column: 19,
        span: 5527..5530,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 221,
        column: 24,
        span: 5531..5535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 25,
        span: 5535..5536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 221,
        column: 28,
        span: 5536..5539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 29,
        span: 5539..5540,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
        column: 32,
        span: 5541..5543,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 221,
        column: 41,
        span: 5544..5552,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 221,
        column: 45,
        span: 5553..5556,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 221,
        column: 50,
        span: 5557..5561,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 221,
        column: 53,
        span: 5562..5564,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"absent\"",
        ),
        line: 221,
        column: 62,
        span: 5565..5573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 63,
        span: 5573..5574,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 222,
        column: 4,
        span: 5577..5578,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 5,
        span: 5578..5579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 222,
        column: 12,
        span: 5579..5586,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 222,
        column: 15,
        span: 5587..5589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 222,
        column: 21,
        span: 5590..5595,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 22,
        span: 5595..5596,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 23,
        span: 5596..5597,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\a\\n >>> cannot load dynamic library <<<\\n\\a'",
        ),
        line: 222,
        column: 69,
        span: 5597..5643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 70,
        span: 5643..5644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 223,
        column: 8,
        span: 5647..5652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 223,
        column: 9,
        span: 5652..5653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 223,
        column: 12,
        span: 5653..5656,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 223,
        column: 13,
        span: 5656..5657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 223,
        column: 18,
        span: 5658..5662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 223,
        column: 19,
        span: 5662..5663,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 224,
        column: 0,
        span: 5664..5668,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 226,
        column: 8,
        span: 5694..5699,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 226,
        column: 10,
        span: 5700..5701,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
        column: 12,
        span: 5702..5703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 226,
        column: 19,
        span: 5704..5710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 20,
        span: 5710..5711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 226,
        column: 27,
        span: 5711..5718,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 226,
        column: 28,
        span: 5718..5719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 226,
        column: 35,
        span: 5719..5726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 36,
        span: 5726..5727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 226,
        column: 37,
        span: 5727..5728,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.so\"",
        ),
        line: 226,
        column: 46,
        span: 5728..5737,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 226,
        column: 47,
        span: 5737..5738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 226,
        column: 49,
        span: 5739..5740,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 226,
        column: 51,
        span: 5740..5742,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"onefunction\"",
        ),
        line: 226,
        column: 64,
        span: 5742..5755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 65,
        span: 5755..5756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 66,
        span: 5756..5757,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 227,
        column: 8,
        span: 5760..5765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 227,
        column: 10,
        span: 5766..5767,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 11,
        span: 5767..5768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 227,
        column: 13,
        span: 5769..5770,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 227,
        column: 15,
        span: 5771..5772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 227,
        column: 17,
        span: 5773..5774,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 18,
        span: 5774..5775,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 20,
        span: 5774..5777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 227,
        column: 21,
        span: 5777..5778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 227,
        column: 24,
        span: 5778..5781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 25,
        span: 5781..5782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 228,
        column: 9,
        span: 5785..5791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 228,
        column: 10,
        span: 5791..5792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 228,
        column: 11,
        span: 5792..5793,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 228,
        column: 14,
        span: 5794..5796,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 17,
        span: 5796..5799,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 228,
        column: 21,
        span: 5800..5803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 228,
        column: 23,
        span: 5804..5805,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 228,
        column: 26,
        span: 5806..5808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 29,
        span: 5808..5811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 228,
        column: 30,
        span: 5811..5812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 230,
        column: 4,
        span: 5816..5817,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 230,
        column: 6,
        span: 5818..5819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 230,
        column: 13,
        span: 5820..5826,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 14,
        span: 5826..5827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 230,
        column: 21,
        span: 5827..5834,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 230,
        column: 22,
        span: 5834..5835,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 230,
        column: 29,
        span: 5835..5842,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 230,
        column: 30,
        span: 5842..5843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 230,
        column: 31,
        span: 5843..5844,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.so\"",
        ),
        line: 230,
        column: 40,
        span: 5844..5853,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 230,
        column: 41,
        span: 5853..5854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 230,
        column: 43,
        span: 5855..5856,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 230,
        column: 45,
        span: 5856..5858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"anotherfunc\"",
        ),
        line: 230,
        column: 58,
        span: 5858..5871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 59,
        span: 5871..5872,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 230,
        column: 60,
        span: 5872..5873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 231,
        column: 9,
        span: 5876..5882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 10,
        span: 5882..5883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 231,
        column: 11,
        span: 5883..5884,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 12,
        span: 5884..5885,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 14,
        span: 5884..5887,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 231,
        column: 15,
        span: 5887..5888,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 231,
        column: 18,
        span: 5888..5891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 19,
        span: 5891..5892,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 231,
        column: 22,
        span: 5893..5895,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1020\\n\"",
        ),
        line: 231,
        column: 31,
        span: 5896..5904,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 32,
        span: 5904..5905,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 234,
        column: 8,
        span: 5935..5940,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 234,
        column: 10,
        span: 5941..5942,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 11,
        span: 5942..5943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 234,
        column: 15,
        span: 5944..5947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 16,
        span: 5947..5948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 234,
        column: 21,
        span: 5949..5953,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 234,
        column: 23,
        span: 5954..5955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 234,
        column: 31,
        span: 5956..5963,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 234,
        column: 32,
        span: 5963..5964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 234,
        column: 39,
        span: 5964..5971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 234,
        column: 40,
        span: 5971..5972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 234,
        column: 41,
        span: 5972..5973,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.so\"",
        ),
        line: 234,
        column: 50,
        span: 5973..5982,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 234,
        column: 51,
        span: 5982..5983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 234,
        column: 53,
        span: 5984..5985,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 234,
        column: 55,
        span: 5985..5987,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 234,
        column: 61,
        span: 5987..5993,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 234,
        column: 62,
        span: 5993..5994,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 235,
        column: 9,
        span: 5997..6003,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 10,
        span: 6003..6004,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 235,
        column: 13,
        span: 6004..6007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 235,
        column: 15,
        span: 6008..6009,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 235,
        column: 19,
        span: 6010..6013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 235,
        column: 24,
        span: 6014..6018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 235,
        column: 25,
        span: 6018..6019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 235,
        column: 28,
        span: 6019..6022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 29,
        span: 6022..6023,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 235,
        column: 32,
        span: 6024..6026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 235,
        column: 41,
        span: 6027..6035,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 235,
        column: 45,
        span: 6036..6039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 235,
        column: 50,
        span: 6040..6044,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 235,
        column: 53,
        span: 6045..6047,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"init\"",
        ),
        line: 235,
        column: 60,
        span: 6048..6054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 235,
        column: 61,
        span: 6054..6055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 236,
        column: 4,
        span: 6058..6059,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 5,
        span: 6059..6060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 236,
        column: 9,
        span: 6061..6064,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 10,
        span: 6064..6065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 236,
        column: 15,
        span: 6066..6070,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 236,
        column: 17,
        span: 6071..6072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 236,
        column: 25,
        span: 6073..6080,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 236,
        column: 26,
        span: 6080..6081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 236,
        column: 33,
        span: 6081..6088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 34,
        span: 6088..6089,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"donotexist\"",
        ),
        line: 236,
        column: 46,
        span: 6089..6101,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 236,
        column: 47,
        span: 6101..6102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 236,
        column: 49,
        span: 6103..6104,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 236,
        column: 51,
        span: 6104..6106,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 236,
        column: 57,
        span: 6106..6112,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 58,
        span: 6112..6113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 237,
        column: 9,
        span: 6116..6122,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 10,
        span: 6122..6123,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 237,
        column: 13,
        span: 6123..6126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 237,
        column: 15,
        span: 6127..6128,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 237,
        column: 19,
        span: 6129..6132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 237,
        column: 24,
        span: 6133..6137,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 237,
        column: 25,
        span: 6137..6138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 237,
        column: 28,
        span: 6138..6141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 29,
        span: 6141..6142,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 237,
        column: 32,
        span: 6143..6145,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 237,
        column: 41,
        span: 6146..6154,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 237,
        column: 45,
        span: 6155..6158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 237,
        column: 50,
        span: 6159..6163,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 237,
        column: 53,
        span: 6164..6166,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"open\"",
        ),
        line: 237,
        column: 60,
        span: 6167..6173,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 237,
        column: 61,
        span: 6173..6174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 240,
        column: 4,
        span: 6238..6239,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 240,
        column: 6,
        span: 6240..6241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 240,
        column: 13,
        span: 6242..6248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 14,
        span: 6248..6249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 240,
        column: 21,
        span: 6249..6256,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 240,
        column: 22,
        span: 6256..6257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 240,
        column: 29,
        span: 6257..6264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 240,
        column: 30,
        span: 6264..6265,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 240,
        column: 31,
        span: 6265..6266,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib11.so\"",
        ),
        line: 240,
        column: 41,
        span: 6266..6276,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 240,
        column: 42,
        span: 6276..6277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 240,
        column: 44,
        span: 6278..6279,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 240,
        column: 46,
        span: 6279..6281,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"luaopen_lib11\"",
        ),
        line: 240,
        column: 61,
        span: 6281..6296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 62,
        span: 6296..6297,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 240,
        column: 63,
        span: 6297..6298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 241,
        column: 9,
        span: 6301..6307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 10,
        span: 6307..6308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 241,
        column: 11,
        span: 6308..6309,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 241,
        column: 12,
        span: 6309..6310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 13,
        span: 6310..6311,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 241,
        column: 16,
        span: 6312..6314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exported\"",
        ),
        line: 241,
        column: 27,
        span: 6315..6325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 241,
        column: 28,
        span: 6325..6326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 244,
        column: 10,
        span: 6373..6380,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 244,
        column: 11,
        span: 6380..6381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 244,
        column: 16,
        span: 6381..6386,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 244,
        column: 18,
        span: 6387..6388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 244,
        column: 20,
        span: 6389..6390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?.so\"",
        ),
        line: 244,
        column: 26,
        span: 6390..6396,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 245,
        column: 8,
        span: 6399..6404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lib2",
        ),
        line: 245,
        column: 13,
        span: 6405..6409,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
        column: 15,
        span: 6410..6411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 245,
        column: 23,
        span: 6412..6419,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"v-lib2\"",
        ),
        line: 245,
        column: 31,
        span: 6419..6427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 248,
        column: 9,
        span: 6506..6512,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 10,
        span: 6512..6513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 248,
        column: 14,
        span: 6513..6517,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 248,
        column: 15,
        span: 6517..6518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 248,
        column: 16,
        span: 6518..6519,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
        column: 19,
        span: 6520..6522,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"v-lib2\"",
        ),
        line: 248,
        column: 28,
        span: 6523..6531,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 248,
        column: 32,
        span: 6532..6535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 248,
        column: 37,
        span: 6536..6540,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 248,
        column: 38,
        span: 6540..6541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 248,
        column: 39,
        span: 6541..6542,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 248,
        column: 42,
        span: 6543..6545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 248,
        column: 44,
        span: 6546..6547,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"v-lib2.so\"",
        ),
        line: 248,
        column: 55,
        span: 6547..6558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 56,
        span: 6558..6559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 249,
        column: 9,
        span: 6562..6568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 10,
        span: 6568..6569,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lib2",
        ),
        line: 249,
        column: 14,
        span: 6569..6573,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 249,
        column: 15,
        span: 6573..6574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "id",
        ),
        line: 249,
        column: 17,
        span: 6574..6576,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 249,
        column: 18,
        span: 6576..6577,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 249,
        column: 21,
        span: 6577..6580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 22,
        span: 6580..6581,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 249,
        column: 25,
        span: 6582..6584,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 249,
        column: 29,
        span: 6585..6588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 249,
        column: 30,
        span: 6588..6589,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 252,
        column: 8,
        span: 6616..6621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fs",
        ),
        line: 252,
        column: 11,
        span: 6622..6624,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 13,
        span: 6625..6626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 252,
        column: 21,
        span: 6627..6634,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.sub\"",
        ),
        line: 252,
        column: 31,
        span: 6634..6644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 9,
        span: 6647..6653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 10,
        span: 6653..6654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 253,
        column: 14,
        span: 6654..6658,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 15,
        span: 6658..6659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 253,
        column: 16,
        span: 6659..6660,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 19,
        span: 6661..6663,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.sub\"",
        ),
        line: 253,
        column: 30,
        span: 6664..6674,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 253,
        column: 34,
        span: 6675..6678,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 253,
        column: 39,
        span: 6679..6683,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 253,
        column: 40,
        span: 6683..6684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 253,
        column: 41,
        span: 6684..6685,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 44,
        span: 6686..6688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 253,
        column: 46,
        span: 6689..6690,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.so\"",
        ),
        line: 253,
        column: 55,
        span: 6690..6699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 56,
        span: 6699..6700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 254,
        column: 9,
        span: 6703..6709,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 10,
        span: 6709..6710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fs",
        ),
        line: 254,
        column: 12,
        span: 6710..6712,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
        column: 13,
        span: 6712..6713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "id",
        ),
        line: 254,
        column: 15,
        span: 6713..6715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 254,
        column: 16,
        span: 6715..6716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 18,
        span: 6715..6718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 19,
        span: 6718..6719,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 254,
        column: 22,
        span: 6720..6722,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 254,
        column: 25,
        span: 6722..6725,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 254,
        column: 26,
        span: 6725..6726,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 255,
        column: 0,
        span: 6727..6730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 257,
        column: 5,
        span: 6732..6736,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 257,
        column: 7,
        span: 6737..6738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 257,
        column: 0,
        span: 6739..6741,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 262,
        column: 0,
        span: 6764..6766,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 263,
        column: 8,
        span: 6769..6774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 263,
        column: 10,
        span: 6775..6776,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 263,
        column: 12,
        span: 6777..6778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 263,
        column: 0,
        span: 6779..6786,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 264,
        column: 10,
        span: 6789..6796,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 264,
        column: 12,
        span: 6797..6798,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 264,
        column: 14,
        span: 6799..6800,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 264,
        column: 15,
        span: 6800..6801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 265,
        column: 4,
        span: 6804..6805,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 5,
        span: 6805..6806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preload",
        ),
        line: 265,
        column: 12,
        span: 6806..6813,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 13,
        span: 6813..6814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 265,
        column: 15,
        span: 6814..6816,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 17,
        span: 6817..6818,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 265,
        column: 26,
        span: 6819..6827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 28,
        span: 6828..6829,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 265,
        column: 31,
        span: 6829..6832,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 32,
        span: 6832..6833,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 266,
        column: 10,
        span: 6838..6843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 266,
        column: 15,
        span: 6844..6848,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 266,
        column: 17,
        span: 6849..6850,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 266,
        column: 19,
        span: 6851..6852,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 266,
        column: 22,
        span: 6852..6855,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 266,
        column: 23,
        span: 6855..6856,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 267,
        column: 13,
        span: 6861..6869,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 267,
        column: 18,
        span: 6870..6874,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 267,
        column: 20,
        span: 6875..6876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 267,
        column: 21,
        span: 6876..6877,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 267,
        column: 22,
        span: 6877..6878,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 267,
        column: 29,
        span: 6879..6885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 267,
        column: 31,
        span: 6886..6887,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 267,
        column: 32,
        span: 6887..6888,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 267,
        column: 34,
        span: 6887..6890,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 267,
        column: 0,
        span: 6891..6894,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 268,
        column: 11,
        span: 6899..6905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 268,
        column: 0,
        span: 6906..6910,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 269,
        column: 0,
        span: 6913..6916,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 271,
        column: 8,
        span: 6920..6925,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 271,
        column: 11,
        span: 6926..6928,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 271,
        column: 13,
        span: 6929..6930,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 271,
        column: 21,
        span: 6931..6938,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pl\"",
        ),
        line: 271,
        column: 25,
        span: 6938..6942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 272,
        column: 9,
        span: 6945..6951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 272,
        column: 10,
        span: 6951..6952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 272,
        column: 17,
        span: 6952..6959,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pl\"",
        ),
        line: 272,
        column: 21,
        span: 6959..6963,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 272,
        column: 24,
        span: 6964..6966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 272,
        column: 27,
        span: 6967..6969,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 272,
        column: 28,
        span: 6969..6970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 273,
        column: 9,
        span: 6973..6979,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 10,
        span: 6979..6980,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 273,
        column: 12,
        span: 6980..6982,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
        column: 13,
        span: 6982..6983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 273,
        column: 17,
        span: 6983..6987,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 18,
        span: 6987..6988,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 20,
        span: 6987..6990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 21,
        span: 6990..6991,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 273,
        column: 24,
        span: 6992..6994,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 273,
        column: 27,
        span: 6994..6997,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 28,
        span: 6997..6998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 274,
        column: 9,
        span: 7001..7007,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 10,
        span: 7007..7008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 274,
        column: 12,
        span: 7008..7010,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 274,
        column: 13,
        span: 7010..7011,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 14,
        span: 7010..7012,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 274,
        column: 15,
        span: 7012..7013,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 274,
        column: 18,
        span: 7014..7016,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pl\"",
        ),
        line: 274,
        column: 23,
        span: 7017..7021,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 274,
        column: 27,
        span: 7022..7025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 274,
        column: 30,
        span: 7026..7028,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 274,
        column: 31,
        span: 7028..7029,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 274,
        column: 32,
        span: 7028..7030,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 274,
        column: 33,
        span: 7030..7031,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 274,
        column: 36,
        span: 7032..7034,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 274,
        column: 40,
        span: 7035..7038,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 41,
        span: 7038..7039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 276,
        column: 10,
        span: 7043..7050,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 276,
        column: 12,
        span: 7051..7052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 276,
        column: 0,
        span: 7053..7054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 277,
        column: 9,
        span: 7057..7063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 10,
        span: 7063..7064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 277,
        column: 14,
        span: 7064..7068,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 277,
        column: 15,
        span: 7068..7069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 277,
        column: 22,
        span: 7069..7076,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 277,
        column: 23,
        span: 7076..7077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 277,
        column: 27,
        span: 7077..7081,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 28,
        span: 7081..7082,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 277,
        column: 31,
        span: 7083..7085,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 277,
        column: 40,
        span: 7086..7094,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 277,
        column: 41,
        span: 7094..7095,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 278,
        column: 0,
        span: 7096..7099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 280,
        column: 6,
        span: 7101..7106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 280,
        column: 7,
        span: 7106..7107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 280,
        column: 10,
        span: 7107..7110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 280,
        column: 11,
        span: 7110..7111,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 282,
        column: 4,
        span: 7113..7116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 284,
        column: 6,
        span: 7123..7128,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 7,
        span: 7128..7129,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing assignments, logical operators, and constructors\"",
        ),
        line: 284,
        column: 65,
        span: 7129..7187,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 66,
        span: 7187..7188,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 286,
        column: 6,
        span: 7190..7195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 286,
        column: 10,
        span: 7196..7199,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 11,
        span: 7199..7200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        line: 286,
        column: 16,
        span: 7201..7205,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 286,
        column: 18,
        span: 7206..7207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 0,
        span: 7207..7210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 288,
        column: 2,
        span: 7212..7213,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 3,
        span: 7213..7214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 288,
        column: 5,
        span: 7215..7216,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
        column: 7,
        span: 7217..7218,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 9,
        span: 7218..7220,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 288,
        column: 10,
        span: 7220..7221,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 12,
        span: 7221..7223,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 288,
        column: 13,
        span: 7223..7224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 288,
        column: 0,
        span: 7223..7225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 289,
        column: 7,
        span: 7226..7232,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 289,
        column: 8,
        span: 7232..7233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 289,
        column: 9,
        span: 7233..7234,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 289,
        column: 11,
        span: 7234..7236,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 289,
        column: 12,
        span: 7235..7237,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 289,
        column: 16,
        span: 7238..7241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 289,
        column: 18,
        span: 7242..7243,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 289,
        column: 20,
        span: 7243..7245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 289,
        column: 21,
        span: 7244..7246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 289,
        column: 22,
        span: 7246..7247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 290,
        column: 2,
        span: 7248..7249,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 290,
        column: 3,
        span: 7249..7250,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 290,
        column: 4,
        span: 7250..7251,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 290,
        column: 5,
        span: 7251..7252,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 291,
        column: 9,
        span: 7253..7261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 291,
        column: 11,
        span: 7262..7263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 12,
        span: 7263..7264,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 13,
        span: 7264..7265,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 291,
        column: 20,
        span: 7266..7272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 23,
        span: 7272..7275,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 24,
        span: 7275..7276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 27,
        span: 7276..7279,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 28,
        span: 7279..7280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 31,
        span: 7280..7283,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 291,
        column: 0,
        span: 7284..7287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 292,
        column: 2,
        span: 7288..7289,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 292,
        column: 3,
        span: 7289..7290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 292,
        column: 4,
        span: 7290..7291,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 5,
        span: 7291..7292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 292,
        column: 7,
        span: 7293..7294,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 8,
        span: 7294..7295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 292,
        column: 10,
        span: 7296..7297,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 292,
        column: 11,
        span: 7297..7298,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 12,
        span: 7297..7299,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 292,
        column: 13,
        span: 7299..7300,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 292,
        column: 15,
        span: 7301..7302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 17,
        span: 7302..7304,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 18,
        span: 7304..7305,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 20,
        span: 7305..7307,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 292,
        column: 21,
        span: 7307..7308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 292,
        column: 23,
        span: 7309..7310,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 24,
        span: 7310..7311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 25,
        span: 7311..7312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 293,
        column: 7,
        span: 7313..7319,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 293,
        column: 8,
        span: 7319..7320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 293,
        column: 9,
        span: 7320..7321,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 293,
        column: 10,
        span: 7321..7322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 293,
        column: 11,
        span: 7322..7323,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 293,
        column: 13,
        span: 7323..7325,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 14,
        span: 7324..7326,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 293,
        column: 18,
        span: 7327..7330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 293,
        column: 20,
        span: 7331..7332,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 293,
        column: 22,
        span: 7332..7334,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 23,
        span: 7333..7335,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 293,
        column: 27,
        span: 7336..7339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 293,
        column: 29,
        span: 7340..7341,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 293,
        column: 30,
        span: 7341..7342,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 31,
        span: 7341..7343,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 293,
        column: 32,
        span: 7343..7344,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 293,
        column: 34,
        span: 7344..7346,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 293,
        column: 36,
        span: 7345..7348,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 293,
        column: 37,
        span: 7348..7349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 294,
        column: 2,
        span: 7350..7351,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 294,
        column: 3,
        span: 7351..7352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 294,
        column: 4,
        span: 7352..7353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 5,
        span: 7353..7354,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 6,
        span: 7354..7355,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 294,
        column: 7,
        span: 7355..7356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 8,
        span: 7356..7357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 294,
        column: 10,
        span: 7358..7359,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 11,
        span: 7359..7360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 294,
        column: 13,
        span: 7361..7362,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 294,
        column: 14,
        span: 7362..7363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 294,
        column: 15,
        span: 7363..7364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 16,
        span: 7364..7365,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 17,
        span: 7365..7366,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 294,
        column: 18,
        span: 7366..7367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 294,
        column: 19,
        span: 7366..7368,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 294,
        column: 20,
        span: 7368..7369,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 294,
        column: 22,
        span: 7370..7371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 294,
        column: 24,
        span: 7372..7373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 294,
        column: 25,
        span: 7373..7374,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 294,
        column: 26,
        span: 7374..7375,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 27,
        span: 7375..7376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 294,
        column: 29,
        span: 7377..7378,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 294,
        column: 30,
        span: 7378..7379,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 294,
        column: 34,
        span: 7380..7383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 295,
        column: 7,
        span: 7384..7390,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 8,
        span: 7390..7391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 295,
        column: 9,
        span: 7391..7392,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 295,
        column: 10,
        span: 7392..7393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 12,
        span: 7392..7395,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 295,
        column: 13,
        span: 7395..7396,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 295,
        column: 16,
        span: 7397..7399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 19,
        span: 7399..7402,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 295,
        column: 23,
        span: 7403..7406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 295,
        column: 25,
        span: 7407..7408,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 295,
        column: 28,
        span: 7409..7411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 295,
        column: 30,
        span: 7412..7413,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 295,
        column: 34,
        span: 7414..7417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 295,
        column: 36,
        span: 7418..7419,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 295,
        column: 37,
        span: 7419..7420,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 295,
        column: 39,
        span: 7419..7422,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 295,
        column: 40,
        span: 7422..7423,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 295,
        column: 43,
        span: 7424..7426,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 295,
        column: 47,
        span: 7427..7430,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 48,
        span: 7430..7431,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 297,
        column: 0,
        span: 7433..7435,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 298,
        column: 8,
        span: 7438..7443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 298,
        column: 10,
        span: 7444..7445,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 298,
        column: 12,
        span: 7446..7447,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 298,
        column: 21,
        span: 7448..7456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 23,
        span: 7457..7458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 298,
        column: 24,
        span: 7458..7459,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 25,
        span: 7459..7460,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 298,
        column: 31,
        span: 7461..7466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 298,
        column: 33,
        span: 7467..7468,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 298,
        column: 35,
        span: 7469..7470,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 298,
        column: 37,
        span: 7471..7472,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 298,
        column: 38,
        span: 7472..7473,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 298,
        column: 39,
        span: 7473..7474,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 298,
        column: 43,
        span: 7475..7478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 298,
        column: 45,
        span: 7479..7480,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 298,
        column: 46,
        span: 7480..7481,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 47,
        span: 7480..7482,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 298,
        column: 48,
        span: 7482..7483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 298,
        column: 49,
        span: 7483..7484,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 298,
        column: 52,
        span: 7485..7487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 298,
        column: 54,
        span: 7488..7489,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 298,
        column: 55,
        span: 7489..7490,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 298,
        column: 56,
        span: 7490..7491,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 298,
        column: 57,
        span: 7491..7492,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 298,
        column: 58,
        span: 7492..7493,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 298,
        column: 59,
        span: 7493..7494,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 298,
        column: 63,
        span: 7495..7498,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 298,
        column: 64,
        span: 7498..7499,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 299,
        column: 32,
        span: 7525..7531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 299,
        column: 38,
        span: 7532..7537,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
        column: 39,
        span: 7537..7538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 299,
        column: 45,
        span: 7538..7544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 46,
        span: 7544..7545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 299,
        column: 47,
        span: 7545..7546,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 48,
        span: 7546..7547,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 299,
        column: 52,
        span: 7548..7551,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 299,
        column: 53,
        span: 7551..7552,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 300,
        column: 8,
        span: 7555..7560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 300,
        column: 10,
        span: 7561..7562,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 300,
        column: 11,
        span: 7562..7563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 300,
        column: 12,
        span: 7563..7564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 300,
        column: 13,
        span: 7564..7565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 300,
        column: 0,
        span: 7565..7566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 301,
        column: 4,
        span: 7569..7570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 5,
        span: 7570..7571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 301,
        column: 6,
        span: 7571..7572,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 301,
        column: 8,
        span: 7573..7574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 301,
        column: 10,
        span: 7574..7576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 301,
        column: 11,
        span: 7576..7577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 301,
        column: 13,
        span: 7578..7579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 14,
        span: 7579..7580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 301,
        column: 15,
        span: 7579..7581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 16,
        span: 7581..7582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 302,
        column: 9,
        span: 7585..7591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 10,
        span: 7591..7592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 302,
        column: 11,
        span: 7592..7593,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 302,
        column: 14,
        span: 7594..7596,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
        column: 16,
        span: 7596..7598,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 302,
        column: 20,
        span: 7599..7602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 302,
        column: 22,
        span: 7603..7604,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 302,
        column: 25,
        span: 7605..7607,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
        column: 27,
        span: 7607..7609,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 28,
        span: 7609..7610,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 303,
        column: 4,
        span: 7613..7614,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 5,
        span: 7614..7615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 303,
        column: 6,
        span: 7615..7616,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 303,
        column: 8,
        span: 7617..7618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 303,
        column: 10,
        span: 7618..7620,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 11,
        span: 7620..7621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 303,
        column: 13,
        span: 7622..7623,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 14,
        span: 7623..7624,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 303,
        column: 15,
        span: 7623..7625,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 16,
        span: 7625..7626,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 304,
        column: 9,
        span: 7629..7635,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 10,
        span: 7635..7636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 304,
        column: 11,
        span: 7636..7637,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 304,
        column: 14,
        span: 7638..7640,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 304,
        column: 16,
        span: 7640..7642,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 304,
        column: 20,
        span: 7643..7646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 304,
        column: 22,
        span: 7647..7648,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 304,
        column: 25,
        span: 7649..7651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 304,
        column: 27,
        span: 7651..7653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 28,
        span: 7653..7654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 305,
        column: 4,
        span: 7657..7658,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 305,
        column: 5,
        span: 7658..7659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 305,
        column: 6,
        span: 7659..7660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 305,
        column: 7,
        span: 7660..7661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 305,
        column: 8,
        span: 7661..7662,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
        column: 10,
        span: 7663..7664,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 305,
        column: 12,
        span: 7664..7666,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 305,
        column: 13,
        span: 7666..7667,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 305,
        column: 14,
        span: 7666..7668,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 305,
        column: 15,
        span: 7668..7669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 305,
        column: 16,
        span: 7669..7670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 17,
        span: 7670..7671,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 305,
        column: 18,
        span: 7670..7672,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 19,
        span: 7672..7673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 306,
        column: 9,
        span: 7676..7682,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 10,
        span: 7682..7683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
        column: 11,
        span: 7683..7684,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 306,
        column: 13,
        span: 7684..7686,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 306,
        column: 14,
        span: 7685..7687,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 306,
        column: 18,
        span: 7688..7691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 306,
        column: 20,
        span: 7692..7693,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 306,
        column: 22,
        span: 7693..7695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 306,
        column: 23,
        span: 7694..7696,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 306,
        column: 27,
        span: 7697..7700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 306,
        column: 29,
        span: 7701..7702,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 306,
        column: 31,
        span: 7702..7704,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 306,
        column: 32,
        span: 7703..7705,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 33,
        span: 7705..7706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 307,
        column: 4,
        span: 7709..7710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 5,
        span: 7710..7711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 307,
        column: 6,
        span: 7711..7712,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 7,
        span: 7712..7713,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 307,
        column: 8,
        span: 7713..7714,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 307,
        column: 10,
        span: 7715..7716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 12,
        span: 7716..7718,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 13,
        span: 7718..7719,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 14,
        span: 7718..7720,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 307,
        column: 15,
        span: 7720..7721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 307,
        column: 16,
        span: 7721..7722,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 307,
        column: 17,
        span: 7722..7723,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 307,
        column: 18,
        span: 7722..7724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 19,
        span: 7724..7725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 308,
        column: 9,
        span: 7728..7734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 10,
        span: 7734..7735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 308,
        column: 11,
        span: 7735..7736,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 308,
        column: 13,
        span: 7736..7738,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 14,
        span: 7737..7739,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 308,
        column: 18,
        span: 7740..7743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 308,
        column: 20,
        span: 7744..7745,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 308,
        column: 22,
        span: 7745..7747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 308,
        column: 23,
        span: 7746..7748,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 308,
        column: 27,
        span: 7749..7752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 308,
        column: 29,
        span: 7753..7754,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 308,
        column: 31,
        span: 7754..7756,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 308,
        column: 34,
        span: 7756..7759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 35,
        span: 7759..7760,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 309,
        column: 0,
        span: 7761..7764,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 311,
        column: 2,
        span: 7766..7767,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 3,
        span: 7767..7768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 311,
        column: 5,
        span: 7769..7770,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 6,
        span: 7770..7771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 311,
        column: 8,
        span: 7772..7773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 9,
        span: 7773..7774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 311,
        column: 11,
        span: 7775..7776,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 311,
        column: 13,
        span: 7777..7778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 15,
        span: 7778..7780,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 311,
        column: 19,
        span: 7781..7784,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 311,
        column: 23,
        span: 7785..7788,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 24,
        span: 7788..7789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 26,
        span: 7789..7791,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 311,
        column: 29,
        span: 7792..7794,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 311,
        column: 33,
        span: 7795..7798,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 34,
        span: 7798..7799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 36,
        span: 7800..7801,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 37,
        span: 7800..7802,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 311,
        column: 41,
        span: 7803..7806,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 43,
        span: 7807..7808,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 311,
        column: 46,
        span: 7808..7811,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 311,
        column: 49,
        span: 7812..7814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 51,
        span: 7814..7816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 52,
        span: 7816..7817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 53,
        span: 7817..7818,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 54,
        span: 7818..7819,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 0,
        span: 7819..7821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 312,
        column: 7,
        span: 7822..7828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 8,
        span: 7828..7829,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 312,
        column: 11,
        span: 7829..7832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 312,
        column: 13,
        span: 7833..7834,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 312,
        column: 17,
        span: 7835..7838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 312,
        column: 19,
        span: 7839..7840,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 312,
        column: 23,
        span: 7841..7844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 312,
        column: 25,
        span: 7845..7846,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 312,
        column: 29,
        span: 7847..7850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 312,
        column: 31,
        span: 7851..7852,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 312,
        column: 33,
        span: 7852..7854,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 312,
        column: 34,
        span: 7853..7855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 35,
        span: 7855..7856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 314,
        column: 2,
        span: 7858..7859,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 314,
        column: 4,
        span: 7860..7861,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 314,
        column: 0,
        span: 7861..7864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 315,
        column: 2,
        span: 7865..7866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 3,
        span: 7866..7867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 315,
        column: 5,
        span: 7868..7869,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 6,
        span: 7869..7870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 315,
        column: 8,
        span: 7871..7872,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 315,
        column: 9,
        span: 7872..7873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 315,
        column: 11,
        span: 7874..7875,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 315,
        column: 13,
        span: 7876..7877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 315,
        column: 15,
        span: 7878..7879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 315,
        column: 16,
        span: 7879..7880,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 315,
        column: 17,
        span: 7880..7881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 316,
        column: 7,
        span: 7882..7888,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 8,
        span: 7888..7889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 316,
        column: 9,
        span: 7889..7890,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 316,
        column: 11,
        span: 7890..7892,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 13,
        span: 7891..7894,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 316,
        column: 17,
        span: 7895..7898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 316,
        column: 19,
        span: 7899..7900,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 316,
        column: 21,
        span: 7900..7902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 23,
        span: 7901..7904,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 316,
        column: 27,
        span: 7905..7908,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 316,
        column: 29,
        span: 7909..7910,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 316,
        column: 31,
        span: 7910..7912,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 33,
        span: 7911..7914,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 316,
        column: 37,
        span: 7915..7918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 316,
        column: 39,
        span: 7919..7920,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 316,
        column: 41,
        span: 7920..7922,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 316,
        column: 44,
        span: 7922..7925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 45,
        span: 7925..7926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 317,
        column: 2,
        span: 7927..7928,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 3,
        span: 7928..7929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 317,
        column: 4,
        span: 7929..7930,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 317,
        column: 6,
        span: 7931..7932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 317,
        column: 8,
        span: 7933..7934,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 9,
        span: 7934..7935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 10,
        span: 7935..7936,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 11,
        span: 7936..7937,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 13,
        span: 7937..7939,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 14,
        span: 7939..7940,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 16,
        span: 7940..7942,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 17,
        span: 7942..7943,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 19,
        span: 7943..7945,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 20,
        span: 7945..7946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 317,
        column: 22,
        span: 7947..7948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 23,
        span: 7948..7949,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 24,
        span: 7949..7950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 318,
        column: 7,
        span: 7951..7957,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 8,
        span: 7957..7958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 318,
        column: 9,
        span: 7958..7959,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
        column: 11,
        span: 7959..7961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 13,
        span: 7960..7963,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 318,
        column: 17,
        span: 7964..7967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 318,
        column: 19,
        span: 7968..7969,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
        column: 21,
        span: 7969..7971,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 22,
        span: 7970..7972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 23,
        span: 7972..7973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 320,
        column: 7,
        span: 7975..7981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 8,
        span: 7981..7982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 320,
        column: 9,
        span: 7982..7983,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 320,
        column: 10,
        span: 7983..7984,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 320,
        column: 11,
        span: 7984..7985,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 320,
        column: 14,
        span: 7986..7988,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 320,
        column: 20,
        span: 7989..7994,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 320,
        column: 24,
        span: 7995..7998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 320,
        column: 26,
        span: 7999..8000,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 320,
        column: 27,
        span: 8000..8001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 320,
        column: 28,
        span: 8001..8002,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 320,
        column: 31,
        span: 8003..8005,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 320,
        column: 36,
        span: 8006..8010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 37,
        span: 8010..8011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 321,
        column: 7,
        span: 8012..8018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 8,
        span: 8018..8019,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 321,
        column: 9,
        span: 8019..8020,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 11,
        span: 8019..8022,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 321,
        column: 15,
        span: 8023..8026,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 17,
        span: 8026..8028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 18,
        span: 8028..8029,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 321,
        column: 21,
        span: 8030..8032,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 321,
        column: 23,
        span: 8032..8034,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 321,
        column: 24,
        span: 8034..8035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 322,
        column: 7,
        span: 8036..8042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 8,
        span: 8042..8043,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 322,
        column: 9,
        span: 8043..8044,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 11,
        span: 8043..8046,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 322,
        column: 14,
        span: 8047..8049,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 16,
        span: 8049..8051,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 17,
        span: 8051..8052,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 322,
        column: 20,
        span: 8053..8055,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 322,
        column: 23,
        span: 8055..8058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 322,
        column: 24,
        span: 8058..8059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 323,
        column: 7,
        span: 8060..8066,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 8,
        span: 8066..8067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 9,
        span: 8067..8068,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 323,
        column: 11,
        span: 8067..8070,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 323,
        column: 14,
        span: 8071..8073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 323,
        column: 21,
        span: 8074..8080,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 22,
        span: 8080..8081,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 323,
        column: 25,
        span: 8081..8084,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 26,
        span: 8084..8085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 27,
        span: 8085..8086,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 323,
        column: 30,
        span: 8087..8089,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 323,
        column: 33,
        span: 8089..8092,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 34,
        span: 8092..8093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 324,
        column: 7,
        span: 8094..8100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 8,
        span: 8100..8101,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 324,
        column: 11,
        span: 8101..8104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 13,
        span: 8105..8106,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 324,
        column: 16,
        span: 8106..8109,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 324,
        column: 20,
        span: 8110..8113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 324,
        column: 27,
        span: 8114..8120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 28,
        span: 8120..8121,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 324,
        column: 31,
        span: 8121..8124,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 32,
        span: 8124..8125,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 33,
        span: 8125..8126,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 34,
        span: 8126..8127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 325,
        column: 7,
        span: 8128..8134,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 8,
        span: 8134..8135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 325,
        column: 9,
        span: 8135..8136,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 325,
        column: 12,
        span: 8136..8139,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 325,
        column: 15,
        span: 8140..8142,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 325,
        column: 21,
        span: 8143..8148,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 22,
        span: 8148..8149,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 325,
        column: 25,
        span: 8150..8152,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 325,
        column: 31,
        span: 8153..8158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 325,
        column: 32,
        span: 8158..8159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 326,
        column: 7,
        span: 8160..8166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 8,
        span: 8166..8167,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 9,
        span: 8167..8168,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 326,
        column: 12,
        span: 8168..8171,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 326,
        column: 16,
        span: 8172..8175,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 326,
        column: 19,
        span: 8175..8178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 20,
        span: 8178..8179,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 326,
        column: 23,
        span: 8180..8182,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 326,
        column: 27,
        span: 8183..8186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 28,
        span: 8186..8187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 327,
        column: 7,
        span: 8188..8194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 8,
        span: 8194..8195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 9,
        span: 8195..8196,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 327,
        column: 14,
        span: 8196..8201,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 327,
        column: 18,
        span: 8202..8205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 21,
        span: 8205..8208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 22,
        span: 8208..8209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 25,
        span: 8210..8212,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 327,
        column: 31,
        span: 8213..8218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 32,
        span: 8218..8219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 328,
        column: 7,
        span: 8220..8226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 8,
        span: 8226..8227,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 9,
        span: 8227..8228,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 328,
        column: 13,
        span: 8228..8232,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 328,
        column: 16,
        span: 8233..8235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 328,
        column: 19,
        span: 8235..8238,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 20,
        span: 8238..8239,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 328,
        column: 23,
        span: 8240..8242,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 328,
        column: 28,
        span: 8243..8247,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 29,
        span: 8247..8248,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 329,
        column: 7,
        span: 8249..8255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 8,
        span: 8255..8256,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 9,
        span: 8256..8257,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 329,
        column: 14,
        span: 8257..8262,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 329,
        column: 17,
        span: 8263..8265,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 20,
        span: 8265..8268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 21,
        span: 8268..8269,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 329,
        column: 24,
        span: 8270..8272,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 27,
        span: 8272..8275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 28,
        span: 8275..8276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 330,
        column: 7,
        span: 8277..8283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 8,
        span: 8283..8284,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 330,
        column: 13,
        span: 8284..8289,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 330,
        column: 16,
        span: 8290..8292,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 330,
        column: 20,
        span: 8293..8296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 21,
        span: 8296..8297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
        column: 7,
        span: 8298..8304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 8,
        span: 8304..8305,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 331,
        column: 11,
        span: 8305..8308,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 331,
        column: 14,
        span: 8309..8311,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 331,
        column: 20,
        span: 8312..8317,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 21,
        span: 8317..8318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 332,
        column: 7,
        span: 8319..8325,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 8,
        span: 8325..8326,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 332,
        column: 11,
        span: 8326..8329,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 332,
        column: 15,
        span: 8330..8333,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 332,
        column: 18,
        span: 8334..8336,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 332,
        column: 23,
        span: 8337..8341,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 24,
        span: 8341..8342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 333,
        column: 7,
        span: 8343..8349,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 8,
        span: 8349..8350,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 333,
        column: 11,
        span: 8350..8353,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 333,
        column: 15,
        span: 8354..8357,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 333,
        column: 19,
        span: 8358..8361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 333,
        column: 22,
        span: 8362..8364,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 333,
        column: 28,
        span: 8365..8370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 29,
        span: 8370..8371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 334,
        column: 7,
        span: 8372..8378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 334,
        column: 8,
        span: 8378..8379,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 334,
        column: 11,
        span: 8379..8382,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 334,
        column: 15,
        span: 8383..8386,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 334,
        column: 17,
        span: 8386..8388,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 334,
        column: 20,
        span: 8389..8391,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 334,
        column: 25,
        span: 8392..8396,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 334,
        column: 26,
        span: 8396..8397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 335,
        column: 7,
        span: 8398..8404,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 8,
        span: 8404..8405,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 335,
        column: 11,
        span: 8405..8408,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 335,
        column: 15,
        span: 8409..8412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 335,
        column: 17,
        span: 8413..8414,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 335,
        column: 20,
        span: 8415..8417,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 335,
        column: 25,
        span: 8418..8422,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 26,
        span: 8422..8423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 336,
        column: 7,
        span: 8424..8430,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 8,
        span: 8430..8431,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 336,
        column: 11,
        span: 8431..8434,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 336,
        column: 15,
        span: 8435..8438,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 17,
        span: 8439..8440,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 18,
        span: 8439..8441,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 336,
        column: 21,
        span: 8442..8444,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 336,
        column: 25,
        span: 8445..8448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 26,
        span: 8448..8449,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 336,
        column: 29,
        span: 8450..8452,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 336,
        column: 34,
        span: 8453..8457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 35,
        span: 8457..8458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 337,
        column: 7,
        span: 8459..8465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 8,
        span: 8465..8466,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 337,
        column: 11,
        span: 8466..8469,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 337,
        column: 15,
        span: 8470..8473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 17,
        span: 8474..8475,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 337,
        column: 20,
        span: 8475..8478,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 337,
        column: 24,
        span: 8479..8482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "56",
                    after_decimal: "",
                },
            ),
        ),
        line: 337,
        column: 27,
        span: 8482..8485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 28,
        span: 8485..8486,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 337,
        column: 31,
        span: 8487..8489,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 337,
        column: 37,
        span: 8490..8495,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 38,
        span: 8495..8496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 338,
        column: 7,
        span: 8497..8503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 8,
        span: 8503..8504,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 338,
        column: 11,
        span: 8504..8507,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 338,
        column: 15,
        span: 8508..8511,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 338,
        column: 17,
        span: 8512..8513,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 338,
        column: 20,
        span: 8513..8516,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 338,
        column: 24,
        span: 8517..8520,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 338,
        column: 29,
        span: 8521..8525,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 30,
        span: 8525..8526,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 338,
        column: 33,
        span: 8527..8529,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 338,
        column: 39,
        span: 8530..8535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 338,
        column: 40,
        span: 8535..8536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 340,
        column: 7,
        span: 8538..8544,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 8,
        span: 8544..8545,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 340,
        column: 9,
        span: 8545..8546,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 340,
        column: 10,
        span: 8546..8547,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 340,
        column: 13,
        span: 8548..8550,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 340,
        column: 15,
        span: 8551..8552,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 340,
        column: 16,
        span: 8552..8553,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 17,
        span: 8553..8554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 341,
        column: 6,
        span: 8555..8560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 7,
        span: 8560..8561,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 341,
        column: 10,
        span: 8561..8564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 11,
        span: 8564..8565,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 343,
        column: 2,
        span: 8567..8568,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
        column: 4,
        span: 8569..8570,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 343,
        column: 6,
        span: 8571..8572,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 343,
        column: 7,
        span: 8572..8573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 344,
        column: 2,
        span: 8574..8575,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 344,
        column: 3,
        span: 8575..8576,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 344,
        column: 7,
        span: 8576..8580,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 344,
        column: 8,
        span: 8580..8581,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 344,
        column: 10,
        span: 8582..8583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 344,
        column: 0,
        span: 8583..8586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 345,
        column: 2,
        span: 8587..8588,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 345,
        column: 3,
        span: 8588..8589,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 345,
        column: 8,
        span: 8589..8594,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 345,
        column: 9,
        span: 8594..8595,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 345,
        column: 11,
        span: 8596..8597,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 345,
        column: 0,
        span: 8597..8600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 346,
        column: 7,
        span: 8601..8607,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 8,
        span: 8607..8608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 346,
        column: 9,
        span: 8608..8609,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 346,
        column: 10,
        span: 8609..8610,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 11,
        span: 8609..8611,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 346,
        column: 12,
        span: 8611..8612,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 13,
        span: 8611..8613,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 346,
        column: 14,
        span: 8613..8614,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 346,
        column: 17,
        span: 8615..8617,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 20,
        span: 8617..8620,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 346,
        column: 24,
        span: 8621..8624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 346,
        column: 26,
        span: 8625..8626,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 346,
        column: 27,
        span: 8626..8627,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 28,
        span: 8626..8628,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 346,
        column: 29,
        span: 8628..8629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 30,
        span: 8628..8630,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 346,
        column: 31,
        span: 8630..8631,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 346,
        column: 34,
        span: 8632..8634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 37,
        span: 8634..8637,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 38,
        span: 8637..8638,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 348,
        column: 9,
        span: 8640..8648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 348,
        column: 11,
        span: 8649..8650,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 12,
        span: 8650..8651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 348,
        column: 13,
        span: 8651..8652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 14,
        span: 8652..8653,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 348,
        column: 21,
        span: 8654..8660,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 348,
        column: 23,
        span: 8661..8662,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 348,
        column: 0,
        span: 8663..8666,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 350,
        column: 6,
        span: 8668..8673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 350,
        column: 8,
        span: 8674..8675,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 350,
        column: 10,
        span: 8676..8677,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 350,
        column: 12,
        span: 8678..8679,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 350,
        column: 13,
        span: 8679..8680,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 351,
        column: 4,
        span: 8681..8684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 351,
        column: 6,
        span: 8685..8686,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 351,
        column: 7,
        span: 8686..8687,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 351,
        column: 11,
        span: 8686..8691,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
        column: 12,
        span: 8691..8692,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 351,
        column: 13,
        span: 8692..8693,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 351,
        column: 17,
        span: 8692..8697,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 351,
        column: 18,
        span: 8697..8698,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 351,
        column: 19,
        span: 8698..8699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 351,
        column: 20,
        span: 8698..8700,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 351,
        column: 23,
        span: 8701..8703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 351,
        column: 25,
        span: 8704..8705,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 351,
        column: 26,
        span: 8705..8706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 351,
        column: 27,
        span: 8706..8707,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 351,
        column: 28,
        span: 8707..8708,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 351,
        column: 30,
        span: 8709..8710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 351,
        column: 32,
        span: 8711..8712,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 351,
        column: 33,
        span: 8712..8713,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 351,
        column: 0,
        span: 8714..8717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 352,
        column: 2,
        span: 8718..8719,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 352,
        column: 3,
        span: 8719..8720,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 352,
        column: 8,
        span: 8719..8725,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 352,
        column: 9,
        span: 8725..8726,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 352,
        column: 11,
        span: 8727..8728,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 352,
        column: 17,
        span: 8729..8734,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 352,
        column: 18,
        span: 8734..8735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 352,
        column: 20,
        span: 8736..8737,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 352,
        column: 21,
        span: 8737..8738,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 352,
        column: 25,
        span: 8738..8742,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 352,
        column: 26,
        span: 8742..8743,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 352,
        column: 28,
        span: 8744..8745,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 352,
        column: 31,
        span: 8745..8748,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 352,
        column: 32,
        span: 8748..8749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 352,
        column: 34,
        span: 8750..8751,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 352,
        column: 35,
        span: 8751..8752,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 352,
        column: 40,
        span: 8752..8757,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 352,
        column: 41,
        span: 8757..8758,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 352,
        column: 43,
        span: 8759..8760,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 352,
        column: 0,
        span: 8760..8763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 353,
        column: 7,
        span: 8764..8770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 8,
        span: 8770..8771,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 353,
        column: 9,
        span: 8771..8772,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 353,
        column: 10,
        span: 8772..8773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 353,
        column: 15,
        span: 8772..8778,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 353,
        column: 16,
        span: 8778..8779,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 353,
        column: 19,
        span: 8780..8782,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 353,
        column: 25,
        span: 8783..8788,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 353,
        column: 29,
        span: 8789..8792,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 353,
        column: 31,
        span: 8793..8794,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 353,
        column: 32,
        span: 8794..8795,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 353,
        column: 35,
        span: 8795..8798,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
        column: 37,
        span: 8798..8800,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 353,
        column: 38,
        span: 8800..8801,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 353,
        column: 41,
        span: 8802..8804,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
        column: 44,
        span: 8804..8807,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 353,
        column: 48,
        span: 8808..8811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 353,
        column: 50,
        span: 8812..8813,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 353,
        column: 51,
        span: 8813..8814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
        column: 53,
        span: 8813..8816,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 353,
        column: 54,
        span: 8816..8817,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
        column: 56,
        span: 8816..8819,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 353,
        column: 57,
        span: 8819..8820,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 353,
        column: 60,
        span: 8821..8823,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
        column: 63,
        span: 8823..8826,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 64,
        span: 8826..8827,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 354,
        column: 4,
        span: 8828..8831,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 354,
        column: 6,
        span: 8832..8833,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 354,
        column: 7,
        span: 8833..8834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
        column: 11,
        span: 8833..8838,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 12,
        span: 8838..8839,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 354,
        column: 13,
        span: 8839..8840,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
        column: 17,
        span: 8839..8844,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 18,
        span: 8844..8845,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 354,
        column: 19,
        span: 8845..8846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
        column: 20,
        span: 8845..8847,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 354,
        column: 23,
        span: 8848..8850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 354,
        column: 30,
        span: 8851..8857,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 31,
        span: 8857..8858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 354,
        column: 32,
        span: 8858..8859,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 354,
        column: 33,
        span: 8859..8860,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 354,
        column: 34,
        span: 8860..8861,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 354,
        column: 35,
        span: 8861..8862,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 354,
        column: 38,
        span: 8863..8865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 354,
        column: 40,
        span: 8866..8867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 41,
        span: 8867..8868,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 354,
        column: 42,
        span: 8868..8869,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 354,
        column: 0,
        span: 8870..8873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 355,
        column: 2,
        span: 8874..8875,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 355,
        column: 3,
        span: 8875..8876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 355,
        column: 8,
        span: 8876..8881,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 355,
        column: 9,
        span: 8881..8882,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 355,
        column: 11,
        span: 8883..8884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 355,
        column: 0,
        span: 8885..8891,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 356,
        column: 2,
        span: 8892..8893,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 356,
        column: 3,
        span: 8893..8894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 356,
        column: 4,
        span: 8894..8895,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 356,
        column: 5,
        span: 8895..8896,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 356,
        column: 7,
        span: 8897..8898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 356,
        column: 0,
        span: 8899..8904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 357,
        column: 2,
        span: 8905..8906,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 357,
        column: 3,
        span: 8906..8907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 357,
        column: 4,
        span: 8907..8908,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 357,
        column: 5,
        span: 8908..8909,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 357,
        column: 7,
        span: 8910..8911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 357,
        column: 0,
        span: 8912..8913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 7,
        span: 8914..8920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 8,
        span: 8920..8921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 358,
        column: 9,
        span: 8921..8922,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 358,
        column: 10,
        span: 8922..8923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 358,
        column: 11,
        span: 8923..8924,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 358,
        column: 12,
        span: 8924..8925,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 358,
        column: 13,
        span: 8925..8926,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 358,
        column: 14,
        span: 8926..8927,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 358,
        column: 15,
        span: 8927..8928,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 358,
        column: 16,
        span: 8928..8929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 358,
        column: 17,
        span: 8929..8930,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 358,
        column: 18,
        span: 8930..8931,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 358,
        column: 19,
        span: 8931..8932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 358,
        column: 20,
        span: 8932..8933,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 358,
        column: 21,
        span: 8933..8934,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 358,
        column: 22,
        span: 8934..8935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 358,
        column: 27,
        span: 8935..8940,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 358,
        column: 28,
        span: 8940..8941,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 358,
        column: 31,
        span: 8942..8944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 38,
        span: 8945..8951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 39,
        span: 8951..8952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 359,
        column: 2,
        span: 8953..8954,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 359,
        column: 3,
        span: 8954..8955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 359,
        column: 8,
        span: 8955..8960,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 359,
        column: 9,
        span: 8960..8961,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 10,
        span: 8961..8962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 359,
        column: 11,
        span: 8962..8963,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 359,
        column: 12,
        span: 8963..8964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 359,
        column: 13,
        span: 8964..8965,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 359,
        column: 14,
        span: 8965..8966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 359,
        column: 15,
        span: 8966..8967,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 359,
        column: 16,
        span: 8967..8968,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 359,
        column: 17,
        span: 8968..8969,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 359,
        column: 20,
        span: 8970..8972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 359,
        column: 22,
        span: 8973..8974,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 359,
        column: 23,
        span: 8974..8975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 359,
        column: 28,
        span: 8975..8980,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 359,
        column: 29,
        span: 8980..8981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 30,
        span: 8981..8982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 360,
        column: 7,
        span: 8983..8989,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 8,
        span: 8989..8990,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 360,
        column: 11,
        span: 8990..8993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 360,
        column: 17,
        span: 8994..8999,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 18,
        span: 8999..9000,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 360,
        column: 26,
        span: 9000..9008,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 28,
        span: 9009..9010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 29,
        span: 9010..9011,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 360,
        column: 35,
        span: 9012..9017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 360,
        column: 37,
        span: 9018..9019,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 360,
        column: 39,
        span: 9020..9021,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 360,
        column: 41,
        span: 9022..9023,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 360,
        column: 42,
        span: 9023..9024,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 360,
        column: 43,
        span: 9024..9025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 360,
        column: 45,
        span: 9026..9027,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 360,
        column: 46,
        span: 9027..9028,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 360,
        column: 49,
        span: 9028..9031,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 360,
        column: 50,
        span: 9031..9032,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 360,
        column: 52,
        span: 9033..9034,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 360,
        column: 55,
        span: 9034..9037,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 360,
        column: 59,
        span: 9038..9041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 60,
        span: 9041..9042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 61,
        span: 9042..9043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 361,
        column: 7,
        span: 9044..9050,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 8,
        span: 9050..9051,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 361,
        column: 11,
        span: 9051..9054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 361,
        column: 17,
        span: 9055..9060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 18,
        span: 9060..9061,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 361,
        column: 26,
        span: 9061..9069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 28,
        span: 9070..9071,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 29,
        span: 9071..9072,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 361,
        column: 35,
        span: 9073..9078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 361,
        column: 37,
        span: 9079..9080,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 361,
        column: 39,
        span: 9081..9082,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 361,
        column: 41,
        span: 9083..9084,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 361,
        column: 42,
        span: 9084..9085,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 361,
        column: 45,
        span: 9085..9088,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 361,
        column: 46,
        span: 9088..9089,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 361,
        column: 48,
        span: 9090..9091,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 361,
        column: 51,
        span: 9091..9094,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 361,
        column: 52,
        span: 9094..9095,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 361,
        column: 56,
        span: 9096..9099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 57,
        span: 9099..9100,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 58,
        span: 9100..9101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 362,
        column: 7,
        span: 9102..9108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 8,
        span: 9108..9109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 362,
        column: 9,
        span: 9109..9110,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 362,
        column: 10,
        span: 9110..9111,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 362,
        column: 13,
        span: 9111..9114,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 362,
        column: 14,
        span: 9114..9115,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 362,
        column: 17,
        span: 9116..9118,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 362,
        column: 21,
        span: 9119..9122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 22,
        span: 9122..9123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 363,
        column: 2,
        span: 9124..9125,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 363,
        column: 4,
        span: 9126..9127,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 363,
        column: 0,
        span: 9128..9131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 365,
        column: 2,
        span: 9133..9134,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 365,
        column: 4,
        span: 9135..9136,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 365,
        column: 6,
        span: 9137..9138,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 8,
        span: 9137..9140,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 9,
        span: 9140..9141,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 10,
        span: 9140..9142,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 11,
        span: 9142..9143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 12,
        span: 9142..9144,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 13,
        span: 9144..9145,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 14,
        span: 9144..9146,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 15,
        span: 9146..9147,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 16,
        span: 9146..9148,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 17,
        span: 9148..9149,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 18,
        span: 9148..9150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 19,
        span: 9150..9151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 20,
        span: 9150..9152,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 21,
        span: 9152..9153,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 22,
        span: 9152..9154,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 23,
        span: 9154..9155,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 24,
        span: 9154..9156,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 365,
        column: 25,
        span: 9156..9157,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 365,
        column: 27,
        span: 9158..9159,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 365,
        column: 28,
        span: 9159..9160,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 365,
        column: 29,
        span: 9159..9161,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 365,
        column: 30,
        span: 9161..9162,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 365,
        column: 31,
        span: 9162..9163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 365,
        column: 34,
        span: 9163..9166,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 35,
        span: 9166..9167,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 365,
        column: 37,
        span: 9168..9169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 365,
        column: 38,
        span: 9169..9170,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 365,
        column: 39,
        span: 9170..9171,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 365,
        column: 40,
        span: 9171..9172,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 365,
        column: 45,
        span: 9172..9177,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 46,
        span: 9177..9178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 365,
        column: 48,
        span: 9179..9180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 365,
        column: 49,
        span: 9180..9181,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 365,
        column: 52,
        span: 9181..9184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 365,
        column: 53,
        span: 9184..9185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 365,
        column: 55,
        span: 9186..9187,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 365,
        column: 56,
        span: 9187..9188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab'",
        ),
        line: 365,
        column: 60,
        span: 9188..9192,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 365,
        column: 61,
        span: 9192..9193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 366,
        column: 2,
        span: 9194..9195,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 3,
        span: 9195..9196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 366,
        column: 5,
        span: 9197..9198,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 366,
        column: 6,
        span: 9198..9199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 366,
        column: 7,
        span: 9199..9200,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 8,
        span: 9200..9201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 366,
        column: 10,
        span: 9202..9203,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 366,
        column: 11,
        span: 9203..9204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 366,
        column: 12,
        span: 9204..9205,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 366,
        column: 14,
        span: 9206..9207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 366,
        column: 16,
        span: 9208..9209,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 366,
        column: 17,
        span: 9209..9210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 366,
        column: 19,
        span: 9211..9212,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 366,
        column: 20,
        span: 9212..9213,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 366,
        column: 21,
        span: 9213..9214,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 366,
        column: 22,
        span: 9213..9215,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 366,
        column: 23,
        span: 9215..9216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 367,
        column: 7,
        span: 9217..9223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 8,
        span: 9223..9224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 9,
        span: 9224..9225,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 367,
        column: 10,
        span: 9225..9226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 11,
        span: 9225..9227,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 367,
        column: 12,
        span: 9227..9228,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 367,
        column: 14,
        span: 9228..9230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 16,
        span: 9229..9232,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 367,
        column: 20,
        span: 9233..9236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 22,
        span: 9237..9238,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 367,
        column: 23,
        span: 9238..9239,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 367,
        column: 24,
        span: 9239..9240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 367,
        column: 25,
        span: 9239..9241,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 367,
        column: 26,
        span: 9241..9242,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 367,
        column: 28,
        span: 9242..9244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 29,
        span: 9244..9245,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 367,
        column: 30,
        span: 9245..9246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 31,
        span: 9246..9247,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 367,
        column: 35,
        span: 9248..9251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 37,
        span: 9252..9253,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 367,
        column: 38,
        span: 9253..9254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 367,
        column: 39,
        span: 9254..9255,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 367,
        column: 40,
        span: 9255..9256,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 367,
        column: 42,
        span: 9256..9258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 367,
        column: 47,
        span: 9258..9263,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 367,
        column: 51,
        span: 9264..9267,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 53,
        span: 9268..9269,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 367,
        column: 54,
        span: 9269..9270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 367,
        column: 55,
        span: 9270..9271,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 367,
        column: 57,
        span: 9271..9273,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 367,
        column: 60,
        span: 9273..9276,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 367,
        column: 64,
        span: 9277..9280,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 367,
        column: 68,
        span: 9281..9284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 367,
        column: 70,
        span: 9285..9286,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 367,
        column: 71,
        span: 9286..9287,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 367,
        column: 72,
        span: 9287..9288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 73,
        span: 9288..9289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 2,
        span: 9290..9291,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 368,
        column: 3,
        span: 9291..9292,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 4,
        span: 9291..9293,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 368,
        column: 5,
        span: 9293..9294,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 6,
        span: 9294..9295,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 368,
        column: 8,
        span: 9296..9297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
        column: 9,
        span: 9297..9298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 10,
        span: 9298..9299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
        column: 11,
        span: 9299..9300,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 368,
        column: 12,
        span: 9300..9301,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 13,
        span: 9300..9302,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 368,
        column: 14,
        span: 9302..9303,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 15,
        span: 9303..9304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 368,
        column: 17,
        span: 9305..9306,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 18,
        span: 9306..9307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 368,
        column: 20,
        span: 9308..9309,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 22,
        span: 9310..9311,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 368,
        column: 24,
        span: 9312..9313,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 368,
        column: 25,
        span: 9313..9314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 368,
        column: 30,
        span: 9314..9319,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 368,
        column: 31,
        span: 9319..9320,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 368,
        column: 32,
        span: 9320..9321,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 368,
        column: 38,
        span: 9321..9327,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 368,
        column: 39,
        span: 9327..9328,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 40,
        span: 9328..9329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 43,
        span: 9329..9332,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 44,
        span: 9332..9333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 46,
        span: 9334..9335,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 368,
        column: 47,
        span: 9335..9336,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 48,
        span: 9335..9337,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 368,
        column: 49,
        span: 9337..9338,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 50,
        span: 9338..9339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 52,
        span: 9340..9341,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 368,
        column: 53,
        span: 9341..9342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 368,
        column: 54,
        span: 9342..9343,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 368,
        column: 55,
        span: 9343..9344,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 56,
        span: 9344..9345,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 58,
        span: 9345..9347,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 59,
        span: 9347..9348,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 62,
        span: 9348..9351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 63,
        span: 9351..9352,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 66,
        span: 9352..9355,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 67,
        span: 9355..9356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 368,
        column: 69,
        span: 9357..9358,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 368,
        column: 70,
        span: 9358..9359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 368,
        column: 71,
        span: 9359..9360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 368,
        column: 72,
        span: 9360..9361,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 368,
        column: 73,
        span: 9361..9362,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 368,
        column: 0,
        span: 9362..9364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 369,
        column: 2,
        span: 9365..9366,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 369,
        column: 3,
        span: 9366..9367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 4,
        span: 9366..9368,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 369,
        column: 5,
        span: 9368..9369,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 369,
        column: 6,
        span: 9369..9370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alo",
        ),
        line: 369,
        column: 9,
        span: 9370..9373,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
        column: 10,
        span: 9373..9374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 369,
        column: 11,
        span: 9374..9375,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 369,
        column: 12,
        span: 9375..9376,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 13,
        span: 9375..9377,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 369,
        column: 14,
        span: 9377..9378,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 16,
        span: 9378..9380,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 18,
        span: 9379..9382,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 369,
        column: 22,
        span: 9383..9386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 369,
        column: 24,
        span: 9387..9388,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 26,
        span: 9388..9390,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 369,
        column: 28,
        span: 9389..9392,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 369,
        column: 32,
        span: 9393..9396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 369,
        column: 34,
        span: 9397..9398,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 369,
        column: 36,
        span: 9398..9400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 369,
        column: 41,
        span: 9400..9405,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
        column: 42,
        span: 9405..9406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 371,
        column: 2,
        span: 9408..9409,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 371,
        column: 3,
        span: 9409..9410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 4,
        span: 9409..9411,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 371,
        column: 5,
        span: 9411..9412,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 7,
        span: 9411..9414,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 371,
        column: 8,
        span: 9414..9415,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 10,
        span: 9416..9417,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 13,
        span: 9417..9420,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 371,
        column: 14,
        span: 9420..9421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 371,
        column: 16,
        span: 9422..9423,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 371,
        column: 17,
        span: 9423..9424,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 18,
        span: 9423..9425,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 371,
        column: 19,
        span: 9425..9426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 21,
        span: 9425..9428,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 371,
        column: 22,
        span: 9428..9429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 23,
        span: 9428..9430,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 371,
        column: 24,
        span: 9430..9431,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 26,
        span: 9432..9433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 29,
        span: 9433..9436,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 371,
        column: 30,
        span: 9436..9437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 371,
        column: 32,
        span: 9438..9439,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 371,
        column: 33,
        span: 9439..9440,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 371,
        column: 34,
        span: 9440..9441,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 35,
        span: 9440..9442,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 371,
        column: 36,
        span: 9442..9443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 38,
        span: 9442..9445,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 371,
        column: 39,
        span: 9445..9446,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 41,
        span: 9447..9448,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 371,
        column: 44,
        span: 9448..9451,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 371,
        column: 45,
        span: 9451..9452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 372,
        column: 2,
        span: 9453..9454,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 372,
        column: 3,
        span: 9454..9455,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 4,
        span: 9454..9456,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 372,
        column: 5,
        span: 9456..9457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 7,
        span: 9456..9459,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 372,
        column: 8,
        span: 9459..9460,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 372,
        column: 10,
        span: 9461..9462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 13,
        span: 9462..9465,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 372,
        column: 14,
        span: 9465..9466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 372,
        column: 16,
        span: 9467..9468,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 372,
        column: 17,
        span: 9468..9469,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 372,
        column: 18,
        span: 9469..9470,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 19,
        span: 9469..9471,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 372,
        column: 20,
        span: 9471..9472,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 22,
        span: 9471..9474,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 372,
        column: 23,
        span: 9474..9475,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 372,
        column: 25,
        span: 9476..9477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 28,
        span: 9477..9480,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 372,
        column: 29,
        span: 9480..9481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 372,
        column: 31,
        span: 9482..9483,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 372,
        column: 32,
        span: 9483..9484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 33,
        span: 9483..9485,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 372,
        column: 34,
        span: 9485..9486,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 36,
        span: 9485..9488,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 372,
        column: 37,
        span: 9488..9489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 38,
        span: 9488..9490,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 372,
        column: 39,
        span: 9490..9491,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 372,
        column: 41,
        span: 9492..9493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 44,
        span: 9493..9496,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 372,
        column: 45,
        span: 9496..9497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 372,
        column: 47,
        span: 9498..9499,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 372,
        column: 48,
        span: 9499..9500,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 50,
        span: 9499..9502,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 372,
        column: 51,
        span: 9502..9503,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 53,
        span: 9502..9505,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 372,
        column: 54,
        span: 9505..9506,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 372,
        column: 56,
        span: 9507..9508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 372,
        column: 59,
        span: 9508..9511,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 372,
        column: 60,
        span: 9511..9512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 374,
        column: 7,
        span: 9514..9520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 8,
        span: 9520..9521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 374,
        column: 9,
        span: 9521..9522,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 374,
        column: 10,
        span: 9522..9523,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 11,
        span: 9522..9524,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 374,
        column: 12,
        span: 9524..9525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 14,
        span: 9524..9527,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 374,
        column: 15,
        span: 9527..9528,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 374,
        column: 18,
        span: 9529..9531,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 21,
        span: 9531..9534,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 374,
        column: 25,
        span: 9535..9538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 374,
        column: 27,
        span: 9539..9540,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 374,
        column: 28,
        span: 9540..9541,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 29,
        span: 9540..9542,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 374,
        column: 30,
        span: 9542..9543,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 32,
        span: 9542..9545,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 374,
        column: 33,
        span: 9545..9546,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 34,
        span: 9545..9547,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 374,
        column: 35,
        span: 9547..9548,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 374,
        column: 38,
        span: 9549..9551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 41,
        span: 9551..9554,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 374,
        column: 45,
        span: 9555..9558,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 374,
        column: 47,
        span: 9559..9560,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 374,
        column: 48,
        span: 9560..9561,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 374,
        column: 49,
        span: 9561..9562,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 50,
        span: 9561..9563,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 374,
        column: 51,
        span: 9563..9564,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "31",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 53,
        span: 9563..9566,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 374,
        column: 54,
        span: 9566..9567,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 374,
        column: 57,
        span: 9568..9570,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 60,
        span: 9570..9573,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 374,
        column: 0,
        span: 9574..9577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 375,
        column: 9,
        span: 9585..9586,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 375,
        column: 10,
        span: 9586..9587,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 11,
        span: 9586..9588,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 375,
        column: 12,
        span: 9588..9589,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 14,
        span: 9588..9591,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 375,
        column: 15,
        span: 9591..9592,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 375,
        column: 18,
        span: 9593..9595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 21,
        span: 9595..9598,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 375,
        column: 25,
        span: 9599..9602,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 375,
        column: 27,
        span: 9603..9604,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 375,
        column: 28,
        span: 9604..9605,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 375,
        column: 29,
        span: 9605..9606,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 30,
        span: 9605..9607,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 375,
        column: 31,
        span: 9607..9608,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 33,
        span: 9607..9610,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 375,
        column: 34,
        span: 9610..9611,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 375,
        column: 37,
        span: 9612..9614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 40,
        span: 9614..9617,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 375,
        column: 44,
        span: 9618..9621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 375,
        column: 46,
        span: 9622..9623,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 375,
        column: 47,
        span: 9623..9624,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 48,
        span: 9623..9625,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 375,
        column: 49,
        span: 9625..9626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 51,
        span: 9625..9628,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 375,
        column: 52,
        span: 9628..9629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 53,
        span: 9628..9630,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 375,
        column: 54,
        span: 9630..9631,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 375,
        column: 57,
        span: 9632..9634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 60,
        span: 9634..9637,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 375,
        column: 0,
        span: 9638..9641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 376,
        column: 9,
        span: 9649..9650,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 376,
        column: 10,
        span: 9650..9651,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 12,
        span: 9650..9653,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 376,
        column: 13,
        span: 9653..9654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 15,
        span: 9653..9656,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 376,
        column: 16,
        span: 9656..9657,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 376,
        column: 19,
        span: 9658..9660,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        line: 376,
        column: 22,
        span: 9660..9663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 376,
        column: 23,
        span: 9663..9664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 378,
        column: 2,
        span: 9666..9667,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 378,
        column: 4,
        span: 9668..9669,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 378,
        column: 0,
        span: 9670..9673,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 382,
        column: 0,
        span: 9717..9719,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 383,
        column: 8,
        span: 9722..9727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 10,
        span: 9728..9729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 11,
        span: 9729..9730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 383,
        column: 12,
        span: 9730..9731,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 13,
        span: 9731..9732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 383,
        column: 14,
        span: 9732..9733,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 15,
        span: 9733..9734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 383,
        column: 0,
        span: 9734..9735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
        column: 4,
        span: 9738..9739,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 6,
        span: 9740..9741,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 384,
        column: 8,
        span: 9742..9743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 384,
        column: 11,
        span: 9743..9746,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 384,
        column: 12,
        span: 9746..9747,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 384,
        column: 16,
        span: 9748..9751,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 384,
        column: 17,
        span: 9751..9752,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 384,
        column: 18,
        span: 9752..9753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 384,
        column: 20,
        span: 9754..9755,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 21,
        span: 9755..9756,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 384,
        column: 22,
        span: 9755..9757,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 384,
        column: 23,
        span: 9757..9758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 384,
        column: 25,
        span: 9759..9760,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 26,
        span: 9760..9761,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 384,
        column: 27,
        span: 9760..9762,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 384,
        column: 28,
        span: 9762..9763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 384,
        column: 30,
        span: 9764..9765,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 31,
        span: 9765..9766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
        column: 0,
        span: 9766..9767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 385,
        column: 4,
        span: 9770..9771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 5,
        span: 9771..9772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
        column: 7,
        span: 9773..9774,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 385,
        column: 8,
        span: 9774..9775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 385,
        column: 9,
        span: 9775..9776,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 385,
        column: 10,
        span: 9776..9777,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 11,
        span: 9777..9778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
        column: 13,
        span: 9779..9780,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 14,
        span: 9780..9781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 385,
        column: 16,
        span: 9782..9783,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 17,
        span: 9783..9784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
        column: 19,
        span: 9785..9786,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 385,
        column: 20,
        span: 9786..9787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 385,
        column: 21,
        span: 9787..9788,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 385,
        column: 22,
        span: 9788..9789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 23,
        span: 9789..9790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
        column: 25,
        span: 9791..9792,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 385,
        column: 26,
        span: 9792..9793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 385,
        column: 27,
        span: 9793..9794,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 385,
        column: 28,
        span: 9794..9795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 385,
        column: 29,
        span: 9795..9796,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 385,
        column: 30,
        span: 9796..9797,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 32,
        span: 9798..9799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 385,
        column: 34,
        span: 9800..9801,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 35,
        span: 9801..9802,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 385,
        column: 37,
        span: 9803..9804,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 38,
        span: 9804..9805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 385,
        column: 40,
        span: 9806..9807,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 41,
        span: 9807..9808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 385,
        column: 43,
        span: 9809..9810,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 44,
        span: 9810..9811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 385,
        column: 46,
        span: 9812..9813,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 47,
        span: 9813..9814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 385,
        column: 0,
        span: 9815..9816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 386,
        column: 9,
        span: 9819..9825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 10,
        span: 9825..9826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 386,
        column: 11,
        span: 9826..9827,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 14,
        span: 9828..9830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 16,
        span: 9830..9832,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 386,
        column: 20,
        span: 9833..9836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 386,
        column: 22,
        span: 9837..9838,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 386,
        column: 23,
        span: 9838..9839,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 24,
        span: 9838..9840,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 386,
        column: 25,
        span: 9840..9841,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 28,
        span: 9842..9844,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 30,
        span: 9844..9846,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 386,
        column: 34,
        span: 9847..9850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 386,
        column: 36,
        span: 9851..9852,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 39,
        span: 9853..9855,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 41,
        span: 9855..9857,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 386,
        column: 45,
        span: 9858..9861,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 386,
        column: 47,
        span: 9862..9863,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 50,
        span: 9864..9866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 386,
        column: 52,
        span: 9867..9868,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 386,
        column: 56,
        span: 9869..9872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 386,
        column: 58,
        span: 9873..9874,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 386,
        column: 59,
        span: 9874..9875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 60,
        span: 9874..9876,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 386,
        column: 61,
        span: 9876..9877,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 64,
        span: 9878..9880,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 66,
        span: 9880..9882,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 386,
        column: 0,
        span: 9883..9886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 387,
        column: 11,
        span: 9896..9897,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 387,
        column: 12,
        span: 9897..9898,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 13,
        span: 9897..9899,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 387,
        column: 14,
        span: 9899..9900,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 387,
        column: 17,
        span: 9901..9903,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 387,
        column: 19,
        span: 9903..9905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 20,
        span: 9905..9906,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 388,
        column: 0,
        span: 9907..9910,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 391,
        column: 0,
        span: 9941..9943,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 392,
        column: 8,
        span: 9946..9951,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 392,
        column: 10,
        span: 9952..9953,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 11,
        span: 9953..9954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 392,
        column: 12,
        span: 9954..9955,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 13,
        span: 9955..9956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 392,
        column: 14,
        span: 9956..9957,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 392,
        column: 15,
        span: 9957..9958,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 392,
        column: 0,
        span: 9958..9959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 393,
        column: 4,
        span: 9962..9963,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 393,
        column: 6,
        span: 9964..9965,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 393,
        column: 8,
        span: 9966..9967,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 393,
        column: 11,
        span: 9967..9970,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 393,
        column: 12,
        span: 9970..9971,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 393,
        column: 16,
        span: 9972..9975,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 393,
        column: 17,
        span: 9975..9976,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 393,
        column: 18,
        span: 9976..9977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 393,
        column: 20,
        span: 9978..9979,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 393,
        column: 21,
        span: 9979..9980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 22,
        span: 9979..9981,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 393,
        column: 23,
        span: 9981..9982,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 393,
        column: 25,
        span: 9983..9984,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 393,
        column: 26,
        span: 9984..9985,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 393,
        column: 27,
        span: 9984..9986,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 393,
        column: 28,
        span: 9986..9987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 393,
        column: 30,
        span: 9988..9989,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 393,
        column: 31,
        span: 9989..9990,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 393,
        column: 0,
        span: 9990..9991,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 394,
        column: 8,
        span: 9994..9999,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 394,
        column: 17,
        span: 10000..10008,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 394,
        column: 21,
        span: 10009..10012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 23,
        span: 10013..10014,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 24,
        span: 10014..10015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 395,
        column: 6,
        span: 10020..10021,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 7,
        span: 10021..10022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 395,
        column: 9,
        span: 10023..10024,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 395,
        column: 10,
        span: 10024..10025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 395,
        column: 11,
        span: 10025..10026,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 395,
        column: 12,
        span: 10026..10027,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 13,
        span: 10027..10028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 395,
        column: 15,
        span: 10029..10030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 16,
        span: 10030..10031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 395,
        column: 18,
        span: 10032..10033,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 19,
        span: 10033..10034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 395,
        column: 21,
        span: 10035..10036,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 395,
        column: 22,
        span: 10036..10037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 395,
        column: 23,
        span: 10037..10038,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 395,
        column: 24,
        span: 10038..10039,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 25,
        span: 10039..10040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 395,
        column: 27,
        span: 10041..10042,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 395,
        column: 28,
        span: 10042..10043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 395,
        column: 29,
        span: 10043..10044,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 395,
        column: 30,
        span: 10044..10045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 395,
        column: 31,
        span: 10045..10046,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 395,
        column: 32,
        span: 10046..10047,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 395,
        column: 34,
        span: 10048..10049,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 395,
        column: 36,
        span: 10050..10051,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 37,
        span: 10051..10052,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 395,
        column: 39,
        span: 10053..10054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 40,
        span: 10054..10055,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 395,
        column: 42,
        span: 10056..10057,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 43,
        span: 10057..10058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 395,
        column: 45,
        span: 10059..10060,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 46,
        span: 10060..10061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 395,
        column: 48,
        span: 10062..10063,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 49,
        span: 10063..10064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 395,
        column: 0,
        span: 10065..10066,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 396,
        column: 0,
        span: 10069..10072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 397,
        column: 6,
        span: 10075..10078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 7,
        span: 10078..10079,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 8,
        span: 10079..10080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 398,
        column: 9,
        span: 10083..10089,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 10,
        span: 10089..10090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 398,
        column: 11,
        span: 10090..10091,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 14,
        span: 10092..10094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 16,
        span: 10094..10096,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 398,
        column: 20,
        span: 10097..10100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 398,
        column: 22,
        span: 10101..10102,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 398,
        column: 23,
        span: 10102..10103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 24,
        span: 10102..10104,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 398,
        column: 25,
        span: 10104..10105,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 28,
        span: 10106..10108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 30,
        span: 10108..10110,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 398,
        column: 34,
        span: 10111..10114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 398,
        column: 36,
        span: 10115..10116,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 39,
        span: 10117..10119,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 41,
        span: 10119..10121,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 398,
        column: 45,
        span: 10122..10125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 398,
        column: 47,
        span: 10126..10127,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 50,
        span: 10128..10130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 398,
        column: 52,
        span: 10131..10132,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 398,
        column: 56,
        span: 10133..10136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 398,
        column: 58,
        span: 10137..10138,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 398,
        column: 59,
        span: 10138..10139,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 60,
        span: 10138..10140,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 398,
        column: 61,
        span: 10140..10141,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 64,
        span: 10142..10144,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 66,
        span: 10144..10146,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 398,
        column: 0,
        span: 10147..10150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 399,
        column: 11,
        span: 10160..10161,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 399,
        column: 12,
        span: 10161..10162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 13,
        span: 10161..10163,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 399,
        column: 14,
        span: 10163..10164,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 399,
        column: 17,
        span: 10165..10167,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 19,
        span: 10167..10169,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 20,
        span: 10169..10170,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 400,
        column: 8,
        span: 10173..10178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 400,
        column: 10,
        span: 10179..10180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 400,
        column: 12,
        span: 10181..10182,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 400,
        column: 14,
        span: 10183..10184,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 400,
        column: 15,
        span: 10184..10185,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
        column: 4,
        span: 10188..10189,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 401,
        column: 12,
        span: 10189..10197,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
        column: 14,
        span: 10198..10199,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 401,
        column: 15,
        span: 10199..10200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 16,
        span: 10200..10201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 401,
        column: 18,
        span: 10202..10203,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 401,
        column: 19,
        span: 10203..10204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 401,
        column: 20,
        span: 10204..10205,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 401,
        column: 21,
        span: 10205..10206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
        column: 22,
        span: 10206..10207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 401,
        column: 24,
        span: 10208..10209,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 401,
        column: 26,
        span: 10210..10211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 29,
        span: 10211..10214,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 401,
        column: 30,
        span: 10214..10215,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 33,
        span: 10215..10218,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 401,
        column: 38,
        span: 10220..10223,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 39,
        span: 10223..10224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 401,
        column: 40,
        span: 10224..10225,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 401,
        column: 41,
        span: 10224..10226,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 401,
        column: 42,
        span: 10226..10227,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 401,
        column: 43,
        span: 10227..10228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 402,
        column: 9,
        span: 10231..10237,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 402,
        column: 10,
        span: 10237..10238,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 402,
        column: 11,
        span: 10238..10239,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 402,
        column: 12,
        span: 10239..10240,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 13,
        span: 10239..10241,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 402,
        column: 14,
        span: 10241..10242,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 402,
        column: 17,
        span: 10243..10245,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 402,
        column: 20,
        span: 10245..10248,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 402,
        column: 21,
        span: 10248..10249,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 403,
        column: 0,
        span: 10250..10253,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 406,
        column: 6,
        span: 10274..10279,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 406,
        column: 15,
        span: 10280..10288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 406,
        column: 19,
        span: 10289..10292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
        column: 21,
        span: 10293..10294,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
        column: 22,
        span: 10294..10295,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 407,
        column: 8,
        span: 10298..10303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 407,
        column: 0,
        span: 10304..10305,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 408,
        column: 9,
        span: 10308..10314,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 408,
        column: 18,
        span: 10315..10323,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 20,
        span: 10324..10325,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 21,
        span: 10325..10326,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 409,
        column: 10,
        span: 10331..10336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 409,
        column: 0,
        span: 10337..10338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 410,
        column: 6,
        span: 10343..10344,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 410,
        column: 7,
        span: 10344..10345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 410,
        column: 9,
        span: 10346..10347,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 410,
        column: 11,
        span: 10348..10349,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 13,
        span: 10349..10351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 410,
        column: 14,
        span: 10351..10352,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 17,
        span: 10352..10355,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 411,
        column: 11,
        span: 10400..10406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 411,
        column: 13,
        span: 10407..10408,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 14,
        span: 10408..10409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 411,
        column: 0,
        span: 10410..10411,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 412,
        column: 0,
        span: 10414..10417,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 413,
        column: 0,
        span: 10418..10421,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 415,
        column: 6,
        span: 10423..10428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
        column: 8,
        span: 10429..10430,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 415,
        column: 9,
        span: 10430..10431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 415,
        column: 11,
        span: 10432..10433,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
        column: 13,
        span: 10434..10435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 415,
        column: 17,
        span: 10436..10439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 18,
        span: 10439..10440,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 19,
        span: 10440..10441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 20,
        span: 10441..10442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 21,
        span: 10442..10443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 416,
        column: 7,
        span: 10444..10450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 8,
        span: 10450..10451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 416,
        column: 9,
        span: 10451..10452,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 416,
        column: 12,
        span: 10453..10455,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 416,
        column: 14,
        span: 10455..10457,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 416,
        column: 18,
        span: 10458..10461,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 416,
        column: 20,
        span: 10462..10463,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 416,
        column: 23,
        span: 10464..10466,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 416,
        column: 26,
        span: 10466..10469,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 27,
        span: 10469..10470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 418,
        column: 6,
        span: 10472..10477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 7,
        span: 10477..10478,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 418,
        column: 11,
        span: 10478..10482,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 12,
        span: 10482..10483,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 420,
        column: 7,
        span: 10485..10491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 420,
        column: 0,
        span: 10492..10495,
    },
]
